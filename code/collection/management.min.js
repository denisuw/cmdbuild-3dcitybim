! function() {
    var t = "SINGLE";

    function e(t, e) {
        var i = void 0;
        return t && "function" == typeof t.getId && (i = t.getId()), t && void 0 === i && "string" == typeof e && (i = t.get(e)), i
    }

    function i(t, i, n) {
        var a = i.length,
            o = 0,
            r = e(n, t.idProperty);
        t.store && t.store.each(function(s) {
            for (var l = 0; l < a; l++) void 0 === n ? i[l].onRowDeselect(o, suppressEvent = !0) : r && r != e(s, t.idProperty) && i[l].onRowDeselect(o, suppressEvent = !0);
            o++
        })
    }
    Ext.define("CMDBuild.selection.CMMultiPageSelectionModel", {
        extend: "Ext.selection.CheckboxModel",
        alias: "selection.cmmultipage",
        idProperty: void 0,
        avoidCheckerHeader: !1,
        bindStore: function(t, e) {
            this.store = t, this.cmReverse = !1, this.reset(), this.cmCurrentPage = void 0, this.callParent(arguments), this.store && (this.mon(this.store, "beforeload", function() {
                this._onBeforeStoreLoad.apply(this, arguments)
            }, this), this.mon(this.store, "load", function() {
                this._onStoreDidLoad.apply(this, arguments)
            }, this)), this.mon(this, "select", function() {
                this._addSelection.apply(this, arguments)
            }, this), this.mon(this, "deselect", function() {
                this._removeSelection.apply(this, arguments)
            }, this)
        },
        _addSelection: function(n, a) {
            var o = e(a, this.idProperty);
            this.mode == t && (this.reset(), i(this, this.views, a)), this.cmReverse ? o && this.cmSelections.hasOwnProperty(o) && delete this.cmSelections[o] : o && !this.cmSelections.hasOwnProperty(o) && (this.cmSelections[o] = a.copy())
        },
        _removeSelection: function(t, i) {
            var n = e(i, this.idProperty);
            this.cmReverse ? n && !this.cmSelections.hasOwnProperty(n) && (this.cmSelections[n] = i.copy()) : this.cmFreezedSelections || void 0 === n || delete this.cmSelections[n]
        },
        reset: function() {
            try {
                this.clearSelections(), this.cmSelections = {}, this.cmFreezedSelections = void 0
            } catch (t) {}
        },
        deselectAll: function() {
            this.reset()
        },
        _onBeforeStoreLoad: function() {
            this.cmFreezedSelections = Ext.clone(this.cmSelections)
        },
        hasSelection: function() {
            return this.getSelection().length > 0
        },
        getCount: function() {
            return this.getSelection().length
        },
        getSelection: function() {
            var t = [];
            for (var e in this.cmSelections) t.push(this.cmSelections[e]);
            return t
        },
        getHeaderConfig: function() {
            var e = this.callParent(arguments);
            return (this.mode == t || this.avoidCheckerHeader) && (e.isCheckerHd = !1, e.cls = Ext.baseCSSPrefix + NaN), e
        },
        onHeaderClick: function(e, i, n) {
            this.mode != t && i.isCheckerHd && (n.stopEvent(), this.cmReverse = !i.el.hasCls(Ext.baseCSSPrefix + "grid-hd-checker-on"), this.toggleUiHeader(this.cmReverse), this.reset(), this._redoSelection())
        },
        _onStoreDidLoad: function(t, e) {
            this.cmCurrentPage = t.currentPage, this.cmFreezedSelections && (this.cmSelections = Ext.clone(this.cmFreezedSelections), this.cmFreezedSelections = void 0), this._redoSelection()
        },
        _redoSelection: function() {
            var t, n, a, o, r = this,
                s = r.views;
            i(r, s), this.cmReverse ? (t = r, a = 0, o = (n = s).length, t.store.each(function(i) {
                if (!t.cmSelections[e(i, t.idProperty)]) {
                    t.selected.add(i);
                    for (var r = 0; r < o; r++) n[r].onRowSelect(a, suppressEvent = !0)
                }
                a++
            })) : function(t, i) {
                if (!t.store) return;
                var n, a = i.length;
                for (var o in t.cmSelections)
                    if (-1 != (n = t.store.findBy(function(i) {
                            if (o == e(i, t.idProperty)) return t.selected.add(i), !0
                        })))
                        for (var r = 0; r < a; r++) i[r].onRowSelect(n, suppressEvent = !0)
            }(r, s)
        },
        onSelectChange: function() {
            Ext.selection.RowModel.prototype.onSelectChange.apply(this, arguments)
        }
    })
}(), Ext.define("CMDBuild.state.CMWorkflowStateDelegate", {
        uses: ["CMDBuild.proxy.Card"],
        onProcessClassRefChange: Ext.emptyFn,
        onProcessInstanceChange: Ext.emptyFn,
        onActivityInstanceChange: Ext.emptyFn
    }), Ext.define("CMDBuild.model.CMActivityInstance", {
        extend: "Ext.data.Model",
        uses: ["CMDBuild.proxy.Card"],
        constructor: function(t) {
            t ? this.data = t : (this.data = {}, this.nullObject = !0)
        },
        isNew: function() {
            return !this.nullObject && (null == this.data.id || void 0 === this.data.id)
        },
        getId: function() {
            return this.data.id
        },
        getVariables: function() {
            return this.data.variables || []
        },
        getPerformerName: function() {
            return this.data.performerName || ""
        },
        getDescription: function() {
            return this.data.description || ""
        },
        getInstructions: function() {
            return this.data.instructions || ""
        },
        getWidgets: function() {
            return this.data.widgets || []
        },
        isWritable: function() {
            return !this.nullObject && (this.data.writable || !1)
        },
        isNullObject: function() {
            return this.nullObject
        }
    }), Ext.define("CMDBuild.model.CMProcessInstance", {
        extend: "Ext.data.Model",
        uses: ["CMDBuild.proxy.Card"],
        fields: ["beginDate", "beginDateAsLong", "classDescription", "className", "endDate", "flowStatus", {
            name: "id",
            type: "integer",
            useNull: !0
        }, {
            name: "classId",
            type: "integer"
        }, {
            name: "values",
            type: "auto"
        }, {
            name: "activityInstanceInfoList",
            type: "auto",
            defaultValue: []
        }, {
            name: "user",
            type: "string"
        }],
        STATE: {
            OPEN: "OPEN",
            SUSPENDED: "SUSPENDED",
            COMPLETED: "COMPLETED",
            TERMINATED: "TERMINATED",
            ABORTED: "ABORTED",
            UNSUPPORTED: "UNSUPPORTED"
        },
        get: function(t) {
            var e;
            return "Id" == t ? e = this.getId() : "IdClass" == t ? e = this.getClassId() : "IdClass_value" == t ? e = this.getClassDescription() : (e = this.callParent(arguments)) || (e = (this.data.values || {})[t]), e
        },
        getActivityInfoList: function() {
            return this.get("activityInstanceInfoList") || []
        },
        getId: function() {
            return this.get("id") || null
        },
        isNew: function() {
            return null == this.getId()
        },
        getValues: function() {
            return this.get("values") || {}
        },
        getClassId: function() {
            return this.get("classId") || null
        },
        getClassDescription: function() {
            return this.get("classDescription")
        },
        applyValues: function(t) {
            t && (this.data.values = Ext.apply(this.getValues(), t))
        },
        getFlowStatus: function() {
            return this.get("flowStatus")
        },
        isStateOpen: function() {
            return this.getFlowStatus() == this.STATE.OPEN
        },
        isStateCompleted: function() {
            return this.getFlowStatus() == this.STATE.COMPLETED
        },
        isStateSuspended: function() {
            return this.getFlowStatus() == this.STATE.SUSPENDED
        },
        setNotes: function(t) {
            this.data.values.Notes = t
        },
        updateBeginDate: function(t) {
            t.beginDate && t.beginDateAsLong && (this.set("beginDate", t.beginDate), this.set("beginDateAsLong", t.beginDateAsLong))
        },
        asDummyModel: function() {
            var t = this.getValues();
            return t.Id = this.getId(), t.IdClass = this.getClassId(), t.IdClass_value = this.getClassDescription(), new CMDBuild.DummyModel(t)
        }
    }), Ext.define("CMDBuild.state.CMWorkflowState", {
        uses: ["CMDBuild.proxy.Card"],
        constructor: function() {
            var t = null,
                e = null,
                i = null,
                n = [];
            Ext.apply(this, {
                setProcessClassRef: function(e, i, n, a) {
                    n = !!Ext.isEmpty(n) || n, e && (t !== e || i) && (t = e, this.notifyToDelegates("onProcessClassRefChange", [e, i, a]), n && this.setProcessInstance(new CMDBuild.model.CMProcessInstance({
                        classId: t.getId()
                    })))
                },
                getProcessClassRef: function() {
                    return t
                },
                setProcessInstance: function(e, n) {
                    i = e;
                    var a = t && t.isSuperClass(),
                        o = this;

                    function r() {
                        o.setActivityInstance(new CMDBuild.model.CMActivityInstance), o.notifyToDelegates("onProcessInstanceChange", [i]), n && n()
                    }!i.isNew() && a ? CMDBuild.proxy.Card.read({
                        params: {
                            cardId: i.getId(),
                            className: _CMCache.getEntryTypeNameById(i.getClassId())
                        },
                        loadMask: !1,
                        success: function(t, e, n) {
                            i.applyValues(n.card), r()
                        }
                    }) : r()
                },
                setProcessInstanceSynchronous: function(t) {
                    i = t, this.setActivityInstance(new CMDBuild.model.CMActivityInstance), this.notifyToDelegates("onProcessInstanceChange", [i])
                },
                getProcessInstance: function() {
                    return i
                },
                setActivityInstance: function(t) {
                    e = t, this.notifyToDelegates("onActivityInstanceChange", [t])
                },
                getActivityInstance: function() {
                    return e
                },
                addDelegate: function(t) {
                    CMDBuild.validateInterface(t, "CMDBuild.state.CMWorkflowStateDelegate"), n.push(t)
                },
                countDelegates: function() {
                    return n.length
                },
                notifyToDelegates: function(t, e) {
                    for (var i = 0, a = n.length, o = null; i < a; ++i)(o = n[i]) && "function" == typeof o[t] && o[t].apply(o, e)
                }
            })
        }
    }), _CMWFState = new CMDBuild.state.CMWorkflowState, Ext.define("CMDBuild.state.UIStateDelegate", {
        onFullScreenChangeToGridOnly: Ext.emptyFn,
        onFullScreenChangeToFormOnly: Ext.emptyFn,
        onFullScreenChangeToOff: Ext.emptyFn
    }), Ext.define("CMDBuild.state.UIState", {
        FULLSCREEN_MODES: {
            grid: "grid",
            form: "form",
            off: "off"
        },
        constructor: function() {
            this.callParent(arguments), this.fullScreenMode = this.FULLSCREEN_MODES.off, this.delegates = []
        },
        onlyGrid: function() {
            this.fullScreenMode = this.FULLSCREEN_MODES.grid, this.callForDelegates("onFullScreenChangeToGridOnly")
        },
        onlyForm: function() {
            this.fullScreenMode = this.FULLSCREEN_MODES.form, this.callForDelegates("onFullScreenChangeToFormOnly")
        },
        fullScreenOff: function() {
            this.fullScreenMode = this.FULLSCREEN_MODES.off, this.callForDelegates("onFullScreenChangeToOff")
        },
        onlyFormIfFullScreen: function() {
            this.fullScreenMode != this.FULLSCREEN_MODES.off && this.onlyForm()
        },
        onlyGridIfFullScreen: function() {
            this.fullScreenMode != this.FULLSCREEN_MODES.off && this.onlyGrid()
        },
        isFullscreenOff: function() {
            return this.fullScreenMode == this.FULLSCREEN_MODES.off
        },
        isOnlyGrid: function() {
            return this.fullScreenMode == this.FULLSCREEN_MODES.grid
        },
        isOnlyForm: function() {
            return this.fullScreenMode == this.FULLSCREEN_MODES.form
        },
        addDelegate: function(t) {
            t && this.delegates.push(t)
        },
        callForDelegates: function(t, e) {
            for (var i = 0; i < this.delegates.length; ++i) {
                var n = this.delegates[i];
                n && "function" == typeof n[t] && n[t].apply(n, e || [])
            }
        }
    }), _CMUIState = new CMDBuild.state.UIState, Ext.define("CMDBuild.state.CMCardModuleStateDelegate", {
        uses: ["CMDBuild.proxy.Card"],
        onEntryTypeDidChange: function(t, e, i, n) {},
        onCardDidChange: function(t, e) {}
    }), Ext.define("CMDBuild.state.CMCardModuleState", {
        uses: ["CMDBuild.proxy.Card"],
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        previousCard: {},
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.state.CMCardModuleStateDelegate"), this.entryType = null, this.card = null
        },
        setEntryType: function(t, e, i, n) {
            n = !!Ext.isEmpty(n) || n, (t === this.entryType && this.filter || e || i || this.entryType !== t) && (this.entryType = t, this.filter = i || null, this.setCard(null, null, n), n && this.callDelegates("onEntryTypeDidChange", [this, t, e, i]))
        },
        setCard: function(t, e, i) {
            i = !!Ext.isEmpty(i) || i, null != t && void 0 === t.data ? (t = function(t) {
                if (t.Id && t.IdClass) {
                    _deprecated("adaptGetCardCallParams", this);
                    var e = {};
                    e[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(t.IdClass), e[CMDBuild.core.constants.Proxy.CARD_ID] = t.Id, t = e
                }
                return t
            }(t), CMDBuild.proxy.Card.read({
                params: t,
                loadMask: !1,
                scope: this,
                success: function(t, n, a) {
                    var o = a.card;
                    if (o) {
                        var r = new CMDBuild.DummyModel(a.card);
                        r.raw = o, this.setCard(r, e, i)
                    }
                }
            })) : (this.card = t, i && this.callDelegates("onCardDidChange", [this, t]), "function" == typeof e && e(t))
        },
        setPreviousCard: function(t) {
            return Ext.isObject(t) && !Ext.Object.isEmpty(t) ? this.previousCard = Ext.clone(t) : this.previousCard = {}
        },
        getPreviousCard: function() {
            return Ext.isObject(this.previousCard) && !Ext.Object.isEmpty(this.previousCard) ? this.previousCard : null
        }
    }), _CMCardModuleState = new CMDBuild.state.CMCardModuleState, Ext.define("CMDBuild.controller.management.common.widgets.CMCalendarControllerWidgetReader", {
        getStartDate: function(t) {
            return t.startDate
        },
        getEndDate: function(t) {
            return t.endDate
        },
        getTitle: function(t) {
            return t.eventTitle
        },
        getEventClass: function(t) {
            return t.eventClass
        },
        getFilterVarName: function(t) {
            return "filter"
        },
        getDefaultDate: function(t) {
            return t.defaultDate
        }
    }), Ext.define("CMDBuild.view.management.CMMiniCardGridModel", {
        extend: "Ext.data.Model",
        fields: [{
            name: "Id",
            type: "int"
        }, {
            name: "IdClass",
            type: "int"
        }, {
            name: "ClassName",
            type: "string"
        }, {
            name: "Code",
            type: "string"
        }, {
            name: "Description",
            type: "string"
        }, {
            name: "Details",
            type: "auto"
        }, {
            name: "Attributes",
            tyoe: "auto"
        }],
        getDetails: function() {
            return this.get("Details") || []
        },
        getAttributes: function() {
            return this.get("Attributes") || []
        }
    }), Ext.define("CMDBuild.data.CMMiniCardGridBaseDataSource", {
        uses: ["CMDBuild.proxy.index.Json"],
        constructor: function() {
            return this.store = CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.UNCACHED, {
                pageSize: CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ROW_LIMIT),
                model: "CMDBuild.view.management.CMMiniCardGridModel",
                autoLoad: !1,
                remoteSort: !0,
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.card.readAll,
                    reader: {
                        root: "rows",
                        type: "json",
                        totalProperty: "results",
                        idProperty: "Id"
                    },
                    extraParams: {
                        attributes: Ext.encode(["Id", "IdClass", "Code", "Description"])
                    }
                },
                sorters: [{
                    property: "Code",
                    direction: "ASC"
                }, {
                    property: "Description",
                    direction: "ASC"
                }]
            }), this.callParent(arguments)
        },
        getStore: function() {
            return this.store
        },
        getLastEntryTypeIdLoaded: function() {
            return this.store.proxy.extraParams ? this.store.proxy.extraParams.IdClass : null
        },
        loadStoreForEntryTypeId: function(t, e) {
            this.store.proxy.setExtraParam("className", _CMCache.getEntryTypeNameById(t)), this.store.load({
                callback: e
            })
        },
        loadPageForCard: function(t, e) {}
    }), Ext.define("CMDBuild.data.CMDetailedCardDataSource", {
        uses: ["CMDBuild.proxy.Card"],
        extend: "CMDBuild.data.CMMiniCardGridBaseDataSource",
        constructor: function() {
            this.callParent(arguments), this.store = new Ext.data.Store({
                pageSize: CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ROW_LIMIT),
                model: "CMDBuild.view.management.CMMiniCardGridModel",
                autoLoad: !1
            })
        },
        clearStore: function() {
            this.store.removeAll()
        },
        loadCard: function(t) {
            t = function(t) {
                if (t.Id && t.IdClass) {
                    _deprecated("adaptGetCardCallParams", this);
                    var e = {};
                    e[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(t.IdClass), e[CMDBuild.core.constants.Proxy.CARD_ID] = t.Id, t = e
                }
                return t
            }(t), CMDBuild.proxy.Card.read({
                params: t,
                loadMask: !1,
                scope: this,
                success: function(t, e, i) {
                    var n = i.card,
                        a = i.attributes,
                        o = new CMDBuild.view.management.CMMiniCardGridModel({
                            Id: n.Id,
                            IdClass: n.IdClass,
                            Code: n.Code,
                            Description: n.Description,
                            Details: n,
                            Attributes: a,
                            ClassName: n.IdClass_value
                        });
                    this.store.add(o)
                }
            })
        },
        getLastEntryTypeIdLoaded: function() {
            return null
        },
        loadStoreForEntryTypeId: function(t, e) {}
    }),
    function() {
        var t = "editMode",
            e = "displayMode";
        Ext.define("CMDBuild.Management.EditablePanel", {
            extend: "Ext.panel.Panel",
            attributes: void 0,
            layout: "card",
            activeItem: 0,
            hideMode: "offsets",
            autoScroll: !1,
            _state: e,
            _stateSwitchFail: !1,
            initComponent: function() {
                var i = null,
                    n = new CMDBuild.Management.EditablePanel.SubPanel({
                        editable: !1,
                        attributes: this.attributes
                    });
                this.items = [n], this.ensureEditPanel = function() {
                    null == i && (i = new CMDBuild.Management.EditablePanel.SubPanel({
                        attributes: this.attributes
                    }), this.add(i))
                }, this.editMode = function() {
                    this.ensureEditPanel();
                    var e = this.getLayout();
                    if (this._state = t, e.setActiveItem) try {
                        e.setActiveItem(i.id)
                    } catch (t) {
                        this._stateSwitchFail = !0
                    }
                }, this.displayMode = function() {
                    var t = this.getLayout();
                    if (this._state = e, t.setActiveItem) try {
                        t.setActiveItem(n.id)
                    } catch (t) {
                        this._stateSwitchFail = !0
                    }
                }, this.isEmpty = function() {
                    return 0 == n.fields().length
                }, this.getFields = function() {
                    return this.ensureEditPanel(), i.fields()
                }, this.callParent(arguments), this.mon(this, "activate", function() {
                    this._stateSwitchFail && this[this._state]()
                }, this)
            }
        }), Ext.define("CMDBuild.Management.EditablePanel.SubPanel", {
            extend: "Ext.panel.Panel",
            frame: !1,
            border: !1,
            bodyCls: "x-panel-body-default-framed",
            autoScroll: !0,
            labelAlign: "right",
            labelWidth: 160,
            attributes: void 0,
            editable: !0,
            hideMode: "offsets",
            fields: function() {
                return this.items && this.items.items ? this.items.items : []
            },
            initComponent: function() {
                this.callParent(arguments), this.attributes && function(t, e) {
                    if (t)
                        for (var i = 0; i < t.length; ++i) {
                            var n, a = t[i];
                            (n = e ? CMDBuild.Management.FieldManager.getFieldForAttr(a, this.readOnlyForm) : CMDBuild.Management.FieldManager.getFieldForAttr(a, !0)) && (n._belongToEditableSubpanel = this.editable, this.add(n))
                        }
                }.call(this, this.attributes, this.editable)
            }
        }), CMDBuild.Management.EditablePanel.build = function(t) {
            var e = new CMDBuild.Management.EditablePanel(t);
            return e.isEmpty() ? (delete e, null) : e
        }
    }(),
    function() {
        function t(t) {
            try {
                this.pressedTab && this.pressedTab.removeCls(this.pressedTabCls), t.addClass(this.pressedTabCls), this.pressedTab = t
            } catch (t) {}
        }

        function e() {
            return Ext.isIE7
        }

        function i(e) {
            t.call(this, e), this.fireEvent("click", e)
        }
        Ext.define("CMDBuild.view.common.CMSideTabPanel", {
            extend: "Ext.panel.Panel",
            frame: !1,
            border: !1,
            pressedTabCls: "cmdb-pressed-tab",
            tabCls: "cmdb-tab",
            bodyCls: "x-panel-body-default-framed",
            layout: {
                type: "vbox",
                align: "stretchmax"
            },
            defaults: {
                margins: "2 4 0 0"
            },
            initComponent: function() {
                e() ? this.maxTabWidth = 0 : this.autoWidth = !0, this.callParent(arguments)
            },
            addTabFor: function(n, a) {
                var o, r, s, l = this.tabCls,
                    d = (this.pressedTabCls, new Ext.container.Container({
                        text: n.title,
                        cls: l,
                        height: 25,
                        html: (o = n, r = a, r ? (s = '<div class="cmdb-tab-icon {1}"></div><p>{0}</p>', Ext.String.format(s, o.tabLabel, r)) : (s = "<p>{0}</p>", Ext.String.format(s, o.tabLabel))),
                        targetPanel: n,
                        listeners: {
                            render: function(t) {
                                t.getEl().on("click", Ext.Function.bind(t.fireEvent, t, ["click", t]))
                            }
                        }
                    }));
                d.on("click", i, this), e() && d.on("afterlayout", function(t) {
                    var e = t.getWidth();
                    this.maxTabWidth < e && this.setWidth(e + 22)
                }, this, {
                    single: !0
                }), n.on("activate", function() {
                    t.call(this, d), e() && n.doLayout()
                }, this), this.add(d)
            },
            activateFirst: function() {
                var t = this.items.first();
                t && i.call(this, t)
            },
            setActiveTab: function(t) {
                !Ext.isEmpty(this.items.getRange()) && Ext.isArray(this.items.getRange()) && Ext.Array.each(this.items.getRange(), function(e, n, a) {
                    if (t.detailId == e.targetPanel.detailId) return i.call(this, e), !1
                }, this)
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.CMTabPanel", {
        extend: "Ext.tab.Panel",
        plain: !0,
        initComponent: function() {
            this.tabPosition = CMDBuild.configuration.instance.get("cardTabsPosition") || "top", this.callParent(arguments), 1 == this.items.getCount() && this.getTabBar().hide()
        },
        activateFirst: function() {
            this.setActiveTab(0)
        },
        showAll: function() {
            for (var t = this.getActiveTab(), e = 0; e < this.items.length; e++) this.setActiveTab(e);
            this.items.length > 0 && t && this.setActiveTab(t)
        },
        editMode: function() {
            this.items.each(function(t) {
                "function" == typeof t.editMode && t.editMode()
            })
        },
        displayMode: function() {
            this.items.each(function(t) {
                "function" == typeof t.displayMode && t.displayMode()
            })
        },
        ensureEditPanel: function() {
            this.items.each(function(t) {
                "function" == typeof t.ensureEditPanel && t.ensureEditPanel()
            })
        }
    }), Ext.define("CMDBuild.view.management.common.CMMiniCardGrid", {
        extend: "Ext.grid.Panel",
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.CMMiniCardGridDelegate"), this.callParent(arguments)
        },
        withPagingBar: !0,
        denySelection: !0,
        initComponent: function() {
            var t, e = this;
            (t = e).dataSource || (t.dataSource = new CMDBuild.data.CMMiniCardGridBaseDataSource), t.store = t.dataSource.getStore(),
                function(t) {
                    if (t.withPagingBar) {
                        var e = new CMDBuild.field.GridSearchField({
                                grid: t
                            }),
                            i = new Ext.menu.Menu({
                                items: [e]
                            });
                        t.bbar = new Ext.toolbar.Paging({
                            store: t.store,
                            items: [{
                                iconCls: "search",
                                menu: i
                            }]
                        })
                    }
                }(e), this.columns = this.columns || [], this.columns = this.columns.concat([{
                    text: CMDBuild.Translation.management.modcard.relation_columns.code,
                    dataIndex: "Code",
                    flex: 1,
                    sortable: !0
                }, {
                    text: CMDBuild.Translation.management.modcard.relation_columns.description,
                    dataIndex: "Description",
                    flex: 2,
                    sortable: !0
                }, {
                    width: 40,
                    menuDisabled: !0,
                    xtype: "actioncolumn",
                    tooltip: CMDBuild.Translation.management.modcard.open_relation,
                    align: "center",
                    icon: "images/icons/bullet_go.png",
                    handler: function(t, e, i, n, a, o, r) {},
                    isDisabled: function(t, e, i, n, a) {
                        return !1
                    }
                }]), this.mon(this, "activate", function() {
                    this.callDelegates("miniCardGridDidActivate", this)
                }, this), this.mon(this, "beforeselect", function(t, i) {
                    return !this.denySelection && (this.callDelegates("miniCardGridItemSelected", [e, i]), !0)
                }, this), this.mon(this, "itemdblclick", function(t, i) {
                    var n, a;
                    a = i, (n = e).selectRecordSilently(a), n.callDelegates("miniCardGridWantOpenCard", [n, {
                        Id: a.get("Id"),
                        IdClass: a.get("IdClass")
                    }])
                }, this), this.callParent(arguments)
        },
        selectRecordSilently: function(t) {
            if (t) try {
                var e = this.getSelectionModel();
                e && (e.suspendEvents(), e.select(t), e.resumeEvents())
            } catch (t) {
                _debug("ERROR selecting the CMMiniCardGrid", t)
            }
        },
        selectCardSilently: function(t) {
            if (function(t) {
                    try {
                        var e = t.getSelectionModel();
                        e && e.deselectAll(!0)
                    } catch (t) {
                        _debug("ERROR deselecting the mini card grid", t)
                    }
                }(this), t) {
                var e = this.store.findRecord("Id", t.get("Id"));
                e && this.selectRecordSilently(e)
            }
        },
        getDataSource: function() {
            return this.dataSource
        }
    }),
    function() {
        Ext.define("CMDBuild.view.management.common.CMMiniCardGridWindowDelegate", {
            miniCardGridWindowDidShown: function() {}
        });
        Ext.define("CMDBuild.view.management.common.CMMiniCardGridWindow", {
            extend: "Ext.window.Window",
            mixins: {
                delegable: "CMDBuild.core.CMDelegable"
            },
            constructor: function() {
                this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.CMMiniCardGridWindowDelegate"), this.callParent(arguments)
            },
            withDetailExpander: !0,
            initComponent: function() {
                if (!this.dataSource) throw "A data source is needed";
                this.ghost = !1, this.layout = "border", this.miniCardGrid = Ext.create("CMDBuild.view.management.common.CMMiniCardGrid", {
                    frame: !1,
                    border: !1,
                    withPagingBar: !1,
                    denySelection: !1,
                    dataSource: this.dataSource,
                    region: "center",
                    columns: [{
                        text: CMDBuild.Translation.className,
                        dataIndex: "ClassName",
                        flex: 1,
                        sortable: !0
                    }]
                }), this.withDetailExpander ? (this.detailsPanel = new Ext.panel.Panel({
                    height: "50%",
                    split: !0,
                    region: "south",
                    border: !1,
                    frame: !1,
                    autoScroll: !0,
                    collapsed: !0,
                    collapseMode: "mini"
                }), this.items = [this.miniCardGrid, this.detailsPanel]) : this.items = [this.miniCardGrid], this.mon(this, "show", function() {
                    this.callDelegates("miniCardGridWindowDidShown", this)
                }, this), this.callParent(arguments)
            },
            getMiniCardGrid: function() {
                return this.miniCardGrid
            },
            clearDetailsPanel: function() {
                this.detailsPanel && CMDBuild.clearComponent(this.detailsPanel)
            },
            showDetailsForCard: function(t) {
                if (this.clearDetailsPanel(), t) {
                    var e = this;
                    _CMCache.getAttributeList(t.get("IdClass"), function(i) {
                        if (e.detailsPanel) {
                            e.detailsPanel.expand();
                            for (var n = t.getDetails(), a = '<ul class="cm_detailed_mini_card_grid_window_detail">', o = 0, r = null, s = null; o < i.length; ++o)(s = n[(r = i[o]).name]) && ("object" == typeof s && (s = s.description), a += Ext.String.format('<li><span class="cm-bold">{0}:</span> {1}</li>', r.name, s));
                            a += "</ul>", e.detailsPanel.add({
                                html: a,
                                frame: !1,
                                border: !1
                            })
                        }
                    })
                }
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.CMCardWindow", {
        extend: "CMDBuild.core.window.AbstractModal",
        cmEditMode: !1,
        withButtons: !1,
        border: !1,
        buttonAlign: "center",
        frame: !1,
        initComponent: function() {
            this.cardPanel = Ext.create("CMDBuild.view.management.classes.CMCardPanel", {
                withButtons: this.withButtons,
                withToolBar: this.withToolBar,
                allowNoteFiled: !0,
                border: !1,
                frame: !1
            });
            var t = this.cardPanel.CMEVENTS;
            if (this.CMEVENTS = {
                    saveCardButtonClick: t.saveCardButtonClick,
                    abortButtonClick: t.abortButtonClick,
                    formFilled: t.formFilled,
                    widgetButtonClick: t.widgetButtonClick,
                    editModeDidAcitvate: t.editModeDidAcitvate,
                    displayModeDidActivate: t.displayModeDidActivate
                }, this.relayEvents(this.cardPanel, [t.saveCardButtonClick, t.abortButtonClick, t.formFilled, t.widgetButtonClick, t.editModeDidAcitvate, t.displayModeDidActivate]), this.addEvents(t.saveCardButtonClick), this.addEvents(t.abortButtonClick), this.addEvents(t.formFilled), this.addEvents(t.widgetButtonClick), this.addEvents(t.editModeDidAcitvate), this.addEvents(t.displayModeDidActivate), this.classId) {
                var e = _CMUtils.getClassPrivileges(this.classId);
                this.cardPanel.writePrivilege = e.write
            }
            this.withButtons || (this.closeButton = new Ext.button.Button({
                text: CMDBuild.Translation.close,
                handler: this.close,
                scope: this
            }), this.buttons = [this.closeButton]), this.items = [this.cardPanel], this.callParent(arguments), _CMUtils.forwardMethods(this, this.cardPanel, ["displayMode", "editMode", "ensureEditPanel", "fillForm", "loadCard", "reset", "getForm", "getFormForTemplateResolver", "getWidgetButtonsPanel", "isInEditing"])
        }
    }), Ext.define("CMDBuild.view.management.common.CMCardListWindow", {
        extend: "CMDBuild.core.window.AbstractModal",
        ClassName: void 0,
        idClass: void 0,
        filterType: void 0,
        readOnly: void 0,
        selModel: void 0,
        selType: "rowmodel",
        multiSelect: !1,
        extraParams: {},
        gridConfig: {},
        initComponent: function() {
            if (void 0 === this.idClass && void 0 === this.ClassName) throw "There are no Class Id or Class Name to load";
            var t, e, i;
            this.title = CMDBuild.Translation.management.modcard.title + (t = this, e = _CMCache.getEntryTypeById(t.getIdClass()), i = "", e && (i = e.getDescription()), i), this.grid = new CMDBuild.view.management.common.CMCardGrid(this.buildGrdiConfiguration()), this.setItems(), this.callParent(arguments), this.mon(this.grid.getSelectionModel(), "selectionchange", this.onSelectionChange, this), this.mon(this.grid, "itemdblclick", this.onGridDoubleClick, this)
        },
        show: function() {
            this.callParent(arguments);
            var t = this.getIdClass();
            return this.grid.updateStoreForClassId(t), this
        },
        setItems: function() {
            this.items = [this.grid], this.readOnly || "class" != _CMCache.getEntryTypeById(this.getIdClass()).get("type") || (this.tbar = [this.addCardButton = this.buildAddButton()])
        },
        buildAddButton: function() {
            var t = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card"),
                e = _CMCache.getEntryTypeById(this.getIdClass());
            return t.updateForEntry(e), this.mon(t, "cmClick", function(t) {
                var e = new CMDBuild.view.management.common.CMCardWindow({
                    withButtons: !0,
                    title: t.className
                });
                new CMDBuild.controller.management.common.CMCardWindowController(e, {
                    cmEditMode: !0,
                    card: null,
                    entryType: t.classId
                }), e.show(), this.mon(e, "destroy", function() {
                    this.grid.reload()
                }, this)
            }, this), t
        },
        getIdClass: function() {
            if (this.idClass) return this.idClass;
            var t = _CMCache.getEntryTypeByName(this.ClassName);
            if (t) return t.getId();
            throw "No class info for " + Ext.getClassName(this)
        },
        buildGrdiConfiguration: function() {
            var t = Ext.apply(this.gridConfig, {
                cmAdvancedFilter: !1,
                columns: [],
                CQL: this.extraParams,
                frame: !1,
                border: !1,
                selType: this.selType,
                multiSelect: this.multiSelect
            });
            return void 0 === this.selModel ? t.selType = this.selType : t.selModel = this.selModel, t
        },
        onSelectionChange: Ext.emptyFn,
        onGridDoubleClick: Ext.emptyFn
    }), Ext.define("CMDBuild.Management.ReferenceSearchWindow", {
        extend: "CMDBuild.view.management.common.CMCardListWindow",
        initComponent: function() {
            this.selection = null, this.saveButton = new Ext.Button({
                text: CMDBuild.Translation.save,
                name: "saveButton",
                disabled: !0,
                handler: this.onSave,
                scope: this
            }), this.buttonAlign = "center", this.buttons = [this.saveButton], this.callParent(arguments), this.on("show", function() {
                if (this.grid.gridSearchField) {
                    var t = this;
                    Ext.Function.createDelayed(function() {
                        t.grid.gridSearchField.focus(), t.grid.gridSearchField.setValue(t.searchFieldValue)
                    }, 100)()
                }
            }, this, {
                single: !0
            })
        },
        buildGrdiConfiguration: function() {
            var t = this.callParent(arguments),
                e = this.extraParams;
            return Ext.apply(t, {
                getStoreExtraParams: function() {
                    return e
                }
            })
        },
        onSelectionChange: function(t, e) {
            e.length > 0 ? (this.saveButton.enable(), this.selection = e[0]) : (this.saveButton.disable(), this.selection = null)
        },
        onGridDoubleClick: function() {
            this.onSave()
        },
        onSave: function() {
            null != this.selection && this.fireEvent("cmdbuild-referencewindow-selected", this.selection), this.destroy()
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetManagerDelegate", {
        getFormForTemplateResolver: Ext.emptyFn,
        getWidgetButtonsPanel: Ext.emptyFn
    }), Ext.define("CMDBuild.view.management.common.widgets.CMTabbedWidgetDelegate", {
        getNotesPanel: Ext.emptyFn,
        getAttachmentsPanel: Ext.emptyFn,
        showWidget: Ext.emptyFn,
        activateFirstTab: Ext.emptyFn
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetManager", {
        delegate: void 0,
        builders: {},
        constructor: function(t, e) {
            var i = this;
            this.mainView = t, this.tabbedWidgetDelegate = e || null, Ext.apply(this, {
                builders: {
                    ".ManageEmail": function(t, e) {
                        return Ext.isEmpty(i.tabbedWidgetDelegate) || Ext.isEmpty(i.tabbedWidgetDelegate.getEmailPanel()) ? null : i.tabbedWidgetDelegate.getEmailPanel()
                    },
                    ".OpenAttachment": function(t, e) {
                        return Ext.isEmpty(i.tabbedWidgetDelegate) || Ext.isEmpty(i.tabbedWidgetDelegate.getAttachmentsPanel()) ? null : i.tabbedWidgetDelegate.getAttachmentsPanel()
                    },
                    ".OpenNote": function(t, e) {
                        return Ext.isEmpty(i.tabbedWidgetDelegate) || Ext.isEmpty(i.tabbedWidgetDelegate.getNotesPanel()) ? null : i.tabbedWidgetDelegate.getNotesPanel()
                    },
                    ".Calendar": function(t, e) {
                        var n = new CMDBuild.view.management.common.widgets.CMCalendar;
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".CreateModifyCard": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.createModifyCard.CMCreateModifyCard");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".CustomForm": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.customForm.CustomFormView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".Grid": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.common.widgets.grid.GridView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".LinkCards": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.linkCards.LinkCards", {
                            widgetConf: t
                        });
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".ManageRelation": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.manageRelation.CMManageRelation", {
                            widget: t
                        });
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".NavigationTree": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.navigationTree.NavigationTreeView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".OpenReport": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.openReport.OpenReportView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".Ping": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.PingView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".PresetFromCard": function(t, e) {
                        var n = new CMDBuild.view.management.common.widgets.CMPresetFromCard;
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".WebService": function(t, e) {
                        var n = new CMDBuild.view.management.common.widgets.CMWebService;
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".Workflow": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.common.widgets.workflow.CMWorkflow");
                        return i.widgetsContainer.addWidgt(n), n
                    }
                }
            })
        },
        buildWidget: function(t, e) {
            return this.mainView.getWidgetButtonsPanel().addWidget(t), this._buildWidget(t, e)
        },
        showWidget: function(t, e) {
            null != this.tabbedWidgetDelegate && this.tabbedWidgetDelegate.showWidget(t, e) || this.widgetsContainer.showWidget(t, e)
        },
        hideWidgetsContainer: function() {
            this.widgetsContainer && this.widgetsContainer.hide()
        },
        buildWidgetsContainer: function() {
            return Ext.create("CMDBuild.view.management.common.widgets.CMWidgetsWindow", {
                delegate: this.delegate
            })
        },
        reset: function() {
            Ext.isEmpty(this.widgetsContainer) || this.widgetsContainer.destroy(), this.widgetsContainer = this.buildWidgetsContainer(), this.mainView.getWidgetButtonsPanel().removeAllButtons(), this.widgetsMap = {}
        },
        getFormForTemplateResolver: function() {
            return this.mainView.getFormForTemplateResolver()
        },
        activateFirstTab: function() {
            null != this.tabbedWidgetDelegate && this.tabbedWidgetDelegate.activateFirstTab()
        },
        _buildWidget: function(t, e) {
            return this.builders[t.type] ? this.builders[t.type](t, e) : null
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetManagerPopup", {
        extend: "CMDBuild.view.management.common.widgets.CMWidgetManager",
        buildWidgetsContainer: function() {
            return new CMDBuild.view.management.common.widgets.CMWidgetsWindowPopup
        }
    }),
    function() {
        var t = CMDBuild.Translation.management.modcard;

        function e(t, e, i, n) {
            var a = t.getForm().getFields();
            for (var o in "Ext.util.MixedCollection" == Ext.getClassName(a) && (a = a.items), a) a[o].isObservable && Ext.isFunction(a[o].suspendEvents) && a[o].suspendEvents(!1);
            if (function(t, e) {
                    for (var i in e || {}) {
                        var n = e[i];
                        for (var a in n) {
                            var o = "_" + i + "_" + a,
                                r = n[a];
                            t[o] = r
                        }
                    }
                }(e, i), a)
                for (var r = 0, s = a.length; r < s; ++r) {
                    var l = a[r];
                    if ("function" != typeof n || n(l)) try {
                        l.setValue(e[l.name]), "function" == typeof l.isFiltered && l.isFiltered() && l.setServerVarsForTemplate(e)
                    } catch (t) {
                        _msg("[Field name: " + l.name + "] " + t.message)
                    }
                }
            for (var o in a) a[o].isObservable && Ext.isFunction(a[o].resumeEvents) && a[o].resumeEvents();
            t.fireEvent(t.CMEVENTS.formFilled)
        }
        Ext.define("CMDBuild.view.management.classes.CMCardForm", {
            extend: "Ext.form.Panel",
            mixins: {
                cmFormFunctions: "CMDBUild.view.common.CMFormFunctions"
            },
            _lastCard: null,
            _isInEditMode: !1,
            constructor: function(t) {
                Ext.apply(this, t), this.CMEVENTS = {
                    saveCardButtonClick: "cm-save",
                    abortButtonClick: "cm-abort",
                    removeCardButtonClick: "cm-remove",
                    modifyCardButtonClick: "cm-modify",
                    cloneCardButtonClick: "cm-clone",
                    printCardButtonClick: "cm-print",
                    openGraphButtonClick: "cm-graph",
                    formFilled: "cmFormFilled",
                    editModeDidAcitvate: "cmeditmode",
                    displayModeDidActivate: "cmdisplaymode"
                }, this.addEvents([this.CMEVENTS.saveCardButtonClick, this.CMEVENTS.abortButtonClick, this.CMEVENTS.removeCardButtonClick, this.CMEVENTS.modifyCardButtonClick, this.CMEVENTS.cloneCardButtonClick, this.CMEVENTS.printCardButtonClick, this.CMEVENTS.openGraphButtonClick, this.CMEVENTS.editModeDidAcitvate, this.CMEVENTS.displayModeDidActivate]), this.buildTBar(), this.buildButtons(), this.callParent(arguments)
            },
            initComponent: function() {
                Ext.apply(this, {
                    frame: !1,
                    border: !1,
                    hideMode: "offsets",
                    bodyCls: "x-panel-body-default-framed cmdb-border-top",
                    bodyStyle: {
                        padding: "5px 5px 0 5px"
                    },
                    cls: "x-panel-body-default-framed",
                    autoScroll: !1,
                    tbar: this.cmTBar,
                    buttonAlign: "center",
                    buttons: this.cmButtons,
                    layout: {
                        type: "hbox",
                        align: "stretch"
                    }
                }), this.callParent(arguments)
            },
            editMode: function() {
                this._isInEditMode || (this.ensureEditPanel(), this.tabPanel && this.tabPanel.editMode(), this.disableCMTbar(), this.enableCMButtons(), this.tabPanel.showAll(), this.fireEvent(this.CMEVENTS.editModeDidAcitvate), this._isInEditMode = !0)
            },
            displayMode: function(t) {
                this.suspendLayouts(), this.tabPanel && this.tabPanel.displayMode(), t ? this.enableCMTbar() : this.disableCMTbar(), this.disableCMButtons(), this.resumeLayouts(!0), this.fireEvent(this.CMEVENTS.displayModeDidActivate), this._isInEditMode = !1
            },
            displayModeForNotEditableCard: function() {
                this.displayMode(enableCMBar = !1), this.printCardMenu && this.printCardMenu.enable(), this.graphButton && this.graphButton.enable()
            },
            reset: function() {
                this.suspendLayouts(), this._isInEditMode = !1, this.mixins.cmFormFunctions.reset.apply(this), this.resumeLayouts(!0)
            },
            loadCard: function(t, i) {
                if (this._lastCard = t, this.reset(), t) {
                    if ("object" != typeof t) throw "Card must be an object";
                    var n, a, o = t.raw || t.data;
                    i ? e(this, o) : this._isInEditMode ? e(this, o, a, function(t) {
                        return t._belongToEditableSubpanel
                    }) : e(this, o, n, function(t) {
                        return !t._belongToEditableSubpanel
                    }), this.initValues()
                }
            },
            canReconfigureTheForm: function() {
                var t = !0;
                try {
                    t = this.isVisible(!0)
                } catch (t) {}
                return t
            },
            ensureEditPanel: function() {
                this.tabPanel && !this._isInEditMode && (this.tabPanel.ensureEditPanel(), this._lastCard && (this.loadCard(this._lastCard, bothPanels = !0), this.callFieldTemplateResolverIfNeeded()))
            },
            fillForm: function(t, e) {
                this._lastCard = null;
                var i = [],
                    n = CMDBuild.Utils.groupAttributes(t, !1);
                this.suspendLayouts(), CMDBuild.clearComponent(this);
                var a = this.getForm().getFields();
                for (var o in a.clear(), n) {
                    var t = n[o],
                        r = CMDBuild.Management.EditablePanel.build({
                            attributes: t,
                            frame: !1,
                            border: !1,
                            title: o,
                            bodyCls: "x-panel-body-default-framed",
                            bodyStyle: {
                                padding: "5px"
                            }
                        });
                    r && i.push(r)
                }
                this.tabPanel && delete this.tabPanel;
                0 == i.length && (i = [new CMDBuild.Management.EditablePanel({
                    attributes: [],
                    frame: !1,
                    border: !1,
                    title: "",
                    bodyCls: "x-panel-body-default-framed",
                    bodyStyle: {
                        padding: "5px"
                    }
                })]);
                this.tabPanel = new CMDBuild.view.management.common.CMTabPanel({
                    items: i,
                    frame: !1,
                    flex: 1
                }), this.add(this.tabPanel), this.resumeLayouts(!0), this.doLayout(), this.danglingCard && (function(t) {
                    this.loadRemoteData || this.hasDomainAttributes() ? this.loadCard(t.get("Id"), t.get("IdClass")) : this.loadCard(t);
                    this.loadRemoteData = !1
                }.call(this, this.danglingCard), this.danglingCard = null);
                (e || this.forceEditMode) && (this.editMode(), this.forceEditMode = !1)
            },
            buildTBar: function() {
                if (this.withToolBar) {
                    var e = this;
                    this.deleteCardButton = new Ext.button.Button({
                        iconCls: "delete",
                        text: t.delete_card,
                        handler: function() {
                            e.fireEvent(e.CMEVENTS.removeCardButtonClick)
                        }
                    }), this.cloneCardButton = new Ext.button.Button({
                        iconCls: "clone",
                        text: t.clone_card,
                        handler: function() {
                            e.fireEvent(e.CMEVENTS.cloneCardButtonClick)
                        }
                    }), this.modifyCardButton = new Ext.button.Button({
                        iconCls: "modify",
                        text: t.modify_card,
                        handler: function() {
                            e.fireEvent(e.CMEVENTS.modifyCardButtonClick)
                        }
                    }), this.printCardMenu = Ext.create("CMDBuild.core.buttons.iconized.split.Print", {
                        formatList: [CMDBuild.core.constants.Proxy.PDF, CMDBuild.core.constants.Proxy.ODT],
                        mode: "legacy",
                        text: CMDBuild.Translation.print + " " + CMDBuild.Translation.management.modcard.tabs.card.toLowerCase()
                    }), this.mon(this.printCardMenu, "click", function(t) {
                        Ext.isString(t) && e.fireEvent(e.CMEVENTS.printCardButtonClick, t)
                    }), this.cmTBar = [this.modifyCardButton, this.deleteCardButton, this.cloneCardButton], this.graphButton = Ext.create("CMDBuild.core.buttons.iconized.RelationGraph", {
                        scope: this,
                        handler: function(t, e) {
                            this.fireEvent(this.CMEVENTS.openGraphButtonClick)
                        }
                    }), CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) && this.cmTBar.push(this.graphButton), this.cmTBar.push(this.printCardMenu)
                }
            },
            buildButtons: function() {
                if (this.withButtons) {
                    var t = this;
                    this.saveButton = new Ext.button.Button({
                        text: CMDBuild.Translation.save,
                        handler: function() {
                            t.fireEvent(t.CMEVENTS.saveCardButtonClick)
                        }
                    }), this.cancelButton = new Ext.button.Button({
                        text: this.readOnlyForm ? CMDBuild.Translation.close : CMDBuild.Translation.cancel,
                        handler: function() {
                            t.fireEvent(t.CMEVENTS.abortButtonClick)
                        }
                    }), this.cmButtons = [this.saveButton, this.cancelButton]
                }
            },
            hasDomainAttributes: function() {
                for (var t = this.getForm().getFields().items, e = 0, i = t.length; e < i; ++e)
                    if (t[e].cmDomainAttribute) return !0;
                return !1
            },
            callFieldTemplateResolverIfNeeded: function() {
                var t = Ext.create("CMDBuild.core.RequestBarrier", {
                    id: "templateResolverBarrier",
                    scope: this,
                    callback: function() {
                        Ext.isObject(this._lastCard) && !Ext.Object.isEmpty(this._lastCard) && e(this, this._lastCard.raw || this._lastCard.data)
                    }
                });
                this.getForm().getFields().each(function(e, i, n) {
                    Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isFunction(e.resolveTemplate) && e.resolveTemplate({
                        iden: e.name,
                        callback: t.getCallback("templateResolverBarrier")
                    })
                }, this), t.finalize("templateResolverBarrier", !0)
            },
            isInEditing: function() {
                return this._isInEditMode
            },
            toString: function() {
                return "CMCardForm"
            }
        })
    }(), Ext.define("CMDBuild.view.management.classes.CMCardNotesPanel", {
        extend: "Ext.panel.Panel",
        translation: CMDBuild.Translation.management.modcard,
        withButtons: !0,
        withTbar: !0,
        initComponent: function() {
            this._editMode = !1, this.CMEVENTS = {
                saveNoteButtonClick: "cm-save-clicked",
                cancelNoteButtonClick: "cm-cancel-clicked",
                modifyNoteButtonClick: "cm-modify.clicked"
            };
            var t = this;
            this.modifyNoteButton = new Ext.button.Button({
                iconCls: "modify",
                text: this.translation.modify_note,
                handler: function() {
                    t.fireEvent(t.CMEVENTS.modifyNoteButtonClick)
                }
            });
            var e = Ext.create("CMDBuild.view.common.field.HtmlEditor", {
                name: "Notes",
                hideLabel: !0
            });
            this.actualForm = new Ext.form.Panel({
                hideMode: "offsets",
                layout: "fit",
                border: !1,
                frame: !1,
                bodyCls: "x-panel-body-default-framed",
                hideMode: "offsets",
                items: [e],
                setValue: function(t) {
                    e.setValue(t || "")
                },
                getValue: function() {
                    return e.getValue()
                }
            });
            var i = new Ext.form.field.Display({
                padding: "0 0 5px 5px",
                name: "Notes",
                anchor: "95%"
            });
            this.displayPanel = new Ext.form.Panel({
                hideMode: "offsets",
                autoScroll: !0,
                frame: !1,
                bodyCls: "x-panel-body-default-framed",
                items: [i],
                setValue: function(t) {
                    i.setValue(t)
                },
                getValue: function() {
                    return i.getValue()
                }
            }), this.buildButtons(), this.withTbar && (this.tbar = [this.modifyNoteButton]), Ext.apply(this, {
                hideMode: "offsets",
                frame: !1,
                border: !1,
                cls: "x-panel-body-default-framed",
                layout: "card",
                items: [this.displayPanel, this.actualForm],
                buttonAlign: "center"
            }), this.callParent(arguments)
        },
        buildButtons: function() {
            if (this.withButtons) {
                var t = this;
                this.buttons = [this.saveButton = new Ext.button.Button({
                    text: CMDBuild.Translation.save,
                    name: "saveButton",
                    formBind: !0,
                    handler: function() {
                        t.fireEvent(t.CMEVENTS.saveNoteButtonClick)
                    }
                }), this.cancelButton = new Ext.button.Button({
                    text: CMDBuild.Translation.cancel,
                    name: "cancelButton",
                    handler: function() {
                        t.fireEvent(t.CMEVENTS.cancelNoteButtonClick)
                    }
                })];
                var e = this.getExtraButtons();
                e && (Ext.isArray(e) ? this.buttons = this.buttons.concat(e) : this.buttons.push(e))
            }
        },
        reset: function() {
            this.actualForm.getForm().reset(), this.displayPanel.getForm().reset()
        },
        loadCard: function(t) {
            this.actualForm.getForm().loadRecord(t), this.displayPanel.getForm().loadRecord(t)
        },
        getForm: function() {
            return this.actualForm.getForm()
        },
        syncForms: function() {
            var t = this.actualForm.getValue();
            return this.displayPanel.setValue(t), t
        },
        disableModify: function() {
            this.privWrite ? this.modifyNoteButton.enable() : this.modifyNoteButton.disable(), this.withButtons && (this.saveButton.disable(), this.cancelButton.disable()), this.getLayout().setActiveItem(this.displayPanel), this._editMode = !1
        },
        enableModify: function() {
            this.modifyNoteButton.disable(), this.withButtons && (this.saveButton.enable(), this.cancelButton.enable()), this.getLayout().setActiveItem(this.actualForm), this.actualForm.setValue(this.displayPanel.getValue()), this._editMode = !0
        },
        updateWritePrivileges: function(t) {
            this.privWrite = t
        },
        isInEditing: function() {
            return this._editMode
        },
        getExtraButtons: Ext.emptyFn,
        reloadCard: function(t) {
            _deprecated("reloadCard", this), this.enable()
        },
        onClassSelected: function() {
            _deprecated("onClassSelected", this)
        },
        onCardSelected: function(t) {
            _deprecated("onCardSelected", this);
            var e = t.raw.IdClass;
            CMDBuild.Utils.isSimpleTable(e) ? this.disable() : (this.enable(), this.currentCardId = t.get("Id"), this.currentCardPrivileges = {
                create: t.raw.priv_create,
                write: t.raw.priv_write
            }, this.reset(), this.loadCard(t), this.disableModify())
        }
    }),
    function() {
        var t = "dst_cid",
            e = (CMDBuild.Translation.management.modcard, CMDBuild.Translation.management.modcard.relation_columns),
            i = {
                enable: function() {},
                disable: function() {},
                on: function() {}
            };

        function n(t, e) {
            var i, n, o, r, s, l = e.data.attributes || [],
                d = '<span class="cm-bold">',
                c = t.relations_size > CMDBuild.configuration.instance.get("relationLimit"),
                u = t.src,
                h = e.get("id"),
                C = {
                    dom_id: h,
                    label: (i = t, n = e, o = n.get("descr" + i.src), r = i.relations_size, s = r > 1 ? CMDBuild.Translation.management.modcard.relation_columns.items : CMDBuild.Translation.management.modcard.relation_columns.item, '<span class="cm-bold">' + o + " (" + r + " " + s + ")</span>"),
                    src: u,
                    relations_size: t.relations_size,
                    expanded: !c,
                    leaf: !1,
                    children: [],
                    rel_attr_keys: []
                };
            if (l.length > 0) {
                this.showAttributesColumn = !0;
                for (var m = 0, g = l.length; m < g; m++) {
                    var M = l[m];
                    "hidden" != M.fieldmode && (C.rel_attr_keys.push(M.name), d += 0 == m ? "" : " | ", d += M.description || M.name)
                }
                C.rel_attr = d + "</span>"
            }
            return c ? C.children.push({}) : C.children = a(t.relations, h, u, C), C
        }

        function a(t, e, i, n, a) {
            for (var o, r, s, l, d = 0, c = (t = t || []).length, u = [], h = ""; d < c; ++d)
                if (o = t[d], r = _CMCache.getEntryTypeById(o.dst_cid)) {
                    o.leaf = !0, o.label = r.get("text"), o.dom_id = e, o.src = i, h = "", n.rel_attr_keys = n.rel_attr_keys || a.raw.rel_attr_keys || [];
                    for (var C = 0; C < n.rel_attr_keys.length; ++C) s = n.rel_attr_keys[C], void 0 === (l = o.rel_attr[s]) && (l = " - "), h += 0 == C ? "" : " | ", h += l.dsc || l;
                    o.attr_as_obj = o.rel_attr, o.rel_attr = h, u.push(o), a && a.appendChild(o)
                }
            return u
        }
        Ext.define("CMRelationPanelModel", {
            extend: "Ext.data.Model",
            fields: ["dom_id", "dom_desc", "label", "dst_code", "dst_id", "dst_desc", "dst_cid", "rel_attr", "rel_date", "rel_id", "relations_size", "src"]
        }), Ext.define("CMDBuild.view.management.classes.CMCardRelationsPanel", {
            extend: "Ext.tree.Panel",
            cmWithAddButton: !0,
            cmWithEditRelationIcons: !0,
            initComponent: function() {
                this.buildTBar(), this.attrsColumn = new Ext.grid.column.Column({
                    header: CMDBuild.Translation.administration.modClass.tabs.attributes,
                    hideMode: "visibility",
                    flex: 3,
                    sortable: !1,
                    dataIndex: "rel_attr"
                }), Ext.apply(this, {
                    loadMask: !1,
                    hideMode: "offsets",
                    store: new Ext.data.TreeStore({
                        model: "CMRelationPanelModel",
                        root: {
                            expanded: !0,
                            children: []
                        },
                        autoLoad: !1
                    }),
                    rootVisible: !1,
                    columns: [{
                        header: e.domain,
                        sortable: !1,
                        dataIndex: "dom_id",
                        hidden: !0
                    }, {
                        header: e.destclass,
                        flex: 2,
                        sortable: !1,
                        dataIndex: "label",
                        xtype: "treecolumn"
                    }, {
                        header: e.begin_date,
                        flex: 1,
                        sortable: !1,
                        dataIndex: "rel_date"
                    }, {
                        header: e.code,
                        flex: 1,
                        sortable: !1,
                        dataIndex: "dst_code"
                    }, {
                        header: e.description,
                        flex: 2,
                        sortable: !1,
                        dataIndex: "dst_desc"
                    }, this.attrsColumn, {
                        header: "&nbsp",
                        fixed: !0,
                        sortable: !1,
                        renderer: Ext.bind(this.renderRelationActions, this),
                        align: "center",
                        tdCls: "grid-button",
                        dataIndex: "Fake",
                        menuDisabled: !0,
                        hideable: !1
                    }]
                }), this.callParent(arguments), this.CMEVENTS = {
                    addButtonClick: "cm-add-relation-click",
                    domainNodeAppended: "cm-domain-node-appended",
                    openGraphClick: "cm-open-graph"
                }, this.addEvents(this.CMEVENTS.addButtonClick), this.addEvents(this.CMEVENTS.domainNodeAppended), this.addEvents(this.CMEVENTS.openGraphClick)
            },
            buildTBar: function() {
                var t = this;
                this.tbar = [], this.addRelationButton = Ext.create("CMDBuild.core.buttons.iconized.add.Relation"), this.mon(this.addRelationButton, "cmClick", function(e) {
                    t.fireEvent(t.CMEVENTS.addButtonClick, e)
                }), this.cmWithAddButton && this.tbar.push(this.addRelationButton), CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) ? (this.graphButton = Ext.create("CMDBuild.core.buttons.iconized.RelationGraph", {
                    scope: this,
                    handler: function(t, e) {
                        this.fireEvent(this.CMEVENTS.openGraphClick)
                    }
                }), this.tbar.push(this.graphButton)) : this.graphButton = i
            },
            clearStore: function() {
                this.store.getRootNode().removeAll()
            },
            fillWithData: function(t) {
                this.showAttributesColumn = !1, t = t || [];
                for (var e = [], i = this.store.getRootNode(), a = 0, o = t.length; a < o; ++a) {
                    var r = t[a],
                        s = _CMCache.getDomainById(r.id);
                    s ? e.push(n.call(this, r, s)) : CMDBuild.log.error("I have not cached data for domain", r.id)
                }
                i.removeAll(), e.length > 0 && i.appendChild(e), this.showAttributesColumn ? this.attrsColumn.show() : this.attrsColumn.hide()
            },
            convertRelationInNodes: a,
            renderRelationActions: function(e, i, n) {
                if (1 == n.get("depth")) return "";
                var a = CMDBuild.Translation.management.modcard,
                    o = '<img style="cursor:pointer" title="' + a.open_relation + '" class="action-relation-go" src="images/icons/bullet_go.png"/>',
                    r = n.get(t),
                    s = _CMCache.getDomainById(n.get("dom_id")),
                    l = _CMCache.getClassById(r),
                    d = _CMCache.getEntryTypeById(r),
                    c = _CMUtils.getEntryTypePrivileges(d);
                this.cmWithEditRelationIcons && s.get("writePrivileges") && (o += '<img style="cursor:pointer" title="' + a.edit_relation + '" class="action-relation-edit" src="images/icons/link_edit.png"/><img style="cursor:pointer" title="' + a.delete_relation + '" class="action-relation-delete" src="images/icons/link_delete.png"/>');
                l && l.get("priv_write") && !c.crudDisabled.modify ? o += '<img style="cursor:pointer" title="' + a.modify_card + '" class="action-relation-editcard" src="images/icons/modify.png"/>' : o += '<img style="cursor:pointer" title="' + a.view_relation + '" class="action-relation-viewcard" src="images/icons/zoom.png"/>';
                CMDBuild.configuration.dms.get(CMDBuild.core.constants.Proxy.ENABLED) && (o += '<img style="cursor:pointer" title="' + a.showattach + '" class="action-relation-attach" src="images/icons/attach.png"/>');
                return o
            },
            onAddCardButtonClick: function() {
                _deprecated("onAddCardButtonClick", this), this.disable()
            },
            onClassSelected: function() {
                _deprecated("onClassSelected", this)
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetsWindow", {
        extend: "CMDBuild.core.window.AbstractModal",
        delegate: void 0,
        initComponent: function() {
            this.widgetsToAdd = {}, this.widgetsContainer = new Ext.panel.Panel({
                layout: "card",
                activeItem: 0,
                hideMode: "offsets",
                border: !1,
                frame: !1,
                items: [{}]
            });
            var t = this;
            Ext.apply(this, {
                items: [this.widgetsContainer],
                buttonAlign: "center",
                buttons: [{
                    text: CMDBuild.Translation.close,
                    _cmNotRemoveMe: !0,
                    handler: function() {
                        t.onWidgetsWindowHide(), t.hide()
                    }
                }]
            }), this.callParent(arguments)
        },
        listeners: {
            close: function(t, e) {
                Ext.isFunction(t.onWidgetsWindowHide) && t.onWidgetsWindowHide()
            },
            hide: function(t, e) {
                Ext.isFunction(t.onWidgetsWindowHide) && t.onWidgetsWindowHide()
            }
        },
        onWidgetsWindowHide: function() {
            Ext.isEmpty(this.delegate) || Ext.isEmpty(this.currentWidget.delegate) || this.delegate.beforeHideView(this.currentWidget.delegate)
        },
        showWidget: function(t, e) {
            if (this.currentWidget = t, this.setTitle(e), this.show(), this.widgetsToAdd[t.id] && (this.widgetsContainer.add(t), delete this.widgetsToAdd[t.id]), this.widgetsContainer.layout.setActiveItem(t.id), this.removeExtraButtons(), t.getExtraButtons) {
                var i = t.getExtraButtons();
                this.addExtraButtons(i)
            }
            t.buttonLabel && this.setTitle(t.buttonLabel)
        },
        addWidgt: function(t) {
            this.widgetsToAdd[t.id] = t
        },
        destroy: function() {
            CMDBuild.clearComponent(this.widgetsContainer), delete this.widgetsToAdd, this.callParent(arguments)
        },
        addExtraButtons: function(t) {
            var e = this.getButtonBar();
            e && e.insert(0, t)
        },
        removeExtraButtons: function() {
            var t = this.getButtonBar();
            t && t.items.each(function(e) {
                e._cmNotRemoveMe || t.remove(e)
            })
        },
        getButtonBar: function() {
            for (var t = this.getDockedItems(), e = 0, i = t.length; e < i; ++e) {
                var n = t[e];
                if ("bottom" == n.dock) return n
            }
            return null
        },
        close: function() {
            this.hide()
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetsWindowPopup", {
        extend: "CMDBuild.view.management.common.widgets.CMWidgetsWindow",
        defaultSizeW: .9,
        defaultSizeH: .8,
        initComponent: function() {
            this.callParent(arguments), this.height = this.height * this.defaultSizeH, this.width = this.width * this.defaultSizeW
        }
    }), Ext.define("CMDBuild.view.management.common.widget.CMWidgetButton", {
        extend: "Ext.Button",
        widgetDefinition: void 0,
        constructor: function() {
            this.callParent(arguments), this.margins = "0 0 5 0", this.text = this.widgetDefinition.label, this.disabled = !this.widgetDefinition.alwaysenabled
        },
        disable: function() {
            return this.widgetDefinition && this.widgetDefinition.alwaysenabled || CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.PROCESS_WIDGET_ALWAYS_ENABLED) ? this.enable() : this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.management.common.widget.CMWidgetButtonsPanel", {
        extend: "Ext.panel.Panel",
        statics: {
            CMEVENTS: {
                widgetButtonClick: "widget-click"
            }
        },
        initComponent: function() {
            this.frame = !1, this.border = !1, this.layout = {
                type: "vbox",
                align: "stretch"
            }, this.bodyCls = "x-panel-body-default-framed", this.bodyStyle = {
                padding: "30px 5px 0 5px"
            }, this.callParent(arguments), this.CMEVENTS = this.self.CMEVENTS
        },
        addWidget: function(t) {
            var e = this;
            e._hidden && (e.show(), e._hidden = !1), e.add(new CMDBuild.view.management.common.widget.CMWidgetButton({
                widgetDefinition: t,
                handler: function() {
                    e.fireEvent(e.CMEVENTS.widgetButtonClick, t)
                }
            }))
        },
        displayMode: function() {
            this.items.each(function(t) {
                t.disable()
            })
        },
        editMode: function() {
            this.items.each(function(t) {
                t.enable()
            })
        },
        removeAllButtons: function() {
            CMDBuild.clearComponent(this), this.hide(), this._hidden = !0
        }
    }), Ext.define("CMDBuild.view.management.common.widget.CMWidgetButtonsPanelPopup", {
        extend: "CMDBuild.view.management.common.widget.CMWidgetButtonsPanel",
        addWidget: function(t) {
            var e = this;
            e._hidden && (e.show(), e._hidden = !1), e.add(new CMDBuild.view.management.common.widget.CMWidgetButton({
                widgetDefinition: t,
                handler: function() {
                    e.delegate.onWidgetButtonClick(t)
                }
            }))
        }
    }), Ext.define("CMDBuild.view.management.common.CMFormWithWidgetButtons", {
        extend: "Ext.panel.Panel",
        mixins: {
            widgetManagerDelegate: "CMDBuild.view.management.common.widgets.CMWidgetManagerDelegate"
        },
        withToolBar: !1,
        withButtons: !1,
        initComponent: function() {
            this.form = this.buildForm(), _CMUtils.forwardMethods(this, this.form, ["loadCard", "getValues", "reset", "getInvalidAttributeAsHTML", "fillForm", "getForm", "hasDomainAttributes", "ensureEditPanel", "isInEditing"]), this.widgets = new CMDBuild.view.management.common.widget.CMWidgetButtonsPanel({
                region: "east",
                hideMode: "offsets",
                cls: "cmdb-border-left",
                autoScroll: !0,
                frame: !0,
                border: !1,
                items: []
            }), _CMUtils.forwardMethods(this, this.widgets, ["removeAllButtons", "addWidget"]), this.widgets.hide(), Ext.apply(this, {
                layout: "border",
                items: [this.form, this.widgets]
            }), this.callParent(arguments), this.CMEVENTS = Ext.apply(this.form.CMEVENTS, this.widgets.CMEVENTS), this.relayEvents(this.widgets, [this.widgets.CMEVENTS.widgetButtonClick]);
            var t = this.form.CMEVENTS;
            this.relayEvents(this.form, [t.saveCardButtonClick, t.abortButtonClick, t.removeCardButtonClick, t.modifyCardButtonClick, t.cloneCardButtonClick, t.printCardButtonClick, t.openGraphButtonClick, t.editModeDidAcitvate, t.displayModeDidActivate]), this.mon(this, "activate", function() {
                this.form.fireEvent("activate")
            }, this)
        },
        buildForm: function() {
            return new CMDBuild.view.management.classes.CMCardForm({
                region: "center",
                cmOwner: this,
                withToolBar: this.withToolBar,
                withButtons: this.withButtons
            })
        },
        displayMode: function(t) {
            this.form.displayMode(t), this.widgets.displayMode()
        },
        displayModeForNotEditableCard: function() {
            this.form.displayModeForNotEditableCard(), this.widgets.displayMode()
        },
        editMode: function() {
            this.form.editMode(), this.widgets.editMode()
        },
        isTheActivePanel: function() {
            var t = !0;
            try {
                t = this.ownerCt.layout.getActiveItem() == this
            } catch (t) {}
            return t
        },
        formIsVisisble: function() {
            return this.form.isVisible(deep = !0)
        },
        getFormForTemplateResolver: function() {
            return this.form.getForm()
        },
        showCardPanel: Ext.emptyFn,
        getWidgetButtonsPanel: function() {
            return this.widgets
        }
    }), Ext.override(Extensible.calendar.view.AbstractCalendar, {
        onClick: function(t, e) {
            if (this.dropZone && this.dropZone.clearShims(), !0 === this.menuActive) return this.menuActive = !1, !0;
            var i = t.getTarget(this.eventSelector, 5);
            if (i) {
                var n = this.getEventIdFromEl(i),
                    a = this.getEventRecord(n);
                return this.fireEvent("eventclick", this, a, i), !0
            }
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMCalendar", {
        extend: "Ext.panel.Panel",
        withButtons: !0,
        constructor: function() {
            this.eventStore = new Extensible.calendar.data.MemoryEventStore({
                data: []
            }), this.calendar = new Extensible.calendar.CalendarPanel({
                eventStore: this.eventStore,
                hideMode: "offsets",
                region: "center",
                frame: !1,
                border: !1,
                showTodayText: !0,
                readOnly: !0,
                showNavToday: !1
            }), this.addEvents("eventclick"), this.addEvents("viewchange"), this.relayEvents(this.calendar, ["eventclick", "viewchange"]), Ext.apply(this, {
                frame: !1,
                border: !1,
                items: [this.calendar],
                layout: "border",
                cls: "x-panel-body-default-framed"
            }), this.callParent(arguments)
        },
        addEvent: function(t) {
            this.eventStore.add(t)
        },
        clearStore: function() {
            this.eventStore.removeAll()
        },
        getWievBounds: function() {
            var t, e, i, n = (i = null, (e = this).calendar.layout && e.calendar.layout.getActiveItem && (i = e.calendar.layout.getActiveItem()), i);
            if (n && n.getViewBounds) {
                var a = n.getViewBounds();
                t = {
                    activeDate: n.getStartDate(),
                    viewStart: a.start,
                    viewEnd: a.end
                }
            }
            return t
        },
        setStartDate: function(t) {
            this.calendar.setStartDate(t)
        }
    }),
    function() {
        var t = "action-all-info",
            e = {};
        e[t] = "onWebServiceWidgetShowAllInfoButtonClick", Ext.define("CMDBuild.view.management.common.widgets.CMWebServiceDelegate", {
            onWebServiceWidgetShowAllInfoButtonClick: function(t, e) {}
        }), Ext.define("CMDBuild.view.management.common.widgets.CMWebServiceGrid", {
            extend: "Ext.grid.Panel",
            initComponent: function() {
                this.bbar = [Ext.create("CMDBuild.view.common.field.GridLocalSearch", {
                    grid: this
                })], this.callParent(arguments)
            }
        }), Ext.define("CMDBuild.view.management.common.widgets.CMWebService", {
            extend: "Ext.panel.Panel",
            mixins: {
                delegable: "CMDBuild.core.CMDelegable"
            },
            constructor: function() {
                this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.widgets.CMWebServiceDelegate"), this.callParent(arguments)
            },
            initComponent: function() {
                this.frame = !1, this.border = !1, this.layout = "border", this.autoScroll = !0, this.callParent(arguments)
            },
            getSelectedRecords: function() {
                var t = [];
                return this.grid && (t = this.grid.getSelectionModel().getSelection()), t
            },
            configureGrid: function(i, n, a) {
                var o;
                this.grid = new CMDBuild.view.management.common.widgets.CMWebServiceGrid({
                    region: "center",
                    border: !1,
                    columns: (o = n, o.push({
                        width: 30,
                        sortable: !1,
                        align: "center",
                        hideable: !1,
                        renderer: function(e, i, n) {
                            return '<img style="cursor:pointer"" class="' + t + '" src="images/icons/zoom.png"/>'
                        }
                    }), o),
                    selModel: a,
                    store: i
                }), this.add(this.grid), this.mon(this.grid, "beforeitemclick", function(t, i, n, a, o, r) {
                    var s = o.target.className;
                    "string" == typeof e[s] && this.callDelegates(e[s], [this, i])
                }, this)
            }
        }), Ext.define("CMDBuild.view.management.common.widgets.CMXMLWindow", {
            extend: "CMDBuild.core.window.AbstractModal",
            xmlNode: null,
            initComponent: function() {
                var t = this;
                null != this.xmlNode && (this.title = this.xmlNode.nodeName, this.items = [function(t) {
                    for (var e = CMDBuild.core.xml.XMLUtility, i = t.xmlNode.childNodes, n = [], a = 0, o = i.length; a < o; ++a) {
                        var r = i[a],
                            s = e.getNodeText(r),
                            l = r.nodeName;
                        n.push({
                            xtype: "displayfield",
                            fieldLabel: l,
                            labelAlign: "right",
                            labelWidth: CMDBuild.core.constants.FieldWidths.LABEL,
                            width: CMDBuild.core.constants.FieldWidths.STANDARD_BIG,
                            value: s
                        })
                    }
                    return {
                        boder: !0,
                        frame: !0,
                        items: n
                    }
                }(t)]), this.buttonAlign = "center", this.buttons = [{
                    text: CMDBuild.Translation.close,
                    handler: function() {
                        t.destroy()
                    }
                }], this.bodyStyle = {
                    padding: "5px"
                }, this.callParent(arguments)
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.widgets.CMPresetFromCardGrid", {
        extend: "CMDBuild.view.management.common.CMCardGrid",
        cmAdvancedFilter: !1,
        cmAddPrintButton: !1,
        cmAddGraphColumn: !1,
        selType: "checkboxmodel",
        selModel: {
            mode: "SINGLE"
        },
        buildExtraColumns: function() {
            return [{
                header: "&nbsp",
                width: 30,
                tdCls: "grid-button",
                fixed: !0,
                sortable: !1,
                align: "center",
                dataIndex: "Id",
                menuDisabled: !0,
                hideable: !1,
                renderer: function() {
                    return '<img style="cursor:pointer" class="action-card-show" src="images/icons/zoom.png"/>'
                }
            }]
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMPresetFromCardDelegate", {
        onPresetFromCardSaveButtonClick: function(t) {}
    }), Ext.define("CMDBuild.view.management.common.widgets.CMPresetFromCard", {
        extend: "Ext.panel.Panel",
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.widgets.CMPresetFromCardDelegate"), this.callParent(arguments)
        },
        initComponent: function() {
            this.grid = new CMDBuild.view.management.common.widgets.CMPresetFromCardGrid({
                autoScroll: !0,
                hideMode: "offsets",
                region: "center",
                border: !1
            }), this.frame = !1, this.border = !1, this.layout = "border", this.items = [this.grid], this.callParent(arguments)
        },
        updateGrid: function(t, e) {
            this.grid.CQL = e, this.grid.store.proxy.extraParams = this.grid.getStoreExtraParams(), this.grid.updateStoreForClassId(t)
        },
        getSelection: function() {
            var t = null,
                e = this.grid.getSelectionModel();
            return e && (selections = e.getSelection(), selections.length > 0 && (t = selections[0])), t
        },
        getExtraButtons: function() {
            var t = this;
            return [new Ext.Button({
                text: CMDBuild.Translation.ok,
                name: "saveButton",
                handler: function() {
                    t.callDelegates("onPresetFromCardSaveButtonClick", [t])
                }
            })]
        }
    }),
    function() {
        var t = CMDBuild.Translation.management.modcard.title;
        Ext.define("CMDBuild.view.management.classes.CMModCard", {
            extend: "Ext.panel.Panel",
            mixins: {
                uistatedelegate: "CMDBuild.state.UIStateDelegate"
            },
            whitMap: !0,
            layout: "border",
            border: !0,
            constructor: function() {
                this.CMEVENTS = {
                    addButtonClick: "cm-addcard-click"
                }, this.buildComponents(), this.callParent(arguments), "undefined" != typeof _CMUIState && _CMUIState.addDelegate(this)
            },
            initComponent: function() {
                this.centralPanelItems = [this.cardGrid],
                    function() {
                        if (CMDBuild.configuration.gis.get("enabled") && this.whitMap && CMDBuild.gis.values.browserEnabled) {
                            this.showGridButton = new Ext.button.Button({
                                text: CMDBuild.Translation.management.modcard.add_relations_window.list_tab,
                                iconCls: "table",
                                scope: this,
                                handler: function() {
                                    this.centralPanel.showGrid()
                                }
                            }), this.mapAddCardButton = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card", {
                                classId: void 0,
                                disabled: !0
                            }), this.mapAddCardButton.on("cmClick", function(t) {
                                this.fireEvent(this.CMEVENTS.addButtonClick, t)
                            }, this);
                            var t = this,
                                e = Ext.create("CMDBuild.core.buttons.gis.Thematism", {
                                    handler: function(t, e) {
                                        this.showMenu()
                                    }
                                }),
                                i = Ext.create("CMDBuild.core.buttons.gis.PrintMap", {
                                    handler: function(e, i) {
                                        t.theMap.print()
                                    }
                                }),
                                n = Ext.create("CMDBuild.core.buttons.gis.SearchPlace", {
                                    handler: function(e, i) {
                                        t.theMap.search(e, i)
                                    }
                                });
                            this.theMap = Ext.create("CMDBuild.view.management.classes.map.CMMapPanel", {
                                tbar: [this.mapAddCardButton, "->", n, i, e, this.showGridButton],
                                frame: !1,
                                border: !1,
                                mainGrid: this.cardGrid,
                                thematismButton: e,
                                printMapButton: i,
                                searchMapButton: n
                            }), this.executeThematism = function(t, e) {
                                this.theMap.executeThematism(t, e)
                            }, e.callback = this.executeThematism, e.theMap = this.theMap, this.centralPanelItems.push(this.theMap), this.getMapPanel = function() {
                                return this.theMap
                            }
                        } else this.mapAddCardButton = {
                            updateForEntry: Ext.emptyFn
                        }
                    }.call(this), this.centralPanel = new Ext.panel.Panel({
                        region: "center",
                        layout: "card",
                        activeItem: 0,
                        hideMode: "offsets",
                        cls: "cmdb-border-bottom",
                        border: !1,
                        frame: !1,
                        cardGrid: this.cardGrid,
                        theMap: this.theMap,
                        items: this.centralPanelItems,
                        animCollapse: !1,
                        showGrid: function() {
                            this.getLayout().setActiveItem(this.cardGrid.id), this.cardGrid.setCmVisible(!0), this.theMap.setCmVisible(!1)
                        },
                        showMap: function() {
                            this.getLayout().setActiveItem(this.theMap.id), this.theMap.updateSize(), this.theMap.setCmVisible(!0), this.cardGrid.setCmVisible(!0)
                        }
                    }), Ext.apply(this, {
                        items: [this.centralPanel, this.cardTabPanel],
                        tools: [Ext.create("CMDBuild.view.management.classes.tools.Properties"), Ext.create("CMDBuild.view.management.classes.tools.Minimize"), Ext.create("CMDBuild.view.management.classes.tools.Maximize"), Ext.create("CMDBuild.view.management.classes.tools.Restore")]
                    }), this.callParent(arguments), _CMUtils.forwardMethods(this, this.cardTabPanel, ["activateFirstTab", "setActivateTab", "getCardPanel", "getNotePanel", "getMDPanel", "getAttachmentsPanel", "getHistoryPanel", "getRelationsPanel", "getEmailPanel"]), this.on("afterrender", function(t, e) {
                        Ext.isFunction(this.delegate.buildMapController) && this.delegate.buildMapController()
                    }, this)
            },
            minimize: function() {
                Ext.suspendLayouts(), this.centralPanel.hide(), this.centralPanel.region = "", this.cardTabPanel.show(), this.cardTabPanel.region = "center", Ext.resumeLayouts(!0)
            },
            maximize: function() {
                Ext.suspendLayouts(), this.cardTabPanel.hide(), this.cardTabPanel.region = "", this.centralPanel.show(), this.centralPanel.region = "center", Ext.resumeLayouts(!0)
            },
            restore: function() {
                Ext.suspendLayouts(), this.cardTabPanel.show(), this.cardTabPanel.region = "south", this.centralPanel.show(), this.centralPanel.region = "center", Ext.resumeLayouts(!0)
            },
            updateTitleForEntry: function(e) {
                var i = "";
                e && (i = e.get("text") || e.get("name")), this.setTitle(t + i)
            },
            buildComponents: function() {
                var t = CMDBuild.configuration.instance.get("cardFormRatio") || 50,
                    e = [this.addCardButton = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card", {
                        classId: void 0,
                        disabled: !0
                    })];
                this.mon(this.addCardButton, "cmClick", function(t) {
                        this.fireEvent(this.CMEVENTS.addButtonClick, t)
                    }, this),
                    function(t) {
                        CMDBuild.configuration.gis.get("enabled") && CMDBuild.gis.values.browserEnabled && (this.showMapButton = new Ext.button.Button({
                            text: CMDBuild.Translation.management.modcard.tabs.map,
                            iconCls: "map",
                            scope: this,
                            handler: function() {
                                this.centralPanel.showMap()
                            }
                        }), t.push("->", this.showMapButton))
                    }.call(this, e), this.cardGrid = new CMDBuild.view.management.classes.CMModCard.Grid({
                        hideMode: "offsets",
                        filterCategory: this.cmName,
                        border: !1,
                        tbar: e,
                        columns: [],
                        forceSelectionOfFirst: !0
                    }), this.cardTabPanel = new CMDBuild.view.management.classes.CMCardTabPanel({
                        cls: "cmdb-border-top",
                        region: "south",
                        hideMode: "offsets",
                        border: !1,
                        split: !0,
                        height: t + "%"
                    });
                var i = new CMDBuild.view.management.common.widgets.CMWidgetManager(this.cardTabPanel.getCardPanel(), this.cardTabPanel);
                this.getWidgetManager = function() {
                    return i
                }
            },
            getGrid: function() {
                return this.cardGrid
            },
            reset: function(t) {
                _deprecated("reset", this), this.cardTabPanel.reset(t)
            },
            onEntrySelected: function(t) {
                _deprecated("onEntrySelected", this);
                var e = t.get("id");
                this.cardGrid.updateStoreForClassId(e, {
                    cb: function() {
                        this.loadPage(1, {
                            cb: function() {
                                try {
                                    this.getSelectionModel().select(0)
                                } catch (t) {
                                    _debug(t)
                                }
                            }
                        })
                    }
                }), this.cardTabPanel.onClassSelected(e, activateFirst = !0), this.addCardButton.updateForEntry(t), this.mapAddCardButton.updateForEntry(t), this.updateTitleForEntry(t), this.cardGrid.openFilterButton.enable(), this.cardGrid.gridSearchField.reset()
            },
            onFullScreenChangeToGridOnly: function() {
                this.maximize()
            },
            onFullScreenChangeToFormOnly: function() {
                this.minimize()
            },
            onFullScreenChangeToOff: function() {
                this.restore()
            }
        }), Ext.define("CMDBuild.view.management.classes.CMModCard.Grid", {
            extend: "CMDBuild.view.management.common.CMCardGrid",
            cmVisible: !0,
            setCmVisible: function(t) {
                this.cmVisible = t, this.paramsToLoadWhenVisible && (this.updateStoreForClassId(this.paramsToLoadWhenVisible.classId, this.paramsToLoadWhenVisible.o), this.paramsToLoadWhenVisible = null), this.fireEvent("cmVisible", t)
            },
            updateStoreForClassId: function(t, e) {
                this.cmVisible ? (this.callParent(arguments), this.paramsToLoadWhenVisible = null) : this.paramsToLoadWhenVisible = {
                    classId: t,
                    o: e
                }
            }
        })
    }(), Ext.define("CMDBuild.view.management.classes.CMCardPanel", {
        extend: "CMDBuild.view.management.common.CMFormWithWidgetButtons"
    }),
    function() {
        var t = CMDBuild.Translation.management.modcard;
        Ext.define("CMDBuild.view.management.classes.CMCardTabPanel", {
            extend: "Ext.tab.Panel",
            delegate: void 0,
            frame: !1,
            constructor: function() {
                this.cardNotesPanel = CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_NOTE_TAB) ? null : new CMDBuild.view.management.classes.CMCardNotesPanel({
                    title: CMDBuild.Translation.notes,
                    disabled: !0,
                    listeners: {
                        show: function(t, e) {
                            Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(_CMCardModuleState.card) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                                moduleId: "class",
                                entryType: {
                                    description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                                    id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.entryType
                                },
                                item: {
                                    description: _CMCardModuleState.card.get("Description") || _CMCardModuleState.card.get("Code"),
                                    id: _CMCardModuleState.card.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.card
                                },
                                section: {
                                    description: this.title,
                                    object: this
                                }
                            })
                        }
                    }
                }), this.relationsPanel = CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_RELATION_TAB) ? null : new CMDBuild.view.management.classes.CMCardRelationsPanel({
                    title: t.tabs.relations,
                    border: !1,
                    disabled: !0,
                    listeners: {
                        show: function(t, e) {
                            Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(_CMCardModuleState.card) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                                moduleId: "class",
                                entryType: {
                                    description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                                    id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.entryType
                                },
                                item: {
                                    description: _CMCardModuleState.card.get("Description") || _CMCardModuleState.card.get("Code"),
                                    id: _CMCardModuleState.card.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.card
                                },
                                section: {
                                    description: this.title,
                                    object: this
                                }
                            })
                        }
                    }
                }), this.mdPanel = CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_DETAIL_TAB) ? null : new CMDBuild.view.management.classes.masterDetails.CMCardMasterDetail({
                    title: t.tabs.detail,
                    disabled: !0,
                    listeners: {
                        show: function(t, e) {
                            Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(_CMCardModuleState.card) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                                moduleId: "class",
                                entryType: {
                                    description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                                    id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.entryType
                                },
                                item: {
                                    description: _CMCardModuleState.card.get("Description") || _CMCardModuleState.card.get("Code"),
                                    id: _CMCardModuleState.card.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.card
                                },
                                section: {
                                    description: this.title,
                                    object: this
                                }
                            })
                        }
                    }
                }), this.callParent(arguments)
            },
            reset: function(t) {
                this.activeTabSet(), this.items.each(function(e) {
                    e.reset && e.reset(), e.onClassSelected && e.onClassSelected(t)
                })
            },
            getCardPanel: function() {
                return Ext.isEmpty(this.cardPanel2) ? this.cardPanel : this.cardPanel2
            },
            getMDPanel: function() {
                return this.mdPanel
            },
            getHistoryPanel: function() {
                return this.cardHistoryPanel
            },
            getRelationsPanel: function() {
                return this.relationsPanel
            },
            getNotePanel: function() {
                return this.cardNotesPanel
            },
            getAttachmentsPanel: function() {
                return this.attachmentPanel
            },
            getNotesPanel: function() {
                return this.cardNotesPanel
            },
            getEmailPanel: function() {
                return this.emailPanel
            },
            showWidget: function(t) {
                return !1
            },
            activateFirstTab: function() {
                Ext.isEmpty(this.cardPanel2) ? this.setActiveTab(this.cardPanel) : this.setActiveTab(this.cardPanel2)
            },
            activeTabSet: function(t) {
                return Ext.isObject(t) && !Ext.Object.isEmpty(t) ? this.setActiveTab(t) : Ext.isEmpty(this.cardPanel2) ? this.setActiveTab(this.cardPanel) : this.setActiveTab(this.cardPanel2)
            }
        })
    }(),
    function() {
        function t(t, e, i) {
            t.currentClassId != e ? t.updateStoreForClassId(e, i, t) : i(t)
        }

        function e(t, e, i) {
            var n, a, o, r, s = (n = i, a = ["showDetail"], o = _CMCache.getEntryTypeById(n.get("IdClass")), !(r = _CMUtils.getEntryTypePrivilegesByCard(n)).write || r.crudDisabled.modify || r.crudDisabled.remove ? r.write && !r.crudDisabled.modify ? a = ["editDetail"] : r.write && !r.crudDisabled.remove && (a = ["showDetail", "deleteDetail"]) : a = ["editDetail", "deleteDetail"], o.get(CMDBuild.core.constants.Proxy.TABLE_TYPE) != CMDBuild.core.constants.Global.getTableTypeSimpleTable() && a.push("note"), CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) && a.push("showGraph"), CMDBuild.configuration.dms.get(CMDBuild.core.constants.Proxy.ENABLED) && a.push("attach"), a),
                l = "images/icons/",
                d = "png",
                c = "action-masterdetail-",
                u = '<img style="cursor:pointer" title="{0}" class="{1}{2}" src="{3}{4}.{5}"/>&nbsp;',
                h = "",
                C = {
                    showDetail: {
                        title: CMDBuild.Translation.management.moddetail.showdetail,
                        event: "show",
                        icon: "zoom"
                    },
                    editDetail: {
                        title: CMDBuild.Translation.management.moddetail.editdetail,
                        event: "edit",
                        icon: "modify"
                    },
                    deleteDetail: {
                        title: CMDBuild.Translation.management.moddetail.deletedetail,
                        event: "delete",
                        icon: "cross"
                    },
                    showGraph: {
                        title: CMDBuild.Translation.management.moddetail.showgraph,
                        event: "graph",
                        icon: "graph"
                    },
                    note: {
                        title: CMDBuild.Translation.management.moddetail.shownotes,
                        event: "note",
                        icon: "note"
                    },
                    attach: {
                        title: CMDBuild.Translation.management.moddetail.showattach,
                        event: "attach",
                        icon: "attach"
                    }
                };

            function m(t) {
                var e = C[t];
                return e ? Ext.String.format(u, e.title, c, e.event, l, e.icon, d) : Ext.String.format("<span>{0}</span>", t)
            }
            if (Ext.isArray(s))
                for (var g = 0, M = s.length; g < M; ++g) h += m(s[g]);
            else h = m("");
            return h
        }
        Ext.define("CMDBuild.Management.MasterDetailCardGrid", {
            extend: "CMDBuild.view.management.common.CMCardGrid",
            uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
            cmAddPrintButton: !1,
            loadDetails: function(e) {
                var i = e.detail,
                    n = e.masterCard.get("IdClass"),
                    a = _CMCache.getEntryTypeNameById(n);
                t(this, i.getDetailClassId(), function(t) {
                    t.store.proxy.url = CMDBuild.proxy.index.Json.card.readAll;
                    var n = {
                        relation: [{
                            domain: i.getName(),
                            type: "oneof",
                            destination: i.getMasterClassName(),
                            source: i.getDetailClassName(),
                            direction: i.getDetailSide(),
                            cards: [{
                                className: a,
                                id: e.masterCard.get("Id")
                            }]
                        }]
                    };
                    t.store.proxy.extraParams[CMDBuild.core.constants.Proxy.FILTER] = Ext.encode(n), t.store.proxy.extraParams[CMDBuild.core.constants.Proxy.CLASS_NAME] = i.getDetailClassName(), t.store.loadPage(1)
                })
            },
            loadFk: function(e) {
                var i = e.detail.idClass,
                    n = _CMCache.getEntryTypeById(i);
                t(this, i, function(t) {
                    t.store.proxy.url = CMDBuild.proxy.index.Json.card.readAll, t.store.proxy.extraParams.IdClass = i, t.store.proxy.extraParams.CQL = "from " + n.get("name") + " where " + e.detail.name + "=" + e.masterCard.get("Id"), t.store.loadPage(1)
                })
            },
            updateStoreForClassId: function(t, e, i) {
                this.currentClassId = t, _CMCache.getAttributeList(t, Ext.bind(function(t) {
                    this.setColumnsForClass(t), this.setGridSorting(t), e && e(i)
                }, this))
            },
            reset: function() {
                this.store.removeAll(), this.currentClassId = null, this.reconfigure(null, [])
            },
            buildExtraColumns: function() {
                return [{
                    header: "&nbsp",
                    fixed: !0,
                    sortable: !1,
                    renderer: e,
                    align: "center",
                    tdCls: "grid-button",
                    dataIndex: "Fake",
                    menuDisabled: !0,
                    hideable: !1
                }]
            }
        })
    }(),
    function() {
        var t = "detail",
            e = "foreignkey";

        function i(t) {
            return void 0 === t.get ? t.idClass + "_" + t.name : t.get("name")
        }

        function n(t) {
            var e = t.get("cardinality"),
                i = t.get("id");
            return "1:N" == e ? i + "_D" : "N:1" == e ? i + "_I" : void CMDBuild.log.error("Wrong cardinality")
        }
        Ext.define("CMDBuild.view.management.classes.masterDetails.CMCardMasterDetail", {
            extend: "Ext.panel.Panel",
            uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.classes.tabs.MasterDetail"],
            localCacheSimpleTables: [],
            editable: !0,
            eventType: "card",
            eventmastertype: "class",
            currentClass: void 0,
            constructor: function() {
                var t = {};
                t[CMDBuild.core.constants.Proxy.ACTIVE] = !0, CMDBuild.proxy.management.classes.tabs.MasterDetail.readAllClasses({
                    params: t,
                    scope: this,
                    success: function(t, e, i) {
                        i = i[CMDBuild.core.constants.Proxy.RESPONSE], Ext.isArray(i) && !Ext.isEmpty(i) && (i = Ext.Array.filter(i, function(t, e, i) {
                            return t[CMDBuild.core.constants.Proxy.TABLE_TYPE] == CMDBuild.core.constants.Global.getTableTypeSimpleTable()
                        }, this), Ext.isArray(i) && !Ext.isEmpty(i) && Ext.Array.each(i, function(t, e, i) {
                            Ext.isObject(t) && !Ext.Object.isEmpty(t) && (this.localCacheSimpleTables[t[CMDBuild.core.constants.Proxy.NAME]] = t)
                        }, this))
                    }
                }), this.addDetailButton = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card", {
                    classId: void 0,
                    baseText: CMDBuild.Translation.management.moddetail.adddetail,
                    textPrefix: CMDBuild.Translation.management.moddetail.adddetail
                }), this.detailGrid = new CMDBuild.Management.MasterDetailCardGrid({
                    editable: this.editable,
                    cls: "cmdb-border-right",
                    border: !1,
                    region: "center",
                    columns: [],
                    loadMask: !1,
                    cmAdvancedFilter: !1,
                    cmAddGraphColumn: !1
                }), this.tabs = new CMDBuild.view.common.CMSideTabPanel({
                    region: "east"
                }), Ext.apply(this, {
                    border: !1,
                    frame: !1
                }), this.callParent(arguments)
            },
            initComponent: function() {
                Ext.apply(this, {
                    layout: "border",
                    tbar: [this.addDetailButton],
                    items: [this.detailGrid, this.tabs]
                }), this.callParent(arguments)
            },
            loadDetailsAndFKThenBuildSideTabs: function(a) {
                this.buildingTabsDetails = !0, this.addDetailButton.disable();
                var o = _CMCache.getMasterDetailsForClassId(a);
                this.disable(), this.empty = !0, this.details = {}, this.details[t] = {}, this.details[e] = {};
                for (var r = 0, s = o.length; r < s; r++) {
                    var l = o[r];
                    l.directedDomain = n(l), this.details[t][i(l)] = l
                }
                var d = {};
                d[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(a), CMDBuild.proxy.management.classes.tabs.MasterDetail.readForeignKeyTargetingClass({
                    params: d,
                    loadMask: !1,
                    scope: this,
                    success: function(n, a, o) {
                        this.details[e] = {}, CMDBuild.clearComponent(this.tabs);
                        for (var r = 0, s = o.length; r < s; ++r) {
                            var l = o[r];
                            this.details[e][i(l)] = l
                        }
                        this.buildingTabsDetails = !1, Ext.Object.isEmpty(this.details[e]) && Ext.Object.isEmpty(this.details[t]) ? this.fireEvent("empty") : (this.empty = !1, this.enable(), function() {
                            var i = this.details;

                            function n() {
                                CMDBuild.clearComponent(this.tabs);
                                for (var n, a = Ext.apply(i[t], i[e]), o = "", r = "", s = "", l = function(t) {
                                        var e = [];
                                        for (var i in t) e.push(i);
                                        return Ext.Array.sort(e, function(e, i) {
                                            var n = t[e],
                                                a = t[i],
                                                o = n.data || n,
                                                r = a.data || a,
                                                s = o.md_label || o.description || e,
                                                l = r.md_label || r.description || i;
                                            return s.toUpperCase() > l.toUpperCase()
                                        })
                                    }(a), d = 0, c = l.length; d < c; d++) {
                                    var r = l[d];
                                    if (void 0 === (n = a[r]).get) {
                                        var u = {};
                                        !Ext.isString(n.owner) || Ext.isEmpty(n.owner) || Ext.isEmpty(this.localCacheSimpleTables[n.owner]) || (u = this.localCacheSimpleTables[n.owner]), s = e, o = Ext.Object.isEmpty(u) ? n.description : u[CMDBuild.core.constants.Proxy.TEXT]
                                    } else s = t, o = n.get("md_label") || n.get("description");
                                    var h = !0;
                                    if (this.delegate.superController.selectedAccordionNode.data.description) {
                                        var C = this.delegate.superController.selectedAccordionNode.data.description;
                                        n.data && ("N:1" == n.data.cardinality && n.data.disabled2.length > 0 && -1 != n.data.disabled2.indexOf(C) && (h = !1), "1:N" == n.data.cardinality && n.data.disabled1.length > 0 && -1 != n.data.disabled1.indexOf(C) && (h = !1))
                                    }
                                    h && this.tabs.addTabFor({
                                        title: o,
                                        tabLabel: o,
                                        detailType: s,
                                        detailId: r,
                                        on: function() {}
                                    }, s)
                                }
                                this.mon(this.tabs, "afterlayout", function() {
                                    this.tabs.activateFirst()
                                }, this, {
                                    single: !0
                                }), this.doLayout()
                            }
                            this.isVisible() ? n.call(this) : this.on("show", n, this, {
                                single: !0
                            })
                        }.call(this))
                    }
                })
            },
            selectDetail: function(t) {
                var e = _CMCache.getEntryTypeById(function(t) {
                    var e = t.get("cardinality"); {
                        if ("1:N" == e) return t.get("idClass2");
                        if ("N:1" == e) return t.get("idClass1")
                    }
                }(t));
                e && this.addDetailButton.updateForEntry(e)
            },
            selectForeignKey: function(t) {
                var e = _CMCache.getEntryTypeById(t.idClass);
                e && this.addDetailButton.updateForEntry(e)
            },
            resetDetailGrid: function() {
                this.detailGrid.reset()
            },
            activateFirstTab: function() {
                this.tabs.activateFirst()
            },
            updateGrid: function(e, i) {
                e == t ? this.detailGrid.loadDetails(i) : this.detailGrid.loadFk(i)
            },
            loadDetailCardList: function(t, e, i, n, a, o) {
                this.actualAttributeList = t, this.idDomain = n, this.detailGrid.loadDetailCardList({
                    directedDomain: n,
                    cardId: e,
                    classId: i,
                    classAttributes: t,
                    className: this.currentDetail.name,
                    superclass: a,
                    classType: o
                })
            },
            loadFKCardList: function(t, e, i, n) {
                this.detailGrid.loadFKCardList(t, e, i, n), this.isLoaded = !0
            },
            reload: function() {
                this.detailGrid.reload()
            },
            onAddCardButtonClick: function() {
                _deprecated("onAddCardButtonClick", this), this.disable()
            },
            onClassSelected: function() {
                _deprecated("onClassSelected", this)
            }
        })
    }(), Ext.define("CMDBuild.view.management.dashboard.CMModDashboard", {
        extend: "Ext.panel.Panel",
        border: !0,
        frame: !1,
        layout: "card",
        initComponent: function() {
            this.renderdDashboards = {}, this.dashbaord = null, Ext.apply(this, {
                tools: [Ext.create("CMDBuild.view.common.panel.gridAndForm.tools.Properties", {
                    style: {}
                })]
            }), this.callParent(arguments)
        },
        buildDashboardColumns: function(t) {
            if (t)
                if (l = this, d = t.get("description"), c = CMDBuild.Translation.administration.modDashboard.title, d && (c += " - " + d), l.setTitle(c), this.renderdDashboards[t.getId()]) this.getLayout().setActiveItem(this.renderdDashboards[t.getId()]);
                else {
                    var e = t.getColumns(),
                        i = [],
                        n = this;
                    this.dashbaord = t;
                    for (var a, o = 0, r = e.length; o < r; ++o) a = e[o], i.push(new CMDBuild.view.management.dashboard.CMDashboardColumn({
                        columnWidth: a.width,
                        charts: a.charts,
                        items: [],
                        split: !0,
                        listeners: {
                            render: function(t) {
                                n.delegate && n.delegate.onColumnRender(t)
                            }
                        }
                    }));
                    var s = new Ext.app.PortalPanel({
                        items: i
                    });
                    this.renderdDashboards[t.getId()] = s, this.add(s), this.getLayout().setActiveItem(s)
                }
            var l, d, c
        },
        setDelegate: function(t) {
            this.delegate = t
        }
    }), Ext.define("CMDBuild.controller.management.classes.CMModCardSubController", {
        mixins: {
            observable: "Ext.util.Observable"
        },
        constructor: function(t, e) {
            if (this.mixins.observable.constructor.call(this, arguments), void 0 === t) throw "OOO snap, you have not passed a view to me";
            this.view = t, this.view.delegate = this, this.superController = e, this.card = null, this.entryType = null, this.buildCardModuleStateDelegate()
        },
        onEntryTypeSelected: function(t) {
            this.entryType = t
        },
        onCardSelected: function(t) {
            this.card = t
        },
        onAddCardButtonClick: function(t) {},
        onAbortCardClick: function() {
            this.superController.onAbortCardClick()
        },
        onModifyCardClick: function() {
            this.superController.onModifyCardClick()
        },
        onShowGraphClick: function() {
            Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.graph.Window", {
                parentDelegate: this,
                classId: this.card.get("IdClass"),
                cardId: this.card.get("Id")
            })
        },
        onCloneCard: function() {
            this.view && this.view.disable()
        },
        buildCardModuleStateDelegate: function() {
            var t = this;
            if (this.cardStateDelegate = new CMDBuild.state.CMCardModuleStateDelegate, this.cardStateDelegate.onEntryTypeDidChange = function(e, i) {
                    t.onEntryTypeSelected(i)
                }, this.cardStateDelegate.onModifyCardClick = function(e) {
                    t.onModifyCardClick()
                }, this.cardStateDelegate.onCardDidChange = function(e, i) {
                    Ext.suspendLayouts(), t.onCardSelected(i), Ext.resumeLayouts()
                }, _CMCardModuleState.addDelegate(this.cardStateDelegate), this.view) {
                t = this;
                this.mon(t.view, "destroy", function(e) {
                    _CMCardModuleState.removeDelegate(t.cardStateDelegate), delete t.cardStateDelegate
                })
            }
        }
    }), Ext.define("CMDBuild.controller.management.common.CMModClassAndWFCommons", {
        getFormForTemplateResolver: function() {
            var t = null;
            if (this.view) {
                var e = this.view.getWidgetManager();
                e && "function" == typeof e.getFormForTemplateResolver && (t = e.getFormForTemplateResolver() || null)
            }
            return t
        }
    }), Ext.define("CMDBuild.controller.management.classes.CMCardBrowserTreeDataSource", {
        uses: ["CMDBuild.proxy.gis.Gis"],
        GEOSERVER: "GeoServer",
        constructor: function(t, e) {
            this.navigationPanel = t, this.mapState = e, this.configuration = CMDBuild.configuration.gis.get("cardBrowserByDomainConfiguration"), this.refresh(), this.callParent(arguments)
        },
        refresh: function() {
            var t = this;
            t.navigationPanel.setRootNode({
                loading: !0,
                text: CMDBuild.Translation.common.loading
            }), CMDBuild.proxy.gis.Gis.expandDomainTree({
                loadMask: !1,
                success: function(e, i, n) {
                    ! function t(e, i) {
                        for (var n = e && e.children || [], a = 0; a < n.length; a++) {
                            var o = n[a];
                            t(o, i && !(!0 === o.baseNode && a > 0))
                        }
                        e.checked = i
                    }(n.root, !0), t.navigationPanel.setRootNode(n.root), t.navigationPanel.loaded()
                }
            })
        }
    }),
    function() {
        function t(t) {
            this.widgetControllerManager && this.widgetControllerManager.buildControllers(t)
        }
        Ext.define("CMDBuild.controller.management.classes.CMBaseCardPanelController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            mixins: {
                observable: "Ext.util.Observable"
            },
            uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.Message", "CMDBuild.controller.management.classes.StaticsController", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.Card"],
            cardDataProviders: [],
            constructor: function(t, e, i) {
                this.callParent(arguments), this.mixins.observable.constructor.call(this, arguments);
                var n = this.view.CMEVENTS;
                if (i) this.widgetControllerManager = i;
                else {
                    var a = new CMDBuild.view.management.common.widgets.CMWidgetManager(this.view);
                    this.widgetControllerManager = new CMDBuild.controller.management.common.CMWidgetManagerController(a)
                }
                this.widgetControllerManager.setDelegate(this), this.CMEVENTS = {
                    cardSaved: "cm-card-saved",
                    abortedModify: "cm-card-modify-abort",
                    editModeDidAcitvate: n.editModeDidAcitvate,
                    displayModeDidActivate: n.displayModeDidActivate
                }, this.addEvents(this.CMEVENTS.cardSaved, this.CMEVENTS.abortedModify, n.editModeDidAcitvate, n.displayModeDidActivate), this.relayEvents(this.view, [n.editModeDidAcitvate, n.displayModeDidActivate]), this.mon(this.view, n.modifyCardButtonClick, function() {
                    this.onModifyCardClick.apply(this, arguments)
                }, this), this.mon(this.view, n.saveCardButtonClick, function() {
                    this.onSaveCardClick.apply(this, arguments)
                }, this), this.mon(this.view, n.abortButtonClick, function() {
                    this.onAbortCardClick.apply(this, arguments)
                }, this), this.mon(this.view, n.widgetButtonClick, this.onWidgetButtonClick, this), this.mon(this.view, n.editModeDidAcitvate, this.onCardGoesInEdit, this)
            },
            onEntryTypeSelected: function() {
                this.unlockCard(), this.view.isInEditing() && this.view.displayMode(), this.callParent(arguments), this.loadFields(this.entryType.get("id")), this.widgetControllerManager && this.widgetControllerManager.removeAll()
            },
            onCardSelected: function(e) {
                var i = this;
                if (this.unlockCard(), this.callParent(arguments), this.view.isInEditing() && this.view.displayMode(), this.view.reset(), this.entryType && this.card) {
                    Ext.defer(t, 1, this, [e]), this.loadFields(this.card.get("IdClass"), function() {
                        i.loadCard(!0)
                    }), Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(e) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                        moduleId: "class",
                        entryType: {
                            description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                            id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                            object: _CMCardModuleState.entryType
                        },
                        item: {
                            description: e.get("Description") || e.raw.Description || e.get("Code") || e.raw.Code,
                            id: e.get("Id"),
                            object: e
                        }
                    })
                }
            },
            onModifyCardClick: function() {
                if (this.isEditable(this.card)) {
                    var t = this;
                    this.lockCard(function() {
                        t.loadCard(!0, null, function() {
                            t.view.editMode()
                        })
                    })
                }
                this.callParent(arguments)
            },
            onSaveCardClick: function() {
                var t = {};
                t[CMDBuild.core.constants.Proxy.CARD_ID] = this.cloneCard ? -1 : this.card.get("Id"), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.card.get("IdClass")),
                    function(t, e) {
                        for (var i in t.cardDataProviders)
                            if ("function" == typeof(i = t.cardDataProviders[i]).getCardData) {
                                var n = i.getCardData(e);
                                n && (e[i.getCardDataName()] = n)
                            }
                    }(this, t),
                    function(t) {
                        var e = t.view.getForm(),
                            i = CMDBuild.controller.management.classes.StaticsController.getInvalidAttributeAsHTML(e); {
                            if (null != i) {
                                var n = Ext.String.format('<p class="{0}">{1}</p>', CMDBuild.core.constants.Global.getErrorMsgCss(), CMDBuild.Translation.errors.invalid_attributes);
                                return CMDBuild.core.Message.error(null, n + i, !1), !1
                            }
                            return !0
                        }
                    }(this) && this.doFormSubmit(t)
            },
            doFormSubmit: function(t) {
                CMDBuild.proxy.Card.update({
                    params: Ext.Object.merge(t, this.view.getForm().getValues()),
                    scope: this,
                    success: function(t, e, i) {
                        var n = {};
                        n.result = i, n.params = e.params, this.onSaveSuccess(this.view.getForm(), n)
                    }
                })
            },
            onSaveSuccess: function(t, e) {
                this.view.displayMode();
                var i = {
                    Id: e.result[CMDBuild.core.constants.Proxy.ID] || this.card.get("Id"),
                    IdClass: this.entryType.get(CMDBuild.core.constants.Proxy.ID)
                };
                this.fireEvent(this.CMEVENTS.cardSaved, i)
            },
            onAbortCardClick: function() {
                this.card && -1 == this.card.get("Id") ? _CMCardModuleState.setCard(_CMCardModuleState.getPreviousCard()) : this.onCardSelected(this.card), this.callParent(arguments), this.fireEvent(this.CMEVENTS.abortedModify)
            },
            onAddCardButtonClick: function(t) {
                t && (_CMCardModuleState.setPreviousCard(_CMCardModuleState.card), this.onCardSelected(new CMDBuild.DummyModel({
                    IdClass: t,
                    Id: -1
                })), this.view.editMode())
            },
            addCardDataProviders: function(t) {
                this.cardDataProviders.push(t)
            },
            loadFields: function(t, e) {
                var i = this;
                _CMCache.getAttributeList(t, function(t) {
                    i.view.fillForm(t, editMode = !1), e && e()
                })
            },
            loadCard: function(t, e, i) {
                var n, a = this;
                if ((n = e ? e.Id || e.cardId : a.card.get("Id")) && "-1" != n && (t || a.view.hasDomainAttributes())) {
                    if (!e)(e = {})[CMDBuild.core.constants.Proxy.CARD_ID] = a.card.get("Id"), e[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(a.card.get("IdClass"));
                    CMDBuild.proxy.Card.read({
                        params: e,
                        loadMask: !1,
                        success: function(t, e, n) {
                            var o = n.card;
                            a.card && (o = Ext.Object.merge(a.card.raw || a.card.data, o)),
                                function(t, e) {
                                    var i = t;
                                    if (i)
                                        for (var n in i) {
                                            var a = i[n];
                                            for (var o in a) e["_" + n + "_" + o] = a[o]
                                        }
                                }(n.referenceAttributes, o);
                            var r = Ext.create("CMDBuild.DummyModel", o);
                            "function" == typeof i ? i(r) : a.loadCardStandardCallBack(r)
                        }
                    })
                } else a.loadCardStandardCallBack(a.card)
            },
            loadCardStandardCallBack: function(t) {
                var e = this;
                e.view.loadCard(t), t && (e.isEditable(t) ? -1 == t.get("Id") || e.cmForceEditing ? (e.view.editMode(), e.cmForceEditing = !1) : e.view.displayMode(enableTBar = !0) : e.view.displayModeForNotEditableCard())
            },
            isEditable: function(t) {
                return _CMUtils.getEntryTypePrivilegesByCard(t).create
            },
            setWidgetManager: function(t) {
                this.widgetManager = t
            },
            onWidgetButtonClick: function(t) {
                this.widgetControllerManager && this.widgetControllerManager.onWidgetButtonClick(t)
            },
            onCardGoesInEdit: function() {
                this.widgetControllerManager && this.widgetControllerManager.onCardGoesInEdit()
            },
            lockCard: function(t) {
                CMDBuild.configuration.instance.get("enableCardLock") ? this.card && this.card.get("Id") >= 0 && CMDBuild.proxy.Card.lock({
                    params: {
                        id: this.card.get("Id")
                    },
                    loadMask: !1,
                    success: t
                }) : t()
            },
            unlockCard: function() {
                CMDBuild.configuration.instance.get("enableCardLock") && this.card && this.view.isInEditing() && this.card.get("Id") >= 0 && CMDBuild.proxy.Card.unlock({
                    params: {
                        id: this.card.get("Id")
                    },
                    loadMask: !1
                })
            },
            onCloneCard: Ext.emptyFn,
            ensureEditPanel: function() {
                this.view.ensureEditPanel()
            }
        }), Ext.define("CMDBuild.controller.management.classes.CMCardDataProvider", {
            cardDataName: null,
            getCardDataName: function() {
                return this.cardDataName
            },
            getCardData: function() {
                throw "You have to implement the getCardData method in " + this.$className
            }
        })
    }(),
    function() {
        function t(t, e) {
            var i = Ext.create("CMDBuild.view.management.common.CMCardWindow", {
                cmEditMode: e,
                withButtons: e,
                title: t.get(CMDBuild.core.constants.Proxy.LABEL) + " - " + t.get("dst_desc")
            });
            e && i.on("destroy", function() {
                this.fireEvent(this.CMEVENTS.serverOperationSuccess), this.loadData()
            }, this, {
                single: !0
            }), new CMDBuild.controller.management.common.CMCardWindowController(i, {
                entryType: t.get("dst_cid"),
                card: t.get("dst_id"),
                cmEditMode: e
            }), i.show()
        }

        function e(t, e, i, n, a, o) {
            var r = a.target.className;
            this.callBacks[r] && this.callBacks[r].call(this, e)
        }

        function i(t, e, i, n, a, o) {
            this.onFollowRelationClick(e)
        }

        function n(t) {
            var e = {};
            return "_1" == t ? (e.slaveSide = "_2", e.masterSide = "_1") : (e.slaveSide = "_1", e.masterSide = "_2"), e
        }
        Ext.define("CMDBuild.controller.management.classes.CMCardRelationsController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            uses: ["CMDBuild.core.Message", "CMDBuild.proxy.Relation"],
            controllerWindowAttachment: void 0,
            constructor: function(t, n) {
                this.mixins.observable.constructor.call(this, arguments), this.callParent(arguments), this.callBacks = {
                    "action-relation-go": this.onFollowRelationClick,
                    "action-relation-edit": this.onEditRelationClick,
                    "action-relation-delete": this.onDeleteRelationClick,
                    "action-relation-editcard": this.onEditCardClick,
                    "action-relation-viewcard": this.onViewCardClick,
                    "action-relation-attach": this.onOpenAttachmentClick
                }, this.view.getStore().getRootNode().on("append", function(t, e, i, n) {
                    1 == e.getDepth() && e.on("expand", this.onDomainNodeExpand, this, {
                        single: !0
                    })
                }, this), this.mon(this.view, this.view.CMEVENTS.openGraphClick, this.onShowGraphClick, this), this.mon(this.view, this.view.CMEVENTS.addButtonClick, this.onAddRelationButtonClick, this), this.mon(this.view, "beforeitemclick", e, this), this.mon(this.view, "itemdblclick", i, this), this.mon(this.view, "activate", this.loadData, this), this.CMEVENTS = {
                    serverOperationSuccess: "cm-server-success"
                }, this.addEvents(this.CMEVENTS.serverOperationSuccess), this.controllerWindowAttachment = Ext.create("CMDBuild.controller.management.classes.common.attachment.Window", {
                    parentDelegate: this
                })
            },
            onDomainNodeExpand: function(t, e, i, n) {
                if (t.get("relations_size") > CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.RELATION_LIMIT)) {
                    t.removeAll();
                    var a = {};
                    a[CMDBuild.core.constants.Proxy.CARD_ID] = this.getCardId(), a[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.getClassId()), a[CMDBuild.core.constants.Proxy.DOMAIN_ID] = t.get("dom_id"), a[CMDBuild.core.constants.Proxy.SRC] = t.get("src"), this.view.setLoading(!0), CMDBuild.proxy.Relation.readAll({
                        params: a,
                        scope: this,
                        success: function(e, i, n) {
                            this.view.setLoading(!1), this.view.suspendLayouts(), this.view.convertRelationInNodes(n.domains[0].relations, t.data.dom_id, t.data.src, t.data, t), this.view.resumeLayouts(!0)
                        }
                    })
                }
            },
            onEntryTypeSelected: function(t) {
                this.callParent(arguments), this.card = null, (Ext.isEmpty(this.entryType) || "simpletable" == this.entryType.get(CMDBuild.core.constants.Proxy.TABLE_TYPE)) && (this.entryType = null), this.view.disable(), this.view.clearStore()
            },
            onCardSelected: function(t) {
                this.callParent(arguments), this.view.clearStore(), this.view.disable(), Ext.isEmpty(t) || Ext.isEmpty(this.entryType) || (this.updateCurrentClass(t), this.loadData(), this.view.enable())
            },
            updateCurrentClass: function(t) {
                var e = t.get("IdClass"),
                    i = _CMCache.getEntryTypeById(e);
                this.currentClass != i && (i && "simpletable" != i.get(CMDBuild.core.constants.Proxy.TABLE_TYPE) || (i = null), this.currentClass = i, !Ext.isEmpty(i) && Ext.isFunction(i.get) && this.view.addRelationButton.onEntryTypeSelect(i.get(CMDBuild.core.constants.Proxy.NAME)))
            },
            loadData: function() {
                if (null != this.card && (n = this.view).ownerCt.layout.getActiveItem().id == n.id) {
                    var t = this,
                        e = this.view.getEl();
                    e && e.mask();
                    var i = {};
                    i[CMDBuild.core.constants.Proxy.CARD_ID] = this.getCardId(), i[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.getClassId()), i.domainlimit = CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.RELATION_LIMIT), CMDBuild.proxy.Relation.readAll({
                        params: i,
                        scope: this,
                        success: function(i, n, a) {
                            e.unmask(), this.view.fillWithData(a.domains);
                            var o = [];
                            Ext.Array.forEach(a.domains, function(t, e, i) {
                                var n = _CMCache.getDomainById(t[CMDBuild.core.constants.Proxy.ID]);
                                1 == t[CMDBuild.core.constants.Proxy.RELATIONS_SIZE] && !Ext.isEmpty(n) && Ext.isFunction(n.get) && ("N:1" == n.get(CMDBuild.core.constants.Proxy.CARDINALITY) && "_1" == t[CMDBuild.core.constants.Proxy.SRC] || "1:N" == n.get(CMDBuild.core.constants.Proxy.CARDINALITY) && "_2" == t[CMDBuild.core.constants.Proxy.SRC] || "1:1" == n.get(CMDBuild.core.constants.Proxy.CARDINALITY)) && o.push(n.get(CMDBuild.core.constants.Proxy.ID))
                            }, this), Ext.Array.forEach(this.view.addRelationButton.menu.items.items, function(e, i, n) {
                                Ext.Array.contains(o, e.domain.dom_id) ? e.setHandler(function() {
                                    CMDBuild.core.Message.error(CMDBuild.Translation.common.failure, CMDBuild.Translation.errors.domainCardinalityViolation, !1)
                                }) : e.setHandler(function(e, i) {
                                    t.view.addRelationButton.fireEvent("cmClick", e.domain)
                                })
                            }, this)
                        }
                    })
                }
                var n
            },
            getCardId: function() {
                return this.card.get("Id")
            },
            getClassId: function() {
                return this.card.get("IdClass")
            },
            onFollowRelationClick: function(t) {
                t.getDepth() > 1 && CMDBuild.global.controller.MainViewport.cmfg("mainViewportCardSelect", {
                    Id: String(t.get("dst_id")),
                    IdClass: String(t.get("dst_cid"))
                })
            },
            onAddRelationButtonClick: function(t) {
                var e = this,
                    i = n(t.src),
                    a = _CMCache.getDomainById(t.dom_id),
                    o = _CMCache.getEntryTypeById(t.dst_cid),
                    r = !1,
                    s = "_1" == t[CMDBuild.core.constants.Proxy.SRC] ? "_2" : "_1";
                a && (r = a.isMany(s));
                var l = Ext.create("CMDBuild.view.management.classes.relations.CMEditRelationWindow", {
                    domain: a,
                    classObject: o,
                    sourceCard: this.card,
                    src: t[CMDBuild.core.constants.Proxy.SRC],
                    relation: {
                        dst_cid: t.dst_cid,
                        dom_id: t.dom_id,
                        rel_id: -1,
                        masterSide: i.masterSide,
                        slaveSide: i.slaveSide
                    },
                    selModel: Ext.create("CMDBuild.selection.CMMultiPageSelectionModel", {
                        mode: r ? "MULTI" : "SINGLE",
                        avoidCheckerHeader: !0,
                        idProperty: "Id"
                    }),
                    successCb: function() {
                        e.onAddRelationSuccess()
                    }
                });
                this.mon(l, "destroy", function() {
                    this.loadData()
                }, this, {
                    single: !0
                }), l.show({
                    callback: function() {
                        l.grid.getStore().loadPage(1, {
                            callback: function(t, i, n) {
                                if (l.setLoading(!0), "N:N" != a.get(CMDBuild.core.constants.Proxy.CARDINALITY)) {
                                    var r = [];
                                    l.grid.getStore().each(function(t) {
                                        r.push(t.get(CMDBuild.core.constants.Proxy.ID))
                                    });
                                    var d = {};
                                    d[CMDBuild.core.constants.Proxy.DOMAIN_NAME] = a.get(CMDBuild.core.constants.Proxy.NAME), d[CMDBuild.core.constants.Proxy.CLASS_NAME] = o.get(CMDBuild.core.constants.Proxy.NAME), d[CMDBuild.core.constants.Proxy.CARDS] = Ext.encode(r), d[CMDBuild.core.constants.Proxy.DOMAIN_DIRECTION] = s, CMDBuild.proxy.Relation.getAlreadyRelatedCards({
                                        params: d,
                                        loadMask: !1,
                                        scope: this,
                                        success: function(t, i, n) {
                                            if (n = n[CMDBuild.core.constants.Proxy.RESPONSE], Ext.isArray(n)) {
                                                var r = [];
                                                if (Ext.Array.forEach(n, function(t, e, i) {
                                                        if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) {
                                                            var n = t[CMDBuild.core.constants.Proxy.ID];
                                                            Ext.isNumber(n) && !Ext.isEmpty(n) && r.push(n)
                                                        }
                                                    }, this), Ext.isArray(r) && !Ext.isEmpty(r)) {
                                                    var d = {};
                                                    d[CMDBuild.core.constants.Proxy.ATTRIBUTES] = Ext.encode(["Description"]), d[CMDBuild.core.constants.Proxy.CLASS_NAME] = o.get(CMDBuild.core.constants.Proxy.NAME), d[CMDBuild.core.constants.Proxy.FILTER] = Ext.encode({
                                                        attribute: {
                                                            simple: {
                                                                attribute: "Id",
                                                                operator: "in",
                                                                value: r,
                                                                parameterType: "fixed"
                                                            }
                                                        },
                                                        relation: [{
                                                            destination: _CMCache.getEntryTypeNameById(e.getClassId()),
                                                            direction: s,
                                                            domain: a.get(CMDBuild.core.constants.Proxy.NAME),
                                                            source: o.get(CMDBuild.core.constants.Proxy.NAME),
                                                            type: "any"
                                                        }]
                                                    }), CMDBuild.proxy.Relation.getCards({
                                                        params: d,
                                                        loadMask: !1,
                                                        scope: this,
                                                        success: function(t, e, i) {
                                                            if (i = i[CMDBuild.core.constants.Proxy.ROWS], Ext.isArray(i) && !Ext.isEmpty(i)) {
                                                                var n = [];
                                                                Ext.Array.forEach(i, function(t, e, i) {
                                                                    if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) {
                                                                        var a = t.Id;
                                                                        Ext.isNumber(a) && !Ext.isEmpty(a) && n.push(a)
                                                                    }
                                                                }, this), l.grid.getView().getRowClass = function(t, e, i, a) {
                                                                    return Ext.Array.contains(n, t.get("Id")) ? "grid-row-disabled" : null
                                                                }, l.grid.getView().refresh(), l.grid.getSelectionModel().addListener("beforeselect", function(t, e, i, a) {
                                                                    return !Ext.Array.contains(n, e.get("Id"))
                                                                })
                                                            }
                                                        }
                                                    })
                                                }
                                            } else _error("onAddRelationButtonClick(): unmanaged response", e, decodedResult);
                                            l.setLoading(!1)
                                        }
                                    })
                                } else {
                                    var c = {};
                                    c[CMDBuild.core.constants.Proxy.CARD_ID] = e.getCardId(), c[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(e.getClassId()), CMDBuild.proxy.Relation.readAll({
                                        params: c,
                                        loadMask: !1,
                                        scope: this,
                                        success: function(t, e, i) {
                                            if (i = i[CMDBuild.core.constants.Proxy.DOMAINS], Ext.isArray(i) && !Ext.isEmpty(i)) {
                                                var n = [],
                                                    o = a.get(CMDBuild.core.constants.Proxy.ID),
                                                    r = Ext.Array.findBy(i, function(t, e) {
                                                        return !(!Ext.isObject(t) || Ext.Object.isEmpty(t)) && t[CMDBuild.core.constants.Proxy.ID] == o
                                                    }, this);
                                                Ext.isObject(r) && !Ext.Object.isEmpty(r) && (Ext.Array.forEach(r[CMDBuild.core.constants.Proxy.RELATIONS], function(t, e, i) {
                                                    Ext.isObject(t) && !Ext.Object.isEmpty(t) && Ext.isNumber(t.dst_id) && !Ext.isEmpty(t.dst_id) && n.push(t.dst_id)
                                                }, this), l.grid.getView().getRowClass = function(t, e, i, a) {
                                                    return Ext.Array.contains(n, t.get("Id")) ? "grid-row-disabled" : null
                                                }, l.grid.getView().refresh(), l.grid.getSelectionModel().addListener("beforeselect", function(t, e, i, a) {
                                                    return !Ext.Array.contains(n, e.get("Id"))
                                                }))
                                            }
                                            l.setLoading(!1)
                                        }
                                    })
                                }
                            }
                        })
                    }
                })
            },
            onAddRelationSuccess: function() {
                this.defaultOperationSuccess()
            },
            onEditRelationClick: function(t) {
                var e = this,
                    i = t.raw || t.getData(),
                    a = _CMCache.getEntryTypeById(t.get("dst_cid")),
                    o = _CMCache.getDomainById(t.get("dom_id")),
                    r = n(t.get(CMDBuild.core.constants.Proxy.SRC)),
                    s = Ext.create("CMDBuild.view.management.classes.relations.CMEditRelationWindow", {
                        domain: o,
                        classObject: a,
                        sourceCard: this.card,
                        relation: {
                            rel_attr: i.attr_as_obj,
                            dst_cid: t.get("dst_cid"),
                            dst_id: t.get("dst_id"),
                            dom_id: t.get("dom_id"),
                            rel_id: t.get("rel_id"),
                            masterSide: r.masterSide,
                            slaveSide: r.slaveSide
                        },
                        filterType: this.view.id,
                        successCb: function() {
                            e.onEditRelationSuccess()
                        },
                        selModel: Ext.create("CMDBuild.selection.CMMultiPageSelectionModel", {
                            mode: "SINGLE",
                            idProperty: "Id"
                        })
                    });
                this.mon(s, "destroy", function() {
                    this.loadData()
                }, this, {
                    single: !0
                }), s.show({
                    scope: this,
                    callback: function() {
                        t.set({
                            Code: t.get("dst_code"),
                            Description: t.get("dst_desc"),
                            Id: t.get("dst_id"),
                            id: t.get("dst_id"),
                            IdClass: t.get("dst_cid")
                        }), s.grid.getStore().loadPage(1, {
                            callback: function(e, i, n) {
                                Ext.isEmpty(t) || s.grid.getSelectionModel().select(t)
                            }
                        })
                    }
                })
            },
            onEditRelationSuccess: function() {
                this.defaultOperationSuccess()
            },
            onDeleteRelationClick: function(t) {
                var e = this,
                    i = n(t.get(CMDBuild.core.constants.Proxy.SOURCE));
                Ext.Msg.confirm(CMDBuild.Translation.attention, CMDBuild.Translation.management.modcard.delete_relation_confirm, function(n) {
                    if ("yes" == n) {
                        var a = _CMCache.getDomainById(t.get("dom_id")),
                            o = {},
                            r = {};
                        o[CMDBuild.core.constants.Proxy.DOMAIN_NAME] = a.getName(), o[CMDBuild.core.constants.Proxy.RELATION_ID] = t.get("rel_id"), o.master = i.masterSide;
                        var s = {};
                        s[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(e.card.get("IdClass")), s[CMDBuild.core.constants.Proxy.CARD_ID] = e.card.get("Id"), r[i.masterSide] = [s];
                        var l = {};
                        l[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(t.get("dst_cid")), l[CMDBuild.core.constants.Proxy.CARD_ID] = t.get("dst_id"), r[i.slaveSide] = [l], o[CMDBuild.core.constants.Proxy.ATTRIBUTES] = Ext.encode(r), CMDBuild.core.LoadMask.show(), CMDBuild.proxy.Relation.remove({
                            params: o,
                            loadMask: !1,
                            scope: this,
                            success: this.onDeleteRelationSuccess,
                            callback: function() {
                                CMDBuild.core.LoadMask.hide(), this.loadData()
                            }
                        })
                    }
                }, this)
            },
            onDeleteRelationSuccess: function() {
                this.defaultOperationSuccess()
            },
            defaultOperationSuccess: function() {
                this.fireEvent(this.CMEVENTS.serverOperationSuccess)
            },
            onEditCardClick: function(e) {
                t.call(this, e, !0)
            },
            onViewCardClick: function(e) {
                t.call(this, e, !1)
            },
            onOpenAttachmentClick: function(t) {
                if (!Ext.isObject(t) || Ext.Object.isEmpty(t)) return _error("onOpenAttachmentClick(): unmanaged model parameter", this, t);
                this.controllerWindowAttachment.cmfg("panelModuleAttachmentWindowConfigureAndShow", {
                    entityId: t.get("dst_cid"),
                    id: t.get("dst_id")
                })
            }
        })
    }(),
    function() {
        var t = "detail",
            e = "foreignkey";

        function i(t, e, i, n, a, o) {
            CMDBuild.global.controller.MainViewport.cmfg("mainViewportCardSelect", {
                Id: e.get("Id"),
                IdClass: e.get("IdClass")
            })
        }

        function n() {
            if (null != this.card) {
                var i = {
                    masterCard: this.card
                };
                null != this.currentDetail ? (i.detail = this.currentDetail, this.view.updateGrid(t, i)) : null != this.currentForeignKey ? (i.detail = this.currentForeignKey, this.view.updateGrid(e, i)) : this.view.activateFirstTab()
            }
        }

        function a(e) {
            if (1 != this.view.buildingTabsDetails && this.currentTab !== e && o(this.view)) {
                var i = e.targetPanel,
                    a = i.detailType,
                    r = this.view.details[a][i.detailId];
                this.view.addDetailButton.enable(), this.currentTab = e, a == t ? function(t) {
                    this.currentForeignKey = void 0, this.currentDetail = t, this.view.selectDetail(t)
                }.call(this, r) : function(t) {
                    this.currentDetail = void 0, this.currentForeignKey = t, this.view.selectForeignKey(t)
                }.call(this, r), n.call(this)
            }
        }

        function o(t) {
            return t.ownerCt.layout.getActiveItem().id == t.id
        }

        function r(t, e, i, n, a, o) {
            var r = a.target.className;
            this.callBacks[r] && this.callBacks[r].call(this, e)
        }
        Ext.define("CMDBuild.controller.management.classes.masterDetails.CMMasterDetailsController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            uses: ["CMDBuild.proxy.Card"],
            controllerWindowAttachment: void 0,
            controllerWindowNote: void 0,
            constructor: function(t, e) {
                this.mixins.observable.constructor.call(this, arguments), this.callParent(arguments), this.view = t, this.superController = e, this.entryType = null, this.card = null, this.currentForeignKey = null, this.currentDetail = null, this.mon(this.view.tabs, "click", a, this), this.mon(this.view.detailGrid, "beforeitemclick", r, this), this.mon(this.view.detailGrid, "itemdblclick", i, this), this.mon(this.view.addDetailButton, "cmClick", this.onAddDetailButtonClick, this), this.addEvents(["empty"]), this.mon(this.view, "empty", function() {
                    this.fireEvent("empty", this.view.isVisible())
                }, this), this.callBacks = {
                    "action-masterdetail-edit": this.onEditDetailClick,
                    "action-masterdetail-show": this.onShowDetailClick,
                    "action-masterdetail-delete": this.onDeleteDetailClick,
                    "action-masterdetail-graph": this.onOpenGraphClick,
                    "action-masterdetail-note": this.onOpenNoteClick,
                    "action-masterdetail-attach": this.onOpenAttachmentClick
                }, this.controllerWindowAttachment = Ext.create("CMDBuild.controller.management.classes.common.attachment.Window", {
                    parentDelegate: this
                }), this.controllerWindowNote = Ext.create("CMDBuild.controller.management.classes.panel.form.tabs.masterDetail.window.Note", {
                    parentDelegate: this
                })
            },
            buildWindow: function(t) {
                return Ext.create("CMDBuild.view.management.common.CMCardWindow", {
                    referencedIdClass: this.card.get("IdClass"),
                    fkAttribute: this.currentForeignKey,
                    masterData: this.card,
                    detail: this.currentDetail,
                    cmEditMode: t.editable,
                    withButtons: t.editable
                })
            },
            onAddDetailButtonClick: function(t) {
                var e = this.buildWindow({
                    entryType: t.classId,
                    editable: !0
                });
                new CMDBuild.controller.management.common.CMAddDetailWindowController(e, {
                    entryType: t.classId,
                    cmEditMode: !0
                }), e.show(), e.mon(e, "destroy", function() {
                    this.view.reload()
                }, this, {
                    single: !0
                })
            },
            onEntryTypeSelected: function(t) {
                this.callParent(arguments), this.currentTab = null, this.currentForeignKey = null, this.currentDetail = null, this.view.loadDetailsAndFKThenBuildSideTabs(this.entryType.get("id")), this.view.resetDetailGrid()
            },
            onCardSelected: function(t) {
                this.callParent(arguments), this.view.setDisabled(this.view.empty), o(this.view) ? n.call(this) : this.view.on("activate", n, this, {
                    single: !0
                })
            },
            onAddCardButtonClick: function(t) {
                this.view.disable()
            },
            onEditDetailClick: function(t) {
                var e = this.buildWindow({
                    editable: !0
                });
                new CMDBuild.controller.management.common.CMDetailWindowController(e, {
                    entryType: t.get("IdClass"),
                    card: t.get("Id"),
                    cmEditMode: !0
                });
                e.mon(e, "destroy", function() {
                    this.view.reload(), 0, delete e
                }, this, {
                    single: !0
                }), e.show()
            },
            onShowDetailClick: function(t) {
                var e = this.buildWindow({
                    editable: !1
                });
                new CMDBuild.controller.management.common.CMDetailWindowController(e, {
                    entryType: t.get("IdClass"),
                    card: t.get("Id"),
                    cmEditMode: !1
                });
                e.mon(e, "destroy", function() {
                    0, delete e
                }, this, {
                    single: !0
                }), e.show()
            },
            onDeleteDetailClick: function(t) {
                Ext.Msg.confirm(CMDBuild.Translation.attention, CMDBuild.Translation.management.modcard.delete_card_confirm, function(t) {
                    if ("yes" != t) return;
                    var a = {};
                    this.currentDetail && (a.domainName = e.currentDetail.get("name"));
                    a.masterClassName = _CMCache.getEntryTypeNameById(n.get("IdClass")), a.masterCardId = n.get("Id"), a.detailClassName = _CMCache.getEntryTypeNameById(i.get("IdClass")), a.detailCardId = i.get("Id"), CMDBuild.core.LoadMask.show(), CMDBuild.proxy.Relation.removeDetail({
                        params: a,
                        loadMask: !1,
                        callback: function() {
                            CMDBuild.core.LoadMask.hide(), e.view.reload()
                        }
                    })
                }, this);
                var e = this,
                    i = t,
                    n = this.card
            },
            onOpenGraphClick: function(t) {
                Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.graph.Window", {
                    parentDelegate: this,
                    classId: t.get("IdClass"),
                    cardId: t.get("id")
                })
            },
            onOpenNoteClick: function(t) {
                this.controllerWindowNote.cmfg("classesFormTabMasterDetailWindowNoteConfigureAndShow", {
                    cardId: t.get(CMDBuild.core.constants.Proxy.ID),
                    className: _CMCache.getEntryTypeNameById(t.get("IdClass"))
                })
            },
            onOpenAttachmentClick: function(t) {
                if (!Ext.isObject(t) || Ext.Object.isEmpty(t)) return _error("onOpenAttachmentClick(): unmanaged model parameter", this, t);
                this.controllerWindowAttachment.cmfg("panelModuleAttachmentWindowConfigureAndShow", {
                    entityId: t.get("IdClass"),
                    id: t.get("Id")
                })
            },
            onTabClick: a,
            activeTabSet: function(t) {
                return this.view.tabs.setActiveTab(t)
            }
        })
    }(),
    function() {
        function t(t) {
            return _CMUtils.getEntryTypePrivilegesByCard(t).write
        }
        Ext.define("CMDBuild.controller.management.classes.CMNoteController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            uses: ["CMDBuild.proxy.Card", "CMDBuild.proxy.management.classes.tabs.Note"],
            constructor: function(t, e) {
                this.mixins.observable.constructor.call(this, arguments), this.callParent(arguments), this.CMEVENTS = {
                    noteWasSaved: "cm-note-saved"
                }, this.mon(this.view, this.view.CMEVENTS.modifyNoteButtonClick, this.onModifyNoteClick, this), this.mon(this.view, this.view.CMEVENTS.saveNoteButtonClick, this.onSaveNoteClick, this), this.mon(this.view, this.view.CMEVENTS.cancelNoteButtonClick, this.onCancelNoteClick, this), this.addEvents(this.addEvents.noteWasSaved)
            },
            onEntryTypeSelected: function() {
                this.unlockCard(), this.callParent(arguments), this.view.disable()
            },
            onCardSelected: function(t) {
                this.unlockCard(), this.callParent(arguments), this.updateView(t), this.disableTheTabBeforeCardSelection(t) ? this.view.disable() : (this.view.enable(), this.view.loadCard(t))
            },
            disableTheTabBeforeCardSelection: function(t) {
                return !t || CMDBuild.Utils.isSimpleTable(t.get("IdClass"))
            },
            updateView: function(t) {
                this.updateViewPrivilegesForCard(t), this.view.reset(), this.view.disableModify()
            },
            updateViewPrivilegesForCard: function(t) {
                var e = _CMUtils.getEntryTypePrivilegesByCard(t);
                this.view.updateWritePrivileges(e.write && !e.crudDisabled.modify)
            },
            onSaveNoteClick: function() {
                var t = this._getSaveParams();
                this.view.getForm().isValid() && this.beforeSave(this.card) && CMDBuild.proxy.management.classes.tabs.Note.update({
                    params: t,
                    scope: this,
                    success: function(t, e, i) {
                        this.view.disableModify(enableToolbar = !0);
                        var n = this.view.syncForms();
                        this.syncSavedNoteWithModel(this.card, n), this.fireEvent(this.CMEVENTS.noteWasSaved, this.card)
                    }
                })
            },
            onCancelNoteClick: function() {
                this.onCardSelected(this.card), this.view.disableModify(couldModify = t(this.card))
            },
            onModifyNoteClick: function() {
                if (t(this.card)) {
                    var e = this;
                    this.lockCard(function() {
                        e.view.enableModify()
                    })
                }
            },
            beforeSave: function(t) {
                return !0
            },
            _getSaveParams: function() {
                var t = {};
                return t.Notes = this.view.getForm().getValues().Notes, this.card && (t[CMDBuild.core.constants.Proxy.CARD_ID] = this.card.get("Id"), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.card.get("IdClass"))), t
            },
            syncSavedNoteWithModel: function(t, e) {
                t.set("Notes", e), t.commit(), t.raw && (t.raw.Notes = e)
            },
            lockCard: function(t) {
                if (CMDBuild.configuration.instance.get("enableCardLock")) {
                    if (this.card) {
                        var e = this.card.get("Id");
                        CMDBuild.proxy.Card.lock({
                            params: {
                                id: e
                            },
                            loadMask: !1,
                            success: t
                        })
                    }
                } else t()
            },
            unlockCard: function() {
                if (CMDBuild.configuration.instance.get("enableCardLock") && this.card && this.view.isInEditing()) {
                    var t = this.card.get("Id");
                    CMDBuild.proxy.Card.unlock({
                        params: {
                            id: t
                        },
                        loadMask: !1
                    })
                }
            }
        })
    }(), Ext.define("CMDBuild.view.management.map.CMMapPanelDelegate", {
        onLayerAdded: Ext.emptyFn,
        onLayerRemoved: Ext.emptyFn,
        onLayerChanged: Ext.emptyFn,
        onMapPanelVisibilityChanged: Ext.emptyFn
    }), Ext.define("CMDBuild.view.management.classes.map.CMMapPanel", {
        alternateClassName: "CMDBuild.Management.MapPanel",
        extend: "Ext.panel.Panel",
        uses: ["CMDBuild.controller.management.classes.map.CardGrid", "CMDBuild.controller.management.classes.map.LayerTree", "CMDBuild.view.management.classes.map.navigationTree.ViewTree", "CMDBuild.controller.management.classes.map.thematism.ThematismMainWindow", "CMDBuild.view.management.classes.map.thematism.ThematicDocument", "CMDBuild.view.management.classes.map.thematism.ThematicStrategiesManager", "CMDBuild.view.management.classes.map.geoextension.CMDBuildGeoExt", "CMDBuild.view.management.classes.map.thematism.ThematicColors"],
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        lon: void 0,
        lat: void 0,
        initialZoomLevel: void 0,
        layout: "border",
        thematismButton: void 0,
        printMapButton: void 0,
        searchMapButton: void 0,
        interactionDocument: void 0,
        geoExtension: void 0,
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.map.CMMapPanelDelegate"), this.callParent(arguments), this.hideMode = "offsets", this.cmAlreadyDisplayed = !1, this.cmVisible = !1
        },
        initComponent: function() {
            if (CMDBuild.gis.values.browserEnabled) {
                this.geoExtension = Ext.create("CMDBuild.view.management.classes.map.geoextension.CMDBuildGeoExt");
                var t = Ext.create("CMDBuild.view.management.classes.map.thematism.ThematicDocument"),
                    e = Ext.create("CMDBuild.view.management.classes.map.thematism.ThematicStrategiesManager");
                t.configureStrategiesManager(e), t.setThematismButton(this.thematismButton), this.interactionDocument = Ext.create("CMDBuild.view.management.classes.map.geoextension.InteractionDocument"), this.geoExtension.interactionDocument = this.interactionDocument, this.thematismButton.interactionDocument = this.interactionDocument;
                var i = Ext.create("CMDBuild.view.management.classes.map.thematism.ThematicColors");
                t.init(this.interactionDocument, i), this.interactionDocument.setThematicDocument(t), this.thematicView = Ext.create("CMDBuild.controller.management.classes.map.thematism.ThematismMainWindow", {
                    interactionDocument: this.interactionDocument
                }), this.mapPanel = Ext.create("CMDBuild.Management.CMMap", {
                    geoExtension: this.geoExtension,
                    interactionDocument: this.interactionDocument,
                    thematicView: this.thematicView
                });
                var n = [];
                if (CMDBuild.configuration.gis.get("cardBrowserByDomainConfiguration").root) {
                    var a = CMDBuild.configuration.gis.get("cardBrowserByDomainConfiguration").root;
                    this.interactionDocument.setStarted(!1), this.cardBrowser = new CMDBuild.view.management.classes.map.navigationTree.ViewTree({
                        title: CMDBuild.Translation.management.modcard.gis.gisNavigation,
                        frame: !1,
                        border: !1,
                        rootText: a.classDescription || a.className,
                        interactionDocument: this.interactionDocument
                    }), this.interactionDocument.setNavigationTree(this.cardBrowser), n.push(this.cardBrowser)
                }
                this.editingWindow = new CMDBuild.view.management.map.CMMapEditingToolsWindow({
                    owner: this,
                    interactionDocument: this.interactionDocument
                }), this.layerGridController = new CMDBuild.controller.management.classes.map.LayerTree({
                    title: CMDBuild.Translation.administration.modClass.layers,
                    interactionDocument: this.interactionDocument
                }), n.push(this.layerGridController.getView()), this.cardGridController = new CMDBuild.controller.management.classes.map.CardGrid({
                    title: CMDBuild.Translation.management.modcard.title,
                    interactionDocument: this.interactionDocument,
                    parentDelegate: this.delegate,
                    mainGrid: this.mainGrid
                }), n.push(this.cardGridController.getView()), this.layout = "border", this.items = [this.mapPanel, {
                    xtype: "tabpanel",
                    region: "east",
                    cls: "cmdb-border-left",
                    width: "25%",
                    split: !0,
                    collapsible: !0,
                    collapseMode: "mini",
                    header: !1,
                    frame: !1,
                    border: !1,
                    plain: !0,
                    activeItem: 0,
                    padding: "2 0 0 0",
                    items: n
                }], this.callParent(arguments)
            } else this.callParent(arguments)
        },
        print: function(t, e) {
            this.geoExtension.print()
        },
        search: function(t, e) {
            this.geoExtension.search()
        },
        executeThematism: function(t, e) {
            var i = this.interactionDocument.getCurrentCard().className;
            switch (t) {
                case CMDBuild.gis.constants.thematic_commands.NEW:
                    this.thematicView.show();
                    break;
                case CMDBuild.gis.constants.thematic_commands.MODIFY:
                    var n = this.interactionDocument.getCurrentThematicLayer(i);
                    this.thematicView.show(n);
                    break;
                case CMDBuild.gis.constants.thematic_commands.HIDE_CURRENT:
                    this.interactionDocument.setCursorActive(!e.checked), this.interactionDocument.changed();
                    break;
                case CMDBuild.gis.constants.thematic_commands.HIDE_LEGEND:
                    var a = this.interactionDocument.getMapPanel();
                    e.checked ? a.legend.hide() : a.legend.show();
                    break;
                case CMDBuild.gis.constants.thematic_commands.CHANGE_LAYER:
                    this.interactionDocument.setCurrentThematicLayer(i, e.text), this.interactionDocument.changedThematicDocument()
            }
        },
        updateSize: function() {},
        getMap: function() {
            return this.mapPanel
        },
        setCmVisible: function(t) {
            this.cmVisible = t, this.callDelegates("onMapPanelVisibilityChanged", [this, t])
        },
        editMode: function() {
            this.editingWindow && this.editingWindow.show()
        },
        displayMode: function() {
            this.editingWindow && (this.editingWindow.closeAllEditings(), this.editingWindow.hide(), this.interactionDocument.setCurrentFeature("", "", "Select"), this.interactionDocument.changedFeature())
        },
        getGeoServerLayerByName: function() {
            this.mapPanel.getGeoServerLayerByName(name)
        },
        updateMap: function(t) {
            this.editingWindow.removeAllLayerBinding()
        },
        addLayerToEditingWindow: function(t) {
            this.editingWindow.addLayer(t)
        },
        getCardBrowserPanel: function() {
            return this.cardBrowser
        },
        getCardGridController: function() {
            return this.cardGridController
        }
    }),
    function() {
        var t = {
            POINT: "mapFeaturePoint",
            LINESTRING: "mapFeatureLine",
            POLYGON: "mapFeaturePolygon"
        };
        Ext.define("CMDBuild.view.management.map.CMMapEditingToolsWindowDelegate", {
            addFeatureButtonHasBeenToggled: Ext.emptyFn,
            removeFeatureButtonHasBeenClicked: Ext.emptyFn,
            geoAttributeMenuItemHasBeenClicked: Ext.emptyFn
        }), Ext.define("CMDBuild.view.management.map.CMMapEditingToolsWindow", {
            extend: "Ext.Window",
            editingControls: {},
            layers: {},
            translation: CMDBuild.Translation,
            mixins: {
                delegable: "CMDBuild.core.CMDelegable"
            },
            owner: {
                getPosition: function() {
                    return [0, 0]
                }
            },
            constructor: function() {
                this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.map.CMMapEditingToolsWindowDelegate"), this.callParent(arguments)
            },
            initComponent: function() {
                this.closable = !1, this.hideBorders = !0, this.resizable = !1, this.frame = !1, this.interactionDocument.observe(this), this.layout = {
                    type: "hbox",
                    padding: "2",
                    align: "stretch"
                }, this.geoAttrMenuButton = new Ext.Button({
                    text: this.translation.management.modcard.gis.geo_attributes,
                    menu: new Ext.menu.Menu({
                        items: []
                    })
                }), this.addButton = new Ext.Button({
                    text: this.translation.add,
                    creationControl: void 0,
                    iconCls: "add",
                    enableToggle: !1,
                    allowDepress: !0,
                    disabled: !0,
                    scope: this,
                    handler: function(t) {
                        this.callDelegates("addFeatureButtonHasBeenToggled"), t.disable()
                    }
                }), this.removeButton = new Ext.Button({
                    text: this.translation.remove,
                    iconCls: "delete",
                    scope: this,
                    disabled: !0,
                    handler: function() {
                        var t = this.geoAttrMenuButton.attributeName;
                        t && this.onRemoveMenuitemSelect.call(this, t), this.callDelegates("removeFeatureButtonHasBeenClicked"), this.interactionDocument.getMapPanel().clearSelections()
                    }
                }), this.callParent(arguments)
            },
            refresh: function(t, e) {
                var i = this.interactionDocument.getCurrentCard();
                if (i) {
                    var n = i.className,
                        a = i.cardId,
                        o = this;
                    this.interactionDocument.getAllLayers(function(t) {
                        o.refreshAllLayers(t, n, a)
                    }, this)
                }
            },
            refreshAllLayers: function(t, e, i) {
                if (i) {
                    this.removeAllLayerBinding();
                    for (var n = 0; n < t.length; n++) {
                        var a = t[n];
                        this.interactionDocument.isVisible(a, e, i) && !this.interactionDocument.isGeoServerLayer(a) && this.addLayer(a)
                    }
                }
            },
            onRender: function() {
                this.callParent(arguments), this.interactionDocument.setNoZoom(!0), this.add([this.geoAttrMenuButton, this.addButton, this.removeButton])
            },
            show: function() {
                if (this.geoAttrMenuButton.menu.items.length > 0) {
                    this.interactionDocument.setEditing(!0), this.callParent(arguments);
                    var t = this.geoAttrMenuButton.menu.items.first();
                    t && this.onAddMenuitemSelect.call(this, t)
                }
            },
            closeAllEditings: function() {
                if (this.interactionDocument.getEditing()) {
                    this.interactionDocument.setEditing(!1);
                    this.interactionDocument.getCurrentCard().className;
                    for (var t in this.layers) {
                        var e = this.interactionDocument.getGeoLayerByName(t);
                        if (e) {
                            var i = e.get("adapter");
                            i && i.closeAllEditings && i.closeAllEditings()
                        }
                    }
                }
            },
            addLayer: function(e) {
                if (e && !this.interactionDocument.isGeoServerLayer(e)) {
                    var i = this.interactionDocument.getCurrentCard().className;
                    this.layers[e.name] || e.masterTableName !== i || (this.layers[e.name] = this.geoAttrMenuButton.menu.add({
                        iconCls: t[e.type],
                        text: e.description,
                        geoType: e.type,
                        name: e.name,
                        scope: this,
                        handler: this.onAddMenuitemSelect,
                        layer: e
                    }))
                }
            },
            removeAllLayerBinding: function() {
                this.geoAttrMenuButton.menu.removeAll(!0), this.layers = {}
            },
            onRemoveMenuitemSelect: function(t) {
                var e = this.interactionDocument.getCurrentCard(),
                    i = this.interactionDocument.getMapPanel().getLayerByClassAndName(e.className, t),
                    n = this.searchFeature(i, t, e.cardId);
                i.getSource().removeFeature(n);
                var a = i.get("adapter");
                a.onRemovedFeature && a.onRemovedFeature(), a.setStatus("None"), this.removeButton.disable()
            },
            onAddMenuitemSelect: function(t) {
                this.geoAttrMenuButton.setText(t.text), this.geoAttrMenuButton.attributeName = t.name, this.geoAttrMenuButton.setIconCls(t.iconCls);
                var e = this.interactionDocument.getCurrentCard(),
                    i = this.interactionDocument.getMapPanel().getLayerByClassAndName(e.className, t.name),
                    n = !0,
                    a = null;
                if (i) {
                    var o = i.get("cmdbuildLayer"),
                        r = this.interactionDocument.getZoom();
                    n = r < o.minZoom || r > o.maxZoom, a = this.searchFeature(i, t.name, e.cardId)
                } - 1 == e.cardId && (a = null), n ? (this.removeButton.disable(), this.addButton.disable()) : null !== a ? (this.removeButton.enable(), this.addButton.disable()) : (this.removeButton.disable(), this.addButton.enable()), this.callDelegates("geoAttributeMenuItemHasBeenClicked", t)
            },
            searchFeature: function(t, e, i) {
                if (!t || !t.getSource()) return null;
                for (var n = t.getSource().getFeatures(), a = 0; a < n.length; a++)
                    if (n[a].get("master_card") == i) return n[a];
                return null
            }
        })
    }(),
    function() {
        function t(t) {
            var e = {};
            if (t) {
                var i = null;
                "CMDBuild.model.CMActivityInstance" == Ext.getClassName(t) ? i = _CMWFState.getProcessInstance() : "CMDBuild.model.CMProcessInstance" == Ext.getClassName(t) && (i = t), e = null != i ? Ext.apply({
                    Id: i.get("Id"),
                    IdClass: i.get("IdClass"),
                    IdClass_value: i.get("IdClass_value")
                }, i.getValues()) : t.raw || t.data
            }
            return _debug("Server vars", e), e
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMWidgetController", {
            uses: ["CMDBuild.core.constants.Proxy"],
            statics: {
                WIDGET_NAME: "",
                getTemplateResolverServerVars: t
            },
            card: void 0,
            clientForm: void 0,
            ownerController: void 0,
            templateResolver: void 0,
            view: void 0,
            widgetConf: void 0,
            constructor: function(t, e, i, n, a) {
                if ("object" != typeof t) throw "The view of a WidgetController must be an object";
                if ("object" != typeof i) throw "The widget configuration is mandatory";
                this.WIDGET_NAME = this.self.WIDGET_NAME, this.card = a, this.clientForm = n, this.ownerController = e, this.view = t, this.widgetConf = i, this.outputName = this.widgetConf.outputName
            },
            beforeActiveView: Ext.emptyFn,
            beforeHideView: Ext.emptyFn,
            destroy: Ext.emptyFn,
            getData: function() {
                return null
            },
            getLabel: function() {
                return this.widgetConf[CMDBuild.core.constants.Proxy.LABEL]
            },
            getVariable: function(t) {
                try {
                    return this.templateResolver.getVariable(t)
                } catch (t) {
                    return void _debug("There is no template resolver")
                }
            },
            getTemplateResolverServerVars: function() {
                return t(this.card)
            },
            getWidgetId: function() {
                return this.widgetConf[CMDBuild.core.constants.Proxy.ID]
            },
            isValid: function() {
                return !0
            },
            onBeforeSave: function(t) {
                Ext.isObject(t) && !Ext.Object.isEmpty(t) && Ext.isFunction(t.callback) ? Ext.callback(t.callback, Ext.isEmpty(t.scope) ? this : t.scope) : _error("[" + this.getLabel() + "] onBeforeSave invalid parameters", this)
            },
            onEditMode: Ext.emptyFn,
            toString: function() {
                return Ext.getClassName(this)
            }
        })
    }(),
    function() {
        function t(t) {
            if (t) {
                var e = t.split(" "),
                    i = e[0],
                    n = e[1] || "00:00:00";
                return Ext.Date.parse(i + " " + n, "d/m/Y H:i:s")
            }
            return new Date
        }

        function e(t) {
            return t.getDate() + "/" + (t.getMonth() + 1) + "/" + t.getFullYear()
        }

        function i(e, i) {
            var n = i || {};
            i || (n.className = e.reader.getEventClass(e.widgetConf), n.filter = Ext.encode({
                CQL: e.paginationQuery
            })), CMDBuild.proxy.management.widget.Calendar.readAll({
                params: n,
                loadMask: !1,
                success: function(i, n, a) {
                    e.view.clearStore();
                    for (var o = a.rows || [], r = 0, s = o.length; r < s; ++r) {
                        var l = {},
                            d = o[r],
                            c = Extensible.calendar.data.EventMappings;
                        l[c.EventId.name] = d[e.eventMapping.id], l[c.StartDate.name] = t(d[e.eventMapping.start]), l[c.Title.name] = d[e.eventMapping.title], e.eventMapping.end ? l[c.EndDate.name] = t(d[e.eventMapping.end]) : l[c.EndDate.name] = t(d[e.eventMapping.start]);
                        var u = new Extensible.calendar.data.EventModel(l);
                        u && e.view.addEvent(u)
                    }
                }
            })
        }

        function n(t, e, i) {
            var n = _CMCache.getEntryTypeByName(this.reader.getEventClass(this.widgetConf));
            if (n) {
                var a = new CMDBuild.view.management.common.CMCardWindow({
                    cmEditMode: !1,
                    withButtons: !1,
                    title: e.get("Title")
                });
                new CMDBuild.controller.management.common.CMCardWindowController(a, {
                    entryType: n.get("id"),
                    card: e.get("EventId"),
                    cmEditMode: !1
                }), a.show()
            }
        }

        function a() {
            this.filteredWithCQL || (this.updatePaginationQuery(), i(this))
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMCalendarController", {
            uses: ["CMDBuild.core.Message", "CMDBuild.proxy.management.widget.Calendar"],
            mixins: {
                observable: "Ext.util.Observable",
                widgetcontroller: "CMDBuild.controller.management.common.widgets.CMWidgetController"
            },
            constructor: function(t, e, i, n, a) {
                if (this.mixins.observable.constructor.call(this), this.mixins.widgetcontroller.constructor.apply(this, arguments), this.reader = new CMDBuild.controller.management.common.widgets.CMCalendarControllerWidgetReader, !this.reader.getStartDate(this.widgetConf) || !this.reader.getTitle(this.widgetConf)) return CMDBuild.core.Message.error(CMDBuild.Translation.common.failure, CMDBuild.Translation.warnings.calendarIsNotWellConfigured), void(this.skipLoading = !0);
                this.eventMapping = {
                    id: "Id",
                    start: this.reader.getStartDate(this.widgetConf),
                    end: this.reader.getEndDate(this.widgetConf),
                    title: this.reader.getTitle(this.widgetConf)
                }, this.templateResolver = new CMDBuild.Management.TemplateResolver({
                    clientForm: this.clientForm,
                    xaVars: this.widgetConf,
                    serverVars: this.getTemplateResolverServerVars()
                })
            },
            beforeActiveView: function() {
                if (this.view.clearStore(), function(e) {
                        var i = e.reader.getDefaultDate(e.widgetConf);
                        if (i) {
                            var n = e.templateResolver.getVariable("client:" + i),
                                a = t(n);
                            a && e.view.setStartDate(a)
                        }
                    }(this), !this.skipLoading) {
                    var e = this,
                        o = this.templateResolver.getVariable("xa:" + e.reader.getFilterVarName());
                    o ? (this.filteredWithCQL = !0, this.templateResolver.resolveTemplates({
                        attributes: [e.reader.getFilterVarName()],
                        scope: e.view,
                        callback: function(t, n) {
                            var a = e.templateResolver.buildCQLQueryParameters(o, n);
                            i(e, a)
                        }
                    })) : (this.filteredWithCQL = !1, e.updatePaginationQuery(), i(e)), this._alreadyOpene || (this.mon(this.view, "eventclick", n, this), this.mon(this.view, "viewchange", a, this), this._alreadyOpened = !0)
                }
            },
            updatePaginationQuery: function() {
                function t(t) {
                    return "'" + t + "'"
                }
                var i = this,
                    n = this.view.getWievBounds(),
                    a = i.reader.getEventClass(i.widgetConf),
                    o = i.eventMapping.start,
                    r = i.eventMapping.end,
                    s = e(n.viewStart),
                    l = e(n.viewEnd),
                    d = "SELECT " + i.eventMapping.id + "," + i.eventMapping.title + "," + o + ",";
                i.eventMapping.end ? (d += i.eventMapping.end, d += " FROM " + a + " WHERE " + o + " <= " + t(l) + " AND " + r + " >= " + t(s)) : d += " FROM " + a + " WHERE " + o + " >= " + t(s) + " AND " + o + " <= " + t(l) + '"', this.paginationQuery = d
            },
            destroy: function() {
                this.mun(this.view, "eventclick", n, this), this.mun(this.view, "viewchange", a, this)
            }
        })
    }(),
    function() {
        var t = "_domNode",
            e = "_nodeType";

        function i(t) {
            return [].concat(t.widgetConf.nodesToUseAsColumns)
        }

        function n(t) {
            return [].concat(t.widgetConf.nodesToUseAsRows)
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMWebServiceController", {
            uses: ["CMDBuild.proxy.widget.WebService"],
            mixins: {
                observable: "Ext.util.Observable",
                widgetcontroller: "CMDBuild.controller.management.common.widgets.CMWidgetController",
                webServiceWidgetDelegate: "CMDBuild.view.management.common.widgets.CMWebServiceDelegate"
            },
            constructor: function(t, e, i, n, a) {
                this.mixins.observable.constructor.call(this), this.mixins.widgetcontroller.constructor.apply(this, arguments), this.wsCallParameters = i.callParameters, this.loaded = !1, this.store = null, this.templateResolver = null, this.view.addDelegate(this)
            },
            beforeActiveView: function() {
                var a, o, r = this;
                this.loaded || (null == r.store && (r.store = ((a = i(r)).push({
                    name: t,
                    type: "auto"
                }, {
                    name: e,
                    type: "string"
                }), Ext.define("CMWebServiceModel", {
                    extend: "Ext.data.Model",
                    fields: a,
                    idProperty: "_CM_ID"
                }), new Ext.data.Store({
                    model: "CMWebServiceModel",
                    data: [],
                    autoLoad: !1
                })), r.view.configureGrid(r.store, function(t) {
                    var a = n(t),
                        o = i(t),
                        r = [];
                    a.length > 1 && r.push({
                        header: CMDBuild.Translation.administration.modClass.attributeProperties.type,
                        dataIndex: e,
                        flex: 1
                    });
                    for (var s = 0, l = o.length; s < l; ++s) {
                        var d = o[s];
                        r.push({
                            header: d,
                            dataIndex: d,
                            flex: 1
                        })
                    }
                    return r
                }(r), function(t) {
                    var e = {};
                    t.widgetConf.readOnly || (e = {
                        selType: "checkboxmodel",
                        allowDeselect: !0,
                        mode: t.widgetConf.singleSelect ? "SINGLE" : "MULTI"
                    });
                    return e
                }(r))), null == r.templateResolver && (r.templateResolver = new CMDBuild.Management.TemplateResolver({
                    clientForm: r.clientForm,
                    xaVars: r.wsCallParameters,
                    serverVars: this.getTemplateResolverServerVars()
                })), (o = r).templateResolver.resolveTemplates({
                    attributes: Ext.Object.getKeys(o.wsCallParameters),
                    callback: function(i) {
                        var a = o.getTemplateResolverServerVars(),
                            r = _CMCache.getEntryTypeNameById(a.IdClass),
                            s = {};
                        for (var l in o.wsCallParameters) s[l] = i[l];
                        var d = o.view.getEl();
                        d && d.mask(CMDBuild.Translation.pleaseWait), CMDBuild.proxy.widget.WebService.callWidget({
                            method: "GET",
                            params: {
                                className: r,
                                id: a.Id,
                                activityId: _CMWFState.getActivityInstance().getId(),
                                widgetId: o.getWidgetId(),
                                params: Ext.encode(s)
                            },
                            loadMask: !1,
                            success: function(i, a, r) {
                                o.loaded = !0;
                                var s = r.response || "",
                                    l = CMDBuild.core.xml.XMLUtility,
                                    d = l.xmlDOMFromString(s),
                                    c = l.fromDOMToArrayOfObjects(d, n(o), t, e);
                                o.store.loadRawData(c), o.templateResolver.bindLocalDepsChange(function() {
                                    o.loaded = !1
                                })
                            },
                            callback: function() {
                                d && d.unmask()
                            }
                        })
                    }
                }))
            },
            getData: function() {
                var e = [];
                if (!this.widgetConf.readOnly)
                    for (var i = this.view.getSelectedRecords(), n = 0, a = i.length; n < a; ++n) {
                        var o = i[n].get(t);
                        e.push(CMDBuild.core.xml.XMLUtility.serializeToString(o))
                    }
                return {
                    output: e
                }
            },
            isValid: function() {
                return !this.widgetConf.mandatory || this.getData().output.length > 0
            },
            destroy: function() {
                this.callParent(arguments)
            },
            onWebServiceWidgetShowAllInfoButtonClick: function(e, i) {
                new CMDBuild.view.management.common.widgets.CMXMLWindow({
                    xmlNode: i.get(t)
                }).show()
            }
        })
    }(),
    function() {
        var t = "_filter";

        function e(t, e, i, n, a, o) {
            var r = a.target.className;
            this.callBacks[r] && this.callBacks[r](e)
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMPresetFromCardController", {
            mixins: {
                observable: "Ext.util.Observable",
                widgetcontroller: "CMDBuild.controller.management.common.widgets.CMWidgetController",
                cmPresetFromCardDelegate: "CMDBuild.view.management.common.widgets.CMPresetFromCardDelegate"
            },
            constructor: function(i, n, a, o, r) {
                var s, l;
                this.mixins.observable.constructor.call(this), this.mixins.widgetcontroller.constructor.apply(this, arguments), i.addDelegate(this), this.callBacks = {
                    "action-card-show": this.onShowCardkClick
                }, this.templateResolver = new CMDBuild.Management.TemplateResolver({
                    clientForm: o,
                    xaVars: (s = a, l = s.templates || {}, l[t] = s.filter, l),
                    serverVars: this.getTemplateResolverServerVars()
                }), this.mon(this.view.grid, "beforeitemclick", e, this)
            },
            onShowCardkClick: function(t) {
                var e = new CMDBuild.view.management.common.CMCardWindow({
                    cmEditMode: !1,
                    withButtons: !1,
                    title: t.get("IdClass_value")
                });
                new CMDBuild.controller.management.common.CMCardWindowController(e, {
                    entryType: t.get("IdClass"),
                    card: t.get("Id"),
                    cmEditMode: !1
                }), e.show()
            },
            beforeActiveView: function() {
                ! function(e) {
                    var i = e.widgetConf,
                        n = _CMCache.getEntryTypeByName(i.className);
                    if (!n) return;
                    var a = n.getId(),
                        o = i.filter;
                    e.templateResolver.resolveTemplates({
                        attributes: [t],
                        callback: function(t, i) {
                            var n = e.templateResolver.buildCQLQueryParameters(o, i);
                            e.view.updateGrid(a, n)
                        }
                    })
                }(this)
            },
            onPresetFromCardSaveButtonClick: function(t) {
                var e = t.getSelection(),
                    i = this.clientForm.getFields(),
                    n = this.widgetConf.presetMapping;
                e && i && n && i.each(function(t) {
                    t._belongToEditableSubpanel && n[t.name] && t.setValue(e.get(n[t.name]))
                }), "function" == typeof this.ownerController.hideWidgetsContainer && this.ownerController.hideWidgetsContainer()
            }
        })
    }(), Ext.define("CMDBuild.controller.management.common.CMWidgetManagerController", {
        uses: ["CMDBuild.controller.management.common.widgets.workflow.CMWorkflowController", "CMDBuild.controller.management.widget.linkCards.LinkCardsController", "CMDBuild.controller.management.widget.manageRelation.CMManageRelationController", "CMDBuild.core.configurations.Timeout", "CMDBuild.core.Message"],
        controllerClasses: {},
        controllers: {},
        constructor: function(t) {
            Ext.apply(this, {
                controllerClasses: {
                    ".Calendar": CMDBuild.controller.management.common.widgets.CMCalendarController,
                    ".CreateModifyCard": "CMDBuild.controller.management.widget.createModifyCard.CMCreateModifyCardController",
                    ".CustomForm": "CMDBuild.controller.management.widget.customForm.CustomForm",
                    ".Grid": "CMDBuild.controller.management.common.widgets.grid.Grid",
                    ".LinkCards": CMDBuild.controller.management.widget.linkCards.LinkCardsController,
                    ".ManageEmail": "CMDBuild.controller.management.widget.ManageEmail",
                    ".ManageRelation": CMDBuild.controller.management.widget.manageRelation.CMManageRelationController,
                    ".NavigationTree": "CMDBuild.controller.management.widget.navigationTree.NavigationTree",
                    ".OpenAttachment": "CMDBuild.controller.management.widget.OpenAttachment",
                    ".OpenNote": "CMDBuild.controller.management.widget.OpenNote",
                    ".OpenReport": "CMDBuild.controller.management.widget.openReport.OpenReport",
                    ".Ping": "CMDBuild.controller.management.widget.Ping",
                    ".PresetFromCard": CMDBuild.controller.management.common.widgets.CMPresetFromCardController,
                    ".WebService": CMDBuild.controller.management.common.widgets.CMWebServiceController,
                    ".Workflow": CMDBuild.controller.management.common.widgets.workflow.CMWorkflowController
                },
                view: t
            }), this.view.delegate = this
        },
        setDelegate: function(t) {
            this.delegate = t
        },
        beforeHideView: function(t) {
            Ext.isEmpty(t.widgetConfiguration) || ".OpenReport" != t.widgetConfiguration.type || CMDBuild.global.interfaces.Configurations.set("disableAllMessages", !1), Ext.isEmpty(t) || (!Ext.isEmpty(t.cmfg) && Ext.isFunction(t.cmfg) ? t.cmfg("beforeHideView") : Ext.isFunction(t.beforeHideView) && t.beforeHideView())
        },
        buildControllers: function(t) {
            var e = this;
            if (e.removeAll(), t) {
                for (var i = e.takeWidgetFromCard(t), n = {}, a = 0, o = i.length, r = null, s = null; a < o; ++a)
                    if (r = i[a], s = e.view.buildWidget(r, t)) {
                        var l = e.buildWidgetController(s, r, t);
                        l && (n[e.getWidgetId(r)] = l)
                    }
                this.controllers = Ext.clone(n)
            }
        },
        onWidgetButtonClick: function(t) {
            var e = this.controllers[this.getWidgetId(t)];
            Ext.Object.isEmpty(t) || ".OpenReport" != t.type || CMDBuild.global.interfaces.Configurations.set("disableAllMessages", !0), this.delegate.ensureEditPanel(), Ext.isEmpty(e) || (this.view.showWidget(e.view, this.getWidgetLable(t)), !Ext.isEmpty(e.cmfg) && Ext.isFunction(e.cmfg) ? e.cmfg("beforeActiveView") : Ext.isFunction(e.beforeActiveView) && e.beforeActiveView())
        },
        onCardGoesInEdit: function() {
            Ext.Object.each(this.controllers, function(t, e, i) {
                !Ext.isEmpty(e.instancesDataStorageReset) && Ext.isFunction(e.instancesDataStorageReset) && e.instancesDataStorageReset(), !Ext.isEmpty(e.cmfg) && Ext.isFunction(e.cmfg) ? e.cmfg("onEditMode") : !Ext.isEmpty(e.onEditMode) && Ext.isFunction(e.onEditMode) && e.onEditMode()
            }, this)
        },
        getWrongWFAsHTML: function() {
            var t = "",
                e = !0;
            return Ext.Object.each(this.controllers, function(i, n, a) {
                Ext.isEmpty(n.cmfg) || !Ext.isFunction(n.cmfg) || n.cmfg("isValid") ? Ext.isEmpty(n.isValid) || !Ext.isFunction(n.isValid) || Ext.isEmpty(n.getLabel) || !Ext.isFunction(n.getLabel) || n.isValid() || (e = !1, t += "<li>" + n.getLabel() + "</li>") : (e = !1, t += "<li>" + n.cmfg("getLabel") + "</li>")
            }, this), e ? null : '<ul style="text-align: left;">' + t + "</ul>"
        },
        removeAll: function() {
            for (var t in this.view.reset(), this.controllers) {
                var e = this.controllers[t];
                e.destroy(), delete this.controllers[t], delete e
            }
        },
        waitForBusyWidgets: function(t, e) {
            var i = Ext.create("CMDBuild.core.RequestBarrier", {
                id: "widgetManagerBeforeSaveBarrier",
                executionTimeout: CMDBuild.core.configurations.Timeout.getWorkflowWidgetsExecutionTimeout(),
                scope: e,
                callback: t,
                failure: function() {
                    CMDBuild.core.Message.error(null, CMDBuild.Translation.errors.busyVisualControls, !1)
                }
            });
            Ext.Object.each(this.controllers, function(t, e, n) {
                !Ext.isEmpty(e.cmfg) && Ext.isFunction(e.cmfg) ? e.cmfg("onBeforeSave", {
                    scope: this,
                    callback: i.getCallback("widgetManagerBeforeSaveBarrier")
                }) : Ext.isFunction(e.onBeforeSave) && e.onBeforeSave({
                    scope: this,
                    callback: i.getCallback("widgetManagerBeforeSaveBarrier")
                })
            }, this), i.finalize("widgetManagerBeforeSaveBarrier", !0)
        },
        getData: function(t) {
            var e = {};
            return Ext.Object.each(this.controllers, function(i, n, a) {
                if (!Ext.isEmpty(n.cmfg) && Ext.isFunction(n.cmfg)) {
                    var o = n.cmfg("getData", t);
                    Ext.isEmpty(o) || (e[i] = o)
                } else Ext.isFunction(n.getData) && (o = n.getData(t), Ext.isEmpty(o) || (e[i] = o))
            }, this), e
        },
        hideWidgetsContainer: function() {
            this.view.widgetsContainer.hide()
        },
        buildWidgetController: function(t, e, i) {
            var n = null,
                a = this.controllerClasses[e.type];
            return Ext.isEmpty(a) || (Ext.isFunction(a) ? n = new a(t, superController = this, e, clientForm = this.view.getFormForTemplateResolver(), i) : Ext.isString(a) && (n = Ext.create(a, {
                view: t,
                parentDelegate: this,
                widgetConfiguration: e,
                clientForm: this.view.getFormForTemplateResolver(),
                card: i
            }))), n
        },
        takeWidgetFromCard: function(t) {
            var e = [];
            if ("CMDBuild.model.CMActivityInstance" == Ext.getClassName(t)) e = t.getWidgets();
            else {
                var i = _CMCache.getEntryTypeById(t.get("IdClass"));
                i && (e = i.getWidgets())
            }
            return e
        },
        getWidgetId: function(t) {
            return t.id
        },
        getWidgetLable: function(t) {
            return t.label
        },
        activateFirstTab: function() {
            this.view.activateFirstTab()
        }
    }), Ext.define("CMDBuild.controller.management.common.CMWidgetManagerControllerPopup", {
        extend: "CMDBuild.controller.management.common.CMWidgetManagerController",
        uses: ["CMDBuild.controller.management.common.widgets.workflow.CMWorkflowController", "CMDBuild.controller.management.widget.linkCards.LinkCardsController", "CMDBuild.controller.management.widget.manageRelation.CMManageRelationController", "CMDBuild.core.configurations.Timeout", "CMDBuild.core.Message"],
        buildControllers: function(t, e) {
            var i = this;
            for (var n in i.removeAll(), t)
                if (ui = i.view.buildWidget(t[n], e), ui) {
                    var a = i.buildWidgetController(ui, t[n], e);
                    a && (i.controllers[i.getWidgetId(t[n])] = a)
                }
        }
    }), Ext.define("CMDBuild.controller.management.dashboard.CMModDashboardController", {
        extend: "CMDBuild.controller.CMBasePanelController",
        uses: ["CMDBuild.core.constants.Proxy"],
        mixins: {
            columnController: "CMDBuild.controller.common.CMDashboardColumnController"
        },
        constructor: function() {
            this.callParent(arguments), this.view && this.view.setDelegate(this), this.dashboard = null
        },
        onViewOnFront: function(t) {
            if (t && "function" == typeof t.get) {
                var e = Ext.isEmpty(t.get(CMDBuild.core.constants.Proxy.ENTITY_ID)) ? CMDBuild.core.constants.Proxy.ID : CMDBuild.core.constants.Proxy.ENTITY_ID;
                this.dashboard = _CMCache.getDashboardById(t.get(e)), this.view.buildDashboardColumns(this.dashboard), Ext.isEmpty(t) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                    moduleId: this.view.cmName,
                    entryType: {
                        description: t.get(CMDBuild.core.constants.Proxy.DESCRIPTION),
                        id: t.get(CMDBuild.core.constants.Proxy.ID),
                        object: t
                    }
                })
            }
        }
    }),
    function() {
        function t() {
            this.view.cardTabPanel.reset(_CMCardModuleState.entryType.get("id"))
        }

        function e(t) {
            this.setCard(null), this.callForSubControllers("onAddCardButtonClick", t.classId), this.view.activateFirstTab(), _CMUIState.onlyFormIfFullScreen()
        }
        Ext.define("CMDBuild.controller.management.common.CMModController", {
            uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.administration.userAndGroup.group.tabs.DefaultFilters"],
            extend: "CMDBuild.controller.CMBasePanelController",
            mixins: {
                commonFunctions: "CMDBuild.controller.management.common.CMModClassAndWFCommons",
                observable: "Ext.util.Observable"
            },
            constructor: function(t) {
                this.callParent(arguments), this.view.delegate = this, this.buildSubControllers()
            },
            onViewOnFront: function(t) {
                if (!Ext.isEmpty(t)) {
                    var e = Ext.isEmpty(t.get(CMDBuild.core.constants.Proxy.ENTITY_ID)) ? CMDBuild.core.constants.Proxy.ID : CMDBuild.core.constants.Proxy.ENTITY_ID,
                        i = CMDBuild.global.controller.MainViewport.cmfg("mainViewportDanglingCardGet"),
                        n = t.get(CMDBuild.core.constants.Proxy.FILTER),
                        a = t.get(e);
                    if (this.selectedAccordionNode = t, CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE) && _CMUIState.onlyGrid(), Ext.isEmpty(n)) {
                        var o = {};
                        o[CMDBuild.core.constants.Proxy.CLASS_NAME] = t.get(CMDBuild.core.constants.Proxy.NAME), o[CMDBuild.core.constants.Proxy.GROUP] = CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.DEFAULT_GROUP_NAME), CMDBuild.proxy.administration.userAndGroup.group.tabs.DefaultFilters.read({
                            params: o,
                            scope: this,
                            success: function(t, e, o) {
                                o = o.response.elements[0], Ext.isEmpty(o) || (Ext.isString(o[CMDBuild.core.constants.Proxy.CONFIGURATION]) && CMDBuild.core.Utils.isJsonString(o[CMDBuild.core.constants.Proxy.CONFIGURATION]) && (o[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.decode(o[CMDBuild.core.constants.Proxy.CONFIGURATION])), n = Ext.create("CMDBuild.model.CMFilterModel", o)), this.setEntryType(a, i, n)
                            }
                        })
                    } else this.setEntryType(a, i, n)
                }
            },
            onCardSelected: function(t) {
                this.setCard(t)
            },
            setEntryType: function(t, e, i) {
                this.entryType = _CMCache.getEntryTypeById(t), this.setCard(null), this.callForSubControllers("onEntryTypeSelected", [this.entryType, e, i]), Ext.isEmpty(e) || Ext.isEmpty(e.activateFirstTab) || this.view.cardTabPanel.activeTabSet(e.activateFirstTab)
            },
            getEntryType: function() {
                return this.entryType || null
            },
            getEntryTypeId: function() {
                var t = null;
                return this.entryType && (t = this.entryType.get("id")), t
            },
            setCard: function(t) {
                this.card = t, this.onCardChanged(t)
            },
            getCard: function() {
                return this.card
            },
            onCardChanged: function(t) {
                this.callForSubControllers("onCardSelected", this.card)
            },
            callForSubControllers: function(t, e) {
                for (var i = 0, n = this.subControllers.length, a = null; i < n; ++i) a = this.subControllers[i], "string" == typeof t && "function" == typeof a[t] && (e = Ext.isArray(e) ? e : [e], a[t].apply(a, e))
            },
            buildSubControllers: Ext.emptyFn
        }), Ext.define("CMDBuild.controller.management.classes.CMModCardController", {
            uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.administration.userAndGroup.group.tabs.DefaultFilters"],
            extend: "CMDBuild.controller.management.common.CMModController",
            card: void 0,
            cardPanelController: void 0,
            controllerMap: void 0,
            controllerTabAttachment: void 0,
            controllerTabEmail: void 0,
            controllerTabHistory: void 0,
            enableNewCardModule: !0,
            mdController: void 0,
            noteController: void 0,
            relationsController: void 0,
            subControllers: [],
            view: void 0,
            constructor: function(t) {
                this.callParent(arguments), this.mon(this.view, this.view.CMEVENTS.addButtonClick, e, this)
            },
            buildSubControllers: function() {
                var e, i;
                Ext.suspendLayouts(), this.enableNewCardModule ? this.buildTabControllerCard2() : this.buildTabControllerCard(), this.buildTabControllerDetails(), this.buildTabControllerNotes(), this.buildTabControllerRelations(), this.buildTabControllerHistory(), this.buildTabControllerEmail(), this.buildTabControllerAttachments(), e = this, (i = this.view.getGrid()) && (e.gridController = new CMDBuild.controller.management.common.CMCardGridController(i), e.mon(e.gridController, e.gridController.CMEVENTS.cardSelected, e.onCardSelected, e), e.mon(e.gridController, e.gridController.CMEVENTS.wrongSelection, t, e), e.mon(e.gridController, e.gridController.CMEVENTS.gridVisible, e.onGridVisible, e), e.mon(e.gridController, e.gridController.CMEVENTS.load, e.onGridLoad, e), e.mon(e.gridController, e.gridController.CMEVENTS.itemdblclick, function() {
                        if (e.enableNewCardModule) {
                            if (!e.controllerTabCard2.cmfg("panelGridAndFormSelectedEntityGet", [CMDBuild.core.constants.Proxy.CAPABILITIES, CMDBuild.core.constants.Proxy.MODIFY_DISABLED])) {
                                var t = {};
                                t[CMDBuild.core.constants.Proxy.FULL_SCREEN] = "bottom", t[CMDBuild.core.constants.Proxy.VIEW_MODE] = "edit", e.controllerTabCard2.cmfg("classesFormTabCardSelectedEntityIsEmpty") || (t[CMDBuild.core.constants.Proxy.ENTITY_NAME] = e.controllerTabCard2.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME)), e.controllerTabCard2.cmfg("classesFormTabCardSelectedItemIsEmpty") || (t[CMDBuild.core.constants.Proxy.ITEM_ENTITY_NAME] = e.controllerTabCard2.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), t[CMDBuild.core.constants.Proxy.ITEM_ID] = e.controllerTabCard2.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID)), e.controllerTabCard2.cmfg("classesFormTabCardUiUpdate", t)
                            }
                        } else {
                            var i = _CMUtils.getEntryTypePrivilegesByCard(e.cardPanelController.card);
                            i.crudDisabled.modify || (e.cardPanelController.onModifyCardClick(), _CMUIState.onlyFormIfFullScreen())
                        }
                    }, e), e.subControllers.push(e.gridController)),
                    function(t, e) {
                        if (null == e) return;
                        CMDBuild.configuration.bim.get("enabled") && new CMDBuild.bim.management.CMBimController(e)
                    }(0, this.view.getGrid()), Ext.resumeLayouts(), this.view.cardTabPanel.setActiveTab(0)
            },
            buildMapController: function() {
                Ext.isFunction(this.view.getMapPanel) ? this.controllerMap = new CMDBuild.controller.management.classes.CMMapController(this.view.getMapPanel(), this.view.getMapPanel().interactionDocument) : this.controllerMap = {
                    onEntryTypeSelected: Ext.emptyFn,
                    onAddCardButtonClick: Ext.emptyFn,
                    onCardSaved: Ext.emptyFn,
                    getCardData: Ext.emptyFn,
                    getValues: function() {
                        return !1
                    },
                    refresh: Ext.emptyFn,
                    editMode: Ext.emptyFn,
                    displayMode: Ext.emptyFn
                }, this.subControllers.push(this.controllerMap), this.enableNewCardModule || this.cardPanelController.addCardDataProviders(this.controllerMap)
            },
            buildTabControllerAttachments: function() {
                CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_ATTACHMENT_TAB) || (this.controllerTabAttachment = Ext.create("CMDBuild.controller.management.classes.panel.form.tabs.Attachment", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabAttachment), this.view.cardTabPanel.attachmentPanel = this.controllerTabAttachment.getView(), this.view.cardTabPanel.add(this.controllerTabAttachment.getView()))
            },
            buildTabControllerCard: function() {
                var t = this.view.getCardPanel(),
                    e = new CMDBuild.controller.management.common.CMWidgetManagerController(this.view.getWidgetManager());
                Ext.isEmpty(t) || (this.cardPanelController = new CMDBuild.controller.management.classes.CMCardPanelController(t, this, e), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.cardRemoved, function(t, e) {
                    var i = _CMCardModuleState.entryType;
                    this.gridController.onCardDeleted(), this.view.reset(i.get("id")), _CMCache.onClassContentChanged(e)
                }, this), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.cardSaved, function(t) {
                    var e = _CMCardModuleState.entryType;
                    this.gridController.onCardSaved(t), this.controllerMap.onCardSaved(t), _CMCache.onClassContentChanged(e.get("id"))
                }, this), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.displayModeDidActivate, function() {
                    this.controllerMap.displayMode()
                }, this), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.cloneCard, function() {
                    this.callForSubControllers("onCloneCard")
                }, this), this.subControllers.push(this.cardPanelController), this.view.cardTabPanel.add(t))
            },
            buildTabControllerCard2: function() {
                this.controllerTabCard2 = Ext.create("CMDBuild.controller.management.classes.panel.form.tabs.card.Tab", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabCard2), this.view.cardTabPanel.cardPanel2 = this.controllerTabCard2.getView(), this.view.cardTabPanel.add(this.controllerTabCard2.getView())
            },
            buildTabControllerDetails: function() {
                var t = this.view.getMDPanel();
                Ext.isEmpty(t) || (this.mdController = new CMDBuild.controller.management.classes.masterDetails.CMMasterDetailsController(t, this), this.mon(this.mdController, "empty", function(t) {
                    t && this.view.cardTabPanel.activateFirstTab()
                }, this), this.subControllers.push(this.mdController), this.view.cardTabPanel.add(t))
            },
            buildTabControllerEmail: function() {
                CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_EMAIL_TAB) || (this.controllerTabEmail = Ext.create("CMDBuild.controller.management.classes.tabs.Email", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabEmail), this.view.cardTabPanel.emailPanel = this.controllerTabEmail.getView(), this.view.cardTabPanel.add(this.controllerTabEmail.getView()))
            },
            buildTabControllerHistory: function() {
                CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_HISTORY_TAB) || (this.controllerTabHistory = Ext.create("CMDBuild.controller.management.classes.tabs.History", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabHistory), this.view.cardTabPanel.cardHistoryPanel = this.controllerTabHistory.getView(), this.view.cardTabPanel.add(this.controllerTabHistory.getView()))
            },
            buildTabControllerNotes: function() {
                var t = this.view.getNotePanel();
                Ext.isEmpty(t) || (this.noteController = new CMDBuild.controller.management.classes.CMNoteController(t), this.subControllers.push(this.noteController), this.view.cardTabPanel.add(t))
            },
            buildTabControllerRelations: function() {
                var t = this.view.getRelationsPanel();
                Ext.isEmpty(t) || (this.relationsController = new CMDBuild.controller.management.classes.CMCardRelationsController(t, this), this.mon(this.relationsController, this.relationsController.CMEVENTS.serverOperationSuccess, function() {
                    this.gridController.reload(!0)
                }, this), this.subControllers.push(this.relationsController), this.view.cardTabPanel.add(t))
            },
            changeClassUIConfigurationForGroup: function(t) {
                var e = _CMUtils.getClassPrivileges(t);
                this.view.addCardButton.disabledForGroup = !(e.write && !e.crudDisabled.create), this.view.addCardButton.disabledForGroup ? this.view.addCardButton.disable() : this.view.addCardButton.enable(), this.enableNewCardModule || this.cardPanelController.changeClassUIConfigurationForGroup(!(e.write && !e.crudDisabled.modify), !(e.write && !e.crudDisabled.clone), !(e.write && !e.crudDisabled.remove))
            },
            getMapSaveParams: function(t) {
                t = Ext.isObject(t) ? t : {};
                var e = {};
                if (CMDBuild.configuration.gis.get(CMDBuild.core.constants.Proxy.ENABLED) && Ext.isString(t.className) && !Ext.isEmpty(t.className)) {
                    var i = this.controllerMap.getCardData(t);
                    i && (e[this.controllerMap.cardDataName] = i)
                }
                return e
            },
            getFormForTemplateResolver: function() {
                return this.view.getCardPanel().getFormForTemplateResolver()
            },
            onGridLoad: function(t) {
                Ext.isEmpty(t[1]) && (this.view.cardTabPanel.items.each(function(t) {
                    Ext.isFunction(t.reset) && t.reset(), Ext.isFunction(t.disable) && t.disable()
                }), this.enableNewCardModule || (this.view.getCardPanel().enable(), this.view.getCardPanel().displayMode(), CMDBuild.clearComponent(this.view.getCardPanel().form)))
            },
            onGridVisible: function(t, e) {
                t && this.entryType && this.card && e && e[0] && e[0].get("Id") != this.card.get("Id") && this.gridController.openCard({
                    IdClass: this.entryType.get("id"),
                    Id: this.card.get("Id")
                }, !0)
            },
            onAbortCardClick: function() {
                !Ext.isEmpty(this.controllerTabEmail) && Ext.isFunction(this.controllerTabEmail.onAbortCardClick) && this.controllerTabEmail.onAbortCardClick()
            },
            onModifyCardClick: function() {
                !Ext.isEmpty(this.controllerMap) && Ext.isFunction(this.controllerMap.editMode) && this.controllerMap.editMode(), !Ext.isEmpty(this.controllerTabEmail) && Ext.isFunction(this.controllerTabEmail.onModifyCardClick) && this.controllerTabEmail.onModifyCardClick()
            },
            onSaveCardClick: function() {
                !Ext.isEmpty(this.controllerTabEmail) && Ext.isFunction(this.controllerTabEmail.onSaveCardClick) && this.controllerTabEmail.onSaveCardClick()
            },
            setEntryType: function(t, e, i) {
                var n = _CMCache.getEntryTypeById(t);
                this.view.addCardButton.updateForEntry(n), this.view.mapAddCardButton.updateForEntry(n), this.view.updateTitleForEntry(n), Ext.isEmpty(e) || Ext.isEmpty(e.activateFirstTab) || this.view.cardTabPanel.activeTabSet(e.activateFirstTab), _CMCardModuleState.setEntryType(n, e, i), _CMUIState.onlyGridIfFullScreen(), this.changeClassUIConfigurationForGroup(t), Ext.isString(i) && !Ext.isEmpty(i) && Ext.Array.contains(this.selectedAccordionNode.get(CMDBuild.core.constants.Proxy.SECTION_HIERARCHY), "filter") && (CMDBuild.global.dataViewHack = {
                    filter: i,
                    entryType: n
                })
            }
        })
    }(), Ext.define("CMDBuild.controller.management.classes.CMCardPanelController", {
        uses: ["CMDBuild.proxy.Card"],
        mixins: {
            observable: "Ext.util.Observable"
        },
        extend: "CMDBuild.controller.management.classes.CMBaseCardPanelController",
        constructor: function(t, e, i) {
            this.callParent(arguments), this.mixins.observable.constructor.call(this, arguments), this.CMEVENTS = Ext.apply(this.CMEVENTS, {
                cardRemoved: "cm-card-removed",
                cloneCard: "cm-card-clone"
            }), this.addEvents(this.CMEVENTS.cardRemoved, this.CMEVENTS.cloneCard, this.CMEVENTS.cardSaved, this.CMEVENTS.editModeDidAcitvate, this.CMEVENTS.displayModeDidActivate);
            var n = this.view.CMEVENTS;
            this.mon(this.view, n.removeCardButtonClick, this.onRemoveCardClick, this), this.mon(this.view, n.cloneCardButtonClick, this.onCloneCardClick, this), this.mon(this.view, n.printCardButtonClick, this.onPrintCardMenuClick, this), this.mon(this.view, n.openGraphButtonClick, this.onShowGraphClick, this)
        },
        onEntryTypeSelected: function() {
            this.cloneCard = !1, this.callParent(arguments)
        },
        onCardSelected: function() {
            this.cloneCard = !1, this.callParent(arguments)
        },
        onRemoveCardClick: function() {
            var t = this,
                e = t.card.get("Id"),
                i = t.entryType.get("id");
            Ext.Msg.confirm(CMDBuild.Translation.attention, CMDBuild.Translation.management.modcard.delete_card_confirm, function(n) {
                "yes" == n && (CMDBuild.core.LoadMask.show(), CMDBuild.proxy.Card.remove({
                    params: {
                        IdClass: i,
                        Id: e
                    },
                    loadMask: !1,
                    success: function() {
                        t.fireEvent(t.CMEVENTS.cardRemoved, e, i)
                    },
                    callback: function() {
                        CMDBuild.core.LoadMask.hide()
                    }
                }))
            }, this)
        },
        onCloneCardClick: function() {
            _CMCardModuleState.setPreviousCard(_CMCardModuleState.card), this.cloneCard = !0, this.onModifyCardClick(), this.fireEvent(this.CMEVENTS.cloneCard)
        },
        changeClassUIConfigurationForGroup: function(t, e, i) {
            this.view.form.modifyCardButton.disabledForGroup = t, this.view.form.cloneCardButton.disabledForGroup = e, this.view.form.deleteCardButton.disabledForGroup = i, this.view.form.modifyCardButton.disabledForGroup ? this.view.form.modifyCardButton.disable() : this.view.form.modifyCardButton.enable(), this.view.form.cloneCardButton.disabledForGroup ? this.view.form.cloneCardButton.disable() : this.view.form.cloneCardButton.enable(), this.view.form.deleteCardButton.disabledForGroup ? this.view.form.deleteCardButton.disable() : this.view.form.deleteCardButton.enable()
        },
        onModifyCardClick: function() {
            var t = this;
            this.cloneCard && this.isEditable(this.card) ? t.loadCard(!0, null, function() {
                t.view.editMode()
            }) : this.callParent(arguments)
        },
        onAbortCardClick: function() {
            this.cloneCard ? _CMCardModuleState.setCard(_CMCardModuleState.getPreviousCard()) : this.callParent(arguments), _CMUIState.onlyGridIfFullScreen()
        },
        onSaveSuccess: function() {
            this.cloneCard = !1, this.callParent(arguments), _CMUIState.onlyGridIfFullScreen()
        },
        onPrintCardMenuClick: function(t) {
            if (Ext.isString(t) && !Ext.isEmpty(t)) {
                var e = {};
                e[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.entryType.get(CMDBuild.core.constants.Proxy.NAME), e[CMDBuild.core.constants.Proxy.CARD_ID] = this.card.get("Id"), e[CMDBuild.core.constants.Proxy.FORMAT] = t, this.controllerPrintWindow = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.print.Window", {
                    parentDelegate: this
                }), this.controllerPrintWindow.cmfg("panelGridAndFormPrintWindowShow", {
                    format: t,
                    mode: "cardDetails",
                    params: e
                })
            }
        }
    }), Ext.define("CMDBuild.controller.management.common.CMCardWindowController", {
        extend: "CMDBuild.controller.management.classes.CMBaseCardPanelController",
        uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.Message", "CMDBuild.proxy.Card", "CMDBuild.controller.management.classes.StaticsController"],
        mixins: {
            observable: "Ext.util.Observable"
        },
        constructor: function(t, e) {
            if (this.configuration = e, !Ext.isEmpty(this.configuration.entryType)) {
                var i = this;
                this.callParent(arguments), this.mixins.observable.constructor.call(this, arguments), this.onEntryTypeSelected(_CMCache.getEntryTypeById(this.configuration.entryType)), this.cmEditMode = this.configuration.cmEditMode, this.mon(this.view, "show", function() {
                    this.loadFields(this.configuration.entryType, function() {
                        if (i.configuration.card) {
                            var t = {};
                            t[CMDBuild.core.constants.Proxy.CARD_ID] = i.configuration.card, t[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(i.configuration.entryType), i.loadCard(!0, t, function(t) {
                                i.onCardLoaded(i, t)
                            })
                        } else i.editModeIfPossible()
                    })
                }, this), this.mon(this.view, "destroy", function() {
                    this.unlockCard()
                }, this)
            }
        },
        getForm: function() {
            return this.view.cardPanel.getForm()
        },
        onSaveCardClick: function() {
            var t = this.getForm(),
                e = this.buildSaveParams();
            this.beforeRequest(t), t.isValid() ? this.doFormSubmit(e) : CMDBuild.core.Message.error(null, Ext.String.format('<p class="{0}">{1}</p>', CMDBuild.core.constants.Global.getErrorMsgCss(), CMDBuild.Translation.errors.invalid_attributes) + CMDBuild.controller.management.classes.StaticsController.getInvalidAttributeAsHTML(t), !1)
        },
        doFormSubmit: function(t) {
            CMDBuild.proxy.Card.update({
                params: Ext.Object.merge(t, this.view.getForm().getValues()),
                loadMask: this.view,
                scope: this,
                success: function(t, e, i) {
                    var n = {};
                    n.result = i, n.params = e.params, this.onSaveSuccess(this.view.getForm(), n)
                }
            })
        },
        onAbortCardClick: function() {
            this.view.destroy()
        },
        onEntryTypeSelected: function(t) {
            this.callParent(arguments), this.view.setTitle(this.entryType.get(CMDBuild.core.constants.Proxy.TEXT))
        },
        buildSaveParams: function() {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.entryType.getName(), t[CMDBuild.core.constants.Proxy.CARD_ID] = this.card ? this.card.get("Id") : -1, t
        },
        onSaveSuccess: function(t, e) {
            CMDBuild.core.LoadMask.hide(), _CMCache.onClassContentChanged(this.entryType.get(CMDBuild.core.constants.Proxy.ID)), this.view.destroy()
        },
        onCardLoaded: function(t, e) {
            t.card = e, t.view.loadCard(e), t.widgetControllerManager && t.widgetControllerManager.buildControllers(e), t.editModeIfPossible()
        },
        beforeRequest: Ext.emptyFn,
        editModeIfPossible: function() {
            var t = this;
            t.card ? t.cmEditMode ? t.lockCard(function() {
                t.view.editMode()
            }) : t.view.displayMode() : t.onAddCardButtonClick(this.configuration.entryType)
        }
    }),
    function() {
        function t(t, e) {
            return !(!e || !t.fkAttribute) && e.name == t.fkAttribute.name
        }

        function e(t, e) {
            return !!t.detail && e.idDomain == t.detail.get("id")
        }
        Ext.define("CMDBuild.controller.management.common.CMDetailWindowController", {
            extend: "CMDBuild.controller.management.common.CMCardWindowController",
            constructor: function() {
                this.callParent(arguments)
            },
            getRelationsAttribute: function() {
                for (var t = this.getForm().getFields(), e = [], i = 0, n = null; i < t.items.length; ++i)(n = t.items[i]).CMAttribute && n.CMAttribute.cmRelationAttribute && (n.enable(), e.push(n));
                return e
            },
            buildSaveParams: function() {
                var t = this.callParent(arguments);
                if (this.referenceToMaster) {
                    var e = this.referenceToMaster;
                    t[e.name] = e.value
                }
                return t
            },
            buildParamsToSaveRelation: function(t) {
                var e = this.view.detail,
                    i = function(t, e) {
                        var i = {};
                        "_1" == _CMCache.getDirectedDomainForEntryType(t, e).src ? (i.slaveSide = "_2", i.masterSide = "_1") : (i.slaveSide = "_1", i.masterSide = "_2");
                        return i
                    }(this.entryType, e.getName()),
                    n = {
                        domainName: e.getName(),
                        attributes: Ext.encode(this.fillRelationAttributesParams(t, {})),
                        master: i.masterSide
                    };
                return this.relation && (n.relationId = this.relation.rel_id), n
            },
            fillRelationAttributesParams: function(t, e) {
                for (var i = this.getRelationsAttribute(), n = 0, a = null; n < i.length; ++n) e[(a = i[n]).CMAttribute.attributeName] = a.getValue();
                var o = this.view.detail,
                    r = this.view.masterData,
                    s = function(t, e) {
                        var i = e.get("cardinality"),
                            n = t.get("IdClass");
                        if ("1:1" == i) throw "Wrong cardinality for a MasterDetail domain";
                        return Ext.Array.contains(_CMUtils.getAncestorsId(n), e.get("idClass1")) ? "1:N" == i ? "_1" : "_2" : "N:1" == i ? "_2" : "_1"
                    }(r, o),
                    l = "_1" == s ? "_2" : "_1";
                return e[s] = [{
                    cardId: r.get("Id"),
                    className: _CMCache.getEntryTypeNameById(r.get("IdClass"))
                }], e[l] = [{
                    cardId: t.cardId,
                    className: t.className
                }], e
            },
            beforeRequest: function(t) {
                if (!this.referenceToMaster)
                    for (var e = t.getFields(), i = 0, n = null; i < e.items.length; ++i)(n = e.items[i]).setDisabled(n.CMAttribute && n.CMAttribute.cmRelationAttribute)
            },
            onSaveSuccess: function(t, e) {
                this.relation && !this.referenceToMaster && this.updateRelation(t, e), this.callParent(arguments)
            },
            updateRelation: function(t, e) {
                var i = this.buildParamsToSaveRelation(e.params);
                CMDBuild.proxy.Relation.update({
                    params: i,
                    loadMask: !1
                })
            },
            loadFields: function(i, n) {
                var a = this;
                _CMCache.getAttributeList(i, function(i) {
                    i = function(i, n) {
                        for (var a = [], o = 0; o < n.length; o++) {
                            var r = n[o];
                            r && (t(i.view, r) || e(i.view, r) ? i.view.masterData && (i.referenceToMaster = {
                                name: r.name,
                                value: i.view.masterData.get("Id")
                            }) : a.push(r))
                        }
                        return a
                    }(a, i), i = function(t, e, i) {
                        var n = Ext.isEmpty(e) || Ext.isEmpty(e.detail) ? [] : e.detail.getAttributes() || [],
                            a = [];
                        if (n.length > 0) {
                            e.hasRelationAttributes = !0;
                            for (var o = !1, r = 0, s = i.length; r < s; ++r) {
                                var l = i[r];
                                if (l.group && "" != l.group) {
                                    o = !0;
                                    break
                                }
                            }
                            if (o) a = [].concat(i);
                            else
                                for (var r = 0, l = null; r < i.length; ++r) {
                                    l = i[r];
                                    var d = Ext.apply({}, l);
                                    d.group = CMDBuild.Translation.management.modcard.detail_window.detail_attributes, a.push(d)
                                }
                            for (var r = 0, l = null; r < n.length; ++r) {
                                l = n[r];
                                var d = Ext.apply({}, l);
                                d.group = CMDBuild.Translation.management.modcard.detail_window.relation_attributes, d.attributeName = d.name, t.referenceToMaster && (d.name = "_" + t.referenceToMaster.name + "_" + d.name), d.cmRelationAttribute = !0, a.push(d)
                            }
                        } else a = [].concat(i);
                        return a
                    }(a, a.view, i), a.view.fillForm(i, editMode = !1), n && n()
                })
            },
            onCardLoaded: function(t, e) {
                this.callParent(arguments), t.view.hasRelationAttributes && function(t) {
                    var e = {};
                    e[CMDBuild.core.constants.Proxy.CARD_ID] = t.card.get("Id"), e[CMDBuild.core.constants.Proxy.CLASS_NAME] = t.entryType.getName(), e[CMDBuild.core.constants.Proxy.DOMAIN_ID] = t.view.detail.get("id"), e[CMDBuild.core.constants.Proxy.SRC] = t.view.detail.getDetailSide(), CMDBuild.proxy.Relation.readAll({
                        params: e,
                        loadMask: !1,
                        scope: this,
                        success: function(e, i, n) {
                            var a = n.domains;
                            try {
                                a.length > 1 && _debug("TODO ecco perchè sbaglia il modify, il get relation torna due domini, che in realtà è lo stesso nei due versi", a), t.relation = a[0].relations[0];
                                for (var o = t.getRelationsAttribute(), r = t.relation.rel_attr, s = 0, l = null; s < o.length; ++s)
                                    if ((l = o[s]).CMAttribute) {
                                        var d = r[l.CMAttribute.name] || r[l.CMAttribute.attributeName];
                                        l.setValue(d)
                                    }
                            } catch (e) {
                                t.relation = void 0, _debug("No relations", e)
                            }
                        }
                    })
                }(t)
            }
        })
    }(), Ext.define("CMDBuild.controller.management.common.CMAddDetailWindowController", {
        extend: "CMDBuild.controller.management.common.CMDetailWindowController",
        buildSaveParams: function() {
            var t = this.callParent(arguments);
            if (this.referenceToMaster) {
                var e = this.referenceToMaster;
                t[e.name] = e.value, this.saveRelationAction = Ext.emptyFn
            } else this.saveRelationAction = this.addRelation;
            return t
        },
        onSaveSuccess: function(t, e) {
            this.saveRelationAction && this.saveRelationAction(t, e), this.view.destroy(), CMDBuild.core.LoadMask.hide()
        },
        addRelation: function(t, e) {
            var i = {
                    cardId: e.result.id,
                    className: e.params.className
                },
                n = this.buildParamsToSaveRelation(i);
            CMDBuild.proxy.Relation.create({
                params: n,
                loadMask: !1
            })
        }
    });
! function() {
    var t = "SINGLE";

    function e(t, e) {
        var i = void 0;
        return t && "function" == typeof t.getId && (i = t.getId()), t && void 0 === i && "string" == typeof e && (i = t.get(e)), i
    }

    function i(t, i, n) {
        var a = i.length,
            o = 0,
            r = e(n, t.idProperty);
        t.store && t.store.each(function(s) {
            for (var l = 0; l < a; l++) void 0 === n ? i[l].onRowDeselect(o, suppressEvent = !0) : r && r != e(s, t.idProperty) && i[l].onRowDeselect(o, suppressEvent = !0);
            o++
        })
    }
    Ext.define("CMDBuild.selection.CMMultiPageSelectionModel", {
        extend: "Ext.selection.CheckboxModel",
        alias: "selection.cmmultipage",
        idProperty: void 0,
        avoidCheckerHeader: !1,
        bindStore: function(t, e) {
            this.store = t, this.cmReverse = !1, this.reset(), this.cmCurrentPage = void 0, this.callParent(arguments), this.store && (this.mon(this.store, "beforeload", function() {
                this._onBeforeStoreLoad.apply(this, arguments)
            }, this), this.mon(this.store, "load", function() {
                this._onStoreDidLoad.apply(this, arguments)
            }, this)), this.mon(this, "select", function() {
                this._addSelection.apply(this, arguments)
            }, this), this.mon(this, "deselect", function() {
                this._removeSelection.apply(this, arguments)
            }, this)
        },
        _addSelection: function(n, a) {
            var o = e(a, this.idProperty);
            this.mode == t && (this.reset(), i(this, this.views, a)), this.cmReverse ? o && this.cmSelections.hasOwnProperty(o) && delete this.cmSelections[o] : o && !this.cmSelections.hasOwnProperty(o) && (this.cmSelections[o] = a.copy())
        },
        _removeSelection: function(t, i) {
            var n = e(i, this.idProperty);
            this.cmReverse ? n && !this.cmSelections.hasOwnProperty(n) && (this.cmSelections[n] = i.copy()) : this.cmFreezedSelections || void 0 === n || delete this.cmSelections[n]
        },
        reset: function() {
            try {
                this.clearSelections(), this.cmSelections = {}, this.cmFreezedSelections = void 0
            } catch (t) {}
        },
        deselectAll: function() {
            this.reset()
        },
        _onBeforeStoreLoad: function() {
            this.cmFreezedSelections = Ext.clone(this.cmSelections)
        },
        hasSelection: function() {
            return this.getSelection().length > 0
        },
        getCount: function() {
            return this.getSelection().length
        },
        getSelection: function() {
            var t = [];
            for (var e in this.cmSelections) t.push(this.cmSelections[e]);
            return t
        },
        getHeaderConfig: function() {
            var e = this.callParent(arguments);
            return (this.mode == t || this.avoidCheckerHeader) && (e.isCheckerHd = !1, e.cls = Ext.baseCSSPrefix + NaN), e
        },
        onHeaderClick: function(e, i, n) {
            this.mode != t && i.isCheckerHd && (n.stopEvent(), this.cmReverse = !i.el.hasCls(Ext.baseCSSPrefix + "grid-hd-checker-on"), this.toggleUiHeader(this.cmReverse), this.reset(), this._redoSelection())
        },
        _onStoreDidLoad: function(t, e) {
            this.cmCurrentPage = t.currentPage, this.cmFreezedSelections && (this.cmSelections = Ext.clone(this.cmFreezedSelections), this.cmFreezedSelections = void 0), this._redoSelection()
        },
        _redoSelection: function() {
            var t, n, a, o, r = this,
                s = r.views;
            i(r, s), this.cmReverse ? (t = r, a = 0, o = (n = s).length, t.store.each(function(i) {
                if (!t.cmSelections[e(i, t.idProperty)]) {
                    t.selected.add(i);
                    for (var r = 0; r < o; r++) n[r].onRowSelect(a, suppressEvent = !0)
                }
                a++
            })) : function(t, i) {
                if (!t.store) return;
                var n, a = i.length;
                for (var o in t.cmSelections)
                    if (-1 != (n = t.store.findBy(function(i) {
                            if (o == e(i, t.idProperty)) return t.selected.add(i), !0
                        })))
                        for (var r = 0; r < a; r++) i[r].onRowSelect(n, suppressEvent = !0)
            }(r, s)
        },
        onSelectChange: function() {
            Ext.selection.RowModel.prototype.onSelectChange.apply(this, arguments)
        }
    })
}(), Ext.define("CMDBuild.state.CMWorkflowStateDelegate", {
        uses: ["CMDBuild.proxy.Card"],
        onProcessClassRefChange: Ext.emptyFn,
        onProcessInstanceChange: Ext.emptyFn,
        onActivityInstanceChange: Ext.emptyFn
    }), Ext.define("CMDBuild.model.CMActivityInstance", {
        extend: "Ext.data.Model",
        uses: ["CMDBuild.proxy.Card"],
        constructor: function(t) {
            t ? this.data = t : (this.data = {}, this.nullObject = !0)
        },
        isNew: function() {
            return !this.nullObject && (null == this.data.id || void 0 === this.data.id)
        },
        getId: function() {
            return this.data.id
        },
        getVariables: function() {
            return this.data.variables || []
        },
        getPerformerName: function() {
            return this.data.performerName || ""
        },
        getDescription: function() {
            return this.data.description || ""
        },
        getInstructions: function() {
            return this.data.instructions || ""
        },
        getWidgets: function() {
            return this.data.widgets || []
        },
        isWritable: function() {
            return !this.nullObject && (this.data.writable || !1)
        },
        isNullObject: function() {
            return this.nullObject
        }
    }), Ext.define("CMDBuild.model.CMProcessInstance", {
        extend: "Ext.data.Model",
        uses: ["CMDBuild.proxy.Card"],
        fields: ["beginDate", "beginDateAsLong", "classDescription", "className", "endDate", "flowStatus", {
            name: "id",
            type: "integer",
            useNull: !0
        }, {
            name: "classId",
            type: "integer"
        }, {
            name: "values",
            type: "auto"
        }, {
            name: "activityInstanceInfoList",
            type: "auto",
            defaultValue: []
        }, {
            name: "user",
            type: "string"
        }],
        STATE: {
            OPEN: "OPEN",
            SUSPENDED: "SUSPENDED",
            COMPLETED: "COMPLETED",
            TERMINATED: "TERMINATED",
            ABORTED: "ABORTED",
            UNSUPPORTED: "UNSUPPORTED"
        },
        get: function(t) {
            var e;
            return "Id" == t ? e = this.getId() : "IdClass" == t ? e = this.getClassId() : "IdClass_value" == t ? e = this.getClassDescription() : (e = this.callParent(arguments)) || (e = (this.data.values || {})[t]), e
        },
        getActivityInfoList: function() {
            return this.get("activityInstanceInfoList") || []
        },
        getId: function() {
            return this.get("id") || null
        },
        isNew: function() {
            return null == this.getId()
        },
        getValues: function() {
            return this.get("values") || {}
        },
        getClassId: function() {
            return this.get("classId") || null
        },
        getClassDescription: function() {
            return this.get("classDescription")
        },
        applyValues: function(t) {
            t && (this.data.values = Ext.apply(this.getValues(), t))
        },
        getFlowStatus: function() {
            return this.get("flowStatus")
        },
        isStateOpen: function() {
            return this.getFlowStatus() == this.STATE.OPEN
        },
        isStateCompleted: function() {
            return this.getFlowStatus() == this.STATE.COMPLETED
        },
        isStateSuspended: function() {
            return this.getFlowStatus() == this.STATE.SUSPENDED
        },
        setNotes: function(t) {
            this.data.values.Notes = t
        },
        updateBeginDate: function(t) {
            t.beginDate && t.beginDateAsLong && (this.set("beginDate", t.beginDate), this.set("beginDateAsLong", t.beginDateAsLong))
        },
        asDummyModel: function() {
            var t = this.getValues();
            return t.Id = this.getId(), t.IdClass = this.getClassId(), t.IdClass_value = this.getClassDescription(), new CMDBuild.DummyModel(t)
        }
    }), Ext.define("CMDBuild.state.CMWorkflowState", {
        uses: ["CMDBuild.proxy.Card"],
        constructor: function() {
            var t = null,
                e = null,
                i = null,
                n = [];
            Ext.apply(this, {
                setProcessClassRef: function(e, i, n, a) {
                    n = !!Ext.isEmpty(n) || n, e && (t !== e || i) && (t = e, this.notifyToDelegates("onProcessClassRefChange", [e, i, a]), n && this.setProcessInstance(new CMDBuild.model.CMProcessInstance({
                        classId: t.getId()
                    })))
                },
                getProcessClassRef: function() {
                    return t
                },
                setProcessInstance: function(e, n) {
                    i = e;
                    var a = t && t.isSuperClass(),
                        o = this;

                    function r() {
                        o.setActivityInstance(new CMDBuild.model.CMActivityInstance), o.notifyToDelegates("onProcessInstanceChange", [i]), n && n()
                    }!i.isNew() && a ? CMDBuild.proxy.Card.read({
                        params: {
                            cardId: i.getId(),
                            className: _CMCache.getEntryTypeNameById(i.getClassId())
                        },
                        loadMask: !1,
                        success: function(t, e, n) {
                            i.applyValues(n.card), r()
                        }
                    }) : r()
                },
                setProcessInstanceSynchronous: function(t) {
                    i = t, this.setActivityInstance(new CMDBuild.model.CMActivityInstance), this.notifyToDelegates("onProcessInstanceChange", [i])
                },
                getProcessInstance: function() {
                    return i
                },
                setActivityInstance: function(t) {
                    e = t, this.notifyToDelegates("onActivityInstanceChange", [t])
                },
                getActivityInstance: function() {
                    return e
                },
                addDelegate: function(t) {
                    CMDBuild.validateInterface(t, "CMDBuild.state.CMWorkflowStateDelegate"), n.push(t)
                },
                countDelegates: function() {
                    return n.length
                },
                notifyToDelegates: function(t, e) {
                    for (var i = 0, a = n.length, o = null; i < a; ++i)(o = n[i]) && "function" == typeof o[t] && o[t].apply(o, e)
                }
            })
        }
    }), _CMWFState = new CMDBuild.state.CMWorkflowState, Ext.define("CMDBuild.state.UIStateDelegate", {
        onFullScreenChangeToGridOnly: Ext.emptyFn,
        onFullScreenChangeToFormOnly: Ext.emptyFn,
        onFullScreenChangeToOff: Ext.emptyFn
    }), Ext.define("CMDBuild.state.UIState", {
        FULLSCREEN_MODES: {
            grid: "grid",
            form: "form",
            off: "off"
        },
        constructor: function() {
            this.callParent(arguments), this.fullScreenMode = this.FULLSCREEN_MODES.off, this.delegates = []
        },
        onlyGrid: function() {
            this.fullScreenMode = this.FULLSCREEN_MODES.grid, this.callForDelegates("onFullScreenChangeToGridOnly")
        },
        onlyForm: function() {
            this.fullScreenMode = this.FULLSCREEN_MODES.form, this.callForDelegates("onFullScreenChangeToFormOnly")
        },
        fullScreenOff: function() {
            this.fullScreenMode = this.FULLSCREEN_MODES.off, this.callForDelegates("onFullScreenChangeToOff")
        },
        onlyFormIfFullScreen: function() {
            this.fullScreenMode != this.FULLSCREEN_MODES.off && this.onlyForm()
        },
        onlyGridIfFullScreen: function() {
            this.fullScreenMode != this.FULLSCREEN_MODES.off && this.onlyGrid()
        },
        isFullscreenOff: function() {
            return this.fullScreenMode == this.FULLSCREEN_MODES.off
        },
        isOnlyGrid: function() {
            return this.fullScreenMode == this.FULLSCREEN_MODES.grid
        },
        isOnlyForm: function() {
            return this.fullScreenMode == this.FULLSCREEN_MODES.form
        },
        addDelegate: function(t) {
            t && this.delegates.push(t)
        },
        callForDelegates: function(t, e) {
            for (var i = 0; i < this.delegates.length; ++i) {
                var n = this.delegates[i];
                n && "function" == typeof n[t] && n[t].apply(n, e || [])
            }
        }
    }), _CMUIState = new CMDBuild.state.UIState, Ext.define("CMDBuild.state.CMCardModuleStateDelegate", {
        uses: ["CMDBuild.proxy.Card"],
        onEntryTypeDidChange: function(t, e, i, n) {},
        onCardDidChange: function(t, e) {}
    }), Ext.define("CMDBuild.state.CMCardModuleState", {
        uses: ["CMDBuild.proxy.Card"],
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        previousCard: {},
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.state.CMCardModuleStateDelegate"), this.entryType = null, this.card = null
        },
        setEntryType: function(t, e, i, n) {
            n = !!Ext.isEmpty(n) || n, (t === this.entryType && this.filter || e || i || this.entryType !== t) && (this.entryType = t, this.filter = i || null, this.setCard(null, null, n), n && this.callDelegates("onEntryTypeDidChange", [this, t, e, i]))
        },
        setCard: function(t, e, i) {
            i = !!Ext.isEmpty(i) || i, null != t && void 0 === t.data ? (t = function(t) {
                if (t.Id && t.IdClass) {
                    _deprecated("adaptGetCardCallParams", this);
                    var e = {};
                    e[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(t.IdClass), e[CMDBuild.core.constants.Proxy.CARD_ID] = t.Id, t = e
                }
                return t
            }(t), CMDBuild.proxy.Card.read({
                params: t,
                loadMask: !1,
                scope: this,
                success: function(t, n, a) {
                    var o = a.card;
                    if (o) {
                        var r = new CMDBuild.DummyModel(a.card);
                        r.raw = o, this.setCard(r, e, i)
                    }
                }
            })) : (this.card = t, i && this.callDelegates("onCardDidChange", [this, t]), "function" == typeof e && e(t))
        },
        setPreviousCard: function(t) {
            return Ext.isObject(t) && !Ext.Object.isEmpty(t) ? this.previousCard = Ext.clone(t) : this.previousCard = {}
        },
        getPreviousCard: function() {
            return Ext.isObject(this.previousCard) && !Ext.Object.isEmpty(this.previousCard) ? this.previousCard : null
        }
    }), _CMCardModuleState = new CMDBuild.state.CMCardModuleState, Ext.define("CMDBuild.controller.management.common.widgets.CMCalendarControllerWidgetReader", {
        getStartDate: function(t) {
            return t.startDate
        },
        getEndDate: function(t) {
            return t.endDate
        },
        getTitle: function(t) {
            return t.eventTitle
        },
        getEventClass: function(t) {
            return t.eventClass
        },
        getFilterVarName: function(t) {
            return "filter"
        },
        getDefaultDate: function(t) {
            return t.defaultDate
        }
    }), Ext.define("CMDBuild.view.management.CMMiniCardGridModel", {
        extend: "Ext.data.Model",
        fields: [{
            name: "Id",
            type: "int"
        }, {
            name: "IdClass",
            type: "int"
        }, {
            name: "ClassName",
            type: "string"
        }, {
            name: "Code",
            type: "string"
        }, {
            name: "Description",
            type: "string"
        }, {
            name: "Details",
            type: "auto"
        }, {
            name: "Attributes",
            tyoe: "auto"
        }],
        getDetails: function() {
            return this.get("Details") || []
        },
        getAttributes: function() {
            return this.get("Attributes") || []
        }
    }), Ext.define("CMDBuild.data.CMMiniCardGridBaseDataSource", {
        uses: ["CMDBuild.proxy.index.Json"],
        constructor: function() {
            return this.store = CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.UNCACHED, {
                pageSize: CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ROW_LIMIT),
                model: "CMDBuild.view.management.CMMiniCardGridModel",
                autoLoad: !1,
                remoteSort: !0,
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.card.readAll,
                    reader: {
                        root: "rows",
                        type: "json",
                        totalProperty: "results",
                        idProperty: "Id"
                    },
                    extraParams: {
                        attributes: Ext.encode(["Id", "IdClass", "Code", "Description"])
                    }
                },
                sorters: [{
                    property: "Code",
                    direction: "ASC"
                }, {
                    property: "Description",
                    direction: "ASC"
                }]
            }), this.callParent(arguments)
        },
        getStore: function() {
            return this.store
        },
        getLastEntryTypeIdLoaded: function() {
            return this.store.proxy.extraParams ? this.store.proxy.extraParams.IdClass : null
        },
        loadStoreForEntryTypeId: function(t, e) {
            this.store.proxy.setExtraParam("className", _CMCache.getEntryTypeNameById(t)), this.store.load({
                callback: e
            })
        },
        loadPageForCard: function(t, e) {}
    }), Ext.define("CMDBuild.data.CMDetailedCardDataSource", {
        uses: ["CMDBuild.proxy.Card"],
        extend: "CMDBuild.data.CMMiniCardGridBaseDataSource",
        constructor: function() {
            this.callParent(arguments), this.store = new Ext.data.Store({
                pageSize: CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ROW_LIMIT),
                model: "CMDBuild.view.management.CMMiniCardGridModel",
                autoLoad: !1
            })
        },
        clearStore: function() {
            this.store.removeAll()
        },
        loadCard: function(t) {
            t = function(t) {
                if (t.Id && t.IdClass) {
                    _deprecated("adaptGetCardCallParams", this);
                    var e = {};
                    e[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(t.IdClass), e[CMDBuild.core.constants.Proxy.CARD_ID] = t.Id, t = e
                }
                return t
            }(t), CMDBuild.proxy.Card.read({
                params: t,
                loadMask: !1,
                scope: this,
                success: function(t, e, i) {
                    var n = i.card,
                        a = i.attributes,
                        o = new CMDBuild.view.management.CMMiniCardGridModel({
                            Id: n.Id,
                            IdClass: n.IdClass,
                            Code: n.Code,
                            Description: n.Description,
                            Details: n,
                            Attributes: a,
                            ClassName: n.IdClass_value
                        });
                    this.store.add(o)
                }
            })
        },
        getLastEntryTypeIdLoaded: function() {
            return null
        },
        loadStoreForEntryTypeId: function(t, e) {}
    }),
    function() {
        var t = "editMode",
            e = "displayMode";
        Ext.define("CMDBuild.Management.EditablePanel", {
            extend: "Ext.panel.Panel",
            attributes: void 0,
            layout: "card",
            activeItem: 0,
            hideMode: "offsets",
            autoScroll: !1,
            _state: e,
            _stateSwitchFail: !1,
            initComponent: function() {
                var i = null,
                    n = new CMDBuild.Management.EditablePanel.SubPanel({
                        editable: !1,
                        attributes: this.attributes
                    });
                this.items = [n], this.ensureEditPanel = function() {
                    null == i && (i = new CMDBuild.Management.EditablePanel.SubPanel({
                        attributes: this.attributes
                    }), this.add(i))
                }, this.editMode = function() {
                    this.ensureEditPanel();
                    var e = this.getLayout();
                    if (this._state = t, e.setActiveItem) try {
                        e.setActiveItem(i.id)
                    } catch (t) {
                        this._stateSwitchFail = !0
                    }
                }, this.displayMode = function() {
                    var t = this.getLayout();
                    if (this._state = e, t.setActiveItem) try {
                        t.setActiveItem(n.id)
                    } catch (t) {
                        this._stateSwitchFail = !0
                    }
                }, this.isEmpty = function() {
                    return 0 == n.fields().length
                }, this.getFields = function() {
                    return this.ensureEditPanel(), i.fields()
                }, this.callParent(arguments), this.mon(this, "activate", function() {
                    this._stateSwitchFail && this[this._state]()
                }, this)
            }
        }), Ext.define("CMDBuild.Management.EditablePanel.SubPanel", {
            extend: "Ext.panel.Panel",
            frame: !1,
            border: !1,
            bodyCls: "x-panel-body-default-framed",
            autoScroll: !0,
            labelAlign: "right",
            labelWidth: 160,
            attributes: void 0,
            editable: !0,
            hideMode: "offsets",
            fields: function() {
                return this.items && this.items.items ? this.items.items : []
            },
            initComponent: function() {
                this.callParent(arguments), this.attributes && function(t, e) {
                    if (t)
                        for (var i = 0; i < t.length; ++i) {
                            var n, a = t[i];
                            (n = e ? CMDBuild.Management.FieldManager.getFieldForAttr(a, this.readOnlyForm) : CMDBuild.Management.FieldManager.getFieldForAttr(a, !0)) && (n._belongToEditableSubpanel = this.editable, this.add(n))
                        }
                }.call(this, this.attributes, this.editable)
            }
        }), CMDBuild.Management.EditablePanel.build = function(t) {
            var e = new CMDBuild.Management.EditablePanel(t);
            return e.isEmpty() ? (delete e, null) : e
        }
    }(),
    function() {
        function t(t) {
            try {
                this.pressedTab && this.pressedTab.removeCls(this.pressedTabCls), t.addClass(this.pressedTabCls), this.pressedTab = t
            } catch (t) {}
        }

        function e() {
            return Ext.isIE7
        }

        function i(e) {
            t.call(this, e), this.fireEvent("click", e)
        }
        Ext.define("CMDBuild.view.common.CMSideTabPanel", {
            extend: "Ext.panel.Panel",
            frame: !1,
            border: !1,
            pressedTabCls: "cmdb-pressed-tab",
            tabCls: "cmdb-tab",
            bodyCls: "x-panel-body-default-framed",
            layout: {
                type: "vbox",
                align: "stretchmax"
            },
            defaults: {
                margins: "2 4 0 0"
            },
            initComponent: function() {
                e() ? this.maxTabWidth = 0 : this.autoWidth = !0, this.callParent(arguments)
            },
            addTabFor: function(n, a) {
                var o, r, s, l = this.tabCls,
                    d = (this.pressedTabCls, new Ext.container.Container({
                        text: n.title,
                        cls: l,
                        height: 25,
                        html: (o = n, r = a, r ? (s = '<div class="cmdb-tab-icon {1}"></div><p>{0}</p>', Ext.String.format(s, o.tabLabel, r)) : (s = "<p>{0}</p>", Ext.String.format(s, o.tabLabel))),
                        targetPanel: n,
                        listeners: {
                            render: function(t) {
                                t.getEl().on("click", Ext.Function.bind(t.fireEvent, t, ["click", t]))
                            }
                        }
                    }));
                d.on("click", i, this), e() && d.on("afterlayout", function(t) {
                    var e = t.getWidth();
                    this.maxTabWidth < e && this.setWidth(e + 22)
                }, this, {
                    single: !0
                }), n.on("activate", function() {
                    t.call(this, d), e() && n.doLayout()
                }, this), this.add(d)
            },
            activateFirst: function() {
                var t = this.items.first();
                t && i.call(this, t)
            },
            setActiveTab: function(t) {
                !Ext.isEmpty(this.items.getRange()) && Ext.isArray(this.items.getRange()) && Ext.Array.each(this.items.getRange(), function(e, n, a) {
                    if (t.detailId == e.targetPanel.detailId) return i.call(this, e), !1
                }, this)
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.CMTabPanel", {
        extend: "Ext.tab.Panel",
        plain: !0,
        initComponent: function() {
            this.tabPosition = CMDBuild.configuration.instance.get("cardTabsPosition") || "top", this.callParent(arguments), 1 == this.items.getCount() && this.getTabBar().hide()
        },
        activateFirst: function() {
            this.setActiveTab(0)
        },
        showAll: function() {
            for (var t = this.getActiveTab(), e = 0; e < this.items.length; e++) this.setActiveTab(e);
            this.items.length > 0 && t && this.setActiveTab(t)
        },
        editMode: function() {
            this.items.each(function(t) {
                "function" == typeof t.editMode && t.editMode()
            })
        },
        displayMode: function() {
            this.items.each(function(t) {
                "function" == typeof t.displayMode && t.displayMode()
            })
        },
        ensureEditPanel: function() {
            this.items.each(function(t) {
                "function" == typeof t.ensureEditPanel && t.ensureEditPanel()
            })
        }
    }), Ext.define("CMDBuild.view.management.common.CMMiniCardGrid", {
        extend: "Ext.grid.Panel",
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.CMMiniCardGridDelegate"), this.callParent(arguments)
        },
        withPagingBar: !0,
        denySelection: !0,
        initComponent: function() {
            var t, e = this;
            (t = e).dataSource || (t.dataSource = new CMDBuild.data.CMMiniCardGridBaseDataSource), t.store = t.dataSource.getStore(),
                function(t) {
                    if (t.withPagingBar) {
                        var e = new CMDBuild.field.GridSearchField({
                                grid: t
                            }),
                            i = new Ext.menu.Menu({
                                items: [e]
                            });
                        t.bbar = new Ext.toolbar.Paging({
                            store: t.store,
                            items: [{
                                iconCls: "search",
                                menu: i
                            }]
                        })
                    }
                }(e), this.columns = this.columns || [], this.columns = this.columns.concat([{
                    text: CMDBuild.Translation.management.modcard.relation_columns.code,
                    dataIndex: "Code",
                    flex: 1,
                    sortable: !0
                }, {
                    text: CMDBuild.Translation.management.modcard.relation_columns.description,
                    dataIndex: "Description",
                    flex: 2,
                    sortable: !0
                }, {
                    width: 40,
                    menuDisabled: !0,
                    xtype: "actioncolumn",
                    tooltip: CMDBuild.Translation.management.modcard.open_relation,
                    align: "center",
                    icon: "images/icons/bullet_go.png",
                    handler: function(t, e, i, n, a, o, r) {},
                    isDisabled: function(t, e, i, n, a) {
                        return !1
                    }
                }]), this.mon(this, "activate", function() {
                    this.callDelegates("miniCardGridDidActivate", this)
                }, this), this.mon(this, "beforeselect", function(t, i) {
                    return !this.denySelection && (this.callDelegates("miniCardGridItemSelected", [e, i]), !0)
                }, this), this.mon(this, "itemdblclick", function(t, i) {
                    var n, a;
                    a = i, (n = e).selectRecordSilently(a), n.callDelegates("miniCardGridWantOpenCard", [n, {
                        Id: a.get("Id"),
                        IdClass: a.get("IdClass")
                    }])
                }, this), this.callParent(arguments)
        },
        selectRecordSilently: function(t) {
            if (t) try {
                var e = this.getSelectionModel();
                e && (e.suspendEvents(), e.select(t), e.resumeEvents())
            } catch (t) {
                _debug("ERROR selecting the CMMiniCardGrid", t)
            }
        },
        selectCardSilently: function(t) {
            if (function(t) {
                    try {
                        var e = t.getSelectionModel();
                        e && e.deselectAll(!0)
                    } catch (t) {
                        _debug("ERROR deselecting the mini card grid", t)
                    }
                }(this), t) {
                var e = this.store.findRecord("Id", t.get("Id"));
                e && this.selectRecordSilently(e)
            }
        },
        getDataSource: function() {
            return this.dataSource
        }
    }),
    function() {
        Ext.define("CMDBuild.view.management.common.CMMiniCardGridWindowDelegate", {
            miniCardGridWindowDidShown: function() {}
        });
        Ext.define("CMDBuild.view.management.common.CMMiniCardGridWindow", {
            extend: "Ext.window.Window",
            mixins: {
                delegable: "CMDBuild.core.CMDelegable"
            },
            constructor: function() {
                this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.CMMiniCardGridWindowDelegate"), this.callParent(arguments)
            },
            withDetailExpander: !0,
            initComponent: function() {
                if (!this.dataSource) throw "A data source is needed";
                this.ghost = !1, this.layout = "border", this.miniCardGrid = Ext.create("CMDBuild.view.management.common.CMMiniCardGrid", {
                    frame: !1,
                    border: !1,
                    withPagingBar: !1,
                    denySelection: !1,
                    dataSource: this.dataSource,
                    region: "center",
                    columns: [{
                        text: CMDBuild.Translation.className,
                        dataIndex: "ClassName",
                        flex: 1,
                        sortable: !0
                    }]
                }), this.withDetailExpander ? (this.detailsPanel = new Ext.panel.Panel({
                    height: "50%",
                    split: !0,
                    region: "south",
                    border: !1,
                    frame: !1,
                    autoScroll: !0,
                    collapsed: !0,
                    collapseMode: "mini"
                }), this.items = [this.miniCardGrid, this.detailsPanel]) : this.items = [this.miniCardGrid], this.mon(this, "show", function() {
                    this.callDelegates("miniCardGridWindowDidShown", this)
                }, this), this.callParent(arguments)
            },
            getMiniCardGrid: function() {
                return this.miniCardGrid
            },
            clearDetailsPanel: function() {
                this.detailsPanel && CMDBuild.clearComponent(this.detailsPanel)
            },
            showDetailsForCard: function(t) {
                if (this.clearDetailsPanel(), t) {
                    var e = this;
                    _CMCache.getAttributeList(t.get("IdClass"), function(i) {
                        if (e.detailsPanel) {
                            e.detailsPanel.expand();
                            for (var n = t.getDetails(), a = '<ul class="cm_detailed_mini_card_grid_window_detail">', o = 0, r = null, s = null; o < i.length; ++o)(s = n[(r = i[o]).name]) && ("object" == typeof s && (s = s.description), a += Ext.String.format('<li><span class="cm-bold">{0}:</span> {1}</li>', r.name, s));
                            a += "</ul>", e.detailsPanel.add({
                                html: a,
                                frame: !1,
                                border: !1
                            })
                        }
                    })
                }
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.CMCardWindow", {
        extend: "CMDBuild.core.window.AbstractModal",
        cmEditMode: !1,
        withButtons: !1,
        border: !1,
        buttonAlign: "center",
        frame: !1,
        initComponent: function() {
            this.cardPanel = Ext.create("CMDBuild.view.management.classes.CMCardPanel", {
                withButtons: this.withButtons,
                withToolBar: this.withToolBar,
                allowNoteFiled: !0,
                border: !1,
                frame: !1
            });
            var t = this.cardPanel.CMEVENTS;
            if (this.CMEVENTS = {
                    saveCardButtonClick: t.saveCardButtonClick,
                    abortButtonClick: t.abortButtonClick,
                    formFilled: t.formFilled,
                    widgetButtonClick: t.widgetButtonClick,
                    editModeDidAcitvate: t.editModeDidAcitvate,
                    displayModeDidActivate: t.displayModeDidActivate
                }, this.relayEvents(this.cardPanel, [t.saveCardButtonClick, t.abortButtonClick, t.formFilled, t.widgetButtonClick, t.editModeDidAcitvate, t.displayModeDidActivate]), this.addEvents(t.saveCardButtonClick), this.addEvents(t.abortButtonClick), this.addEvents(t.formFilled), this.addEvents(t.widgetButtonClick), this.addEvents(t.editModeDidAcitvate), this.addEvents(t.displayModeDidActivate), this.classId) {
                var e = _CMUtils.getClassPrivileges(this.classId);
                this.cardPanel.writePrivilege = e.write
            }
            this.withButtons || (this.closeButton = new Ext.button.Button({
                text: CMDBuild.Translation.close,
                handler: this.close,
                scope: this
            }), this.buttons = [this.closeButton]), this.items = [this.cardPanel], this.callParent(arguments), _CMUtils.forwardMethods(this, this.cardPanel, ["displayMode", "editMode", "ensureEditPanel", "fillForm", "loadCard", "reset", "getForm", "getFormForTemplateResolver", "getWidgetButtonsPanel", "isInEditing"])
        }
    }), Ext.define("CMDBuild.view.management.common.CMCardListWindow", {
        extend: "CMDBuild.core.window.AbstractModal",
        ClassName: void 0,
        idClass: void 0,
        filterType: void 0,
        readOnly: void 0,
        selModel: void 0,
        selType: "rowmodel",
        multiSelect: !1,
        extraParams: {},
        gridConfig: {},
        initComponent: function() {
            if (void 0 === this.idClass && void 0 === this.ClassName) throw "There are no Class Id or Class Name to load";
            var t, e, i;
            this.title = CMDBuild.Translation.management.modcard.title + (t = this, e = _CMCache.getEntryTypeById(t.getIdClass()), i = "", e && (i = e.getDescription()), i), this.grid = new CMDBuild.view.management.common.CMCardGrid(this.buildGrdiConfiguration()), this.setItems(), this.callParent(arguments), this.mon(this.grid.getSelectionModel(), "selectionchange", this.onSelectionChange, this), this.mon(this.grid, "itemdblclick", this.onGridDoubleClick, this)
        },
        show: function() {
            this.callParent(arguments);
            var t = this.getIdClass();
            return this.grid.updateStoreForClassId(t), this
        },
        setItems: function() {
            this.items = [this.grid], this.readOnly || "class" != _CMCache.getEntryTypeById(this.getIdClass()).get("type") || (this.tbar = [this.addCardButton = this.buildAddButton()])
        },
        buildAddButton: function() {
            var t = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card"),
                e = _CMCache.getEntryTypeById(this.getIdClass());
            return t.updateForEntry(e), this.mon(t, "cmClick", function(t) {
                var e = new CMDBuild.view.management.common.CMCardWindow({
                    withButtons: !0,
                    title: t.className
                });
                new CMDBuild.controller.management.common.CMCardWindowController(e, {
                    cmEditMode: !0,
                    card: null,
                    entryType: t.classId
                }), e.show(), this.mon(e, "destroy", function() {
                    this.grid.reload()
                }, this)
            }, this), t
        },
        getIdClass: function() {
            if (this.idClass) return this.idClass;
            var t = _CMCache.getEntryTypeByName(this.ClassName);
            if (t) return t.getId();
            throw "No class info for " + Ext.getClassName(this)
        },
        buildGrdiConfiguration: function() {
            var t = Ext.apply(this.gridConfig, {
                cmAdvancedFilter: !1,
                columns: [],
                CQL: this.extraParams,
                frame: !1,
                border: !1,
                selType: this.selType,
                multiSelect: this.multiSelect
            });
            return void 0 === this.selModel ? t.selType = this.selType : t.selModel = this.selModel, t
        },
        onSelectionChange: Ext.emptyFn,
        onGridDoubleClick: Ext.emptyFn
    }), Ext.define("CMDBuild.Management.ReferenceSearchWindow", {
        extend: "CMDBuild.view.management.common.CMCardListWindow",
        initComponent: function() {
            this.selection = null, this.saveButton = new Ext.Button({
                text: CMDBuild.Translation.save,
                name: "saveButton",
                disabled: !0,
                handler: this.onSave,
                scope: this
            }), this.buttonAlign = "center", this.buttons = [this.saveButton], this.callParent(arguments), this.on("show", function() {
                if (this.grid.gridSearchField) {
                    var t = this;
                    Ext.Function.createDelayed(function() {
                        t.grid.gridSearchField.focus(), t.grid.gridSearchField.setValue(t.searchFieldValue)
                    }, 100)()
                }
            }, this, {
                single: !0
            })
        },
        buildGrdiConfiguration: function() {
            var t = this.callParent(arguments),
                e = this.extraParams;
            return Ext.apply(t, {
                getStoreExtraParams: function() {
                    return e
                }
            })
        },
        onSelectionChange: function(t, e) {
            e.length > 0 ? (this.saveButton.enable(), this.selection = e[0]) : (this.saveButton.disable(), this.selection = null)
        },
        onGridDoubleClick: function() {
            this.onSave()
        },
        onSave: function() {
            null != this.selection && this.fireEvent("cmdbuild-referencewindow-selected", this.selection), this.destroy()
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetManagerDelegate", {
        getFormForTemplateResolver: Ext.emptyFn,
        getWidgetButtonsPanel: Ext.emptyFn
    }), Ext.define("CMDBuild.view.management.common.widgets.CMTabbedWidgetDelegate", {
        getNotesPanel: Ext.emptyFn,
        getAttachmentsPanel: Ext.emptyFn,
        showWidget: Ext.emptyFn,
        activateFirstTab: Ext.emptyFn
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetManager", {
        delegate: void 0,
        builders: {},
        constructor: function(t, e) {
            var i = this;
            this.mainView = t, this.tabbedWidgetDelegate = e || null, Ext.apply(this, {
                builders: {
                    ".ManageEmail": function(t, e) {
                        return Ext.isEmpty(i.tabbedWidgetDelegate) || Ext.isEmpty(i.tabbedWidgetDelegate.getEmailPanel()) ? null : i.tabbedWidgetDelegate.getEmailPanel()
                    },
                    ".OpenAttachment": function(t, e) {
                        return Ext.isEmpty(i.tabbedWidgetDelegate) || Ext.isEmpty(i.tabbedWidgetDelegate.getAttachmentsPanel()) ? null : i.tabbedWidgetDelegate.getAttachmentsPanel()
                    },
                    ".OpenNote": function(t, e) {
                        return Ext.isEmpty(i.tabbedWidgetDelegate) || Ext.isEmpty(i.tabbedWidgetDelegate.getNotesPanel()) ? null : i.tabbedWidgetDelegate.getNotesPanel()
                    },
                    ".Calendar": function(t, e) {
                        var n = new CMDBuild.view.management.common.widgets.CMCalendar;
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".CreateModifyCard": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.createModifyCard.CMCreateModifyCard");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".CustomForm": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.customForm.CustomFormView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".Grid": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.common.widgets.grid.GridView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".LinkCards": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.linkCards.LinkCards", {
                            widgetConf: t
                        });
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".ManageRelation": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.manageRelation.CMManageRelation", {
                            widget: t
                        });
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".NavigationTree": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.navigationTree.NavigationTreeView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".OpenReport": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.openReport.OpenReportView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".Ping": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.PingView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".PresetFromCard": function(t, e) {
                        var n = new CMDBuild.view.management.common.widgets.CMPresetFromCard;
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".WebService": function(t, e) {
                        var n = new CMDBuild.view.management.common.widgets.CMWebService;
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".Workflow": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.common.widgets.workflow.CMWorkflow");
                        return i.widgetsContainer.addWidgt(n), n
                    }
                }
            })
        },
        buildWidget: function(t, e) {
            return this.mainView.getWidgetButtonsPanel().addWidget(t), this._buildWidget(t, e)
        },
        showWidget: function(t, e) {
            null != this.tabbedWidgetDelegate && this.tabbedWidgetDelegate.showWidget(t, e) || this.widgetsContainer.showWidget(t, e)
        },
        hideWidgetsContainer: function() {
            this.widgetsContainer && this.widgetsContainer.hide()
        },
        buildWidgetsContainer: function() {
            return Ext.create("CMDBuild.view.management.common.widgets.CMWidgetsWindow", {
                delegate: this.delegate
            })
        },
        reset: function() {
            Ext.isEmpty(this.widgetsContainer) || this.widgetsContainer.destroy(), this.widgetsContainer = this.buildWidgetsContainer(), this.mainView.getWidgetButtonsPanel().removeAllButtons(), this.widgetsMap = {}
        },
        getFormForTemplateResolver: function() {
            return this.mainView.getFormForTemplateResolver()
        },
        activateFirstTab: function() {
            null != this.tabbedWidgetDelegate && this.tabbedWidgetDelegate.activateFirstTab()
        },
        _buildWidget: function(t, e) {
            return this.builders[t.type] ? this.builders[t.type](t, e) : null
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetManagerPopup", {
        extend: "CMDBuild.view.management.common.widgets.CMWidgetManager",
        buildWidgetsContainer: function() {
            return new CMDBuild.view.management.common.widgets.CMWidgetsWindowPopup
        }
    }),
    function() {
        var t = CMDBuild.Translation.management.modcard;

        function e(t, e, i, n) {
            var a = t.getForm().getFields();
            for (var o in "Ext.util.MixedCollection" == Ext.getClassName(a) && (a = a.items), a) a[o].isObservable && Ext.isFunction(a[o].suspendEvents) && a[o].suspendEvents(!1);
            if (function(t, e) {
                    for (var i in e || {}) {
                        var n = e[i];
                        for (var a in n) {
                            var o = "_" + i + "_" + a,
                                r = n[a];
                            t[o] = r
                        }
                    }
                }(e, i), a)
                for (var r = 0, s = a.length; r < s; ++r) {
                    var l = a[r];
                    if ("function" != typeof n || n(l)) try {
                        l.setValue(e[l.name]), "function" == typeof l.isFiltered && l.isFiltered() && l.setServerVarsForTemplate(e)
                    } catch (t) {
                        _msg("[Field name: " + l.name + "] " + t.message)
                    }
                }
            for (var o in a) a[o].isObservable && Ext.isFunction(a[o].resumeEvents) && a[o].resumeEvents();
            t.fireEvent(t.CMEVENTS.formFilled)
        }
        Ext.define("CMDBuild.view.management.classes.CMCardForm", {
            extend: "Ext.form.Panel",
            mixins: {
                cmFormFunctions: "CMDBUild.view.common.CMFormFunctions"
            },
            _lastCard: null,
            _isInEditMode: !1,
            constructor: function(t) {
                Ext.apply(this, t), this.CMEVENTS = {
                    saveCardButtonClick: "cm-save",
                    abortButtonClick: "cm-abort",
                    removeCardButtonClick: "cm-remove",
                    modifyCardButtonClick: "cm-modify",
                    cloneCardButtonClick: "cm-clone",
                    printCardButtonClick: "cm-print",
                    openGraphButtonClick: "cm-graph",
                    formFilled: "cmFormFilled",
                    editModeDidAcitvate: "cmeditmode",
                    displayModeDidActivate: "cmdisplaymode"
                }, this.addEvents([this.CMEVENTS.saveCardButtonClick, this.CMEVENTS.abortButtonClick, this.CMEVENTS.removeCardButtonClick, this.CMEVENTS.modifyCardButtonClick, this.CMEVENTS.cloneCardButtonClick, this.CMEVENTS.printCardButtonClick, this.CMEVENTS.openGraphButtonClick, this.CMEVENTS.editModeDidAcitvate, this.CMEVENTS.displayModeDidActivate]), this.buildTBar(), this.buildButtons(), this.callParent(arguments)
            },
            initComponent: function() {
                Ext.apply(this, {
                    frame: !1,
                    border: !1,
                    hideMode: "offsets",
                    bodyCls: "x-panel-body-default-framed cmdb-border-top",
                    bodyStyle: {
                        padding: "5px 5px 0 5px"
                    },
                    cls: "x-panel-body-default-framed",
                    autoScroll: !1,
                    tbar: this.cmTBar,
                    buttonAlign: "center",
                    buttons: this.cmButtons,
                    layout: {
                        type: "hbox",
                        align: "stretch"
                    }
                }), this.callParent(arguments)
            },
            editMode: function() {
                this._isInEditMode || (this.ensureEditPanel(), this.tabPanel && this.tabPanel.editMode(), this.disableCMTbar(), this.enableCMButtons(), this.tabPanel.showAll(), this.fireEvent(this.CMEVENTS.editModeDidAcitvate), this._isInEditMode = !0)
            },
            displayMode: function(t) {
                this.suspendLayouts(), this.tabPanel && this.tabPanel.displayMode(), t ? this.enableCMTbar() : this.disableCMTbar(), this.disableCMButtons(), this.resumeLayouts(!0), this.fireEvent(this.CMEVENTS.displayModeDidActivate), this._isInEditMode = !1
            },
            displayModeForNotEditableCard: function() {
                this.displayMode(enableCMBar = !1), this.printCardMenu && this.printCardMenu.enable(), this.graphButton && this.graphButton.enable()
            },
            reset: function() {
                this.suspendLayouts(), this._isInEditMode = !1, this.mixins.cmFormFunctions.reset.apply(this), this.resumeLayouts(!0)
            },
            loadCard: function(t, i) {
                if (this._lastCard = t, this.reset(), t) {
                    if ("object" != typeof t) throw "Card must be an object";
                    var n, a, o = t.raw || t.data;
                    i ? e(this, o) : this._isInEditMode ? e(this, o, a, function(t) {
                        return t._belongToEditableSubpanel
                    }) : e(this, o, n, function(t) {
                        return !t._belongToEditableSubpanel
                    }), this.initValues()
                }
            },
            canReconfigureTheForm: function() {
                var t = !0;
                try {
                    t = this.isVisible(!0)
                } catch (t) {}
                return t
            },
            ensureEditPanel: function() {
                this.tabPanel && !this._isInEditMode && (this.tabPanel.ensureEditPanel(), this._lastCard && (this.loadCard(this._lastCard, bothPanels = !0), this.callFieldTemplateResolverIfNeeded()))
            },
            fillForm: function(t, e) {
                this._lastCard = null;
                var i = [],
                    n = CMDBuild.Utils.groupAttributes(t, !1);
                this.suspendLayouts(), CMDBuild.clearComponent(this);
                var a = this.getForm().getFields();
                for (var o in a.clear(), n) {
                    var t = n[o],
                        r = CMDBuild.Management.EditablePanel.build({
                            attributes: t,
                            frame: !1,
                            border: !1,
                            title: o,
                            bodyCls: "x-panel-body-default-framed",
                            bodyStyle: {
                                padding: "5px"
                            }
                        });
                    r && i.push(r)
                }
                this.tabPanel && delete this.tabPanel;
                0 == i.length && (i = [new CMDBuild.Management.EditablePanel({
                    attributes: [],
                    frame: !1,
                    border: !1,
                    title: "",
                    bodyCls: "x-panel-body-default-framed",
                    bodyStyle: {
                        padding: "5px"
                    }
                })]);
                this.tabPanel = new CMDBuild.view.management.common.CMTabPanel({
                    items: i,
                    frame: !1,
                    flex: 1
                }), this.add(this.tabPanel), this.resumeLayouts(!0), this.doLayout(), this.danglingCard && (function(t) {
                    this.loadRemoteData || this.hasDomainAttributes() ? this.loadCard(t.get("Id"), t.get("IdClass")) : this.loadCard(t);
                    this.loadRemoteData = !1
                }.call(this, this.danglingCard), this.danglingCard = null);
                (e || this.forceEditMode) && (this.editMode(), this.forceEditMode = !1)
            },
            buildTBar: function() {
                if (this.withToolBar) {
                    var e = this;
                    this.deleteCardButton = new Ext.button.Button({
                        iconCls: "delete",
                        text: t.delete_card,
                        handler: function() {
                            e.fireEvent(e.CMEVENTS.removeCardButtonClick)
                        }
                    }), this.cloneCardButton = new Ext.button.Button({
                        iconCls: "clone",
                        text: t.clone_card,
                        handler: function() {
                            e.fireEvent(e.CMEVENTS.cloneCardButtonClick)
                        }
                    }), this.modifyCardButton = new Ext.button.Button({
                        iconCls: "modify",
                        text: t.modify_card,
                        handler: function() {
                            e.fireEvent(e.CMEVENTS.modifyCardButtonClick)
                        }
                    }), this.printCardMenu = Ext.create("CMDBuild.core.buttons.iconized.split.Print", {
                        formatList: [CMDBuild.core.constants.Proxy.PDF, CMDBuild.core.constants.Proxy.ODT],
                        mode: "legacy",
                        text: CMDBuild.Translation.print + " " + CMDBuild.Translation.management.modcard.tabs.card.toLowerCase()
                    }), this.mon(this.printCardMenu, "click", function(t) {
                        Ext.isString(t) && e.fireEvent(e.CMEVENTS.printCardButtonClick, t)
                    }), this.cmTBar = [this.modifyCardButton, this.deleteCardButton, this.cloneCardButton], this.graphButton = Ext.create("CMDBuild.core.buttons.iconized.RelationGraph", {
                        scope: this,
                        handler: function(t, e) {
                            this.fireEvent(this.CMEVENTS.openGraphButtonClick)
                        }
                    }), CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) && this.cmTBar.push(this.graphButton), this.cmTBar.push(this.printCardMenu)
                }
            },
            buildButtons: function() {
                if (this.withButtons) {
                    var t = this;
                    this.saveButton = new Ext.button.Button({
                        text: CMDBuild.Translation.save,
                        handler: function() {
                            t.fireEvent(t.CMEVENTS.saveCardButtonClick)
                        }
                    }), this.cancelButton = new Ext.button.Button({
                        text: this.readOnlyForm ? CMDBuild.Translation.close : CMDBuild.Translation.cancel,
                        handler: function() {
                            t.fireEvent(t.CMEVENTS.abortButtonClick)
                        }
                    }), this.cmButtons = [this.saveButton, this.cancelButton]
                }
            },
            hasDomainAttributes: function() {
                for (var t = this.getForm().getFields().items, e = 0, i = t.length; e < i; ++e)
                    if (t[e].cmDomainAttribute) return !0;
                return !1
            },
            callFieldTemplateResolverIfNeeded: function() {
                var t = Ext.create("CMDBuild.core.RequestBarrier", {
                    id: "templateResolverBarrier",
                    scope: this,
                    callback: function() {
                        Ext.isObject(this._lastCard) && !Ext.Object.isEmpty(this._lastCard) && e(this, this._lastCard.raw || this._lastCard.data)
                    }
                });
                this.getForm().getFields().each(function(e, i, n) {
                    Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isFunction(e.resolveTemplate) && e.resolveTemplate({
                        iden: e.name,
                        callback: t.getCallback("templateResolverBarrier")
                    })
                }, this), t.finalize("templateResolverBarrier", !0)
            },
            isInEditing: function() {
                return this._isInEditMode
            },
            toString: function() {
                return "CMCardForm"
            }
        })
    }(), Ext.define("CMDBuild.view.management.classes.CMCardNotesPanel", {
        extend: "Ext.panel.Panel",
        translation: CMDBuild.Translation.management.modcard,
        withButtons: !0,
        withTbar: !0,
        initComponent: function() {
            this._editMode = !1, this.CMEVENTS = {
                saveNoteButtonClick: "cm-save-clicked",
                cancelNoteButtonClick: "cm-cancel-clicked",
                modifyNoteButtonClick: "cm-modify.clicked"
            };
            var t = this;
            this.modifyNoteButton = new Ext.button.Button({
                iconCls: "modify",
                text: this.translation.modify_note,
                handler: function() {
                    t.fireEvent(t.CMEVENTS.modifyNoteButtonClick)
                }
            });
            var e = Ext.create("CMDBuild.view.common.field.HtmlEditor", {
                name: "Notes",
                hideLabel: !0
            });
            this.actualForm = new Ext.form.Panel({
                hideMode: "offsets",
                layout: "fit",
                border: !1,
                frame: !1,
                bodyCls: "x-panel-body-default-framed",
                hideMode: "offsets",
                items: [e],
                setValue: function(t) {
                    e.setValue(t || "")
                },
                getValue: function() {
                    return e.getValue()
                }
            });
            var i = new Ext.form.field.Display({
                padding: "0 0 5px 5px",
                name: "Notes",
                anchor: "95%"
            });
            this.displayPanel = new Ext.form.Panel({
                hideMode: "offsets",
                autoScroll: !0,
                frame: !1,
                bodyCls: "x-panel-body-default-framed",
                items: [i],
                setValue: function(t) {
                    i.setValue(t)
                },
                getValue: function() {
                    return i.getValue()
                }
            }), this.buildButtons(), this.withTbar && (this.tbar = [this.modifyNoteButton]), Ext.apply(this, {
                hideMode: "offsets",
                frame: !1,
                border: !1,
                cls: "x-panel-body-default-framed",
                layout: "card",
                items: [this.displayPanel, this.actualForm],
                buttonAlign: "center"
            }), this.callParent(arguments)
        },
        buildButtons: function() {
            if (this.withButtons) {
                var t = this;
                this.buttons = [this.saveButton = new Ext.button.Button({
                    text: CMDBuild.Translation.save,
                    name: "saveButton",
                    formBind: !0,
                    handler: function() {
                        t.fireEvent(t.CMEVENTS.saveNoteButtonClick)
                    }
                }), this.cancelButton = new Ext.button.Button({
                    text: CMDBuild.Translation.cancel,
                    name: "cancelButton",
                    handler: function() {
                        t.fireEvent(t.CMEVENTS.cancelNoteButtonClick)
                    }
                })];
                var e = this.getExtraButtons();
                e && (Ext.isArray(e) ? this.buttons = this.buttons.concat(e) : this.buttons.push(e))
            }
        },
        reset: function() {
            this.actualForm.getForm().reset(), this.displayPanel.getForm().reset()
        },
        loadCard: function(t) {
            this.actualForm.getForm().loadRecord(t), this.displayPanel.getForm().loadRecord(t)
        },
        getForm: function() {
            return this.actualForm.getForm()
        },
        syncForms: function() {
            var t = this.actualForm.getValue();
            return this.displayPanel.setValue(t), t
        },
        disableModify: function() {
            this.privWrite ? this.modifyNoteButton.enable() : this.modifyNoteButton.disable(), this.withButtons && (this.saveButton.disable(), this.cancelButton.disable()), this.getLayout().setActiveItem(this.displayPanel), this._editMode = !1
        },
        enableModify: function() {
            this.modifyNoteButton.disable(), this.withButtons && (this.saveButton.enable(), this.cancelButton.enable()), this.getLayout().setActiveItem(this.actualForm), this.actualForm.setValue(this.displayPanel.getValue()), this._editMode = !0
        },
        updateWritePrivileges: function(t) {
            this.privWrite = t
        },
        isInEditing: function() {
            return this._editMode
        },
        getExtraButtons: Ext.emptyFn,
        reloadCard: function(t) {
            _deprecated("reloadCard", this), this.enable()
        },
        onClassSelected: function() {
            _deprecated("onClassSelected", this)
        },
        onCardSelected: function(t) {
            _deprecated("onCardSelected", this);
            var e = t.raw.IdClass;
            CMDBuild.Utils.isSimpleTable(e) ? this.disable() : (this.enable(), this.currentCardId = t.get("Id"), this.currentCardPrivileges = {
                create: t.raw.priv_create,
                write: t.raw.priv_write
            }, this.reset(), this.loadCard(t), this.disableModify())
        }
    }),
    function() {
        var t = "dst_cid",
            e = (CMDBuild.Translation.management.modcard, CMDBuild.Translation.management.modcard.relation_columns),
            i = {
                enable: function() {},
                disable: function() {},
                on: function() {}
            };

        function n(t, e) {
            var i, n, o, r, s, l = e.data.attributes || [],
                d = '<span class="cm-bold">',
                c = t.relations_size > CMDBuild.configuration.instance.get("relationLimit"),
                u = t.src,
                h = e.get("id"),
                C = {
                    dom_id: h,
                    label: (i = t, n = e, o = n.get("descr" + i.src), r = i.relations_size, s = r > 1 ? CMDBuild.Translation.management.modcard.relation_columns.items : CMDBuild.Translation.management.modcard.relation_columns.item, '<span class="cm-bold">' + o + " (" + r + " " + s + ")</span>"),
                    src: u,
                    relations_size: t.relations_size,
                    expanded: !c,
                    leaf: !1,
                    children: [],
                    rel_attr_keys: []
                };
            if (l.length > 0) {
                this.showAttributesColumn = !0;
                for (var m = 0, g = l.length; m < g; m++) {
                    var M = l[m];
                    "hidden" != M.fieldmode && (C.rel_attr_keys.push(M.name), d += 0 == m ? "" : " | ", d += M.description || M.name)
                }
                C.rel_attr = d + "</span>"
            }
            return c ? C.children.push({}) : C.children = a(t.relations, h, u, C), C
        }

        function a(t, e, i, n, a) {
            for (var o, r, s, l, d = 0, c = (t = t || []).length, u = [], h = ""; d < c; ++d)
                if (o = t[d], r = _CMCache.getEntryTypeById(o.dst_cid)) {
                    o.leaf = !0, o.label = r.get("text"), o.dom_id = e, o.src = i, h = "", n.rel_attr_keys = n.rel_attr_keys || a.raw.rel_attr_keys || [];
                    for (var C = 0; C < n.rel_attr_keys.length; ++C) s = n.rel_attr_keys[C], void 0 === (l = o.rel_attr[s]) && (l = " - "), h += 0 == C ? "" : " | ", h += l.dsc || l;
                    o.attr_as_obj = o.rel_attr, o.rel_attr = h, u.push(o), a && a.appendChild(o)
                }
            return u
        }
        Ext.define("CMRelationPanelModel", {
            extend: "Ext.data.Model",
            fields: ["dom_id", "dom_desc", "label", "dst_code", "dst_id", "dst_desc", "dst_cid", "rel_attr", "rel_date", "rel_id", "relations_size", "src"]
        }), Ext.define("CMDBuild.view.management.classes.CMCardRelationsPanel", {
            extend: "Ext.tree.Panel",
            cmWithAddButton: !0,
            cmWithEditRelationIcons: !0,
            initComponent: function() {
                this.buildTBar(), this.attrsColumn = new Ext.grid.column.Column({
                    header: CMDBuild.Translation.administration.modClass.tabs.attributes,
                    hideMode: "visibility",
                    flex: 3,
                    sortable: !1,
                    dataIndex: "rel_attr"
                }), Ext.apply(this, {
                    loadMask: !1,
                    hideMode: "offsets",
                    store: new Ext.data.TreeStore({
                        model: "CMRelationPanelModel",
                        root: {
                            expanded: !0,
                            children: []
                        },
                        autoLoad: !1
                    }),
                    rootVisible: !1,
                    columns: [{
                        header: e.domain,
                        sortable: !1,
                        dataIndex: "dom_id",
                        hidden: !0
                    }, {
                        header: e.destclass,
                        flex: 2,
                        sortable: !1,
                        dataIndex: "label",
                        xtype: "treecolumn"
                    }, {
                        header: e.begin_date,
                        flex: 1,
                        sortable: !1,
                        dataIndex: "rel_date"
                    }, {
                        header: e.code,
                        flex: 1,
                        sortable: !1,
                        dataIndex: "dst_code"
                    }, {
                        header: e.description,
                        flex: 2,
                        sortable: !1,
                        dataIndex: "dst_desc"
                    }, this.attrsColumn, {
                        header: "&nbsp",
                        fixed: !0,
                        sortable: !1,
                        renderer: Ext.bind(this.renderRelationActions, this),
                        align: "center",
                        tdCls: "grid-button",
                        dataIndex: "Fake",
                        menuDisabled: !0,
                        hideable: !1
                    }]
                }), this.callParent(arguments), this.CMEVENTS = {
                    addButtonClick: "cm-add-relation-click",
                    domainNodeAppended: "cm-domain-node-appended",
                    openGraphClick: "cm-open-graph"
                }, this.addEvents(this.CMEVENTS.addButtonClick), this.addEvents(this.CMEVENTS.domainNodeAppended), this.addEvents(this.CMEVENTS.openGraphClick)
            },
            buildTBar: function() {
                var t = this;
                this.tbar = [], this.addRelationButton = Ext.create("CMDBuild.core.buttons.iconized.add.Relation"), this.mon(this.addRelationButton, "cmClick", function(e) {
                    t.fireEvent(t.CMEVENTS.addButtonClick, e)
                }), this.cmWithAddButton && this.tbar.push(this.addRelationButton), CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) ? (this.graphButton = Ext.create("CMDBuild.core.buttons.iconized.RelationGraph", {
                    scope: this,
                    handler: function(t, e) {
                        this.fireEvent(this.CMEVENTS.openGraphClick)
                    }
                }), this.tbar.push(this.graphButton)) : this.graphButton = i
            },
            clearStore: function() {
                this.store.getRootNode().removeAll()
            },
            fillWithData: function(t) {
                this.showAttributesColumn = !1, t = t || [];
                for (var e = [], i = this.store.getRootNode(), a = 0, o = t.length; a < o; ++a) {
                    var r = t[a],
                        s = _CMCache.getDomainById(r.id);
                    s ? e.push(n.call(this, r, s)) : CMDBuild.log.error("I have not cached data for domain", r.id)
                }
                i.removeAll(), e.length > 0 && i.appendChild(e), this.showAttributesColumn ? this.attrsColumn.show() : this.attrsColumn.hide()
            },
            convertRelationInNodes: a,
            renderRelationActions: function(e, i, n) {
                if (1 == n.get("depth")) return "";
                var a = CMDBuild.Translation.management.modcard,
                    o = '<img style="cursor:pointer" title="' + a.open_relation + '" class="action-relation-go" src="images/icons/bullet_go.png"/>',
                    r = n.get(t),
                    s = _CMCache.getDomainById(n.get("dom_id")),
                    l = _CMCache.getClassById(r),
                    d = _CMCache.getEntryTypeById(r),
                    c = _CMUtils.getEntryTypePrivileges(d);
                this.cmWithEditRelationIcons && s.get("writePrivileges") && (o += '<img style="cursor:pointer" title="' + a.edit_relation + '" class="action-relation-edit" src="images/icons/link_edit.png"/><img style="cursor:pointer" title="' + a.delete_relation + '" class="action-relation-delete" src="images/icons/link_delete.png"/>');
                l && l.get("priv_write") && !c.crudDisabled.modify ? o += '<img style="cursor:pointer" title="' + a.modify_card + '" class="action-relation-editcard" src="images/icons/modify.png"/>' : o += '<img style="cursor:pointer" title="' + a.view_relation + '" class="action-relation-viewcard" src="images/icons/zoom.png"/>';
                CMDBuild.configuration.dms.get(CMDBuild.core.constants.Proxy.ENABLED) && (o += '<img style="cursor:pointer" title="' + a.showattach + '" class="action-relation-attach" src="images/icons/attach.png"/>');
                return o
            },
            onAddCardButtonClick: function() {
                _deprecated("onAddCardButtonClick", this), this.disable()
            },
            onClassSelected: function() {
                _deprecated("onClassSelected", this)
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetsWindow", {
        extend: "CMDBuild.core.window.AbstractModal",
        delegate: void 0,
        initComponent: function() {
            this.widgetsToAdd = {}, this.widgetsContainer = new Ext.panel.Panel({
                layout: "card",
                activeItem: 0,
                hideMode: "offsets",
                border: !1,
                frame: !1,
                items: [{}]
            });
            var t = this;
            Ext.apply(this, {
                items: [this.widgetsContainer],
                buttonAlign: "center",
                buttons: [{
                    text: CMDBuild.Translation.close,
                    _cmNotRemoveMe: !0,
                    handler: function() {
                        t.onWidgetsWindowHide(), t.hide()
                    }
                }]
            }), this.callParent(arguments)
        },
        listeners: {
            close: function(t, e) {
                Ext.isFunction(t.onWidgetsWindowHide) && t.onWidgetsWindowHide()
            },
            hide: function(t, e) {
                Ext.isFunction(t.onWidgetsWindowHide) && t.onWidgetsWindowHide()
            }
        },
        onWidgetsWindowHide: function() {
            Ext.isEmpty(this.delegate) || Ext.isEmpty(this.currentWidget.delegate) || this.delegate.beforeHideView(this.currentWidget.delegate)
        },
        showWidget: function(t, e) {
            if (this.currentWidget = t, this.setTitle(e), this.show(), this.widgetsToAdd[t.id] && (this.widgetsContainer.add(t), delete this.widgetsToAdd[t.id]), this.widgetsContainer.layout.setActiveItem(t.id), this.removeExtraButtons(), t.getExtraButtons) {
                var i = t.getExtraButtons();
                this.addExtraButtons(i)
            }
            t.buttonLabel && this.setTitle(t.buttonLabel)
        },
        addWidgt: function(t) {
            this.widgetsToAdd[t.id] = t
        },
        destroy: function() {
            CMDBuild.clearComponent(this.widgetsContainer), delete this.widgetsToAdd, this.callParent(arguments)
        },
        addExtraButtons: function(t) {
            var e = this.getButtonBar();
            e && e.insert(0, t)
        },
        removeExtraButtons: function() {
            var t = this.getButtonBar();
            t && t.items.each(function(e) {
                e._cmNotRemoveMe || t.remove(e)
            })
        },
        getButtonBar: function() {
            for (var t = this.getDockedItems(), e = 0, i = t.length; e < i; ++e) {
                var n = t[e];
                if ("bottom" == n.dock) return n
            }
            return null
        },
        close: function() {
            this.hide()
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetsWindowPopup", {
        extend: "CMDBuild.view.management.common.widgets.CMWidgetsWindow",
        defaultSizeW: .9,
        defaultSizeH: .8,
        initComponent: function() {
            this.callParent(arguments), this.height = this.height * this.defaultSizeH, this.width = this.width * this.defaultSizeW
        }
    }), Ext.define("CMDBuild.view.management.common.widget.CMWidgetButton", {
        extend: "Ext.Button",
        widgetDefinition: void 0,
        constructor: function() {
            this.callParent(arguments), this.margins = "0 0 5 0", this.text = this.widgetDefinition.label, this.disabled = !this.widgetDefinition.alwaysenabled
        },
        disable: function() {
            return this.widgetDefinition && this.widgetDefinition.alwaysenabled || CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.PROCESS_WIDGET_ALWAYS_ENABLED) ? this.enable() : this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.management.common.widget.CMWidgetButtonsPanel", {
        extend: "Ext.panel.Panel",
        statics: {
            CMEVENTS: {
                widgetButtonClick: "widget-click"
            }
        },
        initComponent: function() {
            this.frame = !1, this.border = !1, this.layout = {
                type: "vbox",
                align: "stretch"
            }, this.bodyCls = "x-panel-body-default-framed", this.bodyStyle = {
                padding: "30px 5px 0 5px"
            }, this.callParent(arguments), this.CMEVENTS = this.self.CMEVENTS
        },
        addWidget: function(t) {
            var e = this;
            e._hidden && (e.show(), e._hidden = !1), e.add(new CMDBuild.view.management.common.widget.CMWidgetButton({
                widgetDefinition: t,
                handler: function() {
                    e.fireEvent(e.CMEVENTS.widgetButtonClick, t)
                }
            }))
        },
        displayMode: function() {
            this.items.each(function(t) {
                t.disable()
            })
        },
        editMode: function() {
            this.items.each(function(t) {
                t.enable()
            })
        },
        removeAllButtons: function() {
            CMDBuild.clearComponent(this), this.hide(), this._hidden = !0
        }
    }), Ext.define("CMDBuild.view.management.common.widget.CMWidgetButtonsPanelPopup", {
        extend: "CMDBuild.view.management.common.widget.CMWidgetButtonsPanel",
        addWidget: function(t) {
            var e = this;
            e._hidden && (e.show(), e._hidden = !1), e.add(new CMDBuild.view.management.common.widget.CMWidgetButton({
                widgetDefinition: t,
                handler: function() {
                    e.delegate.onWidgetButtonClick(t)
                }
            }))
        }
    }), Ext.define("CMDBuild.view.management.common.CMFormWithWidgetButtons", {
        extend: "Ext.panel.Panel",
        mixins: {
            widgetManagerDelegate: "CMDBuild.view.management.common.widgets.CMWidgetManagerDelegate"
        },
        withToolBar: !1,
        withButtons: !1,
        initComponent: function() {
            this.form = this.buildForm(), _CMUtils.forwardMethods(this, this.form, ["loadCard", "getValues", "reset", "getInvalidAttributeAsHTML", "fillForm", "getForm", "hasDomainAttributes", "ensureEditPanel", "isInEditing"]), this.widgets = new CMDBuild.view.management.common.widget.CMWidgetButtonsPanel({
                region: "east",
                hideMode: "offsets",
                cls: "cmdb-border-left",
                autoScroll: !0,
                frame: !0,
                border: !1,
                items: []
            }), _CMUtils.forwardMethods(this, this.widgets, ["removeAllButtons", "addWidget"]), this.widgets.hide(), Ext.apply(this, {
                layout: "border",
                items: [this.form, this.widgets]
            }), this.callParent(arguments), this.CMEVENTS = Ext.apply(this.form.CMEVENTS, this.widgets.CMEVENTS), this.relayEvents(this.widgets, [this.widgets.CMEVENTS.widgetButtonClick]);
            var t = this.form.CMEVENTS;
            this.relayEvents(this.form, [t.saveCardButtonClick, t.abortButtonClick, t.removeCardButtonClick, t.modifyCardButtonClick, t.cloneCardButtonClick, t.printCardButtonClick, t.openGraphButtonClick, t.editModeDidAcitvate, t.displayModeDidActivate]), this.mon(this, "activate", function() {
                this.form.fireEvent("activate")
            }, this)
        },
        buildForm: function() {
            return new CMDBuild.view.management.classes.CMCardForm({
                region: "center",
                cmOwner: this,
                withToolBar: this.withToolBar,
                withButtons: this.withButtons
            })
        },
        displayMode: function(t) {
            this.form.displayMode(t), this.widgets.displayMode()
        },
        displayModeForNotEditableCard: function() {
            this.form.displayModeForNotEditableCard(), this.widgets.displayMode()
        },
        editMode: function() {
            this.form.editMode(), this.widgets.editMode()
        },
        isTheActivePanel: function() {
            var t = !0;
            try {
                t = this.ownerCt.layout.getActiveItem() == this
            } catch (t) {}
            return t
        },
        formIsVisisble: function() {
            return this.form.isVisible(deep = !0)
        },
        getFormForTemplateResolver: function() {
            return this.form.getForm()
        },
        showCardPanel: Ext.emptyFn,
        getWidgetButtonsPanel: function() {
            return this.widgets
        }
    }), Ext.override(Extensible.calendar.view.AbstractCalendar, {
        onClick: function(t, e) {
            if (this.dropZone && this.dropZone.clearShims(), !0 === this.menuActive) return this.menuActive = !1, !0;
            var i = t.getTarget(this.eventSelector, 5);
            if (i) {
                var n = this.getEventIdFromEl(i),
                    a = this.getEventRecord(n);
                return this.fireEvent("eventclick", this, a, i), !0
            }
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMCalendar", {
        extend: "Ext.panel.Panel",
        withButtons: !0,
        constructor: function() {
            this.eventStore = new Extensible.calendar.data.MemoryEventStore({
                data: []
            }), this.calendar = new Extensible.calendar.CalendarPanel({
                eventStore: this.eventStore,
                hideMode: "offsets",
                region: "center",
                frame: !1,
                border: !1,
                showTodayText: !0,
                readOnly: !0,
                showNavToday: !1
            }), this.addEvents("eventclick"), this.addEvents("viewchange"), this.relayEvents(this.calendar, ["eventclick", "viewchange"]), Ext.apply(this, {
                frame: !1,
                border: !1,
                items: [this.calendar],
                layout: "border",
                cls: "x-panel-body-default-framed"
            }), this.callParent(arguments)
        },
        addEvent: function(t) {
            this.eventStore.add(t)
        },
        clearStore: function() {
            this.eventStore.removeAll()
        },
        getWievBounds: function() {
            var t, e, i, n = (i = null, (e = this).calendar.layout && e.calendar.layout.getActiveItem && (i = e.calendar.layout.getActiveItem()), i);
            if (n && n.getViewBounds) {
                var a = n.getViewBounds();
                t = {
                    activeDate: n.getStartDate(),
                    viewStart: a.start,
                    viewEnd: a.end
                }
            }
            return t
        },
        setStartDate: function(t) {
            this.calendar.setStartDate(t)
        }
    }),
    function() {
        var t = "action-all-info",
            e = {};
        e[t] = "onWebServiceWidgetShowAllInfoButtonClick", Ext.define("CMDBuild.view.management.common.widgets.CMWebServiceDelegate", {
            onWebServiceWidgetShowAllInfoButtonClick: function(t, e) {}
        }), Ext.define("CMDBuild.view.management.common.widgets.CMWebServiceGrid", {
            extend: "Ext.grid.Panel",
            initComponent: function() {
                this.bbar = [Ext.create("CMDBuild.view.common.field.GridLocalSearch", {
                    grid: this
                })], this.callParent(arguments)
            }
        }), Ext.define("CMDBuild.view.management.common.widgets.CMWebService", {
            extend: "Ext.panel.Panel",
            mixins: {
                delegable: "CMDBuild.core.CMDelegable"
            },
            constructor: function() {
                this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.widgets.CMWebServiceDelegate"), this.callParent(arguments)
            },
            initComponent: function() {
                this.frame = !1, this.border = !1, this.layout = "border", this.autoScroll = !0, this.callParent(arguments)
            },
            getSelectedRecords: function() {
                var t = [];
                return this.grid && (t = this.grid.getSelectionModel().getSelection()), t
            },
            configureGrid: function(i, n, a) {
                var o;
                this.grid = new CMDBuild.view.management.common.widgets.CMWebServiceGrid({
                    region: "center",
                    border: !1,
                    columns: (o = n, o.push({
                        width: 30,
                        sortable: !1,
                        align: "center",
                        hideable: !1,
                        renderer: function(e, i, n) {
                            return '<img style="cursor:pointer"" class="' + t + '" src="images/icons/zoom.png"/>'
                        }
                    }), o),
                    selModel: a,
                    store: i
                }), this.add(this.grid), this.mon(this.grid, "beforeitemclick", function(t, i, n, a, o, r) {
                    var s = o.target.className;
                    "string" == typeof e[s] && this.callDelegates(e[s], [this, i])
                }, this)
            }
        }), Ext.define("CMDBuild.view.management.common.widgets.CMXMLWindow", {
            extend: "CMDBuild.core.window.AbstractModal",
            xmlNode: null,
            initComponent: function() {
                var t = this;
                null != this.xmlNode && (this.title = this.xmlNode.nodeName, this.items = [function(t) {
                    for (var e = CMDBuild.core.xml.XMLUtility, i = t.xmlNode.childNodes, n = [], a = 0, o = i.length; a < o; ++a) {
                        var r = i[a],
                            s = e.getNodeText(r),
                            l = r.nodeName;
                        n.push({
                            xtype: "displayfield",
                            fieldLabel: l,
                            labelAlign: "right",
                            labelWidth: CMDBuild.core.constants.FieldWidths.LABEL,
                            width: CMDBuild.core.constants.FieldWidths.STANDARD_BIG,
                            value: s
                        })
                    }
                    return {
                        boder: !0,
                        frame: !0,
                        items: n
                    }
                }(t)]), this.buttonAlign = "center", this.buttons = [{
                    text: CMDBuild.Translation.close,
                    handler: function() {
                        t.destroy()
                    }
                }], this.bodyStyle = {
                    padding: "5px"
                }, this.callParent(arguments)
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.widgets.CMPresetFromCardGrid", {
        extend: "CMDBuild.view.management.common.CMCardGrid",
        cmAdvancedFilter: !1,
        cmAddPrintButton: !1,
        cmAddGraphColumn: !1,
        selType: "checkboxmodel",
        selModel: {
            mode: "SINGLE"
        },
        buildExtraColumns: function() {
            return [{
                header: "&nbsp",
                width: 30,
                tdCls: "grid-button",
                fixed: !0,
                sortable: !1,
                align: "center",
                dataIndex: "Id",
                menuDisabled: !0,
                hideable: !1,
                renderer: function() {
                    return '<img style="cursor:pointer" class="action-card-show" src="images/icons/zoom.png"/>'
                }
            }]
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMPresetFromCardDelegate", {
        onPresetFromCardSaveButtonClick: function(t) {}
    }), Ext.define("CMDBuild.view.management.common.widgets.CMPresetFromCard", {
        extend: "Ext.panel.Panel",
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.widgets.CMPresetFromCardDelegate"), this.callParent(arguments)
        },
        initComponent: function() {
            this.grid = new CMDBuild.view.management.common.widgets.CMPresetFromCardGrid({
                autoScroll: !0,
                hideMode: "offsets",
                region: "center",
                border: !1
            }), this.frame = !1, this.border = !1, this.layout = "border", this.items = [this.grid], this.callParent(arguments)
        },
        updateGrid: function(t, e) {
            this.grid.CQL = e, this.grid.store.proxy.extraParams = this.grid.getStoreExtraParams(), this.grid.updateStoreForClassId(t)
        },
        getSelection: function() {
            var t = null,
                e = this.grid.getSelectionModel();
            return e && (selections = e.getSelection(), selections.length > 0 && (t = selections[0])), t
        },
        getExtraButtons: function() {
            var t = this;
            return [new Ext.Button({
                text: CMDBuild.Translation.ok,
                name: "saveButton",
                handler: function() {
                    t.callDelegates("onPresetFromCardSaveButtonClick", [t])
                }
            })]
        }
    }),
    function() {
        var t = CMDBuild.Translation.management.modcard.title;
        Ext.define("CMDBuild.view.management.classes.CMModCard", {
            extend: "Ext.panel.Panel",
            mixins: {
                uistatedelegate: "CMDBuild.state.UIStateDelegate"
            },
            whitMap: !0,
            layout: "border",
            border: !0,
            constructor: function() {
                this.CMEVENTS = {
                    addButtonClick: "cm-addcard-click"
                }, this.buildComponents(), this.callParent(arguments), "undefined" != typeof _CMUIState && _CMUIState.addDelegate(this)
            },
            initComponent: function() {
                this.centralPanelItems = [this.cardGrid],
                    function() {
                        if (CMDBuild.configuration.gis.get("enabled") && this.whitMap && CMDBuild.gis.values.browserEnabled) {
                            this.showGridButton = new Ext.button.Button({
                                text: CMDBuild.Translation.management.modcard.add_relations_window.list_tab,
                                iconCls: "table",
                                scope: this,
                                handler: function() {
                                    this.centralPanel.showGrid()
                                }
                            }), this.mapAddCardButton = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card", {
                                classId: void 0,
                                disabled: !0
                            }), this.mapAddCardButton.on("cmClick", function(t) {
                                this.fireEvent(this.CMEVENTS.addButtonClick, t)
                            }, this);
                            var t = this,
                                e = Ext.create("CMDBuild.core.buttons.gis.Thematism", {
                                    handler: function(t, e) {
                                        this.showMenu()
                                    }
                                }),
                                i = Ext.create("CMDBuild.core.buttons.gis.PrintMap", {
                                    handler: function(e, i) {
                                        t.theMap.print()
                                    }
                                }),
                                n = Ext.create("CMDBuild.core.buttons.gis.SearchPlace", {
                                    handler: function(e, i) {
                                        t.theMap.search(e, i)
                                    }
                                });
                            this.theMap = Ext.create("CMDBuild.view.management.classes.map.CMMapPanel", {
                                tbar: [this.mapAddCardButton, "->", n, i, e, this.showGridButton],
                                frame: !1,
                                border: !1,
                                mainGrid: this.cardGrid,
                                thematismButton: e,
                                printMapButton: i,
                                searchMapButton: n
                            }), this.executeThematism = function(t, e) {
                                this.theMap.executeThematism(t, e)
                            }, e.callback = this.executeThematism, e.theMap = this.theMap, this.centralPanelItems.push(this.theMap), this.getMapPanel = function() {
                                return this.theMap
                            }
                        } else this.mapAddCardButton = {
                            updateForEntry: Ext.emptyFn
                        }
                    }.call(this), this.centralPanel = new Ext.panel.Panel({
                        region: "center",
                        layout: "card",
                        activeItem: 0,
                        hideMode: "offsets",
                        cls: "cmdb-border-bottom",
                        border: !1,
                        frame: !1,
                        cardGrid: this.cardGrid,
                        theMap: this.theMap,
                        items: this.centralPanelItems,
                        animCollapse: !1,
                        showGrid: function() {
                            this.getLayout().setActiveItem(this.cardGrid.id), this.cardGrid.setCmVisible(!0), this.theMap.setCmVisible(!1)
                        },
                        showMap: function() {
                            this.getLayout().setActiveItem(this.theMap.id), this.theMap.updateSize(), this.theMap.setCmVisible(!0), this.cardGrid.setCmVisible(!0)
                        }
                    }), Ext.apply(this, {
                        items: [this.centralPanel, this.cardTabPanel],
                        tools: [Ext.create("CMDBuild.view.management.classes.tools.Properties"), Ext.create("CMDBuild.view.management.classes.tools.Minimize"), Ext.create("CMDBuild.view.management.classes.tools.Maximize"), Ext.create("CMDBuild.view.management.classes.tools.Restore")]
                    }), this.callParent(arguments), _CMUtils.forwardMethods(this, this.cardTabPanel, ["activateFirstTab", "setActivateTab", "getCardPanel", "getNotePanel", "getMDPanel", "getAttachmentsPanel", "getHistoryPanel", "getRelationsPanel", "getEmailPanel"]), this.on("afterrender", function(t, e) {
                        Ext.isFunction(this.delegate.buildMapController) && this.delegate.buildMapController()
                    }, this)
            },
            minimize: function() {
                Ext.suspendLayouts(), this.centralPanel.hide(), this.centralPanel.region = "", this.cardTabPanel.show(), this.cardTabPanel.region = "center", Ext.resumeLayouts(!0)
            },
            maximize: function() {
                Ext.suspendLayouts(), this.cardTabPanel.hide(), this.cardTabPanel.region = "", this.centralPanel.show(), this.centralPanel.region = "center", Ext.resumeLayouts(!0)
            },
            restore: function() {
                Ext.suspendLayouts(), this.cardTabPanel.show(), this.cardTabPanel.region = "south", this.centralPanel.show(), this.centralPanel.region = "center", Ext.resumeLayouts(!0)
            },
            updateTitleForEntry: function(e) {
                var i = "";
                e && (i = e.get("text") || e.get("name")), this.setTitle(t + i)
            },
            buildComponents: function() {
                var t = CMDBuild.configuration.instance.get("cardFormRatio") || 50,
                    e = [this.addCardButton = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card", {
                        classId: void 0,
                        disabled: !0
                    })];
                this.mon(this.addCardButton, "cmClick", function(t) {
                        this.fireEvent(this.CMEVENTS.addButtonClick, t)
                    }, this),
                    function(t) {
                        CMDBuild.configuration.gis.get("enabled") && CMDBuild.gis.values.browserEnabled && (this.showMapButton = new Ext.button.Button({
                            text: CMDBuild.Translation.management.modcard.tabs.map,
                            iconCls: "map",
                            scope: this,
                            handler: function() {
                                this.centralPanel.showMap()
                            }
                        }), t.push("->", this.showMapButton))
                    }.call(this, e), this.cardGrid = new CMDBuild.view.management.classes.CMModCard.Grid({
                        hideMode: "offsets",
                        filterCategory: this.cmName,
                        border: !1,
                        tbar: e,
                        columns: [],
                        forceSelectionOfFirst: !0
                    }), this.cardTabPanel = new CMDBuild.view.management.classes.CMCardTabPanel({
                        cls: "cmdb-border-top",
                        region: "south",
                        hideMode: "offsets",
                        border: !1,
                        split: !0,
                        height: t + "%"
                    });
                var i = new CMDBuild.view.management.common.widgets.CMWidgetManager(this.cardTabPanel.getCardPanel(), this.cardTabPanel);
                this.getWidgetManager = function() {
                    return i
                }
            },
            getGrid: function() {
                return this.cardGrid
            },
            reset: function(t) {
                _deprecated("reset", this), this.cardTabPanel.reset(t)
            },
            onEntrySelected: function(t) {
                _deprecated("onEntrySelected", this);
                var e = t.get("id");
                this.cardGrid.updateStoreForClassId(e, {
                    cb: function() {
                        this.loadPage(1, {
                            cb: function() {
                                try {
                                    this.getSelectionModel().select(0)
                                } catch (t) {
                                    _debug(t)
                                }
                            }
                        })
                    }
                }), this.cardTabPanel.onClassSelected(e, activateFirst = !0), this.addCardButton.updateForEntry(t), this.mapAddCardButton.updateForEntry(t), this.updateTitleForEntry(t), this.cardGrid.openFilterButton.enable(), this.cardGrid.gridSearchField.reset()
            },
            onFullScreenChangeToGridOnly: function() {
                this.maximize()
            },
            onFullScreenChangeToFormOnly: function() {
                this.minimize()
            },
            onFullScreenChangeToOff: function() {
                this.restore()
            }
        }), Ext.define("CMDBuild.view.management.classes.CMModCard.Grid", {
            extend: "CMDBuild.view.management.common.CMCardGrid",
            cmVisible: !0,
            setCmVisible: function(t) {
                this.cmVisible = t, this.paramsToLoadWhenVisible && (this.updateStoreForClassId(this.paramsToLoadWhenVisible.classId, this.paramsToLoadWhenVisible.o), this.paramsToLoadWhenVisible = null), this.fireEvent("cmVisible", t)
            },
            updateStoreForClassId: function(t, e) {
                this.cmVisible ? (this.callParent(arguments), this.paramsToLoadWhenVisible = null) : this.paramsToLoadWhenVisible = {
                    classId: t,
                    o: e
                }
            }
        })
    }(), Ext.define("CMDBuild.view.management.classes.CMCardPanel", {
        extend: "CMDBuild.view.management.common.CMFormWithWidgetButtons"
    }),
    function() {
        var t = CMDBuild.Translation.management.modcard;
        Ext.define("CMDBuild.view.management.classes.CMCardTabPanel", {
            extend: "Ext.tab.Panel",
            delegate: void 0,
            frame: !1,
            constructor: function() {
                this.cardNotesPanel = CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_NOTE_TAB) ? null : new CMDBuild.view.management.classes.CMCardNotesPanel({
                    title: CMDBuild.Translation.notes,
                    disabled: !0,
                    listeners: {
                        show: function(t, e) {
                            Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(_CMCardModuleState.card) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                                moduleId: "class",
                                entryType: {
                                    description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                                    id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.entryType
                                },
                                item: {
                                    description: _CMCardModuleState.card.get("Description") || _CMCardModuleState.card.get("Code"),
                                    id: _CMCardModuleState.card.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.card
                                },
                                section: {
                                    description: this.title,
                                    object: this
                                }
                            })
                        }
                    }
                }), this.relationsPanel = CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_RELATION_TAB) ? null : new CMDBuild.view.management.classes.CMCardRelationsPanel({
                    title: t.tabs.relations,
                    border: !1,
                    disabled: !0,
                    listeners: {
                        show: function(t, e) {
                            Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(_CMCardModuleState.card) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                                moduleId: "class",
                                entryType: {
                                    description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                                    id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.entryType
                                },
                                item: {
                                    description: _CMCardModuleState.card.get("Description") || _CMCardModuleState.card.get("Code"),
                                    id: _CMCardModuleState.card.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.card
                                },
                                section: {
                                    description: this.title,
                                    object: this
                                }
                            })
                        }
                    }
                }), this.mdPanel = CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_DETAIL_TAB) ? null : new CMDBuild.view.management.classes.masterDetails.CMCardMasterDetail({
                    title: t.tabs.detail,
                    disabled: !0,
                    listeners: {
                        show: function(t, e) {
                            Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(_CMCardModuleState.card) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                                moduleId: "class",
                                entryType: {
                                    description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                                    id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.entryType
                                },
                                item: {
                                    description: _CMCardModuleState.card.get("Description") || _CMCardModuleState.card.get("Code"),
                                    id: _CMCardModuleState.card.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.card
                                },
                                section: {
                                    description: this.title,
                                    object: this
                                }
                            })
                        }
                    }
                }), this.callParent(arguments)
            },
            reset: function(t) {
                this.activeTabSet(), this.items.each(function(e) {
                    e.reset && e.reset(), e.onClassSelected && e.onClassSelected(t)
                })
            },
            getCardPanel: function() {
                return Ext.isEmpty(this.cardPanel2) ? this.cardPanel : this.cardPanel2
            },
            getMDPanel: function() {
                return this.mdPanel
            },
            getHistoryPanel: function() {
                return this.cardHistoryPanel
            },
            getRelationsPanel: function() {
                return this.relationsPanel
            },
            getNotePanel: function() {
                return this.cardNotesPanel
            },
            getAttachmentsPanel: function() {
                return this.attachmentPanel
            },
            getNotesPanel: function() {
                return this.cardNotesPanel
            },
            getEmailPanel: function() {
                return this.emailPanel
            },
            showWidget: function(t) {
                return !1
            },
            activateFirstTab: function() {
                Ext.isEmpty(this.cardPanel2) ? this.setActiveTab(this.cardPanel) : this.setActiveTab(this.cardPanel2)
            },
            activeTabSet: function(t) {
                return Ext.isObject(t) && !Ext.Object.isEmpty(t) ? this.setActiveTab(t) : Ext.isEmpty(this.cardPanel2) ? this.setActiveTab(this.cardPanel) : this.setActiveTab(this.cardPanel2)
            }
        })
    }(),
    function() {
        function t(t, e, i) {
            t.currentClassId != e ? t.updateStoreForClassId(e, i, t) : i(t)
        }

        function e(t, e, i) {
            var n, a, o, r, s = (n = i, a = ["showDetail"], o = _CMCache.getEntryTypeById(n.get("IdClass")), !(r = _CMUtils.getEntryTypePrivilegesByCard(n)).write || r.crudDisabled.modify || r.crudDisabled.remove ? r.write && !r.crudDisabled.modify ? a = ["editDetail"] : r.write && !r.crudDisabled.remove && (a = ["showDetail", "deleteDetail"]) : a = ["editDetail", "deleteDetail"], o.get(CMDBuild.core.constants.Proxy.TABLE_TYPE) != CMDBuild.core.constants.Global.getTableTypeSimpleTable() && a.push("note"), CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) && a.push("showGraph"), CMDBuild.configuration.dms.get(CMDBuild.core.constants.Proxy.ENABLED) && a.push("attach"), a),
                l = "images/icons/",
                d = "png",
                c = "action-masterdetail-",
                u = '<img style="cursor:pointer" title="{0}" class="{1}{2}" src="{3}{4}.{5}"/>&nbsp;',
                h = "",
                C = {
                    showDetail: {
                        title: CMDBuild.Translation.management.moddetail.showdetail,
                        event: "show",
                        icon: "zoom"
                    },
                    editDetail: {
                        title: CMDBuild.Translation.management.moddetail.editdetail,
                        event: "edit",
                        icon: "modify"
                    },
                    deleteDetail: {
                        title: CMDBuild.Translation.management.moddetail.deletedetail,
                        event: "delete",
                        icon: "cross"
                    },
                    showGraph: {
                        title: CMDBuild.Translation.management.moddetail.showgraph,
                        event: "graph",
                        icon: "graph"
                    },
                    note: {
                        title: CMDBuild.Translation.management.moddetail.shownotes,
                        event: "note",
                        icon: "note"
                    },
                    attach: {
                        title: CMDBuild.Translation.management.moddetail.showattach,
                        event: "attach",
                        icon: "attach"
                    }
                };

            function m(t) {
                var e = C[t];
                return e ? Ext.String.format(u, e.title, c, e.event, l, e.icon, d) : Ext.String.format("<span>{0}</span>", t)
            }
            if (Ext.isArray(s))
                for (var g = 0, M = s.length; g < M; ++g) h += m(s[g]);
            else h = m("");
            return h
        }
        Ext.define("CMDBuild.Management.MasterDetailCardGrid", {
            extend: "CMDBuild.view.management.common.CMCardGrid",
            uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
            cmAddPrintButton: !1,
            loadDetails: function(e) {
                var i = e.detail,
                    n = e.masterCard.get("IdClass"),
                    a = _CMCache.getEntryTypeNameById(n);
                t(this, i.getDetailClassId(), function(t) {
                    t.store.proxy.url = CMDBuild.proxy.index.Json.card.readAll;
                    var n = {
                        relation: [{
                            domain: i.getName(),
                            type: "oneof",
                            destination: i.getMasterClassName(),
                            source: i.getDetailClassName(),
                            direction: i.getDetailSide(),
                            cards: [{
                                className: a,
                                id: e.masterCard.get("Id")
                            }]
                        }]
                    };
                    t.store.proxy.extraParams[CMDBuild.core.constants.Proxy.FILTER] = Ext.encode(n), t.store.proxy.extraParams[CMDBuild.core.constants.Proxy.CLASS_NAME] = i.getDetailClassName(), t.store.loadPage(1)
                })
            },
            loadFk: function(e) {
                var i = e.detail.idClass,
                    n = _CMCache.getEntryTypeById(i);
                t(this, i, function(t) {
                    t.store.proxy.url = CMDBuild.proxy.index.Json.card.readAll, t.store.proxy.extraParams.IdClass = i, t.store.proxy.extraParams.CQL = "from " + n.get("name") + " where " + e.detail.name + "=" + e.masterCard.get("Id"), t.store.loadPage(1)
                })
            },
            updateStoreForClassId: function(t, e, i) {
                this.currentClassId = t, _CMCache.getAttributeList(t, Ext.bind(function(t) {
                    this.setColumnsForClass(t), this.setGridSorting(t), e && e(i)
                }, this))
            },
            reset: function() {
                this.store.removeAll(), this.currentClassId = null, this.reconfigure(null, [])
            },
            buildExtraColumns: function() {
                return [{
                    header: "&nbsp",
                    fixed: !0,
                    sortable: !1,
                    renderer: e,
                    align: "center",
                    tdCls: "grid-button",
                    dataIndex: "Fake",
                    menuDisabled: !0,
                    hideable: !1
                }]
            }
        })
    }(),
    function() {
        var t = "detail",
            e = "foreignkey";

        function i(t) {
            return void 0 === t.get ? t.idClass + "_" + t.name : t.get("name")
        }

        function n(t) {
            var e = t.get("cardinality"),
                i = t.get("id");
            return "1:N" == e ? i + "_D" : "N:1" == e ? i + "_I" : void CMDBuild.log.error("Wrong cardinality")
        }
        Ext.define("CMDBuild.view.management.classes.masterDetails.CMCardMasterDetail", {
            extend: "Ext.panel.Panel",
            uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.classes.tabs.MasterDetail"],
            localCacheSimpleTables: [],
            editable: !0,
            eventType: "card",
            eventmastertype: "class",
            currentClass: void 0,
            constructor: function() {
                var t = {};
                t[CMDBuild.core.constants.Proxy.ACTIVE] = !0, CMDBuild.proxy.management.classes.tabs.MasterDetail.readAllClasses({
                    params: t,
                    scope: this,
                    success: function(t, e, i) {
                        i = i[CMDBuild.core.constants.Proxy.RESPONSE], Ext.isArray(i) && !Ext.isEmpty(i) && (i = Ext.Array.filter(i, function(t, e, i) {
                            return t[CMDBuild.core.constants.Proxy.TABLE_TYPE] == CMDBuild.core.constants.Global.getTableTypeSimpleTable()
                        }, this), Ext.isArray(i) && !Ext.isEmpty(i) && Ext.Array.each(i, function(t, e, i) {
                            Ext.isObject(t) && !Ext.Object.isEmpty(t) && (this.localCacheSimpleTables[t[CMDBuild.core.constants.Proxy.NAME]] = t)
                        }, this))
                    }
                }), this.addDetailButton = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card", {
                    classId: void 0,
                    baseText: CMDBuild.Translation.management.moddetail.adddetail,
                    textPrefix: CMDBuild.Translation.management.moddetail.adddetail
                }), this.detailGrid = new CMDBuild.Management.MasterDetailCardGrid({
                    editable: this.editable,
                    cls: "cmdb-border-right",
                    border: !1,
                    region: "center",
                    columns: [],
                    loadMask: !1,
                    cmAdvancedFilter: !1,
                    cmAddGraphColumn: !1
                }), this.tabs = new CMDBuild.view.common.CMSideTabPanel({
                    region: "east"
                }), Ext.apply(this, {
                    border: !1,
                    frame: !1
                }), this.callParent(arguments)
            },
            initComponent: function() {
                Ext.apply(this, {
                    layout: "border",
                    tbar: [this.addDetailButton],
                    items: [this.detailGrid, this.tabs]
                }), this.callParent(arguments)
            },
            loadDetailsAndFKThenBuildSideTabs: function(a) {
                this.buildingTabsDetails = !0, this.addDetailButton.disable();
                var o = _CMCache.getMasterDetailsForClassId(a);
                this.disable(), this.empty = !0, this.details = {}, this.details[t] = {}, this.details[e] = {};
                for (var r = 0, s = o.length; r < s; r++) {
                    var l = o[r];
                    l.directedDomain = n(l), this.details[t][i(l)] = l
                }
                var d = {};
                d[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(a), CMDBuild.proxy.management.classes.tabs.MasterDetail.readForeignKeyTargetingClass({
                    params: d,
                    loadMask: !1,
                    scope: this,
                    success: function(n, a, o) {
                        this.details[e] = {}, CMDBuild.clearComponent(this.tabs);
                        for (var r = 0, s = o.length; r < s; ++r) {
                            var l = o[r];
                            this.details[e][i(l)] = l
                        }
                        this.buildingTabsDetails = !1, Ext.Object.isEmpty(this.details[e]) && Ext.Object.isEmpty(this.details[t]) ? this.fireEvent("empty") : (this.empty = !1, this.enable(), function() {
                            var i = this.details;

                            function n() {
                                CMDBuild.clearComponent(this.tabs);
                                for (var n, a = Ext.apply(i[t], i[e]), o = "", r = "", s = "", l = function(t) {
                                        var e = [];
                                        for (var i in t) e.push(i);
                                        return Ext.Array.sort(e, function(e, i) {
                                            var n = t[e],
                                                a = t[i],
                                                o = n.data || n,
                                                r = a.data || a,
                                                s = o.md_label || o.description || e,
                                                l = r.md_label || r.description || i;
                                            return s.toUpperCase() > l.toUpperCase()
                                        })
                                    }(a), d = 0, c = l.length; d < c; d++) {
                                    var r = l[d];
                                    if (void 0 === (n = a[r]).get) {
                                        var u = {};
                                        !Ext.isString(n.owner) || Ext.isEmpty(n.owner) || Ext.isEmpty(this.localCacheSimpleTables[n.owner]) || (u = this.localCacheSimpleTables[n.owner]), s = e, o = Ext.Object.isEmpty(u) ? n.description : u[CMDBuild.core.constants.Proxy.TEXT]
                                    } else s = t, o = n.get("md_label") || n.get("description");
                                    var h = !0;
                                    if (this.delegate.superController.selectedAccordionNode.data.description) {
                                        var C = this.delegate.superController.selectedAccordionNode.data.description;
                                        n.data && ("N:1" == n.data.cardinality && n.data.disabled2.length > 0 && -1 != n.data.disabled2.indexOf(C) && (h = !1), "1:N" == n.data.cardinality && n.data.disabled1.length > 0 && -1 != n.data.disabled1.indexOf(C) && (h = !1))
                                    }
                                    h && this.tabs.addTabFor({
                                        title: o,
                                        tabLabel: o,
                                        detailType: s,
                                        detailId: r,
                                        on: function() {}
                                    }, s)
                                }
                                this.mon(this.tabs, "afterlayout", function() {
                                    this.tabs.activateFirst()
                                }, this, {
                                    single: !0
                                }), this.doLayout()
                            }
                            this.isVisible() ? n.call(this) : this.on("show", n, this, {
                                single: !0
                            })
                        }.call(this))
                    }
                })
            },
            selectDetail: function(t) {
                var e = _CMCache.getEntryTypeById(function(t) {
                    var e = t.get("cardinality"); {
                        if ("1:N" == e) return t.get("idClass2");
                        if ("N:1" == e) return t.get("idClass1")
                    }
                }(t));
                e && this.addDetailButton.updateForEntry(e)
            },
            selectForeignKey: function(t) {
                var e = _CMCache.getEntryTypeById(t.idClass);
                e && this.addDetailButton.updateForEntry(e)
            },
            resetDetailGrid: function() {
                this.detailGrid.reset()
            },
            activateFirstTab: function() {
                this.tabs.activateFirst()
            },
            updateGrid: function(e, i) {
                e == t ? this.detailGrid.loadDetails(i) : this.detailGrid.loadFk(i)
            },
            loadDetailCardList: function(t, e, i, n, a, o) {
                this.actualAttributeList = t, this.idDomain = n, this.detailGrid.loadDetailCardList({
                    directedDomain: n,
                    cardId: e,
                    classId: i,
                    classAttributes: t,
                    className: this.currentDetail.name,
                    superclass: a,
                    classType: o
                })
            },
            loadFKCardList: function(t, e, i, n) {
                this.detailGrid.loadFKCardList(t, e, i, n), this.isLoaded = !0
            },
            reload: function() {
                this.detailGrid.reload()
            },
            onAddCardButtonClick: function() {
                _deprecated("onAddCardButtonClick", this), this.disable()
            },
            onClassSelected: function() {
                _deprecated("onClassSelected", this)
            }
        })
    }(), Ext.define("CMDBuild.view.management.dashboard.CMModDashboard", {
        extend: "Ext.panel.Panel",
        border: !0,
        frame: !1,
        layout: "card",
        initComponent: function() {
            this.renderdDashboards = {}, this.dashbaord = null, Ext.apply(this, {
                tools: [Ext.create("CMDBuild.view.common.panel.gridAndForm.tools.Properties", {
                    style: {}
                })]
            }), this.callParent(arguments)
        },
        buildDashboardColumns: function(t) {
            if (t)
                if (l = this, d = t.get("description"), c = CMDBuild.Translation.administration.modDashboard.title, d && (c += " - " + d), l.setTitle(c), this.renderdDashboards[t.getId()]) this.getLayout().setActiveItem(this.renderdDashboards[t.getId()]);
                else {
                    var e = t.getColumns(),
                        i = [],
                        n = this;
                    this.dashbaord = t;
                    for (var a, o = 0, r = e.length; o < r; ++o) a = e[o], i.push(new CMDBuild.view.management.dashboard.CMDashboardColumn({
                        columnWidth: a.width,
                        charts: a.charts,
                        items: [],
                        split: !0,
                        listeners: {
                            render: function(t) {
                                n.delegate && n.delegate.onColumnRender(t)
                            }
                        }
                    }));
                    var s = new Ext.app.PortalPanel({
                        items: i
                    });
                    this.renderdDashboards[t.getId()] = s, this.add(s), this.getLayout().setActiveItem(s)
                }
            var l, d, c
        },
        setDelegate: function(t) {
            this.delegate = t
        }
    }), Ext.define("CMDBuild.controller.management.classes.CMModCardSubController", {
        mixins: {
            observable: "Ext.util.Observable"
        },
        constructor: function(t, e) {
            if (this.mixins.observable.constructor.call(this, arguments), void 0 === t) throw "OOO snap, you have not passed a view to me";
            this.view = t, this.view.delegate = this, this.superController = e, this.card = null, this.entryType = null, this.buildCardModuleStateDelegate()
        },
        onEntryTypeSelected: function(t) {
            this.entryType = t
        },
        onCardSelected: function(t) {
            this.card = t
        },
        onAddCardButtonClick: function(t) {},
        onAbortCardClick: function() {
            this.superController.onAbortCardClick()
        },
        onModifyCardClick: function() {
            this.superController.onModifyCardClick()
        },
        onShowGraphClick: function() {
            Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.graph.Window", {
                parentDelegate: this,
                classId: this.card.get("IdClass"),
                cardId: this.card.get("Id")
            })
        },
        onCloneCard: function() {
            this.view && this.view.disable()
        },
        buildCardModuleStateDelegate: function() {
            var t = this;
            if (this.cardStateDelegate = new CMDBuild.state.CMCardModuleStateDelegate, this.cardStateDelegate.onEntryTypeDidChange = function(e, i) {
                    t.onEntryTypeSelected(i)
                }, this.cardStateDelegate.onModifyCardClick = function(e) {
                    t.onModifyCardClick()
                }, this.cardStateDelegate.onCardDidChange = function(e, i) {
                    Ext.suspendLayouts(), t.onCardSelected(i), Ext.resumeLayouts()
                }, _CMCardModuleState.addDelegate(this.cardStateDelegate), this.view) {
                t = this;
                this.mon(t.view, "destroy", function(e) {
                    _CMCardModuleState.removeDelegate(t.cardStateDelegate), delete t.cardStateDelegate
                })
            }
        }
    }), Ext.define("CMDBuild.controller.management.common.CMModClassAndWFCommons", {
        getFormForTemplateResolver: function() {
            var t = null;
            if (this.view) {
                var e = this.view.getWidgetManager();
                e && "function" == typeof e.getFormForTemplateResolver && (t = e.getFormForTemplateResolver() || null)
            }
            return t
        }
    }), Ext.define("CMDBuild.controller.management.classes.CMCardBrowserTreeDataSource", {
        uses: ["CMDBuild.proxy.gis.Gis"],
        GEOSERVER: "GeoServer",
        constructor: function(t, e) {
            this.navigationPanel = t, this.mapState = e, this.configuration = CMDBuild.configuration.gis.get("cardBrowserByDomainConfiguration"), this.refresh(), this.callParent(arguments)
        },
        refresh: function() {
            var t = this;
            t.navigationPanel.setRootNode({
                loading: !0,
                text: CMDBuild.Translation.common.loading
            }), CMDBuild.proxy.gis.Gis.expandDomainTree({
                loadMask: !1,
                success: function(e, i, n) {
                    ! function t(e, i) {
                        for (var n = e && e.children || [], a = 0; a < n.length; a++) {
                            var o = n[a];
                            t(o, i && !(!0 === o.baseNode && a > 0))
                        }
                        e.checked = i
                    }(n.root, !0), t.navigationPanel.setRootNode(n.root), t.navigationPanel.loaded()
                }
            })
        }
    }),
    function() {
        function t(t) {
            this.widgetControllerManager && this.widgetControllerManager.buildControllers(t)
        }
        Ext.define("CMDBuild.controller.management.classes.CMBaseCardPanelController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            mixins: {
                observable: "Ext.util.Observable"
            },
            uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.Message", "CMDBuild.controller.management.classes.StaticsController", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.Card"],
            cardDataProviders: [],
            constructor: function(t, e, i) {
                this.callParent(arguments), this.mixins.observable.constructor.call(this, arguments);
                var n = this.view.CMEVENTS;
                if (i) this.widgetControllerManager = i;
                else {
                    var a = new CMDBuild.view.management.common.widgets.CMWidgetManager(this.view);
                    this.widgetControllerManager = new CMDBuild.controller.management.common.CMWidgetManagerController(a)
                }
                this.widgetControllerManager.setDelegate(this), this.CMEVENTS = {
                    cardSaved: "cm-card-saved",
                    abortedModify: "cm-card-modify-abort",
                    editModeDidAcitvate: n.editModeDidAcitvate,
                    displayModeDidActivate: n.displayModeDidActivate
                }, this.addEvents(this.CMEVENTS.cardSaved, this.CMEVENTS.abortedModify, n.editModeDidAcitvate, n.displayModeDidActivate), this.relayEvents(this.view, [n.editModeDidAcitvate, n.displayModeDidActivate]), this.mon(this.view, n.modifyCardButtonClick, function() {
                    this.onModifyCardClick.apply(this, arguments)
                }, this), this.mon(this.view, n.saveCardButtonClick, function() {
                    this.onSaveCardClick.apply(this, arguments)
                }, this), this.mon(this.view, n.abortButtonClick, function() {
                    this.onAbortCardClick.apply(this, arguments)
                }, this), this.mon(this.view, n.widgetButtonClick, this.onWidgetButtonClick, this), this.mon(this.view, n.editModeDidAcitvate, this.onCardGoesInEdit, this)
            },
            onEntryTypeSelected: function() {
                this.unlockCard(), this.view.isInEditing() && this.view.displayMode(), this.callParent(arguments), this.loadFields(this.entryType.get("id")), this.widgetControllerManager && this.widgetControllerManager.removeAll()
            },
            onCardSelected: function(e) {
                var i = this;
                if (this.unlockCard(), this.callParent(arguments), this.view.isInEditing() && this.view.displayMode(), this.view.reset(), this.entryType && this.card) {
                    Ext.defer(t, 1, this, [e]), this.loadFields(this.card.get("IdClass"), function() {
                        i.loadCard(!0)
                    }), Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(e) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                        moduleId: "class",
                        entryType: {
                            description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                            id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                            object: _CMCardModuleState.entryType
                        },
                        item: {
                            description: e.get("Description") || e.raw.Description || e.get("Code") || e.raw.Code,
                            id: e.get("Id"),
                            object: e
                        }
                    })
                }
            },
            onModifyCardClick: function() {
                if (this.isEditable(this.card)) {
                    var t = this;
                    this.lockCard(function() {
                        t.loadCard(!0, null, function() {
                            t.view.editMode()
                        })
                    })
                }
                this.callParent(arguments)
            },
            onSaveCardClick: function() {
                var t = {};
                t[CMDBuild.core.constants.Proxy.CARD_ID] = this.cloneCard ? -1 : this.card.get("Id"), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.card.get("IdClass")),
                    function(t, e) {
                        for (var i in t.cardDataProviders)
                            if ("function" == typeof(i = t.cardDataProviders[i]).getCardData) {
                                var n = i.getCardData(e);
                                n && (e[i.getCardDataName()] = n)
                            }
                    }(this, t),
                    function(t) {
                        var e = t.view.getForm(),
                            i = CMDBuild.controller.management.classes.StaticsController.getInvalidAttributeAsHTML(e); {
                            if (null != i) {
                                var n = Ext.String.format('<p class="{0}">{1}</p>', CMDBuild.core.constants.Global.getErrorMsgCss(), CMDBuild.Translation.errors.invalid_attributes);
                                return CMDBuild.core.Message.error(null, n + i, !1), !1
                            }
                            return !0
                        }
                    }(this) && this.doFormSubmit(t)
            },
            doFormSubmit: function(t) {
                CMDBuild.proxy.Card.update({
                    params: Ext.Object.merge(t, this.view.getForm().getValues()),
                    scope: this,
                    success: function(t, e, i) {
                        var n = {};
                        n.result = i, n.params = e.params, this.onSaveSuccess(this.view.getForm(), n)
                    }
                })
            },
            onSaveSuccess: function(t, e) {
                this.view.displayMode();
                var i = {
                    Id: e.result[CMDBuild.core.constants.Proxy.ID] || this.card.get("Id"),
                    IdClass: this.entryType.get(CMDBuild.core.constants.Proxy.ID)
                };
                this.fireEvent(this.CMEVENTS.cardSaved, i)
            },
            onAbortCardClick: function() {
                this.card && -1 == this.card.get("Id") ? _CMCardModuleState.setCard(_CMCardModuleState.getPreviousCard()) : this.onCardSelected(this.card), this.callParent(arguments), this.fireEvent(this.CMEVENTS.abortedModify)
            },
            onAddCardButtonClick: function(t) {
                t && (_CMCardModuleState.setPreviousCard(_CMCardModuleState.card), this.onCardSelected(new CMDBuild.DummyModel({
                    IdClass: t,
                    Id: -1
                })), this.view.editMode())
            },
            addCardDataProviders: function(t) {
                this.cardDataProviders.push(t)
            },
            loadFields: function(t, e) {
                var i = this;
                _CMCache.getAttributeList(t, function(t) {
                    i.view.fillForm(t, editMode = !1), e && e()
                })
            },
            loadCard: function(t, e, i) {
                var n, a = this;
                if ((n = e ? e.Id || e.cardId : a.card.get("Id")) && "-1" != n && (t || a.view.hasDomainAttributes())) {
                    if (!e)(e = {})[CMDBuild.core.constants.Proxy.CARD_ID] = a.card.get("Id"), e[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(a.card.get("IdClass"));
                    CMDBuild.proxy.Card.read({
                        params: e,
                        loadMask: !1,
                        success: function(t, e, n) {
                            var o = n.card;
                            a.card && (o = Ext.Object.merge(a.card.raw || a.card.data, o)),
                                function(t, e) {
                                    var i = t;
                                    if (i)
                                        for (var n in i) {
                                            var a = i[n];
                                            for (var o in a) e["_" + n + "_" + o] = a[o]
                                        }
                                }(n.referenceAttributes, o);
                            var r = Ext.create("CMDBuild.DummyModel", o);
                            "function" == typeof i ? i(r) : a.loadCardStandardCallBack(r)
                        }
                    })
                } else a.loadCardStandardCallBack(a.card)
            },
            loadCardStandardCallBack: function(t) {
                var e = this;
                e.view.loadCard(t), t && (e.isEditable(t) ? -1 == t.get("Id") || e.cmForceEditing ? (e.view.editMode(), e.cmForceEditing = !1) : e.view.displayMode(enableTBar = !0) : e.view.displayModeForNotEditableCard())
            },
            isEditable: function(t) {
                return _CMUtils.getEntryTypePrivilegesByCard(t).create
            },
            setWidgetManager: function(t) {
                this.widgetManager = t
            },
            onWidgetButtonClick: function(t) {
                this.widgetControllerManager && this.widgetControllerManager.onWidgetButtonClick(t)
            },
            onCardGoesInEdit: function() {
                this.widgetControllerManager && this.widgetControllerManager.onCardGoesInEdit()
            },
            lockCard: function(t) {
                CMDBuild.configuration.instance.get("enableCardLock") ? this.card && this.card.get("Id") >= 0 && CMDBuild.proxy.Card.lock({
                    params: {
                        id: this.card.get("Id")
                    },
                    loadMask: !1,
                    success: t
                }) : t()
            },
            unlockCard: function() {
                CMDBuild.configuration.instance.get("enableCardLock") && this.card && this.view.isInEditing() && this.card.get("Id") >= 0 && CMDBuild.proxy.Card.unlock({
                    params: {
                        id: this.card.get("Id")
                    },
                    loadMask: !1
                })
            },
            onCloneCard: Ext.emptyFn,
            ensureEditPanel: function() {
                this.view.ensureEditPanel()
            }
        }), Ext.define("CMDBuild.controller.management.classes.CMCardDataProvider", {
            cardDataName: null,
            getCardDataName: function() {
                return this.cardDataName
            },
            getCardData: function() {
                throw "You have to implement the getCardData method in " + this.$className
            }
        })
    }(),
    function() {
        function t(t, e) {
            var i = Ext.create("CMDBuild.view.management.common.CMCardWindow", {
                cmEditMode: e,
                withButtons: e,
                title: t.get(CMDBuild.core.constants.Proxy.LABEL) + " - " + t.get("dst_desc")
            });
            e && i.on("destroy", function() {
                this.fireEvent(this.CMEVENTS.serverOperationSuccess), this.loadData()
            }, this, {
                single: !0
            }), new CMDBuild.controller.management.common.CMCardWindowController(i, {
                entryType: t.get("dst_cid"),
                card: t.get("dst_id"),
                cmEditMode: e
            }), i.show()
        }

        function e(t, e, i, n, a, o) {
            var r = a.target.className;
            this.callBacks[r] && this.callBacks[r].call(this, e)
        }

        function i(t, e, i, n, a, o) {
            this.onFollowRelationClick(e)
        }

        function n(t) {
            var e = {};
            return "_1" == t ? (e.slaveSide = "_2", e.masterSide = "_1") : (e.slaveSide = "_1", e.masterSide = "_2"), e
        }
        Ext.define("CMDBuild.controller.management.classes.CMCardRelationsController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            uses: ["CMDBuild.core.Message", "CMDBuild.proxy.Relation"],
            controllerWindowAttachment: void 0,
            constructor: function(t, n) {
                this.mixins.observable.constructor.call(this, arguments), this.callParent(arguments), this.callBacks = {
                    "action-relation-go": this.onFollowRelationClick,
                    "action-relation-edit": this.onEditRelationClick,
                    "action-relation-delete": this.onDeleteRelationClick,
                    "action-relation-editcard": this.onEditCardClick,
                    "action-relation-viewcard": this.onViewCardClick,
                    "action-relation-attach": this.onOpenAttachmentClick
                }, this.view.getStore().getRootNode().on("append", function(t, e, i, n) {
                    1 == e.getDepth() && e.on("expand", this.onDomainNodeExpand, this, {
                        single: !0
                    })
                }, this), this.mon(this.view, this.view.CMEVENTS.openGraphClick, this.onShowGraphClick, this), this.mon(this.view, this.view.CMEVENTS.addButtonClick, this.onAddRelationButtonClick, this), this.mon(this.view, "beforeitemclick", e, this), this.mon(this.view, "itemdblclick", i, this), this.mon(this.view, "activate", this.loadData, this), this.CMEVENTS = {
                    serverOperationSuccess: "cm-server-success"
                }, this.addEvents(this.CMEVENTS.serverOperationSuccess), this.controllerWindowAttachment = Ext.create("CMDBuild.controller.management.classes.common.attachment.Window", {
                    parentDelegate: this
                })
            },
            onDomainNodeExpand: function(t, e, i, n) {
                if (t.get("relations_size") > CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.RELATION_LIMIT)) {
                    t.removeAll();
                    var a = {};
                    a[CMDBuild.core.constants.Proxy.CARD_ID] = this.getCardId(), a[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.getClassId()), a[CMDBuild.core.constants.Proxy.DOMAIN_ID] = t.get("dom_id"), a[CMDBuild.core.constants.Proxy.SRC] = t.get("src"), this.view.setLoading(!0), CMDBuild.proxy.Relation.readAll({
                        params: a,
                        scope: this,
                        success: function(e, i, n) {
                            this.view.setLoading(!1), this.view.suspendLayouts(), this.view.convertRelationInNodes(n.domains[0].relations, t.data.dom_id, t.data.src, t.data, t), this.view.resumeLayouts(!0)
                        }
                    })
                }
            },
            onEntryTypeSelected: function(t) {
                this.callParent(arguments), this.card = null, (Ext.isEmpty(this.entryType) || "simpletable" == this.entryType.get(CMDBuild.core.constants.Proxy.TABLE_TYPE)) && (this.entryType = null), this.view.disable(), this.view.clearStore()
            },
            onCardSelected: function(t) {
                this.callParent(arguments), this.view.clearStore(), this.view.disable(), Ext.isEmpty(t) || Ext.isEmpty(this.entryType) || (this.updateCurrentClass(t), this.loadData(), this.view.enable())
            },
            updateCurrentClass: function(t) {
                var e = t.get("IdClass"),
                    i = _CMCache.getEntryTypeById(e);
                this.currentClass != i && (i && "simpletable" != i.get(CMDBuild.core.constants.Proxy.TABLE_TYPE) || (i = null), this.currentClass = i, !Ext.isEmpty(i) && Ext.isFunction(i.get) && this.view.addRelationButton.onEntryTypeSelect(i.get(CMDBuild.core.constants.Proxy.NAME)))
            },
            loadData: function() {
                if (null != this.card && (n = this.view).ownerCt.layout.getActiveItem().id == n.id) {
                    var t = this,
                        e = this.view.getEl();
                    e && e.mask();
                    var i = {};
                    i[CMDBuild.core.constants.Proxy.CARD_ID] = this.getCardId(), i[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.getClassId()), i.domainlimit = CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.RELATION_LIMIT), CMDBuild.proxy.Relation.readAll({
                        params: i,
                        scope: this,
                        success: function(i, n, a) {
                            e.unmask(), this.view.fillWithData(a.domains);
                            var o = [];
                            Ext.Array.forEach(a.domains, function(t, e, i) {
                                var n = _CMCache.getDomainById(t[CMDBuild.core.constants.Proxy.ID]);
                                1 == t[CMDBuild.core.constants.Proxy.RELATIONS_SIZE] && !Ext.isEmpty(n) && Ext.isFunction(n.get) && ("N:1" == n.get(CMDBuild.core.constants.Proxy.CARDINALITY) && "_1" == t[CMDBuild.core.constants.Proxy.SRC] || "1:N" == n.get(CMDBuild.core.constants.Proxy.CARDINALITY) && "_2" == t[CMDBuild.core.constants.Proxy.SRC] || "1:1" == n.get(CMDBuild.core.constants.Proxy.CARDINALITY)) && o.push(n.get(CMDBuild.core.constants.Proxy.ID))
                            }, this), Ext.Array.forEach(this.view.addRelationButton.menu.items.items, function(e, i, n) {
                                Ext.Array.contains(o, e.domain.dom_id) ? e.setHandler(function() {
                                    CMDBuild.core.Message.error(CMDBuild.Translation.common.failure, CMDBuild.Translation.errors.domainCardinalityViolation, !1)
                                }) : e.setHandler(function(e, i) {
                                    t.view.addRelationButton.fireEvent("cmClick", e.domain)
                                })
                            }, this)
                        }
                    })
                }
                var n
            },
            getCardId: function() {
                return this.card.get("Id")
            },
            getClassId: function() {
                return this.card.get("IdClass")
            },
            onFollowRelationClick: function(t) {
                t.getDepth() > 1 && CMDBuild.global.controller.MainViewport.cmfg("mainViewportCardSelect", {
                    Id: String(t.get("dst_id")),
                    IdClass: String(t.get("dst_cid"))
                })
            },
            onAddRelationButtonClick: function(t) {
                var e = this,
                    i = n(t.src),
                    a = _CMCache.getDomainById(t.dom_id),
                    o = _CMCache.getEntryTypeById(t.dst_cid),
                    r = !1,
                    s = "_1" == t[CMDBuild.core.constants.Proxy.SRC] ? "_2" : "_1";
                a && (r = a.isMany(s));
                var l = Ext.create("CMDBuild.view.management.classes.relations.CMEditRelationWindow", {
                    domain: a,
                    classObject: o,
                    sourceCard: this.card,
                    src: t[CMDBuild.core.constants.Proxy.SRC],
                    relation: {
                        dst_cid: t.dst_cid,
                        dom_id: t.dom_id,
                        rel_id: -1,
                        masterSide: i.masterSide,
                        slaveSide: i.slaveSide
                    },
                    selModel: Ext.create("CMDBuild.selection.CMMultiPageSelectionModel", {
                        mode: r ? "MULTI" : "SINGLE",
                        avoidCheckerHeader: !0,
                        idProperty: "Id"
                    }),
                    successCb: function() {
                        e.onAddRelationSuccess()
                    }
                });
                this.mon(l, "destroy", function() {
                    this.loadData()
                }, this, {
                    single: !0
                }), l.show({
                    callback: function() {
                        l.grid.getStore().loadPage(1, {
                            callback: function(t, i, n) {
                                if (l.setLoading(!0), "N:N" != a.get(CMDBuild.core.constants.Proxy.CARDINALITY)) {
                                    var r = [];
                                    l.grid.getStore().each(function(t) {
                                        r.push(t.get(CMDBuild.core.constants.Proxy.ID))
                                    });
                                    var d = {};
                                    d[CMDBuild.core.constants.Proxy.DOMAIN_NAME] = a.get(CMDBuild.core.constants.Proxy.NAME), d[CMDBuild.core.constants.Proxy.CLASS_NAME] = o.get(CMDBuild.core.constants.Proxy.NAME), d[CMDBuild.core.constants.Proxy.CARDS] = Ext.encode(r), d[CMDBuild.core.constants.Proxy.DOMAIN_DIRECTION] = s, CMDBuild.proxy.Relation.getAlreadyRelatedCards({
                                        params: d,
                                        loadMask: !1,
                                        scope: this,
                                        success: function(t, i, n) {
                                            if (n = n[CMDBuild.core.constants.Proxy.RESPONSE], Ext.isArray(n)) {
                                                var r = [];
                                                if (Ext.Array.forEach(n, function(t, e, i) {
                                                        if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) {
                                                            var n = t[CMDBuild.core.constants.Proxy.ID];
                                                            Ext.isNumber(n) && !Ext.isEmpty(n) && r.push(n)
                                                        }
                                                    }, this), Ext.isArray(r) && !Ext.isEmpty(r)) {
                                                    var d = {};
                                                    d[CMDBuild.core.constants.Proxy.ATTRIBUTES] = Ext.encode(["Description"]), d[CMDBuild.core.constants.Proxy.CLASS_NAME] = o.get(CMDBuild.core.constants.Proxy.NAME), d[CMDBuild.core.constants.Proxy.FILTER] = Ext.encode({
                                                        attribute: {
                                                            simple: {
                                                                attribute: "Id",
                                                                operator: "in",
                                                                value: r,
                                                                parameterType: "fixed"
                                                            }
                                                        },
                                                        relation: [{
                                                            destination: _CMCache.getEntryTypeNameById(e.getClassId()),
                                                            direction: s,
                                                            domain: a.get(CMDBuild.core.constants.Proxy.NAME),
                                                            source: o.get(CMDBuild.core.constants.Proxy.NAME),
                                                            type: "any"
                                                        }]
                                                    }), CMDBuild.proxy.Relation.getCards({
                                                        params: d,
                                                        loadMask: !1,
                                                        scope: this,
                                                        success: function(t, e, i) {
                                                            if (i = i[CMDBuild.core.constants.Proxy.ROWS], Ext.isArray(i) && !Ext.isEmpty(i)) {
                                                                var n = [];
                                                                Ext.Array.forEach(i, function(t, e, i) {
                                                                    if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) {
                                                                        var a = t.Id;
                                                                        Ext.isNumber(a) && !Ext.isEmpty(a) && n.push(a)
                                                                    }
                                                                }, this), l.grid.getView().getRowClass = function(t, e, i, a) {
                                                                    return Ext.Array.contains(n, t.get("Id")) ? "grid-row-disabled" : null
                                                                }, l.grid.getView().refresh(), l.grid.getSelectionModel().addListener("beforeselect", function(t, e, i, a) {
                                                                    return !Ext.Array.contains(n, e.get("Id"))
                                                                })
                                                            }
                                                        }
                                                    })
                                                }
                                            } else _error("onAddRelationButtonClick(): unmanaged response", e, decodedResult);
                                            l.setLoading(!1)
                                        }
                                    })
                                } else {
                                    var c = {};
                                    c[CMDBuild.core.constants.Proxy.CARD_ID] = e.getCardId(), c[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(e.getClassId()), CMDBuild.proxy.Relation.readAll({
                                        params: c,
                                        loadMask: !1,
                                        scope: this,
                                        success: function(t, e, i) {
                                            if (i = i[CMDBuild.core.constants.Proxy.DOMAINS], Ext.isArray(i) && !Ext.isEmpty(i)) {
                                                var n = [],
                                                    o = a.get(CMDBuild.core.constants.Proxy.ID),
                                                    r = Ext.Array.findBy(i, function(t, e) {
                                                        return !(!Ext.isObject(t) || Ext.Object.isEmpty(t)) && t[CMDBuild.core.constants.Proxy.ID] == o
                                                    }, this);
                                                Ext.isObject(r) && !Ext.Object.isEmpty(r) && (Ext.Array.forEach(r[CMDBuild.core.constants.Proxy.RELATIONS], function(t, e, i) {
                                                    Ext.isObject(t) && !Ext.Object.isEmpty(t) && Ext.isNumber(t.dst_id) && !Ext.isEmpty(t.dst_id) && n.push(t.dst_id)
                                                }, this), l.grid.getView().getRowClass = function(t, e, i, a) {
                                                    return Ext.Array.contains(n, t.get("Id")) ? "grid-row-disabled" : null
                                                }, l.grid.getView().refresh(), l.grid.getSelectionModel().addListener("beforeselect", function(t, e, i, a) {
                                                    return !Ext.Array.contains(n, e.get("Id"))
                                                }))
                                            }
                                            l.setLoading(!1)
                                        }
                                    })
                                }
                            }
                        })
                    }
                })
            },
            onAddRelationSuccess: function() {
                this.defaultOperationSuccess()
            },
            onEditRelationClick: function(t) {
                var e = this,
                    i = t.raw || t.getData(),
                    a = _CMCache.getEntryTypeById(t.get("dst_cid")),
                    o = _CMCache.getDomainById(t.get("dom_id")),
                    r = n(t.get(CMDBuild.core.constants.Proxy.SRC)),
                    s = Ext.create("CMDBuild.view.management.classes.relations.CMEditRelationWindow", {
                        domain: o,
                        classObject: a,
                        sourceCard: this.card,
                        relation: {
                            rel_attr: i.attr_as_obj,
                            dst_cid: t.get("dst_cid"),
                            dst_id: t.get("dst_id"),
                            dom_id: t.get("dom_id"),
                            rel_id: t.get("rel_id"),
                            masterSide: r.masterSide,
                            slaveSide: r.slaveSide
                        },
                        filterType: this.view.id,
                        successCb: function() {
                            e.onEditRelationSuccess()
                        },
                        selModel: Ext.create("CMDBuild.selection.CMMultiPageSelectionModel", {
                            mode: "SINGLE",
                            idProperty: "Id"
                        })
                    });
                this.mon(s, "destroy", function() {
                    this.loadData()
                }, this, {
                    single: !0
                }), s.show({
                    scope: this,
                    callback: function() {
                        t.set({
                            Code: t.get("dst_code"),
                            Description: t.get("dst_desc"),
                            Id: t.get("dst_id"),
                            id: t.get("dst_id"),
                            IdClass: t.get("dst_cid")
                        }), s.grid.getStore().loadPage(1, {
                            callback: function(e, i, n) {
                                Ext.isEmpty(t) || s.grid.getSelectionModel().select(t)
                            }
                        })
                    }
                })
            },
            onEditRelationSuccess: function() {
                this.defaultOperationSuccess()
            },
            onDeleteRelationClick: function(t) {
                var e = this,
                    i = n(t.get(CMDBuild.core.constants.Proxy.SOURCE));
                Ext.Msg.confirm(CMDBuild.Translation.attention, CMDBuild.Translation.management.modcard.delete_relation_confirm, function(n) {
                    if ("yes" == n) {
                        var a = _CMCache.getDomainById(t.get("dom_id")),
                            o = {},
                            r = {};
                        o[CMDBuild.core.constants.Proxy.DOMAIN_NAME] = a.getName(), o[CMDBuild.core.constants.Proxy.RELATION_ID] = t.get("rel_id"), o.master = i.masterSide;
                        var s = {};
                        s[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(e.card.get("IdClass")), s[CMDBuild.core.constants.Proxy.CARD_ID] = e.card.get("Id"), r[i.masterSide] = [s];
                        var l = {};
                        l[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(t.get("dst_cid")), l[CMDBuild.core.constants.Proxy.CARD_ID] = t.get("dst_id"), r[i.slaveSide] = [l], o[CMDBuild.core.constants.Proxy.ATTRIBUTES] = Ext.encode(r), CMDBuild.core.LoadMask.show(), CMDBuild.proxy.Relation.remove({
                            params: o,
                            loadMask: !1,
                            scope: this,
                            success: this.onDeleteRelationSuccess,
                            callback: function() {
                                CMDBuild.core.LoadMask.hide(), this.loadData()
                            }
                        })
                    }
                }, this)
            },
            onDeleteRelationSuccess: function() {
                this.defaultOperationSuccess()
            },
            defaultOperationSuccess: function() {
                this.fireEvent(this.CMEVENTS.serverOperationSuccess)
            },
            onEditCardClick: function(e) {
                t.call(this, e, !0)
            },
            onViewCardClick: function(e) {
                t.call(this, e, !1)
            },
            onOpenAttachmentClick: function(t) {
                if (!Ext.isObject(t) || Ext.Object.isEmpty(t)) return _error("onOpenAttachmentClick(): unmanaged model parameter", this, t);
                this.controllerWindowAttachment.cmfg("panelModuleAttachmentWindowConfigureAndShow", {
                    entityId: t.get("dst_cid"),
                    id: t.get("dst_id")
                })
            }
        })
    }(),
    function() {
        var t = "detail",
            e = "foreignkey";

        function i(t, e, i, n, a, o) {
            CMDBuild.global.controller.MainViewport.cmfg("mainViewportCardSelect", {
                Id: e.get("Id"),
                IdClass: e.get("IdClass")
            })
        }

        function n() {
            if (null != this.card) {
                var i = {
                    masterCard: this.card
                };
                null != this.currentDetail ? (i.detail = this.currentDetail, this.view.updateGrid(t, i)) : null != this.currentForeignKey ? (i.detail = this.currentForeignKey, this.view.updateGrid(e, i)) : this.view.activateFirstTab()
            }
        }

        function a(e) {
            if (1 != this.view.buildingTabsDetails && this.currentTab !== e && o(this.view)) {
                var i = e.targetPanel,
                    a = i.detailType,
                    r = this.view.details[a][i.detailId];
                this.view.addDetailButton.enable(), this.currentTab = e, a == t ? function(t) {
                    this.currentForeignKey = void 0, this.currentDetail = t, this.view.selectDetail(t)
                }.call(this, r) : function(t) {
                    this.currentDetail = void 0, this.currentForeignKey = t, this.view.selectForeignKey(t)
                }.call(this, r), n.call(this)
            }
        }

        function o(t) {
            return t.ownerCt.layout.getActiveItem().id == t.id
        }

        function r(t, e, i, n, a, o) {
            var r = a.target.className;
            this.callBacks[r] && this.callBacks[r].call(this, e)
        }
        Ext.define("CMDBuild.controller.management.classes.masterDetails.CMMasterDetailsController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            uses: ["CMDBuild.proxy.Card"],
            controllerWindowAttachment: void 0,
            controllerWindowNote: void 0,
            constructor: function(t, e) {
                this.mixins.observable.constructor.call(this, arguments), this.callParent(arguments), this.view = t, this.superController = e, this.entryType = null, this.card = null, this.currentForeignKey = null, this.currentDetail = null, this.mon(this.view.tabs, "click", a, this), this.mon(this.view.detailGrid, "beforeitemclick", r, this), this.mon(this.view.detailGrid, "itemdblclick", i, this), this.mon(this.view.addDetailButton, "cmClick", this.onAddDetailButtonClick, this), this.addEvents(["empty"]), this.mon(this.view, "empty", function() {
                    this.fireEvent("empty", this.view.isVisible())
                }, this), this.callBacks = {
                    "action-masterdetail-edit": this.onEditDetailClick,
                    "action-masterdetail-show": this.onShowDetailClick,
                    "action-masterdetail-delete": this.onDeleteDetailClick,
                    "action-masterdetail-graph": this.onOpenGraphClick,
                    "action-masterdetail-note": this.onOpenNoteClick,
                    "action-masterdetail-attach": this.onOpenAttachmentClick
                }, this.controllerWindowAttachment = Ext.create("CMDBuild.controller.management.classes.common.attachment.Window", {
                    parentDelegate: this
                }), this.controllerWindowNote = Ext.create("CMDBuild.controller.management.classes.panel.form.tabs.masterDetail.window.Note", {
                    parentDelegate: this
                })
            },
            buildWindow: function(t) {
                return Ext.create("CMDBuild.view.management.common.CMCardWindow", {
                    referencedIdClass: this.card.get("IdClass"),
                    fkAttribute: this.currentForeignKey,
                    masterData: this.card,
                    detail: this.currentDetail,
                    cmEditMode: t.editable,
                    withButtons: t.editable
                })
            },
            onAddDetailButtonClick: function(t) {
                var e = this.buildWindow({
                    entryType: t.classId,
                    editable: !0
                });
                new CMDBuild.controller.management.common.CMAddDetailWindowController(e, {
                    entryType: t.classId,
                    cmEditMode: !0
                }), e.show(), e.mon(e, "destroy", function() {
                    this.view.reload()
                }, this, {
                    single: !0
                })
            },
            onEntryTypeSelected: function(t) {
                this.callParent(arguments), this.currentTab = null, this.currentForeignKey = null, this.currentDetail = null, this.view.loadDetailsAndFKThenBuildSideTabs(this.entryType.get("id")), this.view.resetDetailGrid()
            },
            onCardSelected: function(t) {
                this.callParent(arguments), this.view.setDisabled(this.view.empty), o(this.view) ? n.call(this) : this.view.on("activate", n, this, {
                    single: !0
                })
            },
            onAddCardButtonClick: function(t) {
                this.view.disable()
            },
            onEditDetailClick: function(t) {
                var e = this.buildWindow({
                    editable: !0
                });
                new CMDBuild.controller.management.common.CMDetailWindowController(e, {
                    entryType: t.get("IdClass"),
                    card: t.get("Id"),
                    cmEditMode: !0
                });
                e.mon(e, "destroy", function() {
                    this.view.reload(), 0, delete e
                }, this, {
                    single: !0
                }), e.show()
            },
            onShowDetailClick: function(t) {
                var e = this.buildWindow({
                    editable: !1
                });
                new CMDBuild.controller.management.common.CMDetailWindowController(e, {
                    entryType: t.get("IdClass"),
                    card: t.get("Id"),
                    cmEditMode: !1
                });
                e.mon(e, "destroy", function() {
                    0, delete e
                }, this, {
                    single: !0
                }), e.show()
            },
            onDeleteDetailClick: function(t) {
                Ext.Msg.confirm(CMDBuild.Translation.attention, CMDBuild.Translation.management.modcard.delete_card_confirm, function(t) {
                    if ("yes" != t) return;
                    var a = {};
                    this.currentDetail && (a.domainName = e.currentDetail.get("name"));
                    a.masterClassName = _CMCache.getEntryTypeNameById(n.get("IdClass")), a.masterCardId = n.get("Id"), a.detailClassName = _CMCache.getEntryTypeNameById(i.get("IdClass")), a.detailCardId = i.get("Id"), CMDBuild.core.LoadMask.show(), CMDBuild.proxy.Relation.removeDetail({
                        params: a,
                        loadMask: !1,
                        callback: function() {
                            CMDBuild.core.LoadMask.hide(), e.view.reload()
                        }
                    })
                }, this);
                var e = this,
                    i = t,
                    n = this.card
            },
            onOpenGraphClick: function(t) {
                Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.graph.Window", {
                    parentDelegate: this,
                    classId: t.get("IdClass"),
                    cardId: t.get("id")
                })
            },
            onOpenNoteClick: function(t) {
                this.controllerWindowNote.cmfg("classesFormTabMasterDetailWindowNoteConfigureAndShow", {
                    cardId: t.get(CMDBuild.core.constants.Proxy.ID),
                    className: _CMCache.getEntryTypeNameById(t.get("IdClass"))
                })
            },
            onOpenAttachmentClick: function(t) {
                if (!Ext.isObject(t) || Ext.Object.isEmpty(t)) return _error("onOpenAttachmentClick(): unmanaged model parameter", this, t);
                this.controllerWindowAttachment.cmfg("panelModuleAttachmentWindowConfigureAndShow", {
                    entityId: t.get("IdClass"),
                    id: t.get("Id")
                })
            },
            onTabClick: a,
            activeTabSet: function(t) {
                return this.view.tabs.setActiveTab(t)
            }
        })
    }(),
    function() {
        function t(t) {
            return _CMUtils.getEntryTypePrivilegesByCard(t).write
        }
        Ext.define("CMDBuild.controller.management.classes.CMNoteController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            uses: ["CMDBuild.proxy.Card", "CMDBuild.proxy.management.classes.tabs.Note"],
            constructor: function(t, e) {
                this.mixins.observable.constructor.call(this, arguments), this.callParent(arguments), this.CMEVENTS = {
                    noteWasSaved: "cm-note-saved"
                }, this.mon(this.view, this.view.CMEVENTS.modifyNoteButtonClick, this.onModifyNoteClick, this), this.mon(this.view, this.view.CMEVENTS.saveNoteButtonClick, this.onSaveNoteClick, this), this.mon(this.view, this.view.CMEVENTS.cancelNoteButtonClick, this.onCancelNoteClick, this), this.addEvents(this.addEvents.noteWasSaved)
            },
            onEntryTypeSelected: function() {
                this.unlockCard(), this.callParent(arguments), this.view.disable()
            },
            onCardSelected: function(t) {
                this.unlockCard(), this.callParent(arguments), this.updateView(t), this.disableTheTabBeforeCardSelection(t) ? this.view.disable() : (this.view.enable(), this.view.loadCard(t))
            },
            disableTheTabBeforeCardSelection: function(t) {
                return !t || CMDBuild.Utils.isSimpleTable(t.get("IdClass"))
            },
            updateView: function(t) {
                this.updateViewPrivilegesForCard(t), this.view.reset(), this.view.disableModify()
            },
            updateViewPrivilegesForCard: function(t) {
                var e = _CMUtils.getEntryTypePrivilegesByCard(t);
                this.view.updateWritePrivileges(e.write && !e.crudDisabled.modify)
            },
            onSaveNoteClick: function() {
                var t = this._getSaveParams();
                this.view.getForm().isValid() && this.beforeSave(this.card) && CMDBuild.proxy.management.classes.tabs.Note.update({
                    params: t,
                    scope: this,
                    success: function(t, e, i) {
                        this.view.disableModify(enableToolbar = !0);
                        var n = this.view.syncForms();
                        this.syncSavedNoteWithModel(this.card, n), this.fireEvent(this.CMEVENTS.noteWasSaved, this.card)
                    }
                })
            },
            onCancelNoteClick: function() {
                this.onCardSelected(this.card), this.view.disableModify(couldModify = t(this.card))
            },
            onModifyNoteClick: function() {
                if (t(this.card)) {
                    var e = this;
                    this.lockCard(function() {
                        e.view.enableModify()
                    })
                }
            },
            beforeSave: function(t) {
                return !0
            },
            _getSaveParams: function() {
                var t = {};
                return t.Notes = this.view.getForm().getValues().Notes, this.card && (t[CMDBuild.core.constants.Proxy.CARD_ID] = this.card.get("Id"), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.card.get("IdClass"))), t
            },
            syncSavedNoteWithModel: function(t, e) {
                t.set("Notes", e), t.commit(), t.raw && (t.raw.Notes = e)
            },
            lockCard: function(t) {
                if (CMDBuild.configuration.instance.get("enableCardLock")) {
                    if (this.card) {
                        var e = this.card.get("Id");
                        CMDBuild.proxy.Card.lock({
                            params: {
                                id: e
                            },
                            loadMask: !1,
                            success: t
                        })
                    }
                } else t()
            },
            unlockCard: function() {
                if (CMDBuild.configuration.instance.get("enableCardLock") && this.card && this.view.isInEditing()) {
                    var t = this.card.get("Id");
                    CMDBuild.proxy.Card.unlock({
                        params: {
                            id: t
                        },
                        loadMask: !1
                    })
                }
            }
        })
    }(), Ext.define("CMDBuild.view.management.map.CMMapPanelDelegate", {
        onLayerAdded: Ext.emptyFn,
        onLayerRemoved: Ext.emptyFn,
        onLayerChanged: Ext.emptyFn,
        onMapPanelVisibilityChanged: Ext.emptyFn
    }), Ext.define("CMDBuild.view.management.classes.map.CMMapPanel", {
        alternateClassName: "CMDBuild.Management.MapPanel",
        extend: "Ext.panel.Panel",
        uses: ["CMDBuild.controller.management.classes.map.CardGrid", "CMDBuild.controller.management.classes.map.LayerTree", "CMDBuild.view.management.classes.map.navigationTree.ViewTree", "CMDBuild.controller.management.classes.map.thematism.ThematismMainWindow", "CMDBuild.view.management.classes.map.thematism.ThematicDocument", "CMDBuild.view.management.classes.map.thematism.ThematicStrategiesManager", "CMDBuild.view.management.classes.map.geoextension.CMDBuildGeoExt", "CMDBuild.view.management.classes.map.thematism.ThematicColors"],
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        lon: void 0,
        lat: void 0,
        initialZoomLevel: void 0,
        layout: "border",
        thematismButton: void 0,
        printMapButton: void 0,
        searchMapButton: void 0,
        interactionDocument: void 0,
        geoExtension: void 0,
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.map.CMMapPanelDelegate"), this.callParent(arguments), this.hideMode = "offsets", this.cmAlreadyDisplayed = !1, this.cmVisible = !1
        },
        initComponent: function() {
            if (CMDBuild.gis.values.browserEnabled) {
                this.geoExtension = Ext.create("CMDBuild.view.management.classes.map.geoextension.CMDBuildGeoExt");
                var t = Ext.create("CMDBuild.view.management.classes.map.thematism.ThematicDocument"),
                    e = Ext.create("CMDBuild.view.management.classes.map.thematism.ThematicStrategiesManager");
                t.configureStrategiesManager(e), t.setThematismButton(this.thematismButton), this.interactionDocument = Ext.create("CMDBuild.view.management.classes.map.geoextension.InteractionDocument"), this.geoExtension.interactionDocument = this.interactionDocument, this.thematismButton.interactionDocument = this.interactionDocument;
                var i = Ext.create("CMDBuild.view.management.classes.map.thematism.ThematicColors");
                t.init(this.interactionDocument, i), this.interactionDocument.setThematicDocument(t), this.thematicView = Ext.create("CMDBuild.controller.management.classes.map.thematism.ThematismMainWindow", {
                    interactionDocument: this.interactionDocument
                }), this.mapPanel = Ext.create("CMDBuild.Management.CMMap", {
                    geoExtension: this.geoExtension,
                    interactionDocument: this.interactionDocument,
                    thematicView: this.thematicView
                });
                var n = [];
                if (CMDBuild.configuration.gis.get("cardBrowserByDomainConfiguration").root) {
                    var a = CMDBuild.configuration.gis.get("cardBrowserByDomainConfiguration").root;
                    this.interactionDocument.setStarted(!1), this.cardBrowser = new CMDBuild.view.management.classes.map.navigationTree.ViewTree({
                        title: CMDBuild.Translation.management.modcard.gis.gisNavigation,
                        frame: !1,
                        border: !1,
                        rootText: a.classDescription || a.className,
                        interactionDocument: this.interactionDocument
                    }), this.interactionDocument.setNavigationTree(this.cardBrowser), n.push(this.cardBrowser)
                }
                this.editingWindow = new CMDBuild.view.management.map.CMMapEditingToolsWindow({
                    owner: this,
                    interactionDocument: this.interactionDocument
                }), this.layerGridController = new CMDBuild.controller.management.classes.map.LayerTree({
                    title: CMDBuild.Translation.administration.modClass.layers,
                    interactionDocument: this.interactionDocument
                }), n.push(this.layerGridController.getView()), this.cardGridController = new CMDBuild.controller.management.classes.map.CardGrid({
                    title: CMDBuild.Translation.management.modcard.title,
                    interactionDocument: this.interactionDocument,
                    parentDelegate: this.delegate,
                    mainGrid: this.mainGrid
                }), n.push(this.cardGridController.getView()), this.layout = "border", this.items = [this.mapPanel, {
                    xtype: "tabpanel",
                    region: "east",
                    cls: "cmdb-border-left",
                    width: "25%",
                    split: !0,
                    collapsible: !0,
                    collapseMode: "mini",
                    header: !1,
                    frame: !1,
                    border: !1,
                    plain: !0,
                    activeItem: 0,
                    padding: "2 0 0 0",
                    items: n
                }], this.callParent(arguments)
            } else this.callParent(arguments)
        },
        print: function(t, e) {
            this.geoExtension.print()
        },
        search: function(t, e) {
            this.geoExtension.search()
        },
        executeThematism: function(t, e) {
            var i = this.interactionDocument.getCurrentCard().className;
            switch (t) {
                case CMDBuild.gis.constants.thematic_commands.NEW:
                    this.thematicView.show();
                    break;
                case CMDBuild.gis.constants.thematic_commands.MODIFY:
                    var n = this.interactionDocument.getCurrentThematicLayer(i);
                    this.thematicView.show(n);
                    break;
                case CMDBuild.gis.constants.thematic_commands.HIDE_CURRENT:
                    this.interactionDocument.setCursorActive(!e.checked), this.interactionDocument.changed();
                    break;
                case CMDBuild.gis.constants.thematic_commands.HIDE_LEGEND:
                    var a = this.interactionDocument.getMapPanel();
                    e.checked ? a.legend.hide() : a.legend.show();
                    break;
                case CMDBuild.gis.constants.thematic_commands.CHANGE_LAYER:
                    this.interactionDocument.setCurrentThematicLayer(i, e.text), this.interactionDocument.changedThematicDocument()
            }
        },
        updateSize: function() {},
        getMap: function() {
            return this.mapPanel
        },
        setCmVisible: function(t) {
            this.cmVisible = t, this.callDelegates("onMapPanelVisibilityChanged", [this, t])
        },
        editMode: function() {
            this.editingWindow && this.editingWindow.show()
        },
        displayMode: function() {
            this.editingWindow && (this.editingWindow.closeAllEditings(), this.editingWindow.hide(), this.interactionDocument.setCurrentFeature("", "", "Select"), this.interactionDocument.changedFeature())
        },
        getGeoServerLayerByName: function() {
            this.mapPanel.getGeoServerLayerByName(name)
        },
        updateMap: function(t) {
            this.editingWindow.removeAllLayerBinding()
        },
        addLayerToEditingWindow: function(t) {
            this.editingWindow.addLayer(t)
        },
        getCardBrowserPanel: function() {
            return this.cardBrowser
        },
        getCardGridController: function() {
            return this.cardGridController
        }
    }),
    function() {
        var t = {
            POINT: "mapFeaturePoint",
            LINESTRING: "mapFeatureLine",
            POLYGON: "mapFeaturePolygon"
        };
        Ext.define("CMDBuild.view.management.map.CMMapEditingToolsWindowDelegate", {
            addFeatureButtonHasBeenToggled: Ext.emptyFn,
            removeFeatureButtonHasBeenClicked: Ext.emptyFn,
            geoAttributeMenuItemHasBeenClicked: Ext.emptyFn
        }), Ext.define("CMDBuild.view.management.map.CMMapEditingToolsWindow", {
            extend: "Ext.Window",
            editingControls: {},
            layers: {},
            translation: CMDBuild.Translation,
            mixins: {
                delegable: "CMDBuild.core.CMDelegable"
            },
            owner: {
                getPosition: function() {
                    return [0, 0]
                }
            },
            constructor: function() {
                this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.map.CMMapEditingToolsWindowDelegate"), this.callParent(arguments)
            },
            initComponent: function() {
                this.closable = !1, this.hideBorders = !0, this.resizable = !1, this.frame = !1, this.interactionDocument.observe(this), this.layout = {
                    type: "hbox",
                    padding: "2",
                    align: "stretch"
                }, this.geoAttrMenuButton = new Ext.Button({
                    text: this.translation.management.modcard.gis.geo_attributes,
                    menu: new Ext.menu.Menu({
                        items: []
                    })
                }), this.addButton = new Ext.Button({
                    text: this.translation.add,
                    creationControl: void 0,
                    iconCls: "add",
                    enableToggle: !1,
                    allowDepress: !0,
                    disabled: !0,
                    scope: this,
                    handler: function(t) {
                        this.callDelegates("addFeatureButtonHasBeenToggled"), t.disable()
                    }
                }), this.removeButton = new Ext.Button({
                    text: this.translation.remove,
                    iconCls: "delete",
                    scope: this,
                    disabled: !0,
                    handler: function() {
                        var t = this.geoAttrMenuButton.attributeName;
                        t && this.onRemoveMenuitemSelect.call(this, t), this.callDelegates("removeFeatureButtonHasBeenClicked"), this.interactionDocument.getMapPanel().clearSelections()
                    }
                }), this.callParent(arguments)
            },
            refresh: function(t, e) {
                var i = this.interactionDocument.getCurrentCard();
                if (i) {
                    var n = i.className,
                        a = i.cardId,
                        o = this;
                    this.interactionDocument.getAllLayers(function(t) {
                        o.refreshAllLayers(t, n, a)
                    }, this)
                }
            },
            refreshAllLayers: function(t, e, i) {
                if (i) {
                    this.removeAllLayerBinding();
                    for (var n = 0; n < t.length; n++) {
                        var a = t[n];
                        this.interactionDocument.isVisible(a, e, i) && !this.interactionDocument.isGeoServerLayer(a) && this.addLayer(a)
                    }
                }
            },
            onRender: function() {
                this.callParent(arguments), this.interactionDocument.setNoZoom(!0), this.add([this.geoAttrMenuButton, this.addButton, this.removeButton])
            },
            show: function() {
                if (this.geoAttrMenuButton.menu.items.length > 0) {
                    this.interactionDocument.setEditing(!0), this.callParent(arguments);
                    var t = this.geoAttrMenuButton.menu.items.first();
                    t && this.onAddMenuitemSelect.call(this, t)
                }
            },
            closeAllEditings: function() {
                if (this.interactionDocument.getEditing()) {
                    this.interactionDocument.setEditing(!1);
                    this.interactionDocument.getCurrentCard().className;
                    for (var t in this.layers) {
                        var e = this.interactionDocument.getGeoLayerByName(t);
                        if (e) {
                            var i = e.get("adapter");
                            i && i.closeAllEditings && i.closeAllEditings()
                        }
                    }
                }
            },
            addLayer: function(e) {
                if (e && !this.interactionDocument.isGeoServerLayer(e)) {
                    var i = this.interactionDocument.getCurrentCard().className;
                    this.layers[e.name] || e.masterTableName !== i || (this.layers[e.name] = this.geoAttrMenuButton.menu.add({
                        iconCls: t[e.type],
                        text: e.description,
                        geoType: e.type,
                        name: e.name,
                        scope: this,
                        handler: this.onAddMenuitemSelect,
                        layer: e
                    }))
                }
            },
            removeAllLayerBinding: function() {
                this.geoAttrMenuButton.menu.removeAll(!0), this.layers = {}
            },
            onRemoveMenuitemSelect: function(t) {
                var e = this.interactionDocument.getCurrentCard(),
                    i = this.interactionDocument.getMapPanel().getLayerByClassAndName(e.className, t),
                    n = this.searchFeature(i, t, e.cardId);
                i.getSource().removeFeature(n);
                var a = i.get("adapter");
                a.onRemovedFeature && a.onRemovedFeature(), a.setStatus("None"), this.removeButton.disable()
            },
            onAddMenuitemSelect: function(t) {
                this.geoAttrMenuButton.setText(t.text), this.geoAttrMenuButton.attributeName = t.name, this.geoAttrMenuButton.setIconCls(t.iconCls);
                var e = this.interactionDocument.getCurrentCard(),
                    i = this.interactionDocument.getMapPanel().getLayerByClassAndName(e.className, t.name),
                    n = !0,
                    a = null;
                if (i) {
                    var o = i.get("cmdbuildLayer"),
                        r = this.interactionDocument.getZoom();
                    n = r < o.minZoom || r > o.maxZoom, a = this.searchFeature(i, t.name, e.cardId)
                } - 1 == e.cardId && (a = null), n ? (this.removeButton.disable(), this.addButton.disable()) : null !== a ? (this.removeButton.enable(), this.addButton.disable()) : (this.removeButton.disable(), this.addButton.enable()), this.callDelegates("geoAttributeMenuItemHasBeenClicked", t)
            },
            searchFeature: function(t, e, i) {
                if (!t || !t.getSource()) return null;
                for (var n = t.getSource().getFeatures(), a = 0; a < n.length; a++)
                    if (n[a].get("master_card") == i) return n[a];
                return null
            }
        })
    }(),
    function() {
        function t(t) {
            var e = {};
            if (t) {
                var i = null;
                "CMDBuild.model.CMActivityInstance" == Ext.getClassName(t) ? i = _CMWFState.getProcessInstance() : "CMDBuild.model.CMProcessInstance" == Ext.getClassName(t) && (i = t), e = null != i ? Ext.apply({
                    Id: i.get("Id"),
                    IdClass: i.get("IdClass"),
                    IdClass_value: i.get("IdClass_value")
                }, i.getValues()) : t.raw || t.data
            }
            return _debug("Server vars", e), e
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMWidgetController", {
            uses: ["CMDBuild.core.constants.Proxy"],
            statics: {
                WIDGET_NAME: "",
                getTemplateResolverServerVars: t
            },
            card: void 0,
            clientForm: void 0,
            ownerController: void 0,
            templateResolver: void 0,
            view: void 0,
            widgetConf: void 0,
            constructor: function(t, e, i, n, a) {
                if ("object" != typeof t) throw "The view of a WidgetController must be an object";
                if ("object" != typeof i) throw "The widget configuration is mandatory";
                this.WIDGET_NAME = this.self.WIDGET_NAME, this.card = a, this.clientForm = n, this.ownerController = e, this.view = t, this.widgetConf = i, this.outputName = this.widgetConf.outputName
            },
            beforeActiveView: Ext.emptyFn,
            beforeHideView: Ext.emptyFn,
            destroy: Ext.emptyFn,
            getData: function() {
                return null
            },
            getLabel: function() {
                return this.widgetConf[CMDBuild.core.constants.Proxy.LABEL]
            },
            getVariable: function(t) {
                try {
                    return this.templateResolver.getVariable(t)
                } catch (t) {
                    return void _debug("There is no template resolver")
                }
            },
            getTemplateResolverServerVars: function() {
                return t(this.card)
            },
            getWidgetId: function() {
                return this.widgetConf[CMDBuild.core.constants.Proxy.ID]
            },
            isValid: function() {
                return !0
            },
            onBeforeSave: function(t) {
                Ext.isObject(t) && !Ext.Object.isEmpty(t) && Ext.isFunction(t.callback) ? Ext.callback(t.callback, Ext.isEmpty(t.scope) ? this : t.scope) : _error("[" + this.getLabel() + "] onBeforeSave invalid parameters", this)
            },
            onEditMode: Ext.emptyFn,
            toString: function() {
                return Ext.getClassName(this)
            }
        })
    }(),
    function() {
        function t(t) {
            if (t) {
                var e = t.split(" "),
                    i = e[0],
                    n = e[1] || "00:00:00";
                return Ext.Date.parse(i + " " + n, "d/m/Y H:i:s")
            }
            return new Date
        }

        function e(t) {
            return t.getDate() + "/" + (t.getMonth() + 1) + "/" + t.getFullYear()
        }

        function i(e, i) {
            var n = i || {};
            i || (n.className = e.reader.getEventClass(e.widgetConf), n.filter = Ext.encode({
                CQL: e.paginationQuery
            })), CMDBuild.proxy.management.widget.Calendar.readAll({
                params: n,
                loadMask: !1,
                success: function(i, n, a) {
                    e.view.clearStore();
                    for (var o = a.rows || [], r = 0, s = o.length; r < s; ++r) {
                        var l = {},
                            d = o[r],
                            c = Extensible.calendar.data.EventMappings;
                        l[c.EventId.name] = d[e.eventMapping.id], l[c.StartDate.name] = t(d[e.eventMapping.start]), l[c.Title.name] = d[e.eventMapping.title], e.eventMapping.end ? l[c.EndDate.name] = t(d[e.eventMapping.end]) : l[c.EndDate.name] = t(d[e.eventMapping.start]);
                        var u = new Extensible.calendar.data.EventModel(l);
                        u && e.view.addEvent(u)
                    }
                }
            })
        }

        function n(t, e, i) {
            var n = _CMCache.getEntryTypeByName(this.reader.getEventClass(this.widgetConf));
            if (n) {
                var a = new CMDBuild.view.management.common.CMCardWindow({
                    cmEditMode: !1,
                    withButtons: !1,
                    title: e.get("Title")
                });
                new CMDBuild.controller.management.common.CMCardWindowController(a, {
                    entryType: n.get("id"),
                    card: e.get("EventId"),
                    cmEditMode: !1
                }), a.show()
            }
        }

        function a() {
            this.filteredWithCQL || (this.updatePaginationQuery(), i(this))
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMCalendarController", {
            uses: ["CMDBuild.core.Message", "CMDBuild.proxy.management.widget.Calendar"],
            mixins: {
                observable: "Ext.util.Observable",
                widgetcontroller: "CMDBuild.controller.management.common.widgets.CMWidgetController"
            },
            constructor: function(t, e, i, n, a) {
                if (this.mixins.observable.constructor.call(this), this.mixins.widgetcontroller.constructor.apply(this, arguments), this.reader = new CMDBuild.controller.management.common.widgets.CMCalendarControllerWidgetReader, !this.reader.getStartDate(this.widgetConf) || !this.reader.getTitle(this.widgetConf)) return CMDBuild.core.Message.error(CMDBuild.Translation.common.failure, CMDBuild.Translation.warnings.calendarIsNotWellConfigured), void(this.skipLoading = !0);
                this.eventMapping = {
                    id: "Id",
                    start: this.reader.getStartDate(this.widgetConf),
                    end: this.reader.getEndDate(this.widgetConf),
                    title: this.reader.getTitle(this.widgetConf)
                }, this.templateResolver = new CMDBuild.Management.TemplateResolver({
                    clientForm: this.clientForm,
                    xaVars: this.widgetConf,
                    serverVars: this.getTemplateResolverServerVars()
                })
            },
            beforeActiveView: function() {
                if (this.view.clearStore(), function(e) {
                        var i = e.reader.getDefaultDate(e.widgetConf);
                        if (i) {
                            var n = e.templateResolver.getVariable("client:" + i),
                                a = t(n);
                            a && e.view.setStartDate(a)
                        }
                    }(this), !this.skipLoading) {
                    var e = this,
                        o = this.templateResolver.getVariable("xa:" + e.reader.getFilterVarName());
                    o ? (this.filteredWithCQL = !0, this.templateResolver.resolveTemplates({
                        attributes: [e.reader.getFilterVarName()],
                        scope: e.view,
                        callback: function(t, n) {
                            var a = e.templateResolver.buildCQLQueryParameters(o, n);
                            i(e, a)
                        }
                    })) : (this.filteredWithCQL = !1, e.updatePaginationQuery(), i(e)), this._alreadyOpene || (this.mon(this.view, "eventclick", n, this), this.mon(this.view, "viewchange", a, this), this._alreadyOpened = !0)
                }
            },
            updatePaginationQuery: function() {
                function t(t) {
                    return "'" + t + "'"
                }
                var i = this,
                    n = this.view.getWievBounds(),
                    a = i.reader.getEventClass(i.widgetConf),
                    o = i.eventMapping.start,
                    r = i.eventMapping.end,
                    s = e(n.viewStart),
                    l = e(n.viewEnd),
                    d = "SELECT " + i.eventMapping.id + "," + i.eventMapping.title + "," + o + ",";
                i.eventMapping.end ? (d += i.eventMapping.end, d += " FROM " + a + " WHERE " + o + " <= " + t(l) + " AND " + r + " >= " + t(s)) : d += " FROM " + a + " WHERE " + o + " >= " + t(s) + " AND " + o + " <= " + t(l) + '"', this.paginationQuery = d
            },
            destroy: function() {
                this.mun(this.view, "eventclick", n, this), this.mun(this.view, "viewchange", a, this)
            }
        })
    }(),
    function() {
        var t = "_domNode",
            e = "_nodeType";

        function i(t) {
            return [].concat(t.widgetConf.nodesToUseAsColumns)
        }

        function n(t) {
            return [].concat(t.widgetConf.nodesToUseAsRows)
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMWebServiceController", {
            uses: ["CMDBuild.proxy.widget.WebService"],
            mixins: {
                observable: "Ext.util.Observable",
                widgetcontroller: "CMDBuild.controller.management.common.widgets.CMWidgetController",
                webServiceWidgetDelegate: "CMDBuild.view.management.common.widgets.CMWebServiceDelegate"
            },
            constructor: function(t, e, i, n, a) {
                this.mixins.observable.constructor.call(this), this.mixins.widgetcontroller.constructor.apply(this, arguments), this.wsCallParameters = i.callParameters, this.loaded = !1, this.store = null, this.templateResolver = null, this.view.addDelegate(this)
            },
            beforeActiveView: function() {
                var a, o, r = this;
                this.loaded || (null == r.store && (r.store = ((a = i(r)).push({
                    name: t,
                    type: "auto"
                }, {
                    name: e,
                    type: "string"
                }), Ext.define("CMWebServiceModel", {
                    extend: "Ext.data.Model",
                    fields: a,
                    idProperty: "_CM_ID"
                }), new Ext.data.Store({
                    model: "CMWebServiceModel",
                    data: [],
                    autoLoad: !1
                })), r.view.configureGrid(r.store, function(t) {
                    var a = n(t),
                        o = i(t),
                        r = [];
                    a.length > 1 && r.push({
                        header: CMDBuild.Translation.administration.modClass.attributeProperties.type,
                        dataIndex: e,
                        flex: 1
                    });
                    for (var s = 0, l = o.length; s < l; ++s) {
                        var d = o[s];
                        r.push({
                            header: d,
                            dataIndex: d,
                            flex: 1
                        })
                    }
                    return r
                }(r), function(t) {
                    var e = {};
                    t.widgetConf.readOnly || (e = {
                        selType: "checkboxmodel",
                        allowDeselect: !0,
                        mode: t.widgetConf.singleSelect ? "SINGLE" : "MULTI"
                    });
                    return e
                }(r))), null == r.templateResolver && (r.templateResolver = new CMDBuild.Management.TemplateResolver({
                    clientForm: r.clientForm,
                    xaVars: r.wsCallParameters,
                    serverVars: this.getTemplateResolverServerVars()
                })), (o = r).templateResolver.resolveTemplates({
                    attributes: Ext.Object.getKeys(o.wsCallParameters),
                    callback: function(i) {
                        var a = o.getTemplateResolverServerVars(),
                            r = _CMCache.getEntryTypeNameById(a.IdClass),
                            s = {};
                        for (var l in o.wsCallParameters) s[l] = i[l];
                        var d = o.view.getEl();
                        d && d.mask(CMDBuild.Translation.pleaseWait), CMDBuild.proxy.widget.WebService.callWidget({
                            method: "GET",
                            params: {
                                className: r,
                                id: a.Id,
                                activityId: _CMWFState.getActivityInstance().getId(),
                                widgetId: o.getWidgetId(),
                                params: Ext.encode(s)
                            },
                            loadMask: !1,
                            success: function(i, a, r) {
                                o.loaded = !0;
                                var s = r.response || "",
                                    l = CMDBuild.core.xml.XMLUtility,
                                    d = l.xmlDOMFromString(s),
                                    c = l.fromDOMToArrayOfObjects(d, n(o), t, e);
                                o.store.loadRawData(c), o.templateResolver.bindLocalDepsChange(function() {
                                    o.loaded = !1
                                })
                            },
                            callback: function() {
                                d && d.unmask()
                            }
                        })
                    }
                }))
            },
            getData: function() {
                var e = [];
                if (!this.widgetConf.readOnly)
                    for (var i = this.view.getSelectedRecords(), n = 0, a = i.length; n < a; ++n) {
                        var o = i[n].get(t);
                        e.push(CMDBuild.core.xml.XMLUtility.serializeToString(o))
                    }
                return {
                    output: e
                }
            },
            isValid: function() {
                return !this.widgetConf.mandatory || this.getData().output.length > 0
            },
            destroy: function() {
                this.callParent(arguments)
            },
            onWebServiceWidgetShowAllInfoButtonClick: function(e, i) {
                new CMDBuild.view.management.common.widgets.CMXMLWindow({
                    xmlNode: i.get(t)
                }).show()
            }
        })
    }(),
    function() {
        var t = "_filter";

        function e(t, e, i, n, a, o) {
            var r = a.target.className;
            this.callBacks[r] && this.callBacks[r](e)
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMPresetFromCardController", {
            mixins: {
                observable: "Ext.util.Observable",
                widgetcontroller: "CMDBuild.controller.management.common.widgets.CMWidgetController",
                cmPresetFromCardDelegate: "CMDBuild.view.management.common.widgets.CMPresetFromCardDelegate"
            },
            constructor: function(i, n, a, o, r) {
                var s, l;
                this.mixins.observable.constructor.call(this), this.mixins.widgetcontroller.constructor.apply(this, arguments), i.addDelegate(this), this.callBacks = {
                    "action-card-show": this.onShowCardkClick
                }, this.templateResolver = new CMDBuild.Management.TemplateResolver({
                    clientForm: o,
                    xaVars: (s = a, l = s.templates || {}, l[t] = s.filter, l),
                    serverVars: this.getTemplateResolverServerVars()
                }), this.mon(this.view.grid, "beforeitemclick", e, this)
            },
            onShowCardkClick: function(t) {
                var e = new CMDBuild.view.management.common.CMCardWindow({
                    cmEditMode: !1,
                    withButtons: !1,
                    title: t.get("IdClass_value")
                });
                new CMDBuild.controller.management.common.CMCardWindowController(e, {
                    entryType: t.get("IdClass"),
                    card: t.get("Id"),
                    cmEditMode: !1
                }), e.show()
            },
            beforeActiveView: function() {
                ! function(e) {
                    var i = e.widgetConf,
                        n = _CMCache.getEntryTypeByName(i.className);
                    if (!n) return;
                    var a = n.getId(),
                        o = i.filter;
                    e.templateResolver.resolveTemplates({
                        attributes: [t],
                        callback: function(t, i) {
                            var n = e.templateResolver.buildCQLQueryParameters(o, i);
                            e.view.updateGrid(a, n)
                        }
                    })
                }(this)
            },
            onPresetFromCardSaveButtonClick: function(t) {
                var e = t.getSelection(),
                    i = this.clientForm.getFields(),
                    n = this.widgetConf.presetMapping;
                e && i && n && i.each(function(t) {
                    t._belongToEditableSubpanel && n[t.name] && t.setValue(e.get(n[t.name]))
                }), "function" == typeof this.ownerController.hideWidgetsContainer && this.ownerController.hideWidgetsContainer()
            }
        })
    }(), Ext.define("CMDBuild.controller.management.common.CMWidgetManagerController", {
        uses: ["CMDBuild.controller.management.common.widgets.workflow.CMWorkflowController", "CMDBuild.controller.management.widget.linkCards.LinkCardsController", "CMDBuild.controller.management.widget.manageRelation.CMManageRelationController", "CMDBuild.core.configurations.Timeout", "CMDBuild.core.Message"],
        controllerClasses: {},
        controllers: {},
        constructor: function(t) {
            Ext.apply(this, {
                controllerClasses: {
                    ".Calendar": CMDBuild.controller.management.common.widgets.CMCalendarController,
                    ".CreateModifyCard": "CMDBuild.controller.management.widget.createModifyCard.CMCreateModifyCardController",
                    ".CustomForm": "CMDBuild.controller.management.widget.customForm.CustomForm",
                    ".Grid": "CMDBuild.controller.management.common.widgets.grid.Grid",
                    ".LinkCards": CMDBuild.controller.management.widget.linkCards.LinkCardsController,
                    ".ManageEmail": "CMDBuild.controller.management.widget.ManageEmail",
                    ".ManageRelation": CMDBuild.controller.management.widget.manageRelation.CMManageRelationController,
                    ".NavigationTree": "CMDBuild.controller.management.widget.navigationTree.NavigationTree",
                    ".OpenAttachment": "CMDBuild.controller.management.widget.OpenAttachment",
                    ".OpenNote": "CMDBuild.controller.management.widget.OpenNote",
                    ".OpenReport": "CMDBuild.controller.management.widget.openReport.OpenReport",
                    ".Ping": "CMDBuild.controller.management.widget.Ping",
                    ".PresetFromCard": CMDBuild.controller.management.common.widgets.CMPresetFromCardController,
                    ".WebService": CMDBuild.controller.management.common.widgets.CMWebServiceController,
                    ".Workflow": CMDBuild.controller.management.common.widgets.workflow.CMWorkflowController
                },
                view: t
            }), this.view.delegate = this
        },
        setDelegate: function(t) {
            this.delegate = t
        },
        beforeHideView: function(t) {
            Ext.isEmpty(t.widgetConfiguration) || ".OpenReport" != t.widgetConfiguration.type || CMDBuild.global.interfaces.Configurations.set("disableAllMessages", !1), Ext.isEmpty(t) || (!Ext.isEmpty(t.cmfg) && Ext.isFunction(t.cmfg) ? t.cmfg("beforeHideView") : Ext.isFunction(t.beforeHideView) && t.beforeHideView())
        },
        buildControllers: function(t) {
            var e = this;
            if (e.removeAll(), t) {
                for (var i = e.takeWidgetFromCard(t), n = {}, a = 0, o = i.length, r = null, s = null; a < o; ++a)
                    if (r = i[a], s = e.view.buildWidget(r, t)) {
                        var l = e.buildWidgetController(s, r, t);
                        l && (n[e.getWidgetId(r)] = l)
                    }
                this.controllers = Ext.clone(n)
            }
        },
        onWidgetButtonClick: function(t) {
            var e = this.controllers[this.getWidgetId(t)];
            Ext.Object.isEmpty(t) || ".OpenReport" != t.type || CMDBuild.global.interfaces.Configurations.set("disableAllMessages", !0), this.delegate.ensureEditPanel(), Ext.isEmpty(e) || (this.view.showWidget(e.view, this.getWidgetLable(t)), !Ext.isEmpty(e.cmfg) && Ext.isFunction(e.cmfg) ? e.cmfg("beforeActiveView") : Ext.isFunction(e.beforeActiveView) && e.beforeActiveView())
        },
        onCardGoesInEdit: function() {
            Ext.Object.each(this.controllers, function(t, e, i) {
                !Ext.isEmpty(e.instancesDataStorageReset) && Ext.isFunction(e.instancesDataStorageReset) && e.instancesDataStorageReset(), !Ext.isEmpty(e.cmfg) && Ext.isFunction(e.cmfg) ? e.cmfg("onEditMode") : !Ext.isEmpty(e.onEditMode) && Ext.isFunction(e.onEditMode) && e.onEditMode()
            }, this)
        },
        getWrongWFAsHTML: function() {
            var t = "",
                e = !0;
            return Ext.Object.each(this.controllers, function(i, n, a) {
                Ext.isEmpty(n.cmfg) || !Ext.isFunction(n.cmfg) || n.cmfg("isValid") ? Ext.isEmpty(n.isValid) || !Ext.isFunction(n.isValid) || Ext.isEmpty(n.getLabel) || !Ext.isFunction(n.getLabel) || n.isValid() || (e = !1, t += "<li>" + n.getLabel() + "</li>") : (e = !1, t += "<li>" + n.cmfg("getLabel") + "</li>")
            }, this), e ? null : '<ul style="text-align: left;">' + t + "</ul>"
        },
        removeAll: function() {
            for (var t in this.view.reset(), this.controllers) {
                var e = this.controllers[t];
                e.destroy(), delete this.controllers[t], delete e
            }
        },
        waitForBusyWidgets: function(t, e) {
            var i = Ext.create("CMDBuild.core.RequestBarrier", {
                id: "widgetManagerBeforeSaveBarrier",
                executionTimeout: CMDBuild.core.configurations.Timeout.getWorkflowWidgetsExecutionTimeout(),
                scope: e,
                callback: t,
                failure: function() {
                    CMDBuild.core.Message.error(null, CMDBuild.Translation.errors.busyVisualControls, !1)
                }
            });
            Ext.Object.each(this.controllers, function(t, e, n) {
                !Ext.isEmpty(e.cmfg) && Ext.isFunction(e.cmfg) ? e.cmfg("onBeforeSave", {
                    scope: this,
                    callback: i.getCallback("widgetManagerBeforeSaveBarrier")
                }) : Ext.isFunction(e.onBeforeSave) && e.onBeforeSave({
                    scope: this,
                    callback: i.getCallback("widgetManagerBeforeSaveBarrier")
                })
            }, this), i.finalize("widgetManagerBeforeSaveBarrier", !0)
        },
        getData: function(t) {
            var e = {};
            return Ext.Object.each(this.controllers, function(i, n, a) {
                if (!Ext.isEmpty(n.cmfg) && Ext.isFunction(n.cmfg)) {
                    var o = n.cmfg("getData", t);
                    Ext.isEmpty(o) || (e[i] = o)
                } else Ext.isFunction(n.getData) && (o = n.getData(t), Ext.isEmpty(o) || (e[i] = o))
            }, this), e
        },
        hideWidgetsContainer: function() {
            this.view.widgetsContainer.hide()
        },
        buildWidgetController: function(t, e, i) {
            var n = null,
                a = this.controllerClasses[e.type];
            return Ext.isEmpty(a) || (Ext.isFunction(a) ? n = new a(t, superController = this, e, clientForm = this.view.getFormForTemplateResolver(), i) : Ext.isString(a) && (n = Ext.create(a, {
                view: t,
                parentDelegate: this,
                widgetConfiguration: e,
                clientForm: this.view.getFormForTemplateResolver(),
                card: i
            }))), n
        },
        takeWidgetFromCard: function(t) {
            var e = [];
            if ("CMDBuild.model.CMActivityInstance" == Ext.getClassName(t)) e = t.getWidgets();
            else {
                var i = _CMCache.getEntryTypeById(t.get("IdClass"));
                i && (e = i.getWidgets())
            }
            return e
        },
        getWidgetId: function(t) {
            return t.id
        },
        getWidgetLable: function(t) {
            return t.label
        },
        activateFirstTab: function() {
            this.view.activateFirstTab()
        }
    }), Ext.define("CMDBuild.controller.management.common.CMWidgetManagerControllerPopup", {
        extend: "CMDBuild.controller.management.common.CMWidgetManagerController",
        uses: ["CMDBuild.controller.management.common.widgets.workflow.CMWorkflowController", "CMDBuild.controller.management.widget.linkCards.LinkCardsController", "CMDBuild.controller.management.widget.manageRelation.CMManageRelationController", "CMDBuild.core.configurations.Timeout", "CMDBuild.core.Message"],
        buildControllers: function(t, e) {
            var i = this;
            for (var n in i.removeAll(), t)
                if (ui = i.view.buildWidget(t[n], e), ui) {
                    var a = i.buildWidgetController(ui, t[n], e);
                    a && (i.controllers[i.getWidgetId(t[n])] = a)
                }
        }
    }), Ext.define("CMDBuild.controller.management.dashboard.CMModDashboardController", {
        extend: "CMDBuild.controller.CMBasePanelController",
        uses: ["CMDBuild.core.constants.Proxy"],
        mixins: {
            columnController: "CMDBuild.controller.common.CMDashboardColumnController"
        },
        constructor: function() {
            this.callParent(arguments), this.view && this.view.setDelegate(this), this.dashboard = null
        },
        onViewOnFront: function(t) {
            if (t && "function" == typeof t.get) {
                var e = Ext.isEmpty(t.get(CMDBuild.core.constants.Proxy.ENTITY_ID)) ? CMDBuild.core.constants.Proxy.ID : CMDBuild.core.constants.Proxy.ENTITY_ID;
                this.dashboard = _CMCache.getDashboardById(t.get(e)), this.view.buildDashboardColumns(this.dashboard), Ext.isEmpty(t) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                    moduleId: this.view.cmName,
                    entryType: {
                        description: t.get(CMDBuild.core.constants.Proxy.DESCRIPTION),
                        id: t.get(CMDBuild.core.constants.Proxy.ID),
                        object: t
                    }
                })
            }
        }
    }),
    function() {
        function t() {
            this.view.cardTabPanel.reset(_CMCardModuleState.entryType.get("id"))
        }

        function e(t) {
            this.setCard(null), this.callForSubControllers("onAddCardButtonClick", t.classId), this.view.activateFirstTab(), _CMUIState.onlyFormIfFullScreen()
        }
        Ext.define("CMDBuild.controller.management.common.CMModController", {
            uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.administration.userAndGroup.group.tabs.DefaultFilters"],
            extend: "CMDBuild.controller.CMBasePanelController",
            mixins: {
                commonFunctions: "CMDBuild.controller.management.common.CMModClassAndWFCommons",
                observable: "Ext.util.Observable"
            },
            constructor: function(t) {
                this.callParent(arguments), this.view.delegate = this, this.buildSubControllers()
            },
            onViewOnFront: function(t) {
                if (!Ext.isEmpty(t)) {
                    var e = Ext.isEmpty(t.get(CMDBuild.core.constants.Proxy.ENTITY_ID)) ? CMDBuild.core.constants.Proxy.ID : CMDBuild.core.constants.Proxy.ENTITY_ID,
                        i = CMDBuild.global.controller.MainViewport.cmfg("mainViewportDanglingCardGet"),
                        n = t.get(CMDBuild.core.constants.Proxy.FILTER),
                        a = t.get(e);
                    if (this.selectedAccordionNode = t, CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE) && _CMUIState.onlyGrid(), Ext.isEmpty(n)) {
                        var o = {};
                        o[CMDBuild.core.constants.Proxy.CLASS_NAME] = t.get(CMDBuild.core.constants.Proxy.NAME), o[CMDBuild.core.constants.Proxy.GROUP] = CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.DEFAULT_GROUP_NAME), CMDBuild.proxy.administration.userAndGroup.group.tabs.DefaultFilters.read({
                            params: o,
                            scope: this,
                            success: function(t, e, o) {
                                o = o.response.elements[0], Ext.isEmpty(o) || (Ext.isString(o[CMDBuild.core.constants.Proxy.CONFIGURATION]) && CMDBuild.core.Utils.isJsonString(o[CMDBuild.core.constants.Proxy.CONFIGURATION]) && (o[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.decode(o[CMDBuild.core.constants.Proxy.CONFIGURATION])), n = Ext.create("CMDBuild.model.CMFilterModel", o)), this.setEntryType(a, i, n)
                            }
                        })
                    } else this.setEntryType(a, i, n)
                }
            },
            onCardSelected: function(t) {
                this.setCard(t)
            },
            setEntryType: function(t, e, i) {
                this.entryType = _CMCache.getEntryTypeById(t), this.setCard(null), this.callForSubControllers("onEntryTypeSelected", [this.entryType, e, i]), Ext.isEmpty(e) || Ext.isEmpty(e.activateFirstTab) || this.view.cardTabPanel.activeTabSet(e.activateFirstTab)
            },
            getEntryType: function() {
                return this.entryType || null
            },
            getEntryTypeId: function() {
                var t = null;
                return this.entryType && (t = this.entryType.get("id")), t
            },
            setCard: function(t) {
                this.card = t, this.onCardChanged(t)
            },
            getCard: function() {
                return this.card
            },
            onCardChanged: function(t) {
                this.callForSubControllers("onCardSelected", this.card)
            },
            callForSubControllers: function(t, e) {
                for (var i = 0, n = this.subControllers.length, a = null; i < n; ++i) a = this.subControllers[i], "string" == typeof t && "function" == typeof a[t] && (e = Ext.isArray(e) ? e : [e], a[t].apply(a, e))
            },
            buildSubControllers: Ext.emptyFn
        }), Ext.define("CMDBuild.controller.management.classes.CMModCardController", {
            uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.administration.userAndGroup.group.tabs.DefaultFilters"],
            extend: "CMDBuild.controller.management.common.CMModController",
            card: void 0,
            cardPanelController: void 0,
            controllerMap: void 0,
            controllerTabAttachment: void 0,
            controllerTabEmail: void 0,
            controllerTabHistory: void 0,
            enableNewCardModule: !0,
            mdController: void 0,
            noteController: void 0,
            relationsController: void 0,
            subControllers: [],
            view: void 0,
            constructor: function(t) {
                this.callParent(arguments), this.mon(this.view, this.view.CMEVENTS.addButtonClick, e, this)
            },
            buildSubControllers: function() {
                var e, i;
                Ext.suspendLayouts(), this.enableNewCardModule ? this.buildTabControllerCard2() : this.buildTabControllerCard(), this.buildTabControllerDetails(), this.buildTabControllerNotes(), this.buildTabControllerRelations(), this.buildTabControllerHistory(), this.buildTabControllerEmail(), this.buildTabControllerAttachments(), e = this, (i = this.view.getGrid()) && (e.gridController = new CMDBuild.controller.management.common.CMCardGridController(i), e.mon(e.gridController, e.gridController.CMEVENTS.cardSelected, e.onCardSelected, e), e.mon(e.gridController, e.gridController.CMEVENTS.wrongSelection, t, e), e.mon(e.gridController, e.gridController.CMEVENTS.gridVisible, e.onGridVisible, e), e.mon(e.gridController, e.gridController.CMEVENTS.load, e.onGridLoad, e), e.mon(e.gridController, e.gridController.CMEVENTS.itemdblclick, function() {
                        if (e.enableNewCardModule) {
                            if (!e.controllerTabCard2.cmfg("panelGridAndFormSelectedEntityGet", [CMDBuild.core.constants.Proxy.CAPABILITIES, CMDBuild.core.constants.Proxy.MODIFY_DISABLED])) {
                                var t = {};
                                t[CMDBuild.core.constants.Proxy.FULL_SCREEN] = "bottom", t[CMDBuild.core.constants.Proxy.VIEW_MODE] = "edit", e.controllerTabCard2.cmfg("classesFormTabCardSelectedEntityIsEmpty") || (t[CMDBuild.core.constants.Proxy.ENTITY_NAME] = e.controllerTabCard2.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME)), e.controllerTabCard2.cmfg("classesFormTabCardSelectedItemIsEmpty") || (t[CMDBuild.core.constants.Proxy.ITEM_ENTITY_NAME] = e.controllerTabCard2.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), t[CMDBuild.core.constants.Proxy.ITEM_ID] = e.controllerTabCard2.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID)), e.controllerTabCard2.cmfg("classesFormTabCardUiUpdate", t)
                            }
                        } else {
                            var i = _CMUtils.getEntryTypePrivilegesByCard(e.cardPanelController.card);
                            i.crudDisabled.modify || (e.cardPanelController.onModifyCardClick(), _CMUIState.onlyFormIfFullScreen())
                        }
                    }, e), e.subControllers.push(e.gridController)),
                    function(t, e) {
                        if (null == e) return;
                        CMDBuild.configuration.bim.get("enabled") && new CMDBuild.bim.management.CMBimController(e)
                    }(0, this.view.getGrid()), Ext.resumeLayouts(), this.view.cardTabPanel.setActiveTab(0)
            },
            buildMapController: function() {
                Ext.isFunction(this.view.getMapPanel) ? this.controllerMap = new CMDBuild.controller.management.classes.CMMapController(this.view.getMapPanel(), this.view.getMapPanel().interactionDocument) : this.controllerMap = {
                    onEntryTypeSelected: Ext.emptyFn,
                    onAddCardButtonClick: Ext.emptyFn,
                    onCardSaved: Ext.emptyFn,
                    getCardData: Ext.emptyFn,
                    getValues: function() {
                        return !1
                    },
                    refresh: Ext.emptyFn,
                    editMode: Ext.emptyFn,
                    displayMode: Ext.emptyFn
                }, this.subControllers.push(this.controllerMap), this.enableNewCardModule || this.cardPanelController.addCardDataProviders(this.controllerMap)
            },
            buildTabControllerAttachments: function() {
                CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_ATTACHMENT_TAB) || (this.controllerTabAttachment = Ext.create("CMDBuild.controller.management.classes.panel.form.tabs.Attachment", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabAttachment), this.view.cardTabPanel.attachmentPanel = this.controllerTabAttachment.getView(), this.view.cardTabPanel.add(this.controllerTabAttachment.getView()))
            },
            buildTabControllerCard: function() {
                var t = this.view.getCardPanel(),
                    e = new CMDBuild.controller.management.common.CMWidgetManagerController(this.view.getWidgetManager());
                Ext.isEmpty(t) || (this.cardPanelController = new CMDBuild.controller.management.classes.CMCardPanelController(t, this, e), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.cardRemoved, function(t, e) {
                    var i = _CMCardModuleState.entryType;
                    this.gridController.onCardDeleted(), this.view.reset(i.get("id")), _CMCache.onClassContentChanged(e)
                }, this), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.cardSaved, function(t) {
                    var e = _CMCardModuleState.entryType;
                    this.gridController.onCardSaved(t), this.controllerMap.onCardSaved(t), _CMCache.onClassContentChanged(e.get("id"))
                }, this), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.displayModeDidActivate, function() {
                    this.controllerMap.displayMode()
                }, this), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.cloneCard, function() {
                    this.callForSubControllers("onCloneCard")
                }, this), this.subControllers.push(this.cardPanelController), this.view.cardTabPanel.add(t))
            },
            buildTabControllerCard2: function() {
                this.controllerTabCard2 = Ext.create("CMDBuild.controller.management.classes.panel.form.tabs.card.Tab", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabCard2), this.view.cardTabPanel.cardPanel2 = this.controllerTabCard2.getView(), this.view.cardTabPanel.add(this.controllerTabCard2.getView())
            },
            buildTabControllerDetails: function() {
                var t = this.view.getMDPanel();
                Ext.isEmpty(t) || (this.mdController = new CMDBuild.controller.management.classes.masterDetails.CMMasterDetailsController(t, this), this.mon(this.mdController, "empty", function(t) {
                    t && this.view.cardTabPanel.activateFirstTab()
                }, this), this.subControllers.push(this.mdController), this.view.cardTabPanel.add(t))
            },
            buildTabControllerEmail: function() {
                CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_EMAIL_TAB) || (this.controllerTabEmail = Ext.create("CMDBuild.controller.management.classes.tabs.Email", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabEmail), this.view.cardTabPanel.emailPanel = this.controllerTabEmail.getView(), this.view.cardTabPanel.add(this.controllerTabEmail.getView()))
            },
            buildTabControllerHistory: function() {
                CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_HISTORY_TAB) || (this.controllerTabHistory = Ext.create("CMDBuild.controller.management.classes.tabs.History", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabHistory), this.view.cardTabPanel.cardHistoryPanel = this.controllerTabHistory.getView(), this.view.cardTabPanel.add(this.controllerTabHistory.getView()))
            },
            buildTabControllerNotes: function() {
                var t = this.view.getNotePanel();
                Ext.isEmpty(t) || (this.noteController = new CMDBuild.controller.management.classes.CMNoteController(t), this.subControllers.push(this.noteController), this.view.cardTabPanel.add(t))
            },
            buildTabControllerRelations: function() {
                var t = this.view.getRelationsPanel();
                Ext.isEmpty(t) || (this.relationsController = new CMDBuild.controller.management.classes.CMCardRelationsController(t, this), this.mon(this.relationsController, this.relationsController.CMEVENTS.serverOperationSuccess, function() {
                    this.gridController.reload(!0)
                }, this), this.subControllers.push(this.relationsController), this.view.cardTabPanel.add(t))
            },
            changeClassUIConfigurationForGroup: function(t) {
                var e = _CMUtils.getClassPrivileges(t);
                this.view.addCardButton.disabledForGroup = !(e.write && !e.crudDisabled.create), this.view.addCardButton.disabledForGroup ? this.view.addCardButton.disable() : this.view.addCardButton.enable(), this.enableNewCardModule || this.cardPanelController.changeClassUIConfigurationForGroup(!(e.write && !e.crudDisabled.modify), !(e.write && !e.crudDisabled.clone), !(e.write && !e.crudDisabled.remove))
            },
            getMapSaveParams: function(t) {
                t = Ext.isObject(t) ? t : {};
                var e = {};
                if (CMDBuild.configuration.gis.get(CMDBuild.core.constants.Proxy.ENABLED) && Ext.isString(t.className) && !Ext.isEmpty(t.className)) {
                    var i = this.controllerMap.getCardData(t);
                    i && (e[this.controllerMap.cardDataName] = i)
                }
                return e
            },
            getFormForTemplateResolver: function() {
                return this.view.getCardPanel().getFormForTemplateResolver()
            },
            onGridLoad: function(t) {
                Ext.isEmpty(t[1]) && (this.view.cardTabPanel.items.each(function(t) {
                    Ext.isFunction(t.reset) && t.reset(), Ext.isFunction(t.disable) && t.disable()
                }), this.enableNewCardModule || (this.view.getCardPanel().enable(), this.view.getCardPanel().displayMode(), CMDBuild.clearComponent(this.view.getCardPanel().form)))
            },
            onGridVisible: function(t, e) {
                t && this.entryType && this.card && e && e[0] && e[0].get("Id") != this.card.get("Id") && this.gridController.openCard({
                    IdClass: this.entryType.get("id"),
                    Id: this.card.get("Id")
                }, !0)
            },
            onAbortCardClick: function() {
                !Ext.isEmpty(this.controllerTabEmail) && Ext.isFunction(this.controllerTabEmail.onAbortCardClick) && this.controllerTabEmail.onAbortCardClick()
            },
            onModifyCardClick: function() {
                !Ext.isEmpty(this.controllerMap) && Ext.isFunction(this.controllerMap.editMode) && this.controllerMap.editMode(), !Ext.isEmpty(this.controllerTabEmail) && Ext.isFunction(this.controllerTabEmail.onModifyCardClick) && this.controllerTabEmail.onModifyCardClick()
            },
            onSaveCardClick: function() {
                !Ext.isEmpty(this.controllerTabEmail) && Ext.isFunction(this.controllerTabEmail.onSaveCardClick) && this.controllerTabEmail.onSaveCardClick()
            },
            setEntryType: function(t, e, i) {
                var n = _CMCache.getEntryTypeById(t);
                this.view.addCardButton.updateForEntry(n), this.view.mapAddCardButton.updateForEntry(n), this.view.updateTitleForEntry(n), Ext.isEmpty(e) || Ext.isEmpty(e.activateFirstTab) || this.view.cardTabPanel.activeTabSet(e.activateFirstTab), _CMCardModuleState.setEntryType(n, e, i), _CMUIState.onlyGridIfFullScreen(), this.changeClassUIConfigurationForGroup(t), Ext.isString(i) && !Ext.isEmpty(i) && Ext.Array.contains(this.selectedAccordionNode.get(CMDBuild.core.constants.Proxy.SECTION_HIERARCHY), "filter") && (CMDBuild.global.dataViewHack = {
                    filter: i,
                    entryType: n
                })
            }
        })
    }(), Ext.define("CMDBuild.controller.management.classes.CMCardPanelController", {
        uses: ["CMDBuild.proxy.Card"],
        mixins: {
            observable: "Ext.util.Observable"
        },
        extend: "CMDBuild.controller.management.classes.CMBaseCardPanelController",
        constructor: function(t, e, i) {
            this.callParent(arguments), this.mixins.observable.constructor.call(this, arguments), this.CMEVENTS = Ext.apply(this.CMEVENTS, {
                cardRemoved: "cm-card-removed",
                cloneCard: "cm-card-clone"
            }), this.addEvents(this.CMEVENTS.cardRemoved, this.CMEVENTS.cloneCard, this.CMEVENTS.cardSaved, this.CMEVENTS.editModeDidAcitvate, this.CMEVENTS.displayModeDidActivate);
            var n = this.view.CMEVENTS;
            this.mon(this.view, n.removeCardButtonClick, this.onRemoveCardClick, this), this.mon(this.view, n.cloneCardButtonClick, this.onCloneCardClick, this), this.mon(this.view, n.printCardButtonClick, this.onPrintCardMenuClick, this), this.mon(this.view, n.openGraphButtonClick, this.onShowGraphClick, this)
        },
        onEntryTypeSelected: function() {
            this.cloneCard = !1, this.callParent(arguments)
        },
        onCardSelected: function() {
            this.cloneCard = !1, this.callParent(arguments)
        },
        onRemoveCardClick: function() {
            var t = this,
                e = t.card.get("Id"),
                i = t.entryType.get("id");
            Ext.Msg.confirm(CMDBuild.Translation.attention, CMDBuild.Translation.management.modcard.delete_card_confirm, function(n) {
                "yes" == n && (CMDBuild.core.LoadMask.show(), CMDBuild.proxy.Card.remove({
                    params: {
                        IdClass: i,
                        Id: e
                    },
                    loadMask: !1,
                    success: function() {
                        t.fireEvent(t.CMEVENTS.cardRemoved, e, i)
                    },
                    callback: function() {
                        CMDBuild.core.LoadMask.hide()
                    }
                }))
            }, this)
        },
        onCloneCardClick: function() {
            _CMCardModuleState.setPreviousCard(_CMCardModuleState.card), this.cloneCard = !0, this.onModifyCardClick(), this.fireEvent(this.CMEVENTS.cloneCard)
        },
        changeClassUIConfigurationForGroup: function(t, e, i) {
            this.view.form.modifyCardButton.disabledForGroup = t, this.view.form.cloneCardButton.disabledForGroup = e, this.view.form.deleteCardButton.disabledForGroup = i, this.view.form.modifyCardButton.disabledForGroup ? this.view.form.modifyCardButton.disable() : this.view.form.modifyCardButton.enable(), this.view.form.cloneCardButton.disabledForGroup ? this.view.form.cloneCardButton.disable() : this.view.form.cloneCardButton.enable(), this.view.form.deleteCardButton.disabledForGroup ? this.view.form.deleteCardButton.disable() : this.view.form.deleteCardButton.enable()
        },
        onModifyCardClick: function() {
            var t = this;
            this.cloneCard && this.isEditable(this.card) ? t.loadCard(!0, null, function() {
                t.view.editMode()
            }) : this.callParent(arguments)
        },
        onAbortCardClick: function() {
            this.cloneCard ? _CMCardModuleState.setCard(_CMCardModuleState.getPreviousCard()) : this.callParent(arguments), _CMUIState.onlyGridIfFullScreen()
        },
        onSaveSuccess: function() {
            this.cloneCard = !1, this.callParent(arguments), _CMUIState.onlyGridIfFullScreen()
        },
        onPrintCardMenuClick: function(t) {
            if (Ext.isString(t) && !Ext.isEmpty(t)) {
                var e = {};
                e[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.entryType.get(CMDBuild.core.constants.Proxy.NAME), e[CMDBuild.core.constants.Proxy.CARD_ID] = this.card.get("Id"), e[CMDBuild.core.constants.Proxy.FORMAT] = t, this.controllerPrintWindow = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.print.Window", {
                    parentDelegate: this
                }), this.controllerPrintWindow.cmfg("panelGridAndFormPrintWindowShow", {
                    format: t,
                    mode: "cardDetails",
                    params: e
                })
            }
        }
    }), Ext.define("CMDBuild.controller.management.common.CMCardWindowController", {
        extend: "CMDBuild.controller.management.classes.CMBaseCardPanelController",
        uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.Message", "CMDBuild.proxy.Card", "CMDBuild.controller.management.classes.StaticsController"],
        mixins: {
            observable: "Ext.util.Observable"
        },
        constructor: function(t, e) {
            if (this.configuration = e, !Ext.isEmpty(this.configuration.entryType)) {
                var i = this;
                this.callParent(arguments), this.mixins.observable.constructor.call(this, arguments), this.onEntryTypeSelected(_CMCache.getEntryTypeById(this.configuration.entryType)), this.cmEditMode = this.configuration.cmEditMode, this.mon(this.view, "show", function() {
                    this.loadFields(this.configuration.entryType, function() {
                        if (i.configuration.card) {
                            var t = {};
                            t[CMDBuild.core.constants.Proxy.CARD_ID] = i.configuration.card, t[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(i.configuration.entryType), i.loadCard(!0, t, function(t) {
                                i.onCardLoaded(i, t)
                            })
                        } else i.editModeIfPossible()
                    })
                }, this), this.mon(this.view, "destroy", function() {
                    this.unlockCard()
                }, this)
            }
        },
        getForm: function() {
            return this.view.cardPanel.getForm()
        },
        onSaveCardClick: function() {
            var t = this.getForm(),
                e = this.buildSaveParams();
            this.beforeRequest(t), t.isValid() ? this.doFormSubmit(e) : CMDBuild.core.Message.error(null, Ext.String.format('<p class="{0}">{1}</p>', CMDBuild.core.constants.Global.getErrorMsgCss(), CMDBuild.Translation.errors.invalid_attributes) + CMDBuild.controller.management.classes.StaticsController.getInvalidAttributeAsHTML(t), !1)
        },
        doFormSubmit: function(t) {
            CMDBuild.proxy.Card.update({
                params: Ext.Object.merge(t, this.view.getForm().getValues()),
                loadMask: this.view,
                scope: this,
                success: function(t, e, i) {
                    var n = {};
                    n.result = i, n.params = e.params, this.onSaveSuccess(this.view.getForm(), n)
                }
            })
        },
        onAbortCardClick: function() {
            this.view.destroy()
        },
        onEntryTypeSelected: function(t) {
            this.callParent(arguments), this.view.setTitle(this.entryType.get(CMDBuild.core.constants.Proxy.TEXT))
        },
        buildSaveParams: function() {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.entryType.getName(), t[CMDBuild.core.constants.Proxy.CARD_ID] = this.card ? this.card.get("Id") : -1, t
        },
        onSaveSuccess: function(t, e) {
            CMDBuild.core.LoadMask.hide(), _CMCache.onClassContentChanged(this.entryType.get(CMDBuild.core.constants.Proxy.ID)), this.view.destroy()
        },
        onCardLoaded: function(t, e) {
            t.card = e, t.view.loadCard(e), t.widgetControllerManager && t.widgetControllerManager.buildControllers(e), t.editModeIfPossible()
        },
        beforeRequest: Ext.emptyFn,
        editModeIfPossible: function() {
            var t = this;
            t.card ? t.cmEditMode ? t.lockCard(function() {
                t.view.editMode()
            }) : t.view.displayMode() : t.onAddCardButtonClick(this.configuration.entryType)
        }
    }),
    function() {
        function t(t, e) {
            return !(!e || !t.fkAttribute) && e.name == t.fkAttribute.name
        }

        function e(t, e) {
            return !!t.detail && e.idDomain == t.detail.get("id")
        }
        Ext.define("CMDBuild.controller.management.common.CMDetailWindowController", {
            extend: "CMDBuild.controller.management.common.CMCardWindowController",
            constructor: function() {
                this.callParent(arguments)
            },
            getRelationsAttribute: function() {
                for (var t = this.getForm().getFields(), e = [], i = 0, n = null; i < t.items.length; ++i)(n = t.items[i]).CMAttribute && n.CMAttribute.cmRelationAttribute && (n.enable(), e.push(n));
                return e
            },
            buildSaveParams: function() {
                var t = this.callParent(arguments);
                if (this.referenceToMaster) {
                    var e = this.referenceToMaster;
                    t[e.name] = e.value
                }
                return t
            },
            buildParamsToSaveRelation: function(t) {
                var e = this.view.detail,
                    i = function(t, e) {
                        var i = {};
                        "_1" == _CMCache.getDirectedDomainForEntryType(t, e).src ? (i.slaveSide = "_2", i.masterSide = "_1") : (i.slaveSide = "_1", i.masterSide = "_2");
                        return i
                    }(this.entryType, e.getName()),
                    n = {
                        domainName: e.getName(),
                        attributes: Ext.encode(this.fillRelationAttributesParams(t, {})),
                        master: i.masterSide
                    };
                return this.relation && (n.relationId = this.relation.rel_id), n
            },
            fillRelationAttributesParams: function(t, e) {
                for (var i = this.getRelationsAttribute(), n = 0, a = null; n < i.length; ++n) e[(a = i[n]).CMAttribute.attributeName] = a.getValue();
                var o = this.view.detail,
                    r = this.view.masterData,
                    s = function(t, e) {
                        var i = e.get("cardinality"),
                            n = t.get("IdClass");
                        if ("1:1" == i) throw "Wrong cardinality for a MasterDetail domain";
                        return Ext.Array.contains(_CMUtils.getAncestorsId(n), e.get("idClass1")) ? "1:N" == i ? "_1" : "_2" : "N:1" == i ? "_2" : "_1"
                    }(r, o),
                    l = "_1" == s ? "_2" : "_1";
                return e[s] = [{
                    cardId: r.get("Id"),
                    className: _CMCache.getEntryTypeNameById(r.get("IdClass"))
                }], e[l] = [{
                    cardId: t.cardId,
                    className: t.className
                }], e
            },
            beforeRequest: function(t) {
                if (!this.referenceToMaster)
                    for (var e = t.getFields(), i = 0, n = null; i < e.items.length; ++i)(n = e.items[i]).setDisabled(n.CMAttribute && n.CMAttribute.cmRelationAttribute)
            },
            onSaveSuccess: function(t, e) {
                this.relation && !this.referenceToMaster && this.updateRelation(t, e), this.callParent(arguments)
            },
            updateRelation: function(t, e) {
                var i = this.buildParamsToSaveRelation(e.params);
                CMDBuild.proxy.Relation.update({
                    params: i,
                    loadMask: !1
                })
            },
            loadFields: function(i, n) {
                var a = this;
                _CMCache.getAttributeList(i, function(i) {
                    i = function(i, n) {
                        for (var a = [], o = 0; o < n.length; o++) {
                            var r = n[o];
                            r && (t(i.view, r) || e(i.view, r) ? i.view.masterData && (i.referenceToMaster = {
                                name: r.name,
                                value: i.view.masterData.get("Id")
                            }) : a.push(r))
                        }
                        return a
                    }(a, i), i = function(t, e, i) {
                        var n = Ext.isEmpty(e) || Ext.isEmpty(e.detail) ? [] : e.detail.getAttributes() || [],
                            a = [];
                        if (n.length > 0) {
                            e.hasRelationAttributes = !0;
                            for (var o = !1, r = 0, s = i.length; r < s; ++r) {
                                var l = i[r];
                                if (l.group && "" != l.group) {
                                    o = !0;
                                    break
                                }
                            }
                            if (o) a = [].concat(i);
                            else
                                for (var r = 0, l = null; r < i.length; ++r) {
                                    l = i[r];
                                    var d = Ext.apply({}, l);
                                    d.group = CMDBuild.Translation.management.modcard.detail_window.detail_attributes, a.push(d)
                                }
                            for (var r = 0, l = null; r < n.length; ++r) {
                                l = n[r];
                                var d = Ext.apply({}, l);
                                d.group = CMDBuild.Translation.management.modcard.detail_window.relation_attributes, d.attributeName = d.name, t.referenceToMaster && (d.name = "_" + t.referenceToMaster.name + "_" + d.name), d.cmRelationAttribute = !0, a.push(d)
                            }
                        } else a = [].concat(i);
                        return a
                    }(a, a.view, i), a.view.fillForm(i, editMode = !1), n && n()
                })
            },
            onCardLoaded: function(t, e) {
                this.callParent(arguments), t.view.hasRelationAttributes && function(t) {
                    var e = {};
                    e[CMDBuild.core.constants.Proxy.CARD_ID] = t.card.get("Id"), e[CMDBuild.core.constants.Proxy.CLASS_NAME] = t.entryType.getName(), e[CMDBuild.core.constants.Proxy.DOMAIN_ID] = t.view.detail.get("id"), e[CMDBuild.core.constants.Proxy.SRC] = t.view.detail.getDetailSide(), CMDBuild.proxy.Relation.readAll({
                        params: e,
                        loadMask: !1,
                        scope: this,
                        success: function(e, i, n) {
                            var a = n.domains;
                            try {
                                a.length > 1 && _debug("TODO ecco perchè sbaglia il modify, il get relation torna due domini, che in realtà è lo stesso nei due versi", a), t.relation = a[0].relations[0];
                                for (var o = t.getRelationsAttribute(), r = t.relation.rel_attr, s = 0, l = null; s < o.length; ++s)
                                    if ((l = o[s]).CMAttribute) {
                                        var d = r[l.CMAttribute.name] || r[l.CMAttribute.attributeName];
                                        l.setValue(d)
                                    }
                            } catch (e) {
                                t.relation = void 0, _debug("No relations", e)
                            }
                        }
                    })
                }(t)
            }
        })
    }(), Ext.define("CMDBuild.controller.management.common.CMAddDetailWindowController", {
        extend: "CMDBuild.controller.management.common.CMDetailWindowController",
        buildSaveParams: function() {
            var t = this.callParent(arguments);
            if (this.referenceToMaster) {
                var e = this.referenceToMaster;
                t[e.name] = e.value, this.saveRelationAction = Ext.emptyFn
            } else this.saveRelationAction = this.addRelation;
            return t
        },
        onSaveSuccess: function(t, e) {
            this.saveRelationAction && this.saveRelationAction(t, e), this.view.destroy(), CMDBuild.core.LoadMask.hide()
        },
        addRelation: function(t, e) {
            var i = {
                    cardId: e.result.id,
                    className: e.params.className
                },
                n = this.buildParamsToSaveRelation(i);
            CMDBuild.proxy.Relation.create({
                params: n,
                loadMask: !1
            })
        }
    });
! function() {
    var t = "SINGLE";

    function e(t, e) {
        var i = void 0;
        return t && "function" == typeof t.getId && (i = t.getId()), t && void 0 === i && "string" == typeof e && (i = t.get(e)), i
    }

    function i(t, i, n) {
        var a = i.length,
            o = 0,
            r = e(n, t.idProperty);
        t.store && t.store.each(function(s) {
            for (var l = 0; l < a; l++) void 0 === n ? i[l].onRowDeselect(o, suppressEvent = !0) : r && r != e(s, t.idProperty) && i[l].onRowDeselect(o, suppressEvent = !0);
            o++
        })
    }
    Ext.define("CMDBuild.selection.CMMultiPageSelectionModel", {
        extend: "Ext.selection.CheckboxModel",
        alias: "selection.cmmultipage",
        idProperty: void 0,
        avoidCheckerHeader: !1,
        bindStore: function(t, e) {
            this.store = t, this.cmReverse = !1, this.reset(), this.cmCurrentPage = void 0, this.callParent(arguments), this.store && (this.mon(this.store, "beforeload", function() {
                this._onBeforeStoreLoad.apply(this, arguments)
            }, this), this.mon(this.store, "load", function() {
                this._onStoreDidLoad.apply(this, arguments)
            }, this)), this.mon(this, "select", function() {
                this._addSelection.apply(this, arguments)
            }, this), this.mon(this, "deselect", function() {
                this._removeSelection.apply(this, arguments)
            }, this)
        },
        _addSelection: function(n, a) {
            var o = e(a, this.idProperty);
            this.mode == t && (this.reset(), i(this, this.views, a)), this.cmReverse ? o && this.cmSelections.hasOwnProperty(o) && delete this.cmSelections[o] : o && !this.cmSelections.hasOwnProperty(o) && (this.cmSelections[o] = a.copy())
        },
        _removeSelection: function(t, i) {
            var n = e(i, this.idProperty);
            this.cmReverse ? n && !this.cmSelections.hasOwnProperty(n) && (this.cmSelections[n] = i.copy()) : this.cmFreezedSelections || void 0 === n || delete this.cmSelections[n]
        },
        reset: function() {
            try {
                this.clearSelections(), this.cmSelections = {}, this.cmFreezedSelections = void 0
            } catch (t) {}
        },
        deselectAll: function() {
            this.reset()
        },
        _onBeforeStoreLoad: function() {
            this.cmFreezedSelections = Ext.clone(this.cmSelections)
        },
        hasSelection: function() {
            return this.getSelection().length > 0
        },
        getCount: function() {
            return this.getSelection().length
        },
        getSelection: function() {
            var t = [];
            for (var e in this.cmSelections) t.push(this.cmSelections[e]);
            return t
        },
        getHeaderConfig: function() {
            var e = this.callParent(arguments);
            return (this.mode == t || this.avoidCheckerHeader) && (e.isCheckerHd = !1, e.cls = Ext.baseCSSPrefix + NaN), e
        },
        onHeaderClick: function(e, i, n) {
            this.mode != t && i.isCheckerHd && (n.stopEvent(), this.cmReverse = !i.el.hasCls(Ext.baseCSSPrefix + "grid-hd-checker-on"), this.toggleUiHeader(this.cmReverse), this.reset(), this._redoSelection())
        },
        _onStoreDidLoad: function(t, e) {
            this.cmCurrentPage = t.currentPage, this.cmFreezedSelections && (this.cmSelections = Ext.clone(this.cmFreezedSelections), this.cmFreezedSelections = void 0), this._redoSelection()
        },
        _redoSelection: function() {
            var t, n, a, o, r = this,
                s = r.views;
            i(r, s), this.cmReverse ? (t = r, a = 0, o = (n = s).length, t.store.each(function(i) {
                if (!t.cmSelections[e(i, t.idProperty)]) {
                    t.selected.add(i);
                    for (var r = 0; r < o; r++) n[r].onRowSelect(a, suppressEvent = !0)
                }
                a++
            })) : function(t, i) {
                if (!t.store) return;
                var n, a = i.length;
                for (var o in t.cmSelections)
                    if (-1 != (n = t.store.findBy(function(i) {
                            if (o == e(i, t.idProperty)) return t.selected.add(i), !0
                        })))
                        for (var r = 0; r < a; r++) i[r].onRowSelect(n, suppressEvent = !0)
            }(r, s)
        },
        onSelectChange: function() {
            Ext.selection.RowModel.prototype.onSelectChange.apply(this, arguments)
        }
    })
}(), Ext.define("CMDBuild.state.CMWorkflowStateDelegate", {
        uses: ["CMDBuild.proxy.Card"],
        onProcessClassRefChange: Ext.emptyFn,
        onProcessInstanceChange: Ext.emptyFn,
        onActivityInstanceChange: Ext.emptyFn
    }), Ext.define("CMDBuild.model.CMActivityInstance", {
        extend: "Ext.data.Model",
        uses: ["CMDBuild.proxy.Card"],
        constructor: function(t) {
            t ? this.data = t : (this.data = {}, this.nullObject = !0)
        },
        isNew: function() {
            return !this.nullObject && (null == this.data.id || void 0 === this.data.id)
        },
        getId: function() {
            return this.data.id
        },
        getVariables: function() {
            return this.data.variables || []
        },
        getPerformerName: function() {
            return this.data.performerName || ""
        },
        getDescription: function() {
            return this.data.description || ""
        },
        getInstructions: function() {
            return this.data.instructions || ""
        },
        getWidgets: function() {
            return this.data.widgets || []
        },
        isWritable: function() {
            return !this.nullObject && (this.data.writable || !1)
        },
        isNullObject: function() {
            return this.nullObject
        }
    }), Ext.define("CMDBuild.model.CMProcessInstance", {
        extend: "Ext.data.Model",
        uses: ["CMDBuild.proxy.Card"],
        fields: ["beginDate", "beginDateAsLong", "classDescription", "className", "endDate", "flowStatus", {
            name: "id",
            type: "integer",
            useNull: !0
        }, {
            name: "classId",
            type: "integer"
        }, {
            name: "values",
            type: "auto"
        }, {
            name: "activityInstanceInfoList",
            type: "auto",
            defaultValue: []
        }, {
            name: "user",
            type: "string"
        }],
        STATE: {
            OPEN: "OPEN",
            SUSPENDED: "SUSPENDED",
            COMPLETED: "COMPLETED",
            TERMINATED: "TERMINATED",
            ABORTED: "ABORTED",
            UNSUPPORTED: "UNSUPPORTED"
        },
        get: function(t) {
            var e;
            return "Id" == t ? e = this.getId() : "IdClass" == t ? e = this.getClassId() : "IdClass_value" == t ? e = this.getClassDescription() : (e = this.callParent(arguments)) || (e = (this.data.values || {})[t]), e
        },
        getActivityInfoList: function() {
            return this.get("activityInstanceInfoList") || []
        },
        getId: function() {
            return this.get("id") || null
        },
        isNew: function() {
            return null == this.getId()
        },
        getValues: function() {
            return this.get("values") || {}
        },
        getClassId: function() {
            return this.get("classId") || null
        },
        getClassDescription: function() {
            return this.get("classDescription")
        },
        applyValues: function(t) {
            t && (this.data.values = Ext.apply(this.getValues(), t))
        },
        getFlowStatus: function() {
            return this.get("flowStatus")
        },
        isStateOpen: function() {
            return this.getFlowStatus() == this.STATE.OPEN
        },
        isStateCompleted: function() {
            return this.getFlowStatus() == this.STATE.COMPLETED
        },
        isStateSuspended: function() {
            return this.getFlowStatus() == this.STATE.SUSPENDED
        },
        setNotes: function(t) {
            this.data.values.Notes = t
        },
        updateBeginDate: function(t) {
            t.beginDate && t.beginDateAsLong && (this.set("beginDate", t.beginDate), this.set("beginDateAsLong", t.beginDateAsLong))
        },
        asDummyModel: function() {
            var t = this.getValues();
            return t.Id = this.getId(), t.IdClass = this.getClassId(), t.IdClass_value = this.getClassDescription(), new CMDBuild.DummyModel(t)
        }
    }), Ext.define("CMDBuild.state.CMWorkflowState", {
        uses: ["CMDBuild.proxy.Card"],
        constructor: function() {
            var t = null,
                e = null,
                i = null,
                n = [];
            Ext.apply(this, {
                setProcessClassRef: function(e, i, n, a) {
                    n = !!Ext.isEmpty(n) || n, e && (t !== e || i) && (t = e, this.notifyToDelegates("onProcessClassRefChange", [e, i, a]), n && this.setProcessInstance(new CMDBuild.model.CMProcessInstance({
                        classId: t.getId()
                    })))
                },
                getProcessClassRef: function() {
                    return t
                },
                setProcessInstance: function(e, n) {
                    i = e;
                    var a = t && t.isSuperClass(),
                        o = this;

                    function r() {
                        o.setActivityInstance(new CMDBuild.model.CMActivityInstance), o.notifyToDelegates("onProcessInstanceChange", [i]), n && n()
                    }!i.isNew() && a ? CMDBuild.proxy.Card.read({
                        params: {
                            cardId: i.getId(),
                            className: _CMCache.getEntryTypeNameById(i.getClassId())
                        },
                        loadMask: !1,
                        success: function(t, e, n) {
                            i.applyValues(n.card), r()
                        }
                    }) : r()
                },
                setProcessInstanceSynchronous: function(t) {
                    i = t, this.setActivityInstance(new CMDBuild.model.CMActivityInstance), this.notifyToDelegates("onProcessInstanceChange", [i])
                },
                getProcessInstance: function() {
                    return i
                },
                setActivityInstance: function(t) {
                    e = t, this.notifyToDelegates("onActivityInstanceChange", [t])
                },
                getActivityInstance: function() {
                    return e
                },
                addDelegate: function(t) {
                    CMDBuild.validateInterface(t, "CMDBuild.state.CMWorkflowStateDelegate"), n.push(t)
                },
                countDelegates: function() {
                    return n.length
                },
                notifyToDelegates: function(t, e) {
                    for (var i = 0, a = n.length, o = null; i < a; ++i)(o = n[i]) && "function" == typeof o[t] && o[t].apply(o, e)
                }
            })
        }
    }), _CMWFState = new CMDBuild.state.CMWorkflowState, Ext.define("CMDBuild.state.UIStateDelegate", {
        onFullScreenChangeToGridOnly: Ext.emptyFn,
        onFullScreenChangeToFormOnly: Ext.emptyFn,
        onFullScreenChangeToOff: Ext.emptyFn
    }), Ext.define("CMDBuild.state.UIState", {
        FULLSCREEN_MODES: {
            grid: "grid",
            form: "form",
            off: "off"
        },
        constructor: function() {
            this.callParent(arguments), this.fullScreenMode = this.FULLSCREEN_MODES.off, this.delegates = []
        },
        onlyGrid: function() {
            this.fullScreenMode = this.FULLSCREEN_MODES.grid, this.callForDelegates("onFullScreenChangeToGridOnly")
        },
        onlyForm: function() {
            this.fullScreenMode = this.FULLSCREEN_MODES.form, this.callForDelegates("onFullScreenChangeToFormOnly")
        },
        fullScreenOff: function() {
            this.fullScreenMode = this.FULLSCREEN_MODES.off, this.callForDelegates("onFullScreenChangeToOff")
        },
        onlyFormIfFullScreen: function() {
            this.fullScreenMode != this.FULLSCREEN_MODES.off && this.onlyForm()
        },
        onlyGridIfFullScreen: function() {
            this.fullScreenMode != this.FULLSCREEN_MODES.off && this.onlyGrid()
        },
        isFullscreenOff: function() {
            return this.fullScreenMode == this.FULLSCREEN_MODES.off
        },
        isOnlyGrid: function() {
            return this.fullScreenMode == this.FULLSCREEN_MODES.grid
        },
        isOnlyForm: function() {
            return this.fullScreenMode == this.FULLSCREEN_MODES.form
        },
        addDelegate: function(t) {
            t && this.delegates.push(t)
        },
        callForDelegates: function(t, e) {
            for (var i = 0; i < this.delegates.length; ++i) {
                var n = this.delegates[i];
                n && "function" == typeof n[t] && n[t].apply(n, e || [])
            }
        }
    }), _CMUIState = new CMDBuild.state.UIState, Ext.define("CMDBuild.state.CMCardModuleStateDelegate", {
        uses: ["CMDBuild.proxy.Card"],
        onEntryTypeDidChange: function(t, e, i, n) {},
        onCardDidChange: function(t, e) {}
    }), Ext.define("CMDBuild.state.CMCardModuleState", {
        uses: ["CMDBuild.proxy.Card"],
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        previousCard: {},
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.state.CMCardModuleStateDelegate"), this.entryType = null, this.card = null
        },
        setEntryType: function(t, e, i, n) {
            n = !!Ext.isEmpty(n) || n, (t === this.entryType && this.filter || e || i || this.entryType !== t) && (this.entryType = t, this.filter = i || null, this.setCard(null, null, n), n && this.callDelegates("onEntryTypeDidChange", [this, t, e, i]))
        },
        setCard: function(t, e, i) {
            i = !!Ext.isEmpty(i) || i, null != t && void 0 === t.data ? (t = function(t) {
                if (t.Id && t.IdClass) {
                    _deprecated("adaptGetCardCallParams", this);
                    var e = {};
                    e[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(t.IdClass), e[CMDBuild.core.constants.Proxy.CARD_ID] = t.Id, t = e
                }
                return t
            }(t), CMDBuild.proxy.Card.read({
                params: t,
                loadMask: !1,
                scope: this,
                success: function(t, n, a) {
                    var o = a.card;
                    if (o) {
                        var r = new CMDBuild.DummyModel(a.card);
                        r.raw = o, this.setCard(r, e, i)
                    }
                }
            })) : (this.card = t, i && this.callDelegates("onCardDidChange", [this, t]), "function" == typeof e && e(t))
        },
        setPreviousCard: function(t) {
            return Ext.isObject(t) && !Ext.Object.isEmpty(t) ? this.previousCard = Ext.clone(t) : this.previousCard = {}
        },
        getPreviousCard: function() {
            return Ext.isObject(this.previousCard) && !Ext.Object.isEmpty(this.previousCard) ? this.previousCard : null
        }
    }), _CMCardModuleState = new CMDBuild.state.CMCardModuleState, Ext.define("CMDBuild.controller.management.common.widgets.CMCalendarControllerWidgetReader", {
        getStartDate: function(t) {
            return t.startDate
        },
        getEndDate: function(t) {
            return t.endDate
        },
        getTitle: function(t) {
            return t.eventTitle
        },
        getEventClass: function(t) {
            return t.eventClass
        },
        getFilterVarName: function(t) {
            return "filter"
        },
        getDefaultDate: function(t) {
            return t.defaultDate
        }
    }), Ext.define("CMDBuild.view.management.CMMiniCardGridModel", {
        extend: "Ext.data.Model",
        fields: [{
            name: "Id",
            type: "int"
        }, {
            name: "IdClass",
            type: "int"
        }, {
            name: "ClassName",
            type: "string"
        }, {
            name: "Code",
            type: "string"
        }, {
            name: "Description",
            type: "string"
        }, {
            name: "Details",
            type: "auto"
        }, {
            name: "Attributes",
            tyoe: "auto"
        }],
        getDetails: function() {
            return this.get("Details") || []
        },
        getAttributes: function() {
            return this.get("Attributes") || []
        }
    }), Ext.define("CMDBuild.data.CMMiniCardGridBaseDataSource", {
        uses: ["CMDBuild.proxy.index.Json"],
        constructor: function() {
            return this.store = CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.UNCACHED, {
                pageSize: CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ROW_LIMIT),
                model: "CMDBuild.view.management.CMMiniCardGridModel",
                autoLoad: !1,
                remoteSort: !0,
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.card.readAll,
                    reader: {
                        root: "rows",
                        type: "json",
                        totalProperty: "results",
                        idProperty: "Id"
                    },
                    extraParams: {
                        attributes: Ext.encode(["Id", "IdClass", "Code", "Description"])
                    }
                },
                sorters: [{
                    property: "Code",
                    direction: "ASC"
                }, {
                    property: "Description",
                    direction: "ASC"
                }]
            }), this.callParent(arguments)
        },
        getStore: function() {
            return this.store
        },
        getLastEntryTypeIdLoaded: function() {
            return this.store.proxy.extraParams ? this.store.proxy.extraParams.IdClass : null
        },
        loadStoreForEntryTypeId: function(t, e) {
            this.store.proxy.setExtraParam("className", _CMCache.getEntryTypeNameById(t)), this.store.load({
                callback: e
            })
        },
        loadPageForCard: function(t, e) {}
    }), Ext.define("CMDBuild.data.CMDetailedCardDataSource", {
        uses: ["CMDBuild.proxy.Card"],
        extend: "CMDBuild.data.CMMiniCardGridBaseDataSource",
        constructor: function() {
            this.callParent(arguments), this.store = new Ext.data.Store({
                pageSize: CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ROW_LIMIT),
                model: "CMDBuild.view.management.CMMiniCardGridModel",
                autoLoad: !1
            })
        },
        clearStore: function() {
            this.store.removeAll()
        },
        loadCard: function(t) {
            t = function(t) {
                if (t.Id && t.IdClass) {
                    _deprecated("adaptGetCardCallParams", this);
                    var e = {};
                    e[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(t.IdClass), e[CMDBuild.core.constants.Proxy.CARD_ID] = t.Id, t = e
                }
                return t
            }(t), CMDBuild.proxy.Card.read({
                params: t,
                loadMask: !1,
                scope: this,
                success: function(t, e, i) {
                    var n = i.card,
                        a = i.attributes,
                        o = new CMDBuild.view.management.CMMiniCardGridModel({
                            Id: n.Id,
                            IdClass: n.IdClass,
                            Code: n.Code,
                            Description: n.Description,
                            Details: n,
                            Attributes: a,
                            ClassName: n.IdClass_value
                        });
                    this.store.add(o)
                }
            })
        },
        getLastEntryTypeIdLoaded: function() {
            return null
        },
        loadStoreForEntryTypeId: function(t, e) {}
    }),
    function() {
        var t = "editMode",
            e = "displayMode";
        Ext.define("CMDBuild.Management.EditablePanel", {
            extend: "Ext.panel.Panel",
            attributes: void 0,
            layout: "card",
            activeItem: 0,
            hideMode: "offsets",
            autoScroll: !1,
            _state: e,
            _stateSwitchFail: !1,
            initComponent: function() {
                var i = null,
                    n = new CMDBuild.Management.EditablePanel.SubPanel({
                        editable: !1,
                        attributes: this.attributes
                    });
                this.items = [n], this.ensureEditPanel = function() {
                    null == i && (i = new CMDBuild.Management.EditablePanel.SubPanel({
                        attributes: this.attributes
                    }), this.add(i))
                }, this.editMode = function() {
                    this.ensureEditPanel();
                    var e = this.getLayout();
                    if (this._state = t, e.setActiveItem) try {
                        e.setActiveItem(i.id)
                    } catch (t) {
                        this._stateSwitchFail = !0
                    }
                }, this.displayMode = function() {
                    var t = this.getLayout();
                    if (this._state = e, t.setActiveItem) try {
                        t.setActiveItem(n.id)
                    } catch (t) {
                        this._stateSwitchFail = !0
                    }
                }, this.isEmpty = function() {
                    return 0 == n.fields().length
                }, this.getFields = function() {
                    return this.ensureEditPanel(), i.fields()
                }, this.callParent(arguments), this.mon(this, "activate", function() {
                    this._stateSwitchFail && this[this._state]()
                }, this)
            }
        }), Ext.define("CMDBuild.Management.EditablePanel.SubPanel", {
            extend: "Ext.panel.Panel",
            frame: !1,
            border: !1,
            bodyCls: "x-panel-body-default-framed",
            autoScroll: !0,
            labelAlign: "right",
            labelWidth: 160,
            attributes: void 0,
            editable: !0,
            hideMode: "offsets",
            fields: function() {
                return this.items && this.items.items ? this.items.items : []
            },
            initComponent: function() {
                this.callParent(arguments), this.attributes && function(t, e) {
                    if (t)
                        for (var i = 0; i < t.length; ++i) {
                            var n, a = t[i];
                            (n = e ? CMDBuild.Management.FieldManager.getFieldForAttr(a, this.readOnlyForm) : CMDBuild.Management.FieldManager.getFieldForAttr(a, !0)) && (n._belongToEditableSubpanel = this.editable, this.add(n))
                        }
                }.call(this, this.attributes, this.editable)
            }
        }), CMDBuild.Management.EditablePanel.build = function(t) {
            var e = new CMDBuild.Management.EditablePanel(t);
            return e.isEmpty() ? (delete e, null) : e
        }
    }(),
    function() {
        function t(t) {
            try {
                this.pressedTab && this.pressedTab.removeCls(this.pressedTabCls), t.addClass(this.pressedTabCls), this.pressedTab = t
            } catch (t) {}
        }

        function e() {
            return Ext.isIE7
        }

        function i(e) {
            t.call(this, e), this.fireEvent("click", e)
        }
        Ext.define("CMDBuild.view.common.CMSideTabPanel", {
            extend: "Ext.panel.Panel",
            frame: !1,
            border: !1,
            pressedTabCls: "cmdb-pressed-tab",
            tabCls: "cmdb-tab",
            bodyCls: "x-panel-body-default-framed",
            layout: {
                type: "vbox",
                align: "stretchmax"
            },
            defaults: {
                margins: "2 4 0 0"
            },
            initComponent: function() {
                e() ? this.maxTabWidth = 0 : this.autoWidth = !0, this.callParent(arguments)
            },
            addTabFor: function(n, a) {
                var o, r, s, l = this.tabCls,
                    d = (this.pressedTabCls, new Ext.container.Container({
                        text: n.title,
                        cls: l,
                        height: 25,
                        html: (o = n, r = a, r ? (s = '<div class="cmdb-tab-icon {1}"></div><p>{0}</p>', Ext.String.format(s, o.tabLabel, r)) : (s = "<p>{0}</p>", Ext.String.format(s, o.tabLabel))),
                        targetPanel: n,
                        listeners: {
                            render: function(t) {
                                t.getEl().on("click", Ext.Function.bind(t.fireEvent, t, ["click", t]))
                            }
                        }
                    }));
                d.on("click", i, this), e() && d.on("afterlayout", function(t) {
                    var e = t.getWidth();
                    this.maxTabWidth < e && this.setWidth(e + 22)
                }, this, {
                    single: !0
                }), n.on("activate", function() {
                    t.call(this, d), e() && n.doLayout()
                }, this), this.add(d)
            },
            activateFirst: function() {
                var t = this.items.first();
                t && i.call(this, t)
            },
            setActiveTab: function(t) {
                !Ext.isEmpty(this.items.getRange()) && Ext.isArray(this.items.getRange()) && Ext.Array.each(this.items.getRange(), function(e, n, a) {
                    if (t.detailId == e.targetPanel.detailId) return i.call(this, e), !1
                }, this)
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.CMTabPanel", {
        extend: "Ext.tab.Panel",
        plain: !0,
        initComponent: function() {
            this.tabPosition = CMDBuild.configuration.instance.get("cardTabsPosition") || "top", this.callParent(arguments), 1 == this.items.getCount() && this.getTabBar().hide()
        },
        activateFirst: function() {
            this.setActiveTab(0)
        },
        showAll: function() {
            for (var t = this.getActiveTab(), e = 0; e < this.items.length; e++) this.setActiveTab(e);
            this.items.length > 0 && t && this.setActiveTab(t)
        },
        editMode: function() {
            this.items.each(function(t) {
                "function" == typeof t.editMode && t.editMode()
            })
        },
        displayMode: function() {
            this.items.each(function(t) {
                "function" == typeof t.displayMode && t.displayMode()
            })
        },
        ensureEditPanel: function() {
            this.items.each(function(t) {
                "function" == typeof t.ensureEditPanel && t.ensureEditPanel()
            })
        }
    }), Ext.define("CMDBuild.view.management.common.CMMiniCardGrid", {
        extend: "Ext.grid.Panel",
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.CMMiniCardGridDelegate"), this.callParent(arguments)
        },
        withPagingBar: !0,
        denySelection: !0,
        initComponent: function() {
            var t, e = this;
            (t = e).dataSource || (t.dataSource = new CMDBuild.data.CMMiniCardGridBaseDataSource), t.store = t.dataSource.getStore(),
                function(t) {
                    if (t.withPagingBar) {
                        var e = new CMDBuild.field.GridSearchField({
                                grid: t
                            }),
                            i = new Ext.menu.Menu({
                                items: [e]
                            });
                        t.bbar = new Ext.toolbar.Paging({
                            store: t.store,
                            items: [{
                                iconCls: "search",
                                menu: i
                            }]
                        })
                    }
                }(e), this.columns = this.columns || [], this.columns = this.columns.concat([{
                    text: CMDBuild.Translation.management.modcard.relation_columns.code,
                    dataIndex: "Code",
                    flex: 1,
                    sortable: !0
                }, {
                    text: CMDBuild.Translation.management.modcard.relation_columns.description,
                    dataIndex: "Description",
                    flex: 2,
                    sortable: !0
                }, {
                    width: 40,
                    menuDisabled: !0,
                    xtype: "actioncolumn",
                    tooltip: CMDBuild.Translation.management.modcard.open_relation,
                    align: "center",
                    icon: "images/icons/bullet_go.png",
                    handler: function(t, e, i, n, a, o, r) {},
                    isDisabled: function(t, e, i, n, a) {
                        return !1
                    }
                }]), this.mon(this, "activate", function() {
                    this.callDelegates("miniCardGridDidActivate", this)
                }, this), this.mon(this, "beforeselect", function(t, i) {
                    return !this.denySelection && (this.callDelegates("miniCardGridItemSelected", [e, i]), !0)
                }, this), this.mon(this, "itemdblclick", function(t, i) {
                    var n, a;
                    a = i, (n = e).selectRecordSilently(a), n.callDelegates("miniCardGridWantOpenCard", [n, {
                        Id: a.get("Id"),
                        IdClass: a.get("IdClass")
                    }])
                }, this), this.callParent(arguments)
        },
        selectRecordSilently: function(t) {
            if (t) try {
                var e = this.getSelectionModel();
                e && (e.suspendEvents(), e.select(t), e.resumeEvents())
            } catch (t) {
                _debug("ERROR selecting the CMMiniCardGrid", t)
            }
        },
        selectCardSilently: function(t) {
            if (function(t) {
                    try {
                        var e = t.getSelectionModel();
                        e && e.deselectAll(!0)
                    } catch (t) {
                        _debug("ERROR deselecting the mini card grid", t)
                    }
                }(this), t) {
                var e = this.store.findRecord("Id", t.get("Id"));
                e && this.selectRecordSilently(e)
            }
        },
        getDataSource: function() {
            return this.dataSource
        }
    }),
    function() {
        Ext.define("CMDBuild.view.management.common.CMMiniCardGridWindowDelegate", {
            miniCardGridWindowDidShown: function() {}
        });
        Ext.define("CMDBuild.view.management.common.CMMiniCardGridWindow", {
            extend: "Ext.window.Window",
            mixins: {
                delegable: "CMDBuild.core.CMDelegable"
            },
            constructor: function() {
                this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.CMMiniCardGridWindowDelegate"), this.callParent(arguments)
            },
            withDetailExpander: !0,
            initComponent: function() {
                if (!this.dataSource) throw "A data source is needed";
                this.ghost = !1, this.layout = "border", this.miniCardGrid = Ext.create("CMDBuild.view.management.common.CMMiniCardGrid", {
                    frame: !1,
                    border: !1,
                    withPagingBar: !1,
                    denySelection: !1,
                    dataSource: this.dataSource,
                    region: "center",
                    columns: [{
                        text: CMDBuild.Translation.className,
                        dataIndex: "ClassName",
                        flex: 1,
                        sortable: !0
                    }]
                }), this.withDetailExpander ? (this.detailsPanel = new Ext.panel.Panel({
                    height: "50%",
                    split: !0,
                    region: "south",
                    border: !1,
                    frame: !1,
                    autoScroll: !0,
                    collapsed: !0,
                    collapseMode: "mini"
                }), this.items = [this.miniCardGrid, this.detailsPanel]) : this.items = [this.miniCardGrid], this.mon(this, "show", function() {
                    this.callDelegates("miniCardGridWindowDidShown", this)
                }, this), this.callParent(arguments)
            },
            getMiniCardGrid: function() {
                return this.miniCardGrid
            },
            clearDetailsPanel: function() {
                this.detailsPanel && CMDBuild.clearComponent(this.detailsPanel)
            },
            showDetailsForCard: function(t) {
                if (this.clearDetailsPanel(), t) {
                    var e = this;
                    _CMCache.getAttributeList(t.get("IdClass"), function(i) {
                        if (e.detailsPanel) {
                            e.detailsPanel.expand();
                            for (var n = t.getDetails(), a = '<ul class="cm_detailed_mini_card_grid_window_detail">', o = 0, r = null, s = null; o < i.length; ++o)(s = n[(r = i[o]).name]) && ("object" == typeof s && (s = s.description), a += Ext.String.format('<li><span class="cm-bold">{0}:</span> {1}</li>', r.name, s));
                            a += "</ul>", e.detailsPanel.add({
                                html: a,
                                frame: !1,
                                border: !1
                            })
                        }
                    })
                }
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.CMCardWindow", {
        extend: "CMDBuild.core.window.AbstractModal",
        cmEditMode: !1,
        withButtons: !1,
        border: !1,
        buttonAlign: "center",
        frame: !1,
        initComponent: function() {
            this.cardPanel = Ext.create("CMDBuild.view.management.classes.CMCardPanel", {
                withButtons: this.withButtons,
                withToolBar: this.withToolBar,
                allowNoteFiled: !0,
                border: !1,
                frame: !1
            });
            var t = this.cardPanel.CMEVENTS;
            if (this.CMEVENTS = {
                    saveCardButtonClick: t.saveCardButtonClick,
                    abortButtonClick: t.abortButtonClick,
                    formFilled: t.formFilled,
                    widgetButtonClick: t.widgetButtonClick,
                    editModeDidAcitvate: t.editModeDidAcitvate,
                    displayModeDidActivate: t.displayModeDidActivate
                }, this.relayEvents(this.cardPanel, [t.saveCardButtonClick, t.abortButtonClick, t.formFilled, t.widgetButtonClick, t.editModeDidAcitvate, t.displayModeDidActivate]), this.addEvents(t.saveCardButtonClick), this.addEvents(t.abortButtonClick), this.addEvents(t.formFilled), this.addEvents(t.widgetButtonClick), this.addEvents(t.editModeDidAcitvate), this.addEvents(t.displayModeDidActivate), this.classId) {
                var e = _CMUtils.getClassPrivileges(this.classId);
                this.cardPanel.writePrivilege = e.write
            }
            this.withButtons || (this.closeButton = new Ext.button.Button({
                text: CMDBuild.Translation.close,
                handler: this.close,
                scope: this
            }), this.buttons = [this.closeButton]), this.items = [this.cardPanel], this.callParent(arguments), _CMUtils.forwardMethods(this, this.cardPanel, ["displayMode", "editMode", "ensureEditPanel", "fillForm", "loadCard", "reset", "getForm", "getFormForTemplateResolver", "getWidgetButtonsPanel", "isInEditing"])
        }
    }), Ext.define("CMDBuild.view.management.common.CMCardListWindow", {
        extend: "CMDBuild.core.window.AbstractModal",
        ClassName: void 0,
        idClass: void 0,
        filterType: void 0,
        readOnly: void 0,
        selModel: void 0,
        selType: "rowmodel",
        multiSelect: !1,
        extraParams: {},
        gridConfig: {},
        initComponent: function() {
            if (void 0 === this.idClass && void 0 === this.ClassName) throw "There are no Class Id or Class Name to load";
            var t, e, i;
            this.title = CMDBuild.Translation.management.modcard.title + (t = this, e = _CMCache.getEntryTypeById(t.getIdClass()), i = "", e && (i = e.getDescription()), i), this.grid = new CMDBuild.view.management.common.CMCardGrid(this.buildGrdiConfiguration()), this.setItems(), this.callParent(arguments), this.mon(this.grid.getSelectionModel(), "selectionchange", this.onSelectionChange, this), this.mon(this.grid, "itemdblclick", this.onGridDoubleClick, this)
        },
        show: function() {
            this.callParent(arguments);
            var t = this.getIdClass();
            return this.grid.updateStoreForClassId(t), this
        },
        setItems: function() {
            this.items = [this.grid], this.readOnly || "class" != _CMCache.getEntryTypeById(this.getIdClass()).get("type") || (this.tbar = [this.addCardButton = this.buildAddButton()])
        },
        buildAddButton: function() {
            var t = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card"),
                e = _CMCache.getEntryTypeById(this.getIdClass());
            return t.updateForEntry(e), this.mon(t, "cmClick", function(t) {
                var e = new CMDBuild.view.management.common.CMCardWindow({
                    withButtons: !0,
                    title: t.className
                });
                new CMDBuild.controller.management.common.CMCardWindowController(e, {
                    cmEditMode: !0,
                    card: null,
                    entryType: t.classId
                }), e.show(), this.mon(e, "destroy", function() {
                    this.grid.reload()
                }, this)
            }, this), t
        },
        getIdClass: function() {
            if (this.idClass) return this.idClass;
            var t = _CMCache.getEntryTypeByName(this.ClassName);
            if (t) return t.getId();
            throw "No class info for " + Ext.getClassName(this)
        },
        buildGrdiConfiguration: function() {
            var t = Ext.apply(this.gridConfig, {
                cmAdvancedFilter: !1,
                columns: [],
                CQL: this.extraParams,
                frame: !1,
                border: !1,
                selType: this.selType,
                multiSelect: this.multiSelect
            });
            return void 0 === this.selModel ? t.selType = this.selType : t.selModel = this.selModel, t
        },
        onSelectionChange: Ext.emptyFn,
        onGridDoubleClick: Ext.emptyFn
    }), Ext.define("CMDBuild.Management.ReferenceSearchWindow", {
        extend: "CMDBuild.view.management.common.CMCardListWindow",
        initComponent: function() {
            this.selection = null, this.saveButton = new Ext.Button({
                text: CMDBuild.Translation.save,
                name: "saveButton",
                disabled: !0,
                handler: this.onSave,
                scope: this
            }), this.buttonAlign = "center", this.buttons = [this.saveButton], this.callParent(arguments), this.on("show", function() {
                if (this.grid.gridSearchField) {
                    var t = this;
                    Ext.Function.createDelayed(function() {
                        t.grid.gridSearchField.focus(), t.grid.gridSearchField.setValue(t.searchFieldValue)
                    }, 100)()
                }
            }, this, {
                single: !0
            })
        },
        buildGrdiConfiguration: function() {
            var t = this.callParent(arguments),
                e = this.extraParams;
            return Ext.apply(t, {
                getStoreExtraParams: function() {
                    return e
                }
            })
        },
        onSelectionChange: function(t, e) {
            e.length > 0 ? (this.saveButton.enable(), this.selection = e[0]) : (this.saveButton.disable(), this.selection = null)
        },
        onGridDoubleClick: function() {
            this.onSave()
        },
        onSave: function() {
            null != this.selection && this.fireEvent("cmdbuild-referencewindow-selected", this.selection), this.destroy()
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetManagerDelegate", {
        getFormForTemplateResolver: Ext.emptyFn,
        getWidgetButtonsPanel: Ext.emptyFn
    }), Ext.define("CMDBuild.view.management.common.widgets.CMTabbedWidgetDelegate", {
        getNotesPanel: Ext.emptyFn,
        getAttachmentsPanel: Ext.emptyFn,
        showWidget: Ext.emptyFn,
        activateFirstTab: Ext.emptyFn
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetManager", {
        delegate: void 0,
        builders: {},
        constructor: function(t, e) {
            var i = this;
            this.mainView = t, this.tabbedWidgetDelegate = e || null, Ext.apply(this, {
                builders: {
                    ".ManageEmail": function(t, e) {
                        return Ext.isEmpty(i.tabbedWidgetDelegate) || Ext.isEmpty(i.tabbedWidgetDelegate.getEmailPanel()) ? null : i.tabbedWidgetDelegate.getEmailPanel()
                    },
                    ".OpenAttachment": function(t, e) {
                        return Ext.isEmpty(i.tabbedWidgetDelegate) || Ext.isEmpty(i.tabbedWidgetDelegate.getAttachmentsPanel()) ? null : i.tabbedWidgetDelegate.getAttachmentsPanel()
                    },
                    ".OpenNote": function(t, e) {
                        return Ext.isEmpty(i.tabbedWidgetDelegate) || Ext.isEmpty(i.tabbedWidgetDelegate.getNotesPanel()) ? null : i.tabbedWidgetDelegate.getNotesPanel()
                    },
                    ".Calendar": function(t, e) {
                        var n = new CMDBuild.view.management.common.widgets.CMCalendar;
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".CreateModifyCard": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.createModifyCard.CMCreateModifyCard");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".CustomForm": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.customForm.CustomFormView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".Grid": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.common.widgets.grid.GridView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".LinkCards": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.linkCards.LinkCards", {
                            widgetConf: t
                        });
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".ManageRelation": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.manageRelation.CMManageRelation", {
                            widget: t
                        });
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".NavigationTree": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.navigationTree.NavigationTreeView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".OpenReport": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.openReport.OpenReportView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".Ping": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.widget.PingView");
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".PresetFromCard": function(t, e) {
                        var n = new CMDBuild.view.management.common.widgets.CMPresetFromCard;
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".WebService": function(t, e) {
                        var n = new CMDBuild.view.management.common.widgets.CMWebService;
                        return i.widgetsContainer.addWidgt(n), n
                    },
                    ".Workflow": function(t, e) {
                        var n = Ext.create("CMDBuild.view.management.common.widgets.workflow.CMWorkflow");
                        return i.widgetsContainer.addWidgt(n), n
                    }
                }
            })
        },
        buildWidget: function(t, e) {
            return this.mainView.getWidgetButtonsPanel().addWidget(t), this._buildWidget(t, e)
        },
        showWidget: function(t, e) {
            null != this.tabbedWidgetDelegate && this.tabbedWidgetDelegate.showWidget(t, e) || this.widgetsContainer.showWidget(t, e)
        },
        hideWidgetsContainer: function() {
            this.widgetsContainer && this.widgetsContainer.hide()
        },
        buildWidgetsContainer: function() {
            return Ext.create("CMDBuild.view.management.common.widgets.CMWidgetsWindow", {
                delegate: this.delegate
            })
        },
        reset: function() {
            Ext.isEmpty(this.widgetsContainer) || this.widgetsContainer.destroy(), this.widgetsContainer = this.buildWidgetsContainer(), this.mainView.getWidgetButtonsPanel().removeAllButtons(), this.widgetsMap = {}
        },
        getFormForTemplateResolver: function() {
            return this.mainView.getFormForTemplateResolver()
        },
        activateFirstTab: function() {
            null != this.tabbedWidgetDelegate && this.tabbedWidgetDelegate.activateFirstTab()
        },
        _buildWidget: function(t, e) {
            return this.builders[t.type] ? this.builders[t.type](t, e) : null
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetManagerPopup", {
        extend: "CMDBuild.view.management.common.widgets.CMWidgetManager",
        buildWidgetsContainer: function() {
            return new CMDBuild.view.management.common.widgets.CMWidgetsWindowPopup
        }
    }),
    function() {
        var t = CMDBuild.Translation.management.modcard;

        function e(t, e, i, n) {
            var a = t.getForm().getFields();
            for (var o in "Ext.util.MixedCollection" == Ext.getClassName(a) && (a = a.items), a) a[o].isObservable && Ext.isFunction(a[o].suspendEvents) && a[o].suspendEvents(!1);
            if (function(t, e) {
                    for (var i in e || {}) {
                        var n = e[i];
                        for (var a in n) {
                            var o = "_" + i + "_" + a,
                                r = n[a];
                            t[o] = r
                        }
                    }
                }(e, i), a)
                for (var r = 0, s = a.length; r < s; ++r) {
                    var l = a[r];
                    if ("function" != typeof n || n(l)) try {
                        l.setValue(e[l.name]), "function" == typeof l.isFiltered && l.isFiltered() && l.setServerVarsForTemplate(e)
                    } catch (t) {
                        _msg("[Field name: " + l.name + "] " + t.message)
                    }
                }
            for (var o in a) a[o].isObservable && Ext.isFunction(a[o].resumeEvents) && a[o].resumeEvents();
            t.fireEvent(t.CMEVENTS.formFilled)
        }
        Ext.define("CMDBuild.view.management.classes.CMCardForm", {
            extend: "Ext.form.Panel",
            mixins: {
                cmFormFunctions: "CMDBUild.view.common.CMFormFunctions"
            },
            _lastCard: null,
            _isInEditMode: !1,
            constructor: function(t) {
                Ext.apply(this, t), this.CMEVENTS = {
                    saveCardButtonClick: "cm-save",
                    abortButtonClick: "cm-abort",
                    removeCardButtonClick: "cm-remove",
                    modifyCardButtonClick: "cm-modify",
                    cloneCardButtonClick: "cm-clone",
                    printCardButtonClick: "cm-print",
                    openGraphButtonClick: "cm-graph",
                    formFilled: "cmFormFilled",
                    editModeDidAcitvate: "cmeditmode",
                    displayModeDidActivate: "cmdisplaymode"
                }, this.addEvents([this.CMEVENTS.saveCardButtonClick, this.CMEVENTS.abortButtonClick, this.CMEVENTS.removeCardButtonClick, this.CMEVENTS.modifyCardButtonClick, this.CMEVENTS.cloneCardButtonClick, this.CMEVENTS.printCardButtonClick, this.CMEVENTS.openGraphButtonClick, this.CMEVENTS.editModeDidAcitvate, this.CMEVENTS.displayModeDidActivate]), this.buildTBar(), this.buildButtons(), this.callParent(arguments)
            },
            initComponent: function() {
                Ext.apply(this, {
                    frame: !1,
                    border: !1,
                    hideMode: "offsets",
                    bodyCls: "x-panel-body-default-framed cmdb-border-top",
                    bodyStyle: {
                        padding: "5px 5px 0 5px"
                    },
                    cls: "x-panel-body-default-framed",
                    autoScroll: !1,
                    tbar: this.cmTBar,
                    buttonAlign: "center",
                    buttons: this.cmButtons,
                    layout: {
                        type: "hbox",
                        align: "stretch"
                    }
                }), this.callParent(arguments)
            },
            editMode: function() {
                this._isInEditMode || (this.ensureEditPanel(), this.tabPanel && this.tabPanel.editMode(), this.disableCMTbar(), this.enableCMButtons(), this.tabPanel.showAll(), this.fireEvent(this.CMEVENTS.editModeDidAcitvate), this._isInEditMode = !0)
            },
            displayMode: function(t) {
                this.suspendLayouts(), this.tabPanel && this.tabPanel.displayMode(), t ? this.enableCMTbar() : this.disableCMTbar(), this.disableCMButtons(), this.resumeLayouts(!0), this.fireEvent(this.CMEVENTS.displayModeDidActivate), this._isInEditMode = !1
            },
            displayModeForNotEditableCard: function() {
                this.displayMode(enableCMBar = !1), this.printCardMenu && this.printCardMenu.enable(), this.graphButton && this.graphButton.enable()
            },
            reset: function() {
                this.suspendLayouts(), this._isInEditMode = !1, this.mixins.cmFormFunctions.reset.apply(this), this.resumeLayouts(!0)
            },
            loadCard: function(t, i) {
                if (this._lastCard = t, this.reset(), t) {
                    if ("object" != typeof t) throw "Card must be an object";
                    var n, a, o = t.raw || t.data;
                    i ? e(this, o) : this._isInEditMode ? e(this, o, a, function(t) {
                        return t._belongToEditableSubpanel
                    }) : e(this, o, n, function(t) {
                        return !t._belongToEditableSubpanel
                    }), this.initValues()
                }
            },
            canReconfigureTheForm: function() {
                var t = !0;
                try {
                    t = this.isVisible(!0)
                } catch (t) {}
                return t
            },
            ensureEditPanel: function() {
                this.tabPanel && !this._isInEditMode && (this.tabPanel.ensureEditPanel(), this._lastCard && (this.loadCard(this._lastCard, bothPanels = !0), this.callFieldTemplateResolverIfNeeded()))
            },
            fillForm: function(t, e) {
                this._lastCard = null;
                var i = [],
                    n = CMDBuild.Utils.groupAttributes(t, !1);
                this.suspendLayouts(), CMDBuild.clearComponent(this);
                var a = this.getForm().getFields();
                for (var o in a.clear(), n) {
                    var t = n[o],
                        r = CMDBuild.Management.EditablePanel.build({
                            attributes: t,
                            frame: !1,
                            border: !1,
                            title: o,
                            bodyCls: "x-panel-body-default-framed",
                            bodyStyle: {
                                padding: "5px"
                            }
                        });
                    r && i.push(r)
                }
                this.tabPanel && delete this.tabPanel;
                0 == i.length && (i = [new CMDBuild.Management.EditablePanel({
                    attributes: [],
                    frame: !1,
                    border: !1,
                    title: "",
                    bodyCls: "x-panel-body-default-framed",
                    bodyStyle: {
                        padding: "5px"
                    }
                })]);
                this.tabPanel = new CMDBuild.view.management.common.CMTabPanel({
                    items: i,
                    frame: !1,
                    flex: 1
                }), this.add(this.tabPanel), this.resumeLayouts(!0), this.doLayout(), this.danglingCard && (function(t) {
                    this.loadRemoteData || this.hasDomainAttributes() ? this.loadCard(t.get("Id"), t.get("IdClass")) : this.loadCard(t);
                    this.loadRemoteData = !1
                }.call(this, this.danglingCard), this.danglingCard = null);
                (e || this.forceEditMode) && (this.editMode(), this.forceEditMode = !1)
            },
            buildTBar: function() {
                if (this.withToolBar) {
                    var e = this;
                    this.deleteCardButton = new Ext.button.Button({
                        iconCls: "delete",
                        text: t.delete_card,
                        handler: function() {
                            e.fireEvent(e.CMEVENTS.removeCardButtonClick)
                        }
                    }), this.cloneCardButton = new Ext.button.Button({
                        iconCls: "clone",
                        text: t.clone_card,
                        handler: function() {
                            e.fireEvent(e.CMEVENTS.cloneCardButtonClick)
                        }
                    }), this.modifyCardButton = new Ext.button.Button({
                        iconCls: "modify",
                        text: t.modify_card,
                        handler: function() {
                            e.fireEvent(e.CMEVENTS.modifyCardButtonClick)
                        }
                    }), this.printCardMenu = Ext.create("CMDBuild.core.buttons.iconized.split.Print", {
                        formatList: [CMDBuild.core.constants.Proxy.PDF, CMDBuild.core.constants.Proxy.ODT],
                        mode: "legacy",
                        text: CMDBuild.Translation.print + " " + CMDBuild.Translation.management.modcard.tabs.card.toLowerCase()
                    }), this.mon(this.printCardMenu, "click", function(t) {
                        Ext.isString(t) && e.fireEvent(e.CMEVENTS.printCardButtonClick, t)
                    }), this.cmTBar = [this.modifyCardButton, this.deleteCardButton, this.cloneCardButton], this.graphButton = Ext.create("CMDBuild.core.buttons.iconized.RelationGraph", {
                        scope: this,
                        handler: function(t, e) {
                            this.fireEvent(this.CMEVENTS.openGraphButtonClick)
                        }
                    }), CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) && this.cmTBar.push(this.graphButton), this.cmTBar.push(this.printCardMenu)
                }
            },
            buildButtons: function() {
                if (this.withButtons) {
                    var t = this;
                    this.saveButton = new Ext.button.Button({
                        text: CMDBuild.Translation.save,
                        handler: function() {
                            t.fireEvent(t.CMEVENTS.saveCardButtonClick)
                        }
                    }), this.cancelButton = new Ext.button.Button({
                        text: this.readOnlyForm ? CMDBuild.Translation.close : CMDBuild.Translation.cancel,
                        handler: function() {
                            t.fireEvent(t.CMEVENTS.abortButtonClick)
                        }
                    }), this.cmButtons = [this.saveButton, this.cancelButton]
                }
            },
            hasDomainAttributes: function() {
                for (var t = this.getForm().getFields().items, e = 0, i = t.length; e < i; ++e)
                    if (t[e].cmDomainAttribute) return !0;
                return !1
            },
            callFieldTemplateResolverIfNeeded: function() {
                var t = Ext.create("CMDBuild.core.RequestBarrier", {
                    id: "templateResolverBarrier",
                    scope: this,
                    callback: function() {
                        Ext.isObject(this._lastCard) && !Ext.Object.isEmpty(this._lastCard) && e(this, this._lastCard.raw || this._lastCard.data)
                    }
                });
                this.getForm().getFields().each(function(e, i, n) {
                    Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isFunction(e.resolveTemplate) && e.resolveTemplate({
                        iden: e.name,
                        callback: t.getCallback("templateResolverBarrier")
                    })
                }, this), t.finalize("templateResolverBarrier", !0)
            },
            isInEditing: function() {
                return this._isInEditMode
            },
            toString: function() {
                return "CMCardForm"
            }
        })
    }(), Ext.define("CMDBuild.view.management.classes.CMCardNotesPanel", {
        extend: "Ext.panel.Panel",
        translation: CMDBuild.Translation.management.modcard,
        withButtons: !0,
        withTbar: !0,
        initComponent: function() {
            this._editMode = !1, this.CMEVENTS = {
                saveNoteButtonClick: "cm-save-clicked",
                cancelNoteButtonClick: "cm-cancel-clicked",
                modifyNoteButtonClick: "cm-modify.clicked"
            };
            var t = this;
            this.modifyNoteButton = new Ext.button.Button({
                iconCls: "modify",
                text: this.translation.modify_note,
                handler: function() {
                    t.fireEvent(t.CMEVENTS.modifyNoteButtonClick)
                }
            });
            var e = Ext.create("CMDBuild.view.common.field.HtmlEditor", {
                name: "Notes",
                hideLabel: !0
            });
            this.actualForm = new Ext.form.Panel({
                hideMode: "offsets",
                layout: "fit",
                border: !1,
                frame: !1,
                bodyCls: "x-panel-body-default-framed",
                hideMode: "offsets",
                items: [e],
                setValue: function(t) {
                    e.setValue(t || "")
                },
                getValue: function() {
                    return e.getValue()
                }
            });
            var i = new Ext.form.field.Display({
                padding: "0 0 5px 5px",
                name: "Notes",
                anchor: "95%"
            });
            this.displayPanel = new Ext.form.Panel({
                hideMode: "offsets",
                autoScroll: !0,
                frame: !1,
                bodyCls: "x-panel-body-default-framed",
                items: [i],
                setValue: function(t) {
                    i.setValue(t)
                },
                getValue: function() {
                    return i.getValue()
                }
            }), this.buildButtons(), this.withTbar && (this.tbar = [this.modifyNoteButton]), Ext.apply(this, {
                hideMode: "offsets",
                frame: !1,
                border: !1,
                cls: "x-panel-body-default-framed",
                layout: "card",
                items: [this.displayPanel, this.actualForm],
                buttonAlign: "center"
            }), this.callParent(arguments)
        },
        buildButtons: function() {
            if (this.withButtons) {
                var t = this;
                this.buttons = [this.saveButton = new Ext.button.Button({
                    text: CMDBuild.Translation.save,
                    name: "saveButton",
                    formBind: !0,
                    handler: function() {
                        t.fireEvent(t.CMEVENTS.saveNoteButtonClick)
                    }
                }), this.cancelButton = new Ext.button.Button({
                    text: CMDBuild.Translation.cancel,
                    name: "cancelButton",
                    handler: function() {
                        t.fireEvent(t.CMEVENTS.cancelNoteButtonClick)
                    }
                })];
                var e = this.getExtraButtons();
                e && (Ext.isArray(e) ? this.buttons = this.buttons.concat(e) : this.buttons.push(e))
            }
        },
        reset: function() {
            this.actualForm.getForm().reset(), this.displayPanel.getForm().reset()
        },
        loadCard: function(t) {
            this.actualForm.getForm().loadRecord(t), this.displayPanel.getForm().loadRecord(t)
        },
        getForm: function() {
            return this.actualForm.getForm()
        },
        syncForms: function() {
            var t = this.actualForm.getValue();
            return this.displayPanel.setValue(t), t
        },
        disableModify: function() {
            this.privWrite ? this.modifyNoteButton.enable() : this.modifyNoteButton.disable(), this.withButtons && (this.saveButton.disable(), this.cancelButton.disable()), this.getLayout().setActiveItem(this.displayPanel), this._editMode = !1
        },
        enableModify: function() {
            this.modifyNoteButton.disable(), this.withButtons && (this.saveButton.enable(), this.cancelButton.enable()), this.getLayout().setActiveItem(this.actualForm), this.actualForm.setValue(this.displayPanel.getValue()), this._editMode = !0
        },
        updateWritePrivileges: function(t) {
            this.privWrite = t
        },
        isInEditing: function() {
            return this._editMode
        },
        getExtraButtons: Ext.emptyFn,
        reloadCard: function(t) {
            _deprecated("reloadCard", this), this.enable()
        },
        onClassSelected: function() {
            _deprecated("onClassSelected", this)
        },
        onCardSelected: function(t) {
            _deprecated("onCardSelected", this);
            var e = t.raw.IdClass;
            CMDBuild.Utils.isSimpleTable(e) ? this.disable() : (this.enable(), this.currentCardId = t.get("Id"), this.currentCardPrivileges = {
                create: t.raw.priv_create,
                write: t.raw.priv_write
            }, this.reset(), this.loadCard(t), this.disableModify())
        }
    }),
    function() {
        var t = "dst_cid",
            e = (CMDBuild.Translation.management.modcard, CMDBuild.Translation.management.modcard.relation_columns),
            i = {
                enable: function() {},
                disable: function() {},
                on: function() {}
            };

        function n(t, e) {
            var i, n, o, r, s, l = e.data.attributes || [],
                d = '<span class="cm-bold">',
                c = t.relations_size > CMDBuild.configuration.instance.get("relationLimit"),
                u = t.src,
                h = e.get("id"),
                C = {
                    dom_id: h,
                    label: (i = t, n = e, o = n.get("descr" + i.src), r = i.relations_size, s = r > 1 ? CMDBuild.Translation.management.modcard.relation_columns.items : CMDBuild.Translation.management.modcard.relation_columns.item, '<span class="cm-bold">' + o + " (" + r + " " + s + ")</span>"),
                    src: u,
                    relations_size: t.relations_size,
                    expanded: !c,
                    leaf: !1,
                    children: [],
                    rel_attr_keys: []
                };
            if (l.length > 0) {
                this.showAttributesColumn = !0;
                for (var m = 0, g = l.length; m < g; m++) {
                    var M = l[m];
                    "hidden" != M.fieldmode && (C.rel_attr_keys.push(M.name), d += 0 == m ? "" : " | ", d += M.description || M.name)
                }
                C.rel_attr = d + "</span>"
            }
            return c ? C.children.push({}) : C.children = a(t.relations, h, u, C), C
        }

        function a(t, e, i, n, a) {
            for (var o, r, s, l, d = 0, c = (t = t || []).length, u = [], h = ""; d < c; ++d)
                if (o = t[d], r = _CMCache.getEntryTypeById(o.dst_cid)) {
                    o.leaf = !0, o.label = r.get("text"), o.dom_id = e, o.src = i, h = "", n.rel_attr_keys = n.rel_attr_keys || a.raw.rel_attr_keys || [];
                    for (var C = 0; C < n.rel_attr_keys.length; ++C) s = n.rel_attr_keys[C], void 0 === (l = o.rel_attr[s]) && (l = " - "), h += 0 == C ? "" : " | ", h += l.dsc || l;
                    o.attr_as_obj = o.rel_attr, o.rel_attr = h, u.push(o), a && a.appendChild(o)
                }
            return u
        }
        Ext.define("CMRelationPanelModel", {
            extend: "Ext.data.Model",
            fields: ["dom_id", "dom_desc", "label", "dst_code", "dst_id", "dst_desc", "dst_cid", "rel_attr", "rel_date", "rel_id", "relations_size", "src"]
        }), Ext.define("CMDBuild.view.management.classes.CMCardRelationsPanel", {
            extend: "Ext.tree.Panel",
            cmWithAddButton: !0,
            cmWithEditRelationIcons: !0,
            initComponent: function() {
                this.buildTBar(), this.attrsColumn = new Ext.grid.column.Column({
                    header: CMDBuild.Translation.administration.modClass.tabs.attributes,
                    hideMode: "visibility",
                    flex: 3,
                    sortable: !1,
                    dataIndex: "rel_attr"
                }), Ext.apply(this, {
                    loadMask: !1,
                    hideMode: "offsets",
                    store: new Ext.data.TreeStore({
                        model: "CMRelationPanelModel",
                        root: {
                            expanded: !0,
                            children: []
                        },
                        autoLoad: !1
                    }),
                    rootVisible: !1,
                    columns: [{
                        header: e.domain,
                        sortable: !1,
                        dataIndex: "dom_id",
                        hidden: !0
                    }, {
                        header: e.destclass,
                        flex: 2,
                        sortable: !1,
                        dataIndex: "label",
                        xtype: "treecolumn"
                    }, {
                        header: e.begin_date,
                        flex: 1,
                        sortable: !1,
                        dataIndex: "rel_date"
                    }, {
                        header: e.code,
                        flex: 1,
                        sortable: !1,
                        dataIndex: "dst_code"
                    }, {
                        header: e.description,
                        flex: 2,
                        sortable: !1,
                        dataIndex: "dst_desc"
                    }, this.attrsColumn, {
                        header: "&nbsp",
                        fixed: !0,
                        sortable: !1,
                        renderer: Ext.bind(this.renderRelationActions, this),
                        align: "center",
                        tdCls: "grid-button",
                        dataIndex: "Fake",
                        menuDisabled: !0,
                        hideable: !1
                    }]
                }), this.callParent(arguments), this.CMEVENTS = {
                    addButtonClick: "cm-add-relation-click",
                    domainNodeAppended: "cm-domain-node-appended",
                    openGraphClick: "cm-open-graph"
                }, this.addEvents(this.CMEVENTS.addButtonClick), this.addEvents(this.CMEVENTS.domainNodeAppended), this.addEvents(this.CMEVENTS.openGraphClick)
            },
            buildTBar: function() {
                var t = this;
                this.tbar = [], this.addRelationButton = Ext.create("CMDBuild.core.buttons.iconized.add.Relation"), this.mon(this.addRelationButton, "cmClick", function(e) {
                    t.fireEvent(t.CMEVENTS.addButtonClick, e)
                }), this.cmWithAddButton && this.tbar.push(this.addRelationButton), CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) ? (this.graphButton = Ext.create("CMDBuild.core.buttons.iconized.RelationGraph", {
                    scope: this,
                    handler: function(t, e) {
                        this.fireEvent(this.CMEVENTS.openGraphClick)
                    }
                }), this.tbar.push(this.graphButton)) : this.graphButton = i
            },
            clearStore: function() {
                this.store.getRootNode().removeAll()
            },
            fillWithData: function(t) {
                this.showAttributesColumn = !1, t = t || [];
                for (var e = [], i = this.store.getRootNode(), a = 0, o = t.length; a < o; ++a) {
                    var r = t[a],
                        s = _CMCache.getDomainById(r.id);
                    s ? e.push(n.call(this, r, s)) : CMDBuild.log.error("I have not cached data for domain", r.id)
                }
                i.removeAll(), e.length > 0 && i.appendChild(e), this.showAttributesColumn ? this.attrsColumn.show() : this.attrsColumn.hide()
            },
            convertRelationInNodes: a,
            renderRelationActions: function(e, i, n) {
                if (1 == n.get("depth")) return "";
                var a = CMDBuild.Translation.management.modcard,
                    o = '<img style="cursor:pointer" title="' + a.open_relation + '" class="action-relation-go" src="images/icons/bullet_go.png"/>',
                    r = n.get(t),
                    s = _CMCache.getDomainById(n.get("dom_id")),
                    l = _CMCache.getClassById(r),
                    d = _CMCache.getEntryTypeById(r),
                    c = _CMUtils.getEntryTypePrivileges(d);
                this.cmWithEditRelationIcons && s.get("writePrivileges") && (o += '<img style="cursor:pointer" title="' + a.edit_relation + '" class="action-relation-edit" src="images/icons/link_edit.png"/><img style="cursor:pointer" title="' + a.delete_relation + '" class="action-relation-delete" src="images/icons/link_delete.png"/>');
                l && l.get("priv_write") && !c.crudDisabled.modify ? o += '<img style="cursor:pointer" title="' + a.modify_card + '" class="action-relation-editcard" src="images/icons/modify.png"/>' : o += '<img style="cursor:pointer" title="' + a.view_relation + '" class="action-relation-viewcard" src="images/icons/zoom.png"/>';
                CMDBuild.configuration.dms.get(CMDBuild.core.constants.Proxy.ENABLED) && (o += '<img style="cursor:pointer" title="' + a.showattach + '" class="action-relation-attach" src="images/icons/attach.png"/>');
                return o
            },
            onAddCardButtonClick: function() {
                _deprecated("onAddCardButtonClick", this), this.disable()
            },
            onClassSelected: function() {
                _deprecated("onClassSelected", this)
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetsWindow", {
        extend: "CMDBuild.core.window.AbstractModal",
        delegate: void 0,
        initComponent: function() {
            this.widgetsToAdd = {}, this.widgetsContainer = new Ext.panel.Panel({
                layout: "card",
                activeItem: 0,
                hideMode: "offsets",
                border: !1,
                frame: !1,
                items: [{}]
            });
            var t = this;
            Ext.apply(this, {
                items: [this.widgetsContainer],
                buttonAlign: "center",
                buttons: [{
                    text: CMDBuild.Translation.close,
                    _cmNotRemoveMe: !0,
                    handler: function() {
                        t.onWidgetsWindowHide(), t.hide()
                    }
                }]
            }), this.callParent(arguments)
        },
        listeners: {
            close: function(t, e) {
                Ext.isFunction(t.onWidgetsWindowHide) && t.onWidgetsWindowHide()
            },
            hide: function(t, e) {
                Ext.isFunction(t.onWidgetsWindowHide) && t.onWidgetsWindowHide()
            }
        },
        onWidgetsWindowHide: function() {
            Ext.isEmpty(this.delegate) || Ext.isEmpty(this.currentWidget.delegate) || this.delegate.beforeHideView(this.currentWidget.delegate)
        },
        showWidget: function(t, e) {
            if (this.currentWidget = t, this.setTitle(e), this.show(), this.widgetsToAdd[t.id] && (this.widgetsContainer.add(t), delete this.widgetsToAdd[t.id]), this.widgetsContainer.layout.setActiveItem(t.id), this.removeExtraButtons(), t.getExtraButtons) {
                var i = t.getExtraButtons();
                this.addExtraButtons(i)
            }
            t.buttonLabel && this.setTitle(t.buttonLabel)
        },
        addWidgt: function(t) {
            this.widgetsToAdd[t.id] = t
        },
        destroy: function() {
            CMDBuild.clearComponent(this.widgetsContainer), delete this.widgetsToAdd, this.callParent(arguments)
        },
        addExtraButtons: function(t) {
            var e = this.getButtonBar();
            e && e.insert(0, t)
        },
        removeExtraButtons: function() {
            var t = this.getButtonBar();
            t && t.items.each(function(e) {
                e._cmNotRemoveMe || t.remove(e)
            })
        },
        getButtonBar: function() {
            for (var t = this.getDockedItems(), e = 0, i = t.length; e < i; ++e) {
                var n = t[e];
                if ("bottom" == n.dock) return n
            }
            return null
        },
        close: function() {
            this.hide()
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMWidgetsWindowPopup", {
        extend: "CMDBuild.view.management.common.widgets.CMWidgetsWindow",
        defaultSizeW: .9,
        defaultSizeH: .8,
        initComponent: function() {
            this.callParent(arguments), this.height = this.height * this.defaultSizeH, this.width = this.width * this.defaultSizeW
        }
    }), Ext.define("CMDBuild.view.management.common.widget.CMWidgetButton", {
        extend: "Ext.Button",
        widgetDefinition: void 0,
        constructor: function() {
            this.callParent(arguments), this.margins = "0 0 5 0", this.text = this.widgetDefinition.label, this.disabled = !this.widgetDefinition.alwaysenabled
        },
        disable: function() {
            return this.widgetDefinition && this.widgetDefinition.alwaysenabled || CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.PROCESS_WIDGET_ALWAYS_ENABLED) ? this.enable() : this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.management.common.widget.CMWidgetButtonsPanel", {
        extend: "Ext.panel.Panel",
        statics: {
            CMEVENTS: {
                widgetButtonClick: "widget-click"
            }
        },
        initComponent: function() {
            this.frame = !1, this.border = !1, this.layout = {
                type: "vbox",
                align: "stretch"
            }, this.bodyCls = "x-panel-body-default-framed", this.bodyStyle = {
                padding: "30px 5px 0 5px"
            }, this.callParent(arguments), this.CMEVENTS = this.self.CMEVENTS
        },
        addWidget: function(t) {
            var e = this;
            e._hidden && (e.show(), e._hidden = !1), e.add(new CMDBuild.view.management.common.widget.CMWidgetButton({
                widgetDefinition: t,
                handler: function() {
                    e.fireEvent(e.CMEVENTS.widgetButtonClick, t)
                }
            }))
        },
        displayMode: function() {
            this.items.each(function(t) {
                t.disable()
            })
        },
        editMode: function() {
            this.items.each(function(t) {
                t.enable()
            })
        },
        removeAllButtons: function() {
            CMDBuild.clearComponent(this), this.hide(), this._hidden = !0
        }
    }), Ext.define("CMDBuild.view.management.common.widget.CMWidgetButtonsPanelPopup", {
        extend: "CMDBuild.view.management.common.widget.CMWidgetButtonsPanel",
        addWidget: function(t) {
            var e = this;
            e._hidden && (e.show(), e._hidden = !1), e.add(new CMDBuild.view.management.common.widget.CMWidgetButton({
                widgetDefinition: t,
                handler: function() {
                    e.delegate.onWidgetButtonClick(t)
                }
            }))
        }
    }), Ext.define("CMDBuild.view.management.common.CMFormWithWidgetButtons", {
        extend: "Ext.panel.Panel",
        mixins: {
            widgetManagerDelegate: "CMDBuild.view.management.common.widgets.CMWidgetManagerDelegate"
        },
        withToolBar: !1,
        withButtons: !1,
        initComponent: function() {
            this.form = this.buildForm(), _CMUtils.forwardMethods(this, this.form, ["loadCard", "getValues", "reset", "getInvalidAttributeAsHTML", "fillForm", "getForm", "hasDomainAttributes", "ensureEditPanel", "isInEditing"]), this.widgets = new CMDBuild.view.management.common.widget.CMWidgetButtonsPanel({
                region: "east",
                hideMode: "offsets",
                cls: "cmdb-border-left",
                autoScroll: !0,
                frame: !0,
                border: !1,
                items: []
            }), _CMUtils.forwardMethods(this, this.widgets, ["removeAllButtons", "addWidget"]), this.widgets.hide(), Ext.apply(this, {
                layout: "border",
                items: [this.form, this.widgets]
            }), this.callParent(arguments), this.CMEVENTS = Ext.apply(this.form.CMEVENTS, this.widgets.CMEVENTS), this.relayEvents(this.widgets, [this.widgets.CMEVENTS.widgetButtonClick]);
            var t = this.form.CMEVENTS;
            this.relayEvents(this.form, [t.saveCardButtonClick, t.abortButtonClick, t.removeCardButtonClick, t.modifyCardButtonClick, t.cloneCardButtonClick, t.printCardButtonClick, t.openGraphButtonClick, t.editModeDidAcitvate, t.displayModeDidActivate]), this.mon(this, "activate", function() {
                this.form.fireEvent("activate")
            }, this)
        },
        buildForm: function() {
            return new CMDBuild.view.management.classes.CMCardForm({
                region: "center",
                cmOwner: this,
                withToolBar: this.withToolBar,
                withButtons: this.withButtons
            })
        },
        displayMode: function(t) {
            this.form.displayMode(t), this.widgets.displayMode()
        },
        displayModeForNotEditableCard: function() {
            this.form.displayModeForNotEditableCard(), this.widgets.displayMode()
        },
        editMode: function() {
            this.form.editMode(), this.widgets.editMode()
        },
        isTheActivePanel: function() {
            var t = !0;
            try {
                t = this.ownerCt.layout.getActiveItem() == this
            } catch (t) {}
            return t
        },
        formIsVisisble: function() {
            return this.form.isVisible(deep = !0)
        },
        getFormForTemplateResolver: function() {
            return this.form.getForm()
        },
        showCardPanel: Ext.emptyFn,
        getWidgetButtonsPanel: function() {
            return this.widgets
        }
    }), Ext.override(Extensible.calendar.view.AbstractCalendar, {
        onClick: function(t, e) {
            if (this.dropZone && this.dropZone.clearShims(), !0 === this.menuActive) return this.menuActive = !1, !0;
            var i = t.getTarget(this.eventSelector, 5);
            if (i) {
                var n = this.getEventIdFromEl(i),
                    a = this.getEventRecord(n);
                return this.fireEvent("eventclick", this, a, i), !0
            }
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMCalendar", {
        extend: "Ext.panel.Panel",
        withButtons: !0,
        constructor: function() {
            this.eventStore = new Extensible.calendar.data.MemoryEventStore({
                data: []
            }), this.calendar = new Extensible.calendar.CalendarPanel({
                eventStore: this.eventStore,
                hideMode: "offsets",
                region: "center",
                frame: !1,
                border: !1,
                showTodayText: !0,
                readOnly: !0,
                showNavToday: !1
            }), this.addEvents("eventclick"), this.addEvents("viewchange"), this.relayEvents(this.calendar, ["eventclick", "viewchange"]), Ext.apply(this, {
                frame: !1,
                border: !1,
                items: [this.calendar],
                layout: "border",
                cls: "x-panel-body-default-framed"
            }), this.callParent(arguments)
        },
        addEvent: function(t) {
            this.eventStore.add(t)
        },
        clearStore: function() {
            this.eventStore.removeAll()
        },
        getWievBounds: function() {
            var t, e, i, n = (i = null, (e = this).calendar.layout && e.calendar.layout.getActiveItem && (i = e.calendar.layout.getActiveItem()), i);
            if (n && n.getViewBounds) {
                var a = n.getViewBounds();
                t = {
                    activeDate: n.getStartDate(),
                    viewStart: a.start,
                    viewEnd: a.end
                }
            }
            return t
        },
        setStartDate: function(t) {
            this.calendar.setStartDate(t)
        }
    }),
    function() {
        var t = "action-all-info",
            e = {};
        e[t] = "onWebServiceWidgetShowAllInfoButtonClick", Ext.define("CMDBuild.view.management.common.widgets.CMWebServiceDelegate", {
            onWebServiceWidgetShowAllInfoButtonClick: function(t, e) {}
        }), Ext.define("CMDBuild.view.management.common.widgets.CMWebServiceGrid", {
            extend: "Ext.grid.Panel",
            initComponent: function() {
                this.bbar = [Ext.create("CMDBuild.view.common.field.GridLocalSearch", {
                    grid: this
                })], this.callParent(arguments)
            }
        }), Ext.define("CMDBuild.view.management.common.widgets.CMWebService", {
            extend: "Ext.panel.Panel",
            mixins: {
                delegable: "CMDBuild.core.CMDelegable"
            },
            constructor: function() {
                this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.widgets.CMWebServiceDelegate"), this.callParent(arguments)
            },
            initComponent: function() {
                this.frame = !1, this.border = !1, this.layout = "border", this.autoScroll = !0, this.callParent(arguments)
            },
            getSelectedRecords: function() {
                var t = [];
                return this.grid && (t = this.grid.getSelectionModel().getSelection()), t
            },
            configureGrid: function(i, n, a) {
                var o;
                this.grid = new CMDBuild.view.management.common.widgets.CMWebServiceGrid({
                    region: "center",
                    border: !1,
                    columns: (o = n, o.push({
                        width: 30,
                        sortable: !1,
                        align: "center",
                        hideable: !1,
                        renderer: function(e, i, n) {
                            return '<img style="cursor:pointer"" class="' + t + '" src="images/icons/zoom.png"/>'
                        }
                    }), o),
                    selModel: a,
                    store: i
                }), this.add(this.grid), this.mon(this.grid, "beforeitemclick", function(t, i, n, a, o, r) {
                    var s = o.target.className;
                    "string" == typeof e[s] && this.callDelegates(e[s], [this, i])
                }, this)
            }
        }), Ext.define("CMDBuild.view.management.common.widgets.CMXMLWindow", {
            extend: "CMDBuild.core.window.AbstractModal",
            xmlNode: null,
            initComponent: function() {
                var t = this;
                null != this.xmlNode && (this.title = this.xmlNode.nodeName, this.items = [function(t) {
                    for (var e = CMDBuild.core.xml.XMLUtility, i = t.xmlNode.childNodes, n = [], a = 0, o = i.length; a < o; ++a) {
                        var r = i[a],
                            s = e.getNodeText(r),
                            l = r.nodeName;
                        n.push({
                            xtype: "displayfield",
                            fieldLabel: l,
                            labelAlign: "right",
                            labelWidth: CMDBuild.core.constants.FieldWidths.LABEL,
                            width: CMDBuild.core.constants.FieldWidths.STANDARD_BIG,
                            value: s
                        })
                    }
                    return {
                        boder: !0,
                        frame: !0,
                        items: n
                    }
                }(t)]), this.buttonAlign = "center", this.buttons = [{
                    text: CMDBuild.Translation.close,
                    handler: function() {
                        t.destroy()
                    }
                }], this.bodyStyle = {
                    padding: "5px"
                }, this.callParent(arguments)
            }
        })
    }(), Ext.define("CMDBuild.view.management.common.widgets.CMPresetFromCardGrid", {
        extend: "CMDBuild.view.management.common.CMCardGrid",
        cmAdvancedFilter: !1,
        cmAddPrintButton: !1,
        cmAddGraphColumn: !1,
        selType: "checkboxmodel",
        selModel: {
            mode: "SINGLE"
        },
        buildExtraColumns: function() {
            return [{
                header: "&nbsp",
                width: 30,
                tdCls: "grid-button",
                fixed: !0,
                sortable: !1,
                align: "center",
                dataIndex: "Id",
                menuDisabled: !0,
                hideable: !1,
                renderer: function() {
                    return '<img style="cursor:pointer" class="action-card-show" src="images/icons/zoom.png"/>'
                }
            }]
        }
    }), Ext.define("CMDBuild.view.management.common.widgets.CMPresetFromCardDelegate", {
        onPresetFromCardSaveButtonClick: function(t) {}
    }), Ext.define("CMDBuild.view.management.common.widgets.CMPresetFromCard", {
        extend: "Ext.panel.Panel",
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.common.widgets.CMPresetFromCardDelegate"), this.callParent(arguments)
        },
        initComponent: function() {
            this.grid = new CMDBuild.view.management.common.widgets.CMPresetFromCardGrid({
                autoScroll: !0,
                hideMode: "offsets",
                region: "center",
                border: !1
            }), this.frame = !1, this.border = !1, this.layout = "border", this.items = [this.grid], this.callParent(arguments)
        },
        updateGrid: function(t, e) {
            this.grid.CQL = e, this.grid.store.proxy.extraParams = this.grid.getStoreExtraParams(), this.grid.updateStoreForClassId(t)
        },
        getSelection: function() {
            var t = null,
                e = this.grid.getSelectionModel();
            return e && (selections = e.getSelection(), selections.length > 0 && (t = selections[0])), t
        },
        getExtraButtons: function() {
            var t = this;
            return [new Ext.Button({
                text: CMDBuild.Translation.ok,
                name: "saveButton",
                handler: function() {
                    t.callDelegates("onPresetFromCardSaveButtonClick", [t])
                }
            })]
        }
    }),
    function() {
        var t = CMDBuild.Translation.management.modcard.title;
        Ext.define("CMDBuild.view.management.classes.CMModCard", {
            extend: "Ext.panel.Panel",
            mixins: {
                uistatedelegate: "CMDBuild.state.UIStateDelegate"
            },
            whitMap: !0,
            layout: "border",
            border: !0,
            constructor: function() {
                this.CMEVENTS = {
                    addButtonClick: "cm-addcard-click"
                }, this.buildComponents(), this.callParent(arguments), "undefined" != typeof _CMUIState && _CMUIState.addDelegate(this)
            },
            initComponent: function() {
                this.centralPanelItems = [this.cardGrid],
                    function() {
                        if (CMDBuild.configuration.gis.get("enabled") && this.whitMap && CMDBuild.gis.values.browserEnabled) {
                            this.showGridButton = new Ext.button.Button({
                                text: CMDBuild.Translation.management.modcard.add_relations_window.list_tab,
                                iconCls: "table",
                                scope: this,
                                handler: function() {
                                    this.centralPanel.showGrid()
                                }
                            }), this.mapAddCardButton = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card", {
                                classId: void 0,
                                disabled: !0
                            }), this.mapAddCardButton.on("cmClick", function(t) {
                                this.fireEvent(this.CMEVENTS.addButtonClick, t)
                            }, this);
                            var t = this,
                                e = Ext.create("CMDBuild.core.buttons.gis.Thematism", {
                                    handler: function(t, e) {
                                        this.showMenu()
                                    }
                                }),
                                i = Ext.create("CMDBuild.core.buttons.gis.PrintMap", {
                                    handler: function(e, i) {
                                        t.theMap.print()
                                    }
                                }),
                                n = Ext.create("CMDBuild.core.buttons.gis.SearchPlace", {
                                    handler: function(e, i) {
                                        t.theMap.search(e, i)
                                    }
                                });
                            this.theMap = Ext.create("CMDBuild.view.management.classes.map.CMMapPanel", {
                                tbar: [this.mapAddCardButton, "->", n, i, e, this.showGridButton],
                                frame: !1,
                                border: !1,
                                mainGrid: this.cardGrid,
                                thematismButton: e,
                                printMapButton: i,
                                searchMapButton: n
                            }), this.executeThematism = function(t, e) {
                                this.theMap.executeThematism(t, e)
                            }, e.callback = this.executeThematism, e.theMap = this.theMap, this.centralPanelItems.push(this.theMap), this.getMapPanel = function() {
                                return this.theMap
                            }
                        } else this.mapAddCardButton = {
                            updateForEntry: Ext.emptyFn
                        }
                    }.call(this), this.centralPanel = new Ext.panel.Panel({
                        region: "center",
                        layout: "card",
                        activeItem: 0,
                        hideMode: "offsets",
                        cls: "cmdb-border-bottom",
                        border: !1,
                        frame: !1,
                        cardGrid: this.cardGrid,
                        theMap: this.theMap,
                        items: this.centralPanelItems,
                        animCollapse: !1,
                        showGrid: function() {
                            this.getLayout().setActiveItem(this.cardGrid.id), this.cardGrid.setCmVisible(!0), this.theMap.setCmVisible(!1)
                        },
                        showMap: function() {
                            this.getLayout().setActiveItem(this.theMap.id), this.theMap.updateSize(), this.theMap.setCmVisible(!0), this.cardGrid.setCmVisible(!0)
                        }
                    }), Ext.apply(this, {
                        items: [this.centralPanel, this.cardTabPanel],
                        tools: [Ext.create("CMDBuild.view.management.classes.tools.Properties"), Ext.create("CMDBuild.view.management.classes.tools.Minimize"), Ext.create("CMDBuild.view.management.classes.tools.Maximize"), Ext.create("CMDBuild.view.management.classes.tools.Restore")]
                    }), this.callParent(arguments), _CMUtils.forwardMethods(this, this.cardTabPanel, ["activateFirstTab", "setActivateTab", "getCardPanel", "getNotePanel", "getMDPanel", "getAttachmentsPanel", "getHistoryPanel", "getRelationsPanel", "getEmailPanel"]), this.on("afterrender", function(t, e) {
                        Ext.isFunction(this.delegate.buildMapController) && this.delegate.buildMapController()
                    }, this)
            },
            minimize: function() {
                Ext.suspendLayouts(), this.centralPanel.hide(), this.centralPanel.region = "", this.cardTabPanel.show(), this.cardTabPanel.region = "center", Ext.resumeLayouts(!0)
            },
            maximize: function() {
                Ext.suspendLayouts(), this.cardTabPanel.hide(), this.cardTabPanel.region = "", this.centralPanel.show(), this.centralPanel.region = "center", Ext.resumeLayouts(!0)
            },
            restore: function() {
                Ext.suspendLayouts(), this.cardTabPanel.show(), this.cardTabPanel.region = "south", this.centralPanel.show(), this.centralPanel.region = "center", Ext.resumeLayouts(!0)
            },
            updateTitleForEntry: function(e) {
                var i = "";
                e && (i = e.get("text") || e.get("name")), this.setTitle(t + i)
            },
            buildComponents: function() {
                var t = CMDBuild.configuration.instance.get("cardFormRatio") || 50,
                    e = [this.addCardButton = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card", {
                        classId: void 0,
                        disabled: !0
                    })];
                this.mon(this.addCardButton, "cmClick", function(t) {
                        this.fireEvent(this.CMEVENTS.addButtonClick, t)
                    }, this),
                    function(t) {
                        CMDBuild.configuration.gis.get("enabled") && CMDBuild.gis.values.browserEnabled && (this.showMapButton = new Ext.button.Button({
                            text: CMDBuild.Translation.management.modcard.tabs.map,
                            iconCls: "map",
                            scope: this,
                            handler: function() {
                                this.centralPanel.showMap()
                            }
                        }), t.push("->", this.showMapButton))
                    }.call(this, e), this.cardGrid = new CMDBuild.view.management.classes.CMModCard.Grid({
                        hideMode: "offsets",
                        filterCategory: this.cmName,
                        border: !1,
                        tbar: e,
                        columns: [],
                        forceSelectionOfFirst: !0
                    }), this.cardTabPanel = new CMDBuild.view.management.classes.CMCardTabPanel({
                        cls: "cmdb-border-top",
                        region: "south",
                        hideMode: "offsets",
                        border: !1,
                        split: !0,
                        height: t + "%"
                    });
                var i = new CMDBuild.view.management.common.widgets.CMWidgetManager(this.cardTabPanel.getCardPanel(), this.cardTabPanel);
                this.getWidgetManager = function() {
                    return i
                }
            },
            getGrid: function() {
                return this.cardGrid
            },
            reset: function(t) {
                _deprecated("reset", this), this.cardTabPanel.reset(t)
            },
            onEntrySelected: function(t) {
                _deprecated("onEntrySelected", this);
                var e = t.get("id");
                this.cardGrid.updateStoreForClassId(e, {
                    cb: function() {
                        this.loadPage(1, {
                            cb: function() {
                                try {
                                    this.getSelectionModel().select(0)
                                } catch (t) {
                                    _debug(t)
                                }
                            }
                        })
                    }
                }), this.cardTabPanel.onClassSelected(e, activateFirst = !0), this.addCardButton.updateForEntry(t), this.mapAddCardButton.updateForEntry(t), this.updateTitleForEntry(t), this.cardGrid.openFilterButton.enable(), this.cardGrid.gridSearchField.reset()
            },
            onFullScreenChangeToGridOnly: function() {
                this.maximize()
            },
            onFullScreenChangeToFormOnly: function() {
                this.minimize()
            },
            onFullScreenChangeToOff: function() {
                this.restore()
            }
        }), Ext.define("CMDBuild.view.management.classes.CMModCard.Grid", {
            extend: "CMDBuild.view.management.common.CMCardGrid",
            cmVisible: !0,
            setCmVisible: function(t) {
                this.cmVisible = t, this.paramsToLoadWhenVisible && (this.updateStoreForClassId(this.paramsToLoadWhenVisible.classId, this.paramsToLoadWhenVisible.o), this.paramsToLoadWhenVisible = null), this.fireEvent("cmVisible", t)
            },
            updateStoreForClassId: function(t, e) {
                this.cmVisible ? (this.callParent(arguments), this.paramsToLoadWhenVisible = null) : this.paramsToLoadWhenVisible = {
                    classId: t,
                    o: e
                }
            }
        })
    }(), Ext.define("CMDBuild.view.management.classes.CMCardPanel", {
        extend: "CMDBuild.view.management.common.CMFormWithWidgetButtons"
    }),
    function() {
        var t = CMDBuild.Translation.management.modcard;
        Ext.define("CMDBuild.view.management.classes.CMCardTabPanel", {
            extend: "Ext.tab.Panel",
            delegate: void 0,
            frame: !1,
            constructor: function() {
                this.cardNotesPanel = CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_NOTE_TAB) ? null : new CMDBuild.view.management.classes.CMCardNotesPanel({
                    title: CMDBuild.Translation.notes,
                    disabled: !0,
                    listeners: {
                        show: function(t, e) {
                            Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(_CMCardModuleState.card) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                                moduleId: "class",
                                entryType: {
                                    description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                                    id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.entryType
                                },
                                item: {
                                    description: _CMCardModuleState.card.get("Description") || _CMCardModuleState.card.get("Code"),
                                    id: _CMCardModuleState.card.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.card
                                },
                                section: {
                                    description: this.title,
                                    object: this
                                }
                            })
                        }
                    }
                }), this.relationsPanel = CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_RELATION_TAB) ? null : new CMDBuild.view.management.classes.CMCardRelationsPanel({
                    title: t.tabs.relations,
                    border: !1,
                    disabled: !0,
                    listeners: {
                        show: function(t, e) {
                            Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(_CMCardModuleState.card) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                                moduleId: "class",
                                entryType: {
                                    description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                                    id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.entryType
                                },
                                item: {
                                    description: _CMCardModuleState.card.get("Description") || _CMCardModuleState.card.get("Code"),
                                    id: _CMCardModuleState.card.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.card
                                },
                                section: {
                                    description: this.title,
                                    object: this
                                }
                            })
                        }
                    }
                }), this.mdPanel = CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_DETAIL_TAB) ? null : new CMDBuild.view.management.classes.masterDetails.CMCardMasterDetail({
                    title: t.tabs.detail,
                    disabled: !0,
                    listeners: {
                        show: function(t, e) {
                            Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(_CMCardModuleState.card) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                                moduleId: "class",
                                entryType: {
                                    description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                                    id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.entryType
                                },
                                item: {
                                    description: _CMCardModuleState.card.get("Description") || _CMCardModuleState.card.get("Code"),
                                    id: _CMCardModuleState.card.get(CMDBuild.core.constants.Proxy.ID),
                                    object: _CMCardModuleState.card
                                },
                                section: {
                                    description: this.title,
                                    object: this
                                }
                            })
                        }
                    }
                }), this.callParent(arguments)
            },
            reset: function(t) {
                this.activeTabSet(), this.items.each(function(e) {
                    e.reset && e.reset(), e.onClassSelected && e.onClassSelected(t)
                })
            },
            getCardPanel: function() {
                return Ext.isEmpty(this.cardPanel2) ? this.cardPanel : this.cardPanel2
            },
            getMDPanel: function() {
                return this.mdPanel
            },
            getHistoryPanel: function() {
                return this.cardHistoryPanel
            },
            getRelationsPanel: function() {
                return this.relationsPanel
            },
            getNotePanel: function() {
                return this.cardNotesPanel
            },
            getAttachmentsPanel: function() {
                return this.attachmentPanel
            },
            getNotesPanel: function() {
                return this.cardNotesPanel
            },
            getEmailPanel: function() {
                return this.emailPanel
            },
            showWidget: function(t) {
                return !1
            },
            activateFirstTab: function() {
                Ext.isEmpty(this.cardPanel2) ? this.setActiveTab(this.cardPanel) : this.setActiveTab(this.cardPanel2)
            },
            activeTabSet: function(t) {
                return Ext.isObject(t) && !Ext.Object.isEmpty(t) ? this.setActiveTab(t) : Ext.isEmpty(this.cardPanel2) ? this.setActiveTab(this.cardPanel) : this.setActiveTab(this.cardPanel2)
            }
        })
    }(),
    function() {
        function t(t, e, i) {
            t.currentClassId != e ? t.updateStoreForClassId(e, i, t) : i(t)
        }

        function e(t, e, i) {
            var n, a, o, r, s = (n = i, a = ["showDetail"], o = _CMCache.getEntryTypeById(n.get("IdClass")), !(r = _CMUtils.getEntryTypePrivilegesByCard(n)).write || r.crudDisabled.modify || r.crudDisabled.remove ? r.write && !r.crudDisabled.modify ? a = ["editDetail"] : r.write && !r.crudDisabled.remove && (a = ["showDetail", "deleteDetail"]) : a = ["editDetail", "deleteDetail"], o.get(CMDBuild.core.constants.Proxy.TABLE_TYPE) != CMDBuild.core.constants.Global.getTableTypeSimpleTable() && a.push("note"), CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) && a.push("showGraph"), CMDBuild.configuration.dms.get(CMDBuild.core.constants.Proxy.ENABLED) && a.push("attach"), a),
                l = "images/icons/",
                d = "png",
                c = "action-masterdetail-",
                u = '<img style="cursor:pointer" title="{0}" class="{1}{2}" src="{3}{4}.{5}"/>&nbsp;',
                h = "",
                C = {
                    showDetail: {
                        title: CMDBuild.Translation.management.moddetail.showdetail,
                        event: "show",
                        icon: "zoom"
                    },
                    editDetail: {
                        title: CMDBuild.Translation.management.moddetail.editdetail,
                        event: "edit",
                        icon: "modify"
                    },
                    deleteDetail: {
                        title: CMDBuild.Translation.management.moddetail.deletedetail,
                        event: "delete",
                        icon: "cross"
                    },
                    showGraph: {
                        title: CMDBuild.Translation.management.moddetail.showgraph,
                        event: "graph",
                        icon: "graph"
                    },
                    note: {
                        title: CMDBuild.Translation.management.moddetail.shownotes,
                        event: "note",
                        icon: "note"
                    },
                    attach: {
                        title: CMDBuild.Translation.management.moddetail.showattach,
                        event: "attach",
                        icon: "attach"
                    }
                };

            function m(t) {
                var e = C[t];
                return e ? Ext.String.format(u, e.title, c, e.event, l, e.icon, d) : Ext.String.format("<span>{0}</span>", t)
            }
            if (Ext.isArray(s))
                for (var g = 0, M = s.length; g < M; ++g) h += m(s[g]);
            else h = m("");
            return h
        }
        Ext.define("CMDBuild.Management.MasterDetailCardGrid", {
            extend: "CMDBuild.view.management.common.CMCardGrid",
            uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
            cmAddPrintButton: !1,
            loadDetails: function(e) {
                var i = e.detail,
                    n = e.masterCard.get("IdClass"),
                    a = _CMCache.getEntryTypeNameById(n);
                t(this, i.getDetailClassId(), function(t) {
                    t.store.proxy.url = CMDBuild.proxy.index.Json.card.readAll;
                    var n = {
                        relation: [{
                            domain: i.getName(),
                            type: "oneof",
                            destination: i.getMasterClassName(),
                            source: i.getDetailClassName(),
                            direction: i.getDetailSide(),
                            cards: [{
                                className: a,
                                id: e.masterCard.get("Id")
                            }]
                        }]
                    };
                    t.store.proxy.extraParams[CMDBuild.core.constants.Proxy.FILTER] = Ext.encode(n), t.store.proxy.extraParams[CMDBuild.core.constants.Proxy.CLASS_NAME] = i.getDetailClassName(), t.store.loadPage(1)
                })
            },
            loadFk: function(e) {
                var i = e.detail.idClass,
                    n = _CMCache.getEntryTypeById(i);
                t(this, i, function(t) {
                    t.store.proxy.url = CMDBuild.proxy.index.Json.card.readAll, t.store.proxy.extraParams.IdClass = i, t.store.proxy.extraParams.CQL = "from " + n.get("name") + " where " + e.detail.name + "=" + e.masterCard.get("Id"), t.store.loadPage(1)
                })
            },
            updateStoreForClassId: function(t, e, i) {
                this.currentClassId = t, _CMCache.getAttributeList(t, Ext.bind(function(t) {
                    this.setColumnsForClass(t), this.setGridSorting(t), e && e(i)
                }, this))
            },
            reset: function() {
                this.store.removeAll(), this.currentClassId = null, this.reconfigure(null, [])
            },
            buildExtraColumns: function() {
                return [{
                    header: "&nbsp",
                    fixed: !0,
                    sortable: !1,
                    renderer: e,
                    align: "center",
                    tdCls: "grid-button",
                    dataIndex: "Fake",
                    menuDisabled: !0,
                    hideable: !1
                }]
            }
        })
    }(),
    function() {
        var t = "detail",
            e = "foreignkey";

        function i(t) {
            return void 0 === t.get ? t.idClass + "_" + t.name : t.get("name")
        }

        function n(t) {
            var e = t.get("cardinality"),
                i = t.get("id");
            return "1:N" == e ? i + "_D" : "N:1" == e ? i + "_I" : void CMDBuild.log.error("Wrong cardinality")
        }
        Ext.define("CMDBuild.view.management.classes.masterDetails.CMCardMasterDetail", {
            extend: "Ext.panel.Panel",
            uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.classes.tabs.MasterDetail"],
            localCacheSimpleTables: [],
            editable: !0,
            eventType: "card",
            eventmastertype: "class",
            currentClass: void 0,
            constructor: function() {
                var t = {};
                t[CMDBuild.core.constants.Proxy.ACTIVE] = !0, CMDBuild.proxy.management.classes.tabs.MasterDetail.readAllClasses({
                    params: t,
                    scope: this,
                    success: function(t, e, i) {
                        i = i[CMDBuild.core.constants.Proxy.RESPONSE], Ext.isArray(i) && !Ext.isEmpty(i) && (i = Ext.Array.filter(i, function(t, e, i) {
                            return t[CMDBuild.core.constants.Proxy.TABLE_TYPE] == CMDBuild.core.constants.Global.getTableTypeSimpleTable()
                        }, this), Ext.isArray(i) && !Ext.isEmpty(i) && Ext.Array.each(i, function(t, e, i) {
                            Ext.isObject(t) && !Ext.Object.isEmpty(t) && (this.localCacheSimpleTables[t[CMDBuild.core.constants.Proxy.NAME]] = t)
                        }, this))
                    }
                }), this.addDetailButton = Ext.create("CMDBuild.core.buttons.iconized.split.add.Card", {
                    classId: void 0,
                    baseText: CMDBuild.Translation.management.moddetail.adddetail,
                    textPrefix: CMDBuild.Translation.management.moddetail.adddetail
                }), this.detailGrid = new CMDBuild.Management.MasterDetailCardGrid({
                    editable: this.editable,
                    cls: "cmdb-border-right",
                    border: !1,
                    region: "center",
                    columns: [],
                    loadMask: !1,
                    cmAdvancedFilter: !1,
                    cmAddGraphColumn: !1
                }), this.tabs = new CMDBuild.view.common.CMSideTabPanel({
                    region: "east"
                }), Ext.apply(this, {
                    border: !1,
                    frame: !1
                }), this.callParent(arguments)
            },
            initComponent: function() {
                Ext.apply(this, {
                    layout: "border",
                    tbar: [this.addDetailButton],
                    items: [this.detailGrid, this.tabs]
                }), this.callParent(arguments)
            },
            loadDetailsAndFKThenBuildSideTabs: function(a) {
                this.buildingTabsDetails = !0, this.addDetailButton.disable();
                var o = _CMCache.getMasterDetailsForClassId(a);
                this.disable(), this.empty = !0, this.details = {}, this.details[t] = {}, this.details[e] = {};
                for (var r = 0, s = o.length; r < s; r++) {
                    var l = o[r];
                    l.directedDomain = n(l), this.details[t][i(l)] = l
                }
                var d = {};
                d[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(a), CMDBuild.proxy.management.classes.tabs.MasterDetail.readForeignKeyTargetingClass({
                    params: d,
                    loadMask: !1,
                    scope: this,
                    success: function(n, a, o) {
                        this.details[e] = {}, CMDBuild.clearComponent(this.tabs);
                        for (var r = 0, s = o.length; r < s; ++r) {
                            var l = o[r];
                            this.details[e][i(l)] = l
                        }
                        this.buildingTabsDetails = !1, Ext.Object.isEmpty(this.details[e]) && Ext.Object.isEmpty(this.details[t]) ? this.fireEvent("empty") : (this.empty = !1, this.enable(), function() {
                            var i = this.details;

                            function n() {
                                CMDBuild.clearComponent(this.tabs);
                                for (var n, a = Ext.apply(i[t], i[e]), o = "", r = "", s = "", l = function(t) {
                                        var e = [];
                                        for (var i in t) e.push(i);
                                        return Ext.Array.sort(e, function(e, i) {
                                            var n = t[e],
                                                a = t[i],
                                                o = n.data || n,
                                                r = a.data || a,
                                                s = o.md_label || o.description || e,
                                                l = r.md_label || r.description || i;
                                            return s.toUpperCase() > l.toUpperCase()
                                        })
                                    }(a), d = 0, c = l.length; d < c; d++) {
                                    var r = l[d];
                                    if (void 0 === (n = a[r]).get) {
                                        var u = {};
                                        !Ext.isString(n.owner) || Ext.isEmpty(n.owner) || Ext.isEmpty(this.localCacheSimpleTables[n.owner]) || (u = this.localCacheSimpleTables[n.owner]), s = e, o = Ext.Object.isEmpty(u) ? n.description : u[CMDBuild.core.constants.Proxy.TEXT]
                                    } else s = t, o = n.get("md_label") || n.get("description");
                                    var h = !0;
                                    if (this.delegate.superController.selectedAccordionNode.data.description) {
                                        var C = this.delegate.superController.selectedAccordionNode.data.description;
                                        n.data && ("N:1" == n.data.cardinality && n.data.disabled2.length > 0 && -1 != n.data.disabled2.indexOf(C) && (h = !1), "1:N" == n.data.cardinality && n.data.disabled1.length > 0 && -1 != n.data.disabled1.indexOf(C) && (h = !1))
                                    }
                                    h && this.tabs.addTabFor({
                                        title: o,
                                        tabLabel: o,
                                        detailType: s,
                                        detailId: r,
                                        on: function() {}
                                    }, s)
                                }
                                this.mon(this.tabs, "afterlayout", function() {
                                    this.tabs.activateFirst()
                                }, this, {
                                    single: !0
                                }), this.doLayout()
                            }
                            this.isVisible() ? n.call(this) : this.on("show", n, this, {
                                single: !0
                            })
                        }.call(this))
                    }
                })
            },
            selectDetail: function(t) {
                var e = _CMCache.getEntryTypeById(function(t) {
                    var e = t.get("cardinality"); {
                        if ("1:N" == e) return t.get("idClass2");
                        if ("N:1" == e) return t.get("idClass1")
                    }
                }(t));
                e && this.addDetailButton.updateForEntry(e)
            },
            selectForeignKey: function(t) {
                var e = _CMCache.getEntryTypeById(t.idClass);
                e && this.addDetailButton.updateForEntry(e)
            },
            resetDetailGrid: function() {
                this.detailGrid.reset()
            },
            activateFirstTab: function() {
                this.tabs.activateFirst()
            },
            updateGrid: function(e, i) {
                e == t ? this.detailGrid.loadDetails(i) : this.detailGrid.loadFk(i)
            },
            loadDetailCardList: function(t, e, i, n, a, o) {
                this.actualAttributeList = t, this.idDomain = n, this.detailGrid.loadDetailCardList({
                    directedDomain: n,
                    cardId: e,
                    classId: i,
                    classAttributes: t,
                    className: this.currentDetail.name,
                    superclass: a,
                    classType: o
                })
            },
            loadFKCardList: function(t, e, i, n) {
                this.detailGrid.loadFKCardList(t, e, i, n), this.isLoaded = !0
            },
            reload: function() {
                this.detailGrid.reload()
            },
            onAddCardButtonClick: function() {
                _deprecated("onAddCardButtonClick", this), this.disable()
            },
            onClassSelected: function() {
                _deprecated("onClassSelected", this)
            }
        })
    }(), Ext.define("CMDBuild.view.management.dashboard.CMModDashboard", {
        extend: "Ext.panel.Panel",
        border: !0,
        frame: !1,
        layout: "card",
        initComponent: function() {
            this.renderdDashboards = {}, this.dashbaord = null, Ext.apply(this, {
                tools: [Ext.create("CMDBuild.view.common.panel.gridAndForm.tools.Properties", {
                    style: {}
                })]
            }), this.callParent(arguments)
        },
        buildDashboardColumns: function(t) {
            if (t)
                if (l = this, d = t.get("description"), c = CMDBuild.Translation.administration.modDashboard.title, d && (c += " - " + d), l.setTitle(c), this.renderdDashboards[t.getId()]) this.getLayout().setActiveItem(this.renderdDashboards[t.getId()]);
                else {
                    var e = t.getColumns(),
                        i = [],
                        n = this;
                    this.dashbaord = t;
                    for (var a, o = 0, r = e.length; o < r; ++o) a = e[o], i.push(new CMDBuild.view.management.dashboard.CMDashboardColumn({
                        columnWidth: a.width,
                        charts: a.charts,
                        items: [],
                        split: !0,
                        listeners: {
                            render: function(t) {
                                n.delegate && n.delegate.onColumnRender(t)
                            }
                        }
                    }));
                    var s = new Ext.app.PortalPanel({
                        items: i
                    });
                    this.renderdDashboards[t.getId()] = s, this.add(s), this.getLayout().setActiveItem(s)
                }
            var l, d, c
        },
        setDelegate: function(t) {
            this.delegate = t
        }
    }), Ext.define("CMDBuild.controller.management.classes.CMModCardSubController", {
        mixins: {
            observable: "Ext.util.Observable"
        },
        constructor: function(t, e) {
            if (this.mixins.observable.constructor.call(this, arguments), void 0 === t) throw "OOO snap, you have not passed a view to me";
            this.view = t, this.view.delegate = this, this.superController = e, this.card = null, this.entryType = null, this.buildCardModuleStateDelegate()
        },
        onEntryTypeSelected: function(t) {
            this.entryType = t
        },
        onCardSelected: function(t) {
            this.card = t
        },
        onAddCardButtonClick: function(t) {},
        onAbortCardClick: function() {
            this.superController.onAbortCardClick()
        },
        onModifyCardClick: function() {
            this.superController.onModifyCardClick()
        },
        onShowGraphClick: function() {
            Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.graph.Window", {
                parentDelegate: this,
                classId: this.card.get("IdClass"),
                cardId: this.card.get("Id")
            })
        },
        onCloneCard: function() {
            this.view && this.view.disable()
        },
        buildCardModuleStateDelegate: function() {
            var t = this;
            if (this.cardStateDelegate = new CMDBuild.state.CMCardModuleStateDelegate, this.cardStateDelegate.onEntryTypeDidChange = function(e, i) {
                    t.onEntryTypeSelected(i)
                }, this.cardStateDelegate.onModifyCardClick = function(e) {
                    t.onModifyCardClick()
                }, this.cardStateDelegate.onCardDidChange = function(e, i) {
                    Ext.suspendLayouts(), t.onCardSelected(i), Ext.resumeLayouts()
                }, _CMCardModuleState.addDelegate(this.cardStateDelegate), this.view) {
                t = this;
                this.mon(t.view, "destroy", function(e) {
                    _CMCardModuleState.removeDelegate(t.cardStateDelegate), delete t.cardStateDelegate
                })
            }
        }
    }), Ext.define("CMDBuild.controller.management.common.CMModClassAndWFCommons", {
        getFormForTemplateResolver: function() {
            var t = null;
            if (this.view) {
                var e = this.view.getWidgetManager();
                e && "function" == typeof e.getFormForTemplateResolver && (t = e.getFormForTemplateResolver() || null)
            }
            return t
        }
    }), Ext.define("CMDBuild.controller.management.classes.CMCardBrowserTreeDataSource", {
        uses: ["CMDBuild.proxy.gis.Gis"],
        GEOSERVER: "GeoServer",
        constructor: function(t, e) {
            this.navigationPanel = t, this.mapState = e, this.configuration = CMDBuild.configuration.gis.get("cardBrowserByDomainConfiguration"), this.refresh(), this.callParent(arguments)
        },
        refresh: function() {
            var t = this;
            t.navigationPanel.setRootNode({
                loading: !0,
                text: CMDBuild.Translation.common.loading
            }), CMDBuild.proxy.gis.Gis.expandDomainTree({
                loadMask: !1,
                success: function(e, i, n) {
                    ! function t(e, i) {
                        for (var n = e && e.children || [], a = 0; a < n.length; a++) {
                            var o = n[a];
                            t(o, i && !(!0 === o.baseNode && a > 0))
                        }
                        e.checked = i
                    }(n.root, !0), t.navigationPanel.setRootNode(n.root), t.navigationPanel.loaded()
                }
            })
        }
    }),
    function() {
        function t(t) {
            this.widgetControllerManager && this.widgetControllerManager.buildControllers(t)
        }
        Ext.define("CMDBuild.controller.management.classes.CMBaseCardPanelController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            mixins: {
                observable: "Ext.util.Observable"
            },
            uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.Message", "CMDBuild.controller.management.classes.StaticsController", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.Card"],
            cardDataProviders: [],
            constructor: function(t, e, i) {
                this.callParent(arguments), this.mixins.observable.constructor.call(this, arguments);
                var n = this.view.CMEVENTS;
                if (i) this.widgetControllerManager = i;
                else {
                    var a = new CMDBuild.view.management.common.widgets.CMWidgetManager(this.view);
                    this.widgetControllerManager = new CMDBuild.controller.management.common.CMWidgetManagerController(a)
                }
                this.widgetControllerManager.setDelegate(this), this.CMEVENTS = {
                    cardSaved: "cm-card-saved",
                    abortedModify: "cm-card-modify-abort",
                    editModeDidAcitvate: n.editModeDidAcitvate,
                    displayModeDidActivate: n.displayModeDidActivate
                }, this.addEvents(this.CMEVENTS.cardSaved, this.CMEVENTS.abortedModify, n.editModeDidAcitvate, n.displayModeDidActivate), this.relayEvents(this.view, [n.editModeDidAcitvate, n.displayModeDidActivate]), this.mon(this.view, n.modifyCardButtonClick, function() {
                    this.onModifyCardClick.apply(this, arguments)
                }, this), this.mon(this.view, n.saveCardButtonClick, function() {
                    this.onSaveCardClick.apply(this, arguments)
                }, this), this.mon(this.view, n.abortButtonClick, function() {
                    this.onAbortCardClick.apply(this, arguments)
                }, this), this.mon(this.view, n.widgetButtonClick, this.onWidgetButtonClick, this), this.mon(this.view, n.editModeDidAcitvate, this.onCardGoesInEdit, this)
            },
            onEntryTypeSelected: function() {
                this.unlockCard(), this.view.isInEditing() && this.view.displayMode(), this.callParent(arguments), this.loadFields(this.entryType.get("id")), this.widgetControllerManager && this.widgetControllerManager.removeAll()
            },
            onCardSelected: function(e) {
                var i = this;
                if (this.unlockCard(), this.callParent(arguments), this.view.isInEditing() && this.view.displayMode(), this.view.reset(), this.entryType && this.card) {
                    Ext.defer(t, 1, this, [e]), this.loadFields(this.card.get("IdClass"), function() {
                        i.loadCard(!0)
                    }), Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(e) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                        moduleId: "class",
                        entryType: {
                            description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                            id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                            object: _CMCardModuleState.entryType
                        },
                        item: {
                            description: e.get("Description") || e.raw.Description || e.get("Code") || e.raw.Code,
                            id: e.get("Id"),
                            object: e
                        }
                    })
                }
            },
            onModifyCardClick: function() {
                if (this.isEditable(this.card)) {
                    var t = this;
                    this.lockCard(function() {
                        t.loadCard(!0, null, function() {
                            t.view.editMode()
                        })
                    })
                }
                this.callParent(arguments)
            },
            onSaveCardClick: function() {
                var t = {};
                t[CMDBuild.core.constants.Proxy.CARD_ID] = this.cloneCard ? -1 : this.card.get("Id"), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.card.get("IdClass")),
                    function(t, e) {
                        for (var i in t.cardDataProviders)
                            if ("function" == typeof(i = t.cardDataProviders[i]).getCardData) {
                                var n = i.getCardData(e);
                                n && (e[i.getCardDataName()] = n)
                            }
                    }(this, t),
                    function(t) {
                        var e = t.view.getForm(),
                            i = CMDBuild.controller.management.classes.StaticsController.getInvalidAttributeAsHTML(e); {
                            if (null != i) {
                                var n = Ext.String.format('<p class="{0}">{1}</p>', CMDBuild.core.constants.Global.getErrorMsgCss(), CMDBuild.Translation.errors.invalid_attributes);
                                return CMDBuild.core.Message.error(null, n + i, !1), !1
                            }
                            return !0
                        }
                    }(this) && this.doFormSubmit(t)
            },
            doFormSubmit: function(t) {
                CMDBuild.proxy.Card.update({
                    params: Ext.Object.merge(t, this.view.getForm().getValues()),
                    scope: this,
                    success: function(t, e, i) {
                        var n = {};
                        n.result = i, n.params = e.params, this.onSaveSuccess(this.view.getForm(), n)
                    }
                })
            },
            onSaveSuccess: function(t, e) {
                this.view.displayMode();
                var i = {
                    Id: e.result[CMDBuild.core.constants.Proxy.ID] || this.card.get("Id"),
                    IdClass: this.entryType.get(CMDBuild.core.constants.Proxy.ID)
                };
                this.fireEvent(this.CMEVENTS.cardSaved, i)
            },
            onAbortCardClick: function() {
                this.card && -1 == this.card.get("Id") ? _CMCardModuleState.setCard(_CMCardModuleState.getPreviousCard()) : this.onCardSelected(this.card), this.callParent(arguments), this.fireEvent(this.CMEVENTS.abortedModify)
            },
            onAddCardButtonClick: function(t) {
                t && (_CMCardModuleState.setPreviousCard(_CMCardModuleState.card), this.onCardSelected(new CMDBuild.DummyModel({
                    IdClass: t,
                    Id: -1
                })), this.view.editMode())
            },
            addCardDataProviders: function(t) {
                this.cardDataProviders.push(t)
            },
            loadFields: function(t, e) {
                var i = this;
                _CMCache.getAttributeList(t, function(t) {
                    i.view.fillForm(t, editMode = !1), e && e()
                })
            },
            loadCard: function(t, e, i) {
                var n, a = this;
                if ((n = e ? e.Id || e.cardId : a.card.get("Id")) && "-1" != n && (t || a.view.hasDomainAttributes())) {
                    if (!e)(e = {})[CMDBuild.core.constants.Proxy.CARD_ID] = a.card.get("Id"), e[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(a.card.get("IdClass"));
                    CMDBuild.proxy.Card.read({
                        params: e,
                        loadMask: !1,
                        success: function(t, e, n) {
                            var o = n.card;
                            a.card && (o = Ext.Object.merge(a.card.raw || a.card.data, o)),
                                function(t, e) {
                                    var i = t;
                                    if (i)
                                        for (var n in i) {
                                            var a = i[n];
                                            for (var o in a) e["_" + n + "_" + o] = a[o]
                                        }
                                }(n.referenceAttributes, o);
                            var r = Ext.create("CMDBuild.DummyModel", o);
                            "function" == typeof i ? i(r) : a.loadCardStandardCallBack(r)
                        }
                    })
                } else a.loadCardStandardCallBack(a.card)
            },
            loadCardStandardCallBack: function(t) {
                var e = this;
                e.view.loadCard(t), t && (e.isEditable(t) ? -1 == t.get("Id") || e.cmForceEditing ? (e.view.editMode(), e.cmForceEditing = !1) : e.view.displayMode(enableTBar = !0) : e.view.displayModeForNotEditableCard())
            },
            isEditable: function(t) {
                return _CMUtils.getEntryTypePrivilegesByCard(t).create
            },
            setWidgetManager: function(t) {
                this.widgetManager = t
            },
            onWidgetButtonClick: function(t) {
                this.widgetControllerManager && this.widgetControllerManager.onWidgetButtonClick(t)
            },
            onCardGoesInEdit: function() {
                this.widgetControllerManager && this.widgetControllerManager.onCardGoesInEdit()
            },
            lockCard: function(t) {
                CMDBuild.configuration.instance.get("enableCardLock") ? this.card && this.card.get("Id") >= 0 && CMDBuild.proxy.Card.lock({
                    params: {
                        id: this.card.get("Id")
                    },
                    loadMask: !1,
                    success: t
                }) : t()
            },
            unlockCard: function() {
                CMDBuild.configuration.instance.get("enableCardLock") && this.card && this.view.isInEditing() && this.card.get("Id") >= 0 && CMDBuild.proxy.Card.unlock({
                    params: {
                        id: this.card.get("Id")
                    },
                    loadMask: !1
                })
            },
            onCloneCard: Ext.emptyFn,
            ensureEditPanel: function() {
                this.view.ensureEditPanel()
            }
        }), Ext.define("CMDBuild.controller.management.classes.CMCardDataProvider", {
            cardDataName: null,
            getCardDataName: function() {
                return this.cardDataName
            },
            getCardData: function() {
                throw "You have to implement the getCardData method in " + this.$className
            }
        })
    }(),
    function() {
        function t(t, e) {
            var i = Ext.create("CMDBuild.view.management.common.CMCardWindow", {
                cmEditMode: e,
                withButtons: e,
                title: t.get(CMDBuild.core.constants.Proxy.LABEL) + " - " + t.get("dst_desc")
            });
            e && i.on("destroy", function() {
                this.fireEvent(this.CMEVENTS.serverOperationSuccess), this.loadData()
            }, this, {
                single: !0
            }), new CMDBuild.controller.management.common.CMCardWindowController(i, {
                entryType: t.get("dst_cid"),
                card: t.get("dst_id"),
                cmEditMode: e
            }), i.show()
        }

        function e(t, e, i, n, a, o) {
            var r = a.target.className;
            this.callBacks[r] && this.callBacks[r].call(this, e)
        }

        function i(t, e, i, n, a, o) {
            this.onFollowRelationClick(e)
        }

        function n(t) {
            var e = {};
            return "_1" == t ? (e.slaveSide = "_2", e.masterSide = "_1") : (e.slaveSide = "_1", e.masterSide = "_2"), e
        }
        Ext.define("CMDBuild.controller.management.classes.CMCardRelationsController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            uses: ["CMDBuild.core.Message", "CMDBuild.proxy.Relation"],
            controllerWindowAttachment: void 0,
            constructor: function(t, n) {
                this.mixins.observable.constructor.call(this, arguments), this.callParent(arguments), this.callBacks = {
                    "action-relation-go": this.onFollowRelationClick,
                    "action-relation-edit": this.onEditRelationClick,
                    "action-relation-delete": this.onDeleteRelationClick,
                    "action-relation-editcard": this.onEditCardClick,
                    "action-relation-viewcard": this.onViewCardClick,
                    "action-relation-attach": this.onOpenAttachmentClick
                }, this.view.getStore().getRootNode().on("append", function(t, e, i, n) {
                    1 == e.getDepth() && e.on("expand", this.onDomainNodeExpand, this, {
                        single: !0
                    })
                }, this), this.mon(this.view, this.view.CMEVENTS.openGraphClick, this.onShowGraphClick, this), this.mon(this.view, this.view.CMEVENTS.addButtonClick, this.onAddRelationButtonClick, this), this.mon(this.view, "beforeitemclick", e, this), this.mon(this.view, "itemdblclick", i, this), this.mon(this.view, "activate", this.loadData, this), this.CMEVENTS = {
                    serverOperationSuccess: "cm-server-success"
                }, this.addEvents(this.CMEVENTS.serverOperationSuccess), this.controllerWindowAttachment = Ext.create("CMDBuild.controller.management.classes.common.attachment.Window", {
                    parentDelegate: this
                })
            },
            onDomainNodeExpand: function(t, e, i, n) {
                if (t.get("relations_size") > CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.RELATION_LIMIT)) {
                    t.removeAll();
                    var a = {};
                    a[CMDBuild.core.constants.Proxy.CARD_ID] = this.getCardId(), a[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.getClassId()), a[CMDBuild.core.constants.Proxy.DOMAIN_ID] = t.get("dom_id"), a[CMDBuild.core.constants.Proxy.SRC] = t.get("src"), this.view.setLoading(!0), CMDBuild.proxy.Relation.readAll({
                        params: a,
                        scope: this,
                        success: function(e, i, n) {
                            this.view.setLoading(!1), this.view.suspendLayouts(), this.view.convertRelationInNodes(n.domains[0].relations, t.data.dom_id, t.data.src, t.data, t), this.view.resumeLayouts(!0)
                        }
                    })
                }
            },
            onEntryTypeSelected: function(t) {
                this.callParent(arguments), this.card = null, (Ext.isEmpty(this.entryType) || "simpletable" == this.entryType.get(CMDBuild.core.constants.Proxy.TABLE_TYPE)) && (this.entryType = null), this.view.disable(), this.view.clearStore()
            },
            onCardSelected: function(t) {
                this.callParent(arguments), this.view.clearStore(), this.view.disable(), Ext.isEmpty(t) || Ext.isEmpty(this.entryType) || (this.updateCurrentClass(t), this.loadData(), this.view.enable())
            },
            updateCurrentClass: function(t) {
                var e = t.get("IdClass"),
                    i = _CMCache.getEntryTypeById(e);
                this.currentClass != i && (i && "simpletable" != i.get(CMDBuild.core.constants.Proxy.TABLE_TYPE) || (i = null), this.currentClass = i, !Ext.isEmpty(i) && Ext.isFunction(i.get) && this.view.addRelationButton.onEntryTypeSelect(i.get(CMDBuild.core.constants.Proxy.NAME)))
            },
            loadData: function() {
                if (null != this.card && (n = this.view).ownerCt.layout.getActiveItem().id == n.id) {
                    var t = this,
                        e = this.view.getEl();
                    e && e.mask();
                    var i = {};
                    i[CMDBuild.core.constants.Proxy.CARD_ID] = this.getCardId(), i[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.getClassId()), i.domainlimit = CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.RELATION_LIMIT), CMDBuild.proxy.Relation.readAll({
                        params: i,
                        scope: this,
                        success: function(i, n, a) {
                            e.unmask(), this.view.fillWithData(a.domains);
                            var o = [];
                            Ext.Array.forEach(a.domains, function(t, e, i) {
                                var n = _CMCache.getDomainById(t[CMDBuild.core.constants.Proxy.ID]);
                                1 == t[CMDBuild.core.constants.Proxy.RELATIONS_SIZE] && !Ext.isEmpty(n) && Ext.isFunction(n.get) && ("N:1" == n.get(CMDBuild.core.constants.Proxy.CARDINALITY) && "_1" == t[CMDBuild.core.constants.Proxy.SRC] || "1:N" == n.get(CMDBuild.core.constants.Proxy.CARDINALITY) && "_2" == t[CMDBuild.core.constants.Proxy.SRC] || "1:1" == n.get(CMDBuild.core.constants.Proxy.CARDINALITY)) && o.push(n.get(CMDBuild.core.constants.Proxy.ID))
                            }, this), Ext.Array.forEach(this.view.addRelationButton.menu.items.items, function(e, i, n) {
                                Ext.Array.contains(o, e.domain.dom_id) ? e.setHandler(function() {
                                    CMDBuild.core.Message.error(CMDBuild.Translation.common.failure, CMDBuild.Translation.errors.domainCardinalityViolation, !1)
                                }) : e.setHandler(function(e, i) {
                                    t.view.addRelationButton.fireEvent("cmClick", e.domain)
                                })
                            }, this)
                        }
                    })
                }
                var n
            },
            getCardId: function() {
                return this.card.get("Id")
            },
            getClassId: function() {
                return this.card.get("IdClass")
            },
            onFollowRelationClick: function(t) {
                t.getDepth() > 1 && CMDBuild.global.controller.MainViewport.cmfg("mainViewportCardSelect", {
                    Id: String(t.get("dst_id")),
                    IdClass: String(t.get("dst_cid"))
                })
            },
            onAddRelationButtonClick: function(t) {
                var e = this,
                    i = n(t.src),
                    a = _CMCache.getDomainById(t.dom_id),
                    o = _CMCache.getEntryTypeById(t.dst_cid),
                    r = !1,
                    s = "_1" == t[CMDBuild.core.constants.Proxy.SRC] ? "_2" : "_1";
                a && (r = a.isMany(s));
                var l = Ext.create("CMDBuild.view.management.classes.relations.CMEditRelationWindow", {
                    domain: a,
                    classObject: o,
                    sourceCard: this.card,
                    src: t[CMDBuild.core.constants.Proxy.SRC],
                    relation: {
                        dst_cid: t.dst_cid,
                        dom_id: t.dom_id,
                        rel_id: -1,
                        masterSide: i.masterSide,
                        slaveSide: i.slaveSide
                    },
                    selModel: Ext.create("CMDBuild.selection.CMMultiPageSelectionModel", {
                        mode: r ? "MULTI" : "SINGLE",
                        avoidCheckerHeader: !0,
                        idProperty: "Id"
                    }),
                    successCb: function() {
                        e.onAddRelationSuccess()
                    }
                });
                this.mon(l, "destroy", function() {
                    this.loadData()
                }, this, {
                    single: !0
                }), l.show({
                    callback: function() {
                        l.grid.getStore().loadPage(1, {
                            callback: function(t, i, n) {
                                if (l.setLoading(!0), "N:N" != a.get(CMDBuild.core.constants.Proxy.CARDINALITY)) {
                                    var r = [];
                                    l.grid.getStore().each(function(t) {
                                        r.push(t.get(CMDBuild.core.constants.Proxy.ID))
                                    });
                                    var d = {};
                                    d[CMDBuild.core.constants.Proxy.DOMAIN_NAME] = a.get(CMDBuild.core.constants.Proxy.NAME), d[CMDBuild.core.constants.Proxy.CLASS_NAME] = o.get(CMDBuild.core.constants.Proxy.NAME), d[CMDBuild.core.constants.Proxy.CARDS] = Ext.encode(r), d[CMDBuild.core.constants.Proxy.DOMAIN_DIRECTION] = s, CMDBuild.proxy.Relation.getAlreadyRelatedCards({
                                        params: d,
                                        loadMask: !1,
                                        scope: this,
                                        success: function(t, i, n) {
                                            if (n = n[CMDBuild.core.constants.Proxy.RESPONSE], Ext.isArray(n)) {
                                                var r = [];
                                                if (Ext.Array.forEach(n, function(t, e, i) {
                                                        if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) {
                                                            var n = t[CMDBuild.core.constants.Proxy.ID];
                                                            Ext.isNumber(n) && !Ext.isEmpty(n) && r.push(n)
                                                        }
                                                    }, this), Ext.isArray(r) && !Ext.isEmpty(r)) {
                                                    var d = {};
                                                    d[CMDBuild.core.constants.Proxy.ATTRIBUTES] = Ext.encode(["Description"]), d[CMDBuild.core.constants.Proxy.CLASS_NAME] = o.get(CMDBuild.core.constants.Proxy.NAME), d[CMDBuild.core.constants.Proxy.FILTER] = Ext.encode({
                                                        attribute: {
                                                            simple: {
                                                                attribute: "Id",
                                                                operator: "in",
                                                                value: r,
                                                                parameterType: "fixed"
                                                            }
                                                        },
                                                        relation: [{
                                                            destination: _CMCache.getEntryTypeNameById(e.getClassId()),
                                                            direction: s,
                                                            domain: a.get(CMDBuild.core.constants.Proxy.NAME),
                                                            source: o.get(CMDBuild.core.constants.Proxy.NAME),
                                                            type: "any"
                                                        }]
                                                    }), CMDBuild.proxy.Relation.getCards({
                                                        params: d,
                                                        loadMask: !1,
                                                        scope: this,
                                                        success: function(t, e, i) {
                                                            if (i = i[CMDBuild.core.constants.Proxy.ROWS], Ext.isArray(i) && !Ext.isEmpty(i)) {
                                                                var n = [];
                                                                Ext.Array.forEach(i, function(t, e, i) {
                                                                    if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) {
                                                                        var a = t.Id;
                                                                        Ext.isNumber(a) && !Ext.isEmpty(a) && n.push(a)
                                                                    }
                                                                }, this), l.grid.getView().getRowClass = function(t, e, i, a) {
                                                                    return Ext.Array.contains(n, t.get("Id")) ? "grid-row-disabled" : null
                                                                }, l.grid.getView().refresh(), l.grid.getSelectionModel().addListener("beforeselect", function(t, e, i, a) {
                                                                    return !Ext.Array.contains(n, e.get("Id"))
                                                                })
                                                            }
                                                        }
                                                    })
                                                }
                                            } else _error("onAddRelationButtonClick(): unmanaged response", e, decodedResult);
                                            l.setLoading(!1)
                                        }
                                    })
                                } else {
                                    var c = {};
                                    c[CMDBuild.core.constants.Proxy.CARD_ID] = e.getCardId(), c[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(e.getClassId()), CMDBuild.proxy.Relation.readAll({
                                        params: c,
                                        loadMask: !1,
                                        scope: this,
                                        success: function(t, e, i) {
                                            if (i = i[CMDBuild.core.constants.Proxy.DOMAINS], Ext.isArray(i) && !Ext.isEmpty(i)) {
                                                var n = [],
                                                    o = a.get(CMDBuild.core.constants.Proxy.ID),
                                                    r = Ext.Array.findBy(i, function(t, e) {
                                                        return !(!Ext.isObject(t) || Ext.Object.isEmpty(t)) && t[CMDBuild.core.constants.Proxy.ID] == o
                                                    }, this);
                                                Ext.isObject(r) && !Ext.Object.isEmpty(r) && (Ext.Array.forEach(r[CMDBuild.core.constants.Proxy.RELATIONS], function(t, e, i) {
                                                    Ext.isObject(t) && !Ext.Object.isEmpty(t) && Ext.isNumber(t.dst_id) && !Ext.isEmpty(t.dst_id) && n.push(t.dst_id)
                                                }, this), l.grid.getView().getRowClass = function(t, e, i, a) {
                                                    return Ext.Array.contains(n, t.get("Id")) ? "grid-row-disabled" : null
                                                }, l.grid.getView().refresh(), l.grid.getSelectionModel().addListener("beforeselect", function(t, e, i, a) {
                                                    return !Ext.Array.contains(n, e.get("Id"))
                                                }))
                                            }
                                            l.setLoading(!1)
                                        }
                                    })
                                }
                            }
                        })
                    }
                })
            },
            onAddRelationSuccess: function() {
                this.defaultOperationSuccess()
            },
            onEditRelationClick: function(t) {
                var e = this,
                    i = t.raw || t.getData(),
                    a = _CMCache.getEntryTypeById(t.get("dst_cid")),
                    o = _CMCache.getDomainById(t.get("dom_id")),
                    r = n(t.get(CMDBuild.core.constants.Proxy.SRC)),
                    s = Ext.create("CMDBuild.view.management.classes.relations.CMEditRelationWindow", {
                        domain: o,
                        classObject: a,
                        sourceCard: this.card,
                        relation: {
                            rel_attr: i.attr_as_obj,
                            dst_cid: t.get("dst_cid"),
                            dst_id: t.get("dst_id"),
                            dom_id: t.get("dom_id"),
                            rel_id: t.get("rel_id"),
                            masterSide: r.masterSide,
                            slaveSide: r.slaveSide
                        },
                        filterType: this.view.id,
                        successCb: function() {
                            e.onEditRelationSuccess()
                        },
                        selModel: Ext.create("CMDBuild.selection.CMMultiPageSelectionModel", {
                            mode: "SINGLE",
                            idProperty: "Id"
                        })
                    });
                this.mon(s, "destroy", function() {
                    this.loadData()
                }, this, {
                    single: !0
                }), s.show({
                    scope: this,
                    callback: function() {
                        t.set({
                            Code: t.get("dst_code"),
                            Description: t.get("dst_desc"),
                            Id: t.get("dst_id"),
                            id: t.get("dst_id"),
                            IdClass: t.get("dst_cid")
                        }), s.grid.getStore().loadPage(1, {
                            callback: function(e, i, n) {
                                Ext.isEmpty(t) || s.grid.getSelectionModel().select(t)
                            }
                        })
                    }
                })
            },
            onEditRelationSuccess: function() {
                this.defaultOperationSuccess()
            },
            onDeleteRelationClick: function(t) {
                var e = this,
                    i = n(t.get(CMDBuild.core.constants.Proxy.SOURCE));
                Ext.Msg.confirm(CMDBuild.Translation.attention, CMDBuild.Translation.management.modcard.delete_relation_confirm, function(n) {
                    if ("yes" == n) {
                        var a = _CMCache.getDomainById(t.get("dom_id")),
                            o = {},
                            r = {};
                        o[CMDBuild.core.constants.Proxy.DOMAIN_NAME] = a.getName(), o[CMDBuild.core.constants.Proxy.RELATION_ID] = t.get("rel_id"), o.master = i.masterSide;
                        var s = {};
                        s[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(e.card.get("IdClass")), s[CMDBuild.core.constants.Proxy.CARD_ID] = e.card.get("Id"), r[i.masterSide] = [s];
                        var l = {};
                        l[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(t.get("dst_cid")), l[CMDBuild.core.constants.Proxy.CARD_ID] = t.get("dst_id"), r[i.slaveSide] = [l], o[CMDBuild.core.constants.Proxy.ATTRIBUTES] = Ext.encode(r), CMDBuild.core.LoadMask.show(), CMDBuild.proxy.Relation.remove({
                            params: o,
                            loadMask: !1,
                            scope: this,
                            success: this.onDeleteRelationSuccess,
                            callback: function() {
                                CMDBuild.core.LoadMask.hide(), this.loadData()
                            }
                        })
                    }
                }, this)
            },
            onDeleteRelationSuccess: function() {
                this.defaultOperationSuccess()
            },
            defaultOperationSuccess: function() {
                this.fireEvent(this.CMEVENTS.serverOperationSuccess)
            },
            onEditCardClick: function(e) {
                t.call(this, e, !0)
            },
            onViewCardClick: function(e) {
                t.call(this, e, !1)
            },
            onOpenAttachmentClick: function(t) {
                if (!Ext.isObject(t) || Ext.Object.isEmpty(t)) return _error("onOpenAttachmentClick(): unmanaged model parameter", this, t);
                this.controllerWindowAttachment.cmfg("panelModuleAttachmentWindowConfigureAndShow", {
                    entityId: t.get("dst_cid"),
                    id: t.get("dst_id")
                })
            }
        })
    }(),
    function() {
        var t = "detail",
            e = "foreignkey";

        function i(t, e, i, n, a, o) {
            CMDBuild.global.controller.MainViewport.cmfg("mainViewportCardSelect", {
                Id: e.get("Id"),
                IdClass: e.get("IdClass")
            })
        }

        function n() {
            if (null != this.card) {
                var i = {
                    masterCard: this.card
                };
                null != this.currentDetail ? (i.detail = this.currentDetail, this.view.updateGrid(t, i)) : null != this.currentForeignKey ? (i.detail = this.currentForeignKey, this.view.updateGrid(e, i)) : this.view.activateFirstTab()
            }
        }

        function a(e) {
            if (1 != this.view.buildingTabsDetails && this.currentTab !== e && o(this.view)) {
                var i = e.targetPanel,
                    a = i.detailType,
                    r = this.view.details[a][i.detailId];
                this.view.addDetailButton.enable(), this.currentTab = e, a == t ? function(t) {
                    this.currentForeignKey = void 0, this.currentDetail = t, this.view.selectDetail(t)
                }.call(this, r) : function(t) {
                    this.currentDetail = void 0, this.currentForeignKey = t, this.view.selectForeignKey(t)
                }.call(this, r), n.call(this)
            }
        }

        function o(t) {
            return t.ownerCt.layout.getActiveItem().id == t.id
        }

        function r(t, e, i, n, a, o) {
            var r = a.target.className;
            this.callBacks[r] && this.callBacks[r].call(this, e)
        }
        Ext.define("CMDBuild.controller.management.classes.masterDetails.CMMasterDetailsController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            uses: ["CMDBuild.proxy.Card"],
            controllerWindowAttachment: void 0,
            controllerWindowNote: void 0,
            constructor: function(t, e) {
                this.mixins.observable.constructor.call(this, arguments), this.callParent(arguments), this.view = t, this.superController = e, this.entryType = null, this.card = null, this.currentForeignKey = null, this.currentDetail = null, this.mon(this.view.tabs, "click", a, this), this.mon(this.view.detailGrid, "beforeitemclick", r, this), this.mon(this.view.detailGrid, "itemdblclick", i, this), this.mon(this.view.addDetailButton, "cmClick", this.onAddDetailButtonClick, this), this.addEvents(["empty"]), this.mon(this.view, "empty", function() {
                    this.fireEvent("empty", this.view.isVisible())
                }, this), this.callBacks = {
                    "action-masterdetail-edit": this.onEditDetailClick,
                    "action-masterdetail-show": this.onShowDetailClick,
                    "action-masterdetail-delete": this.onDeleteDetailClick,
                    "action-masterdetail-graph": this.onOpenGraphClick,
                    "action-masterdetail-note": this.onOpenNoteClick,
                    "action-masterdetail-attach": this.onOpenAttachmentClick
                }, this.controllerWindowAttachment = Ext.create("CMDBuild.controller.management.classes.common.attachment.Window", {
                    parentDelegate: this
                }), this.controllerWindowNote = Ext.create("CMDBuild.controller.management.classes.panel.form.tabs.masterDetail.window.Note", {
                    parentDelegate: this
                })
            },
            buildWindow: function(t) {
                return Ext.create("CMDBuild.view.management.common.CMCardWindow", {
                    referencedIdClass: this.card.get("IdClass"),
                    fkAttribute: this.currentForeignKey,
                    masterData: this.card,
                    detail: this.currentDetail,
                    cmEditMode: t.editable,
                    withButtons: t.editable
                })
            },
            onAddDetailButtonClick: function(t) {
                var e = this.buildWindow({
                    entryType: t.classId,
                    editable: !0
                });
                new CMDBuild.controller.management.common.CMAddDetailWindowController(e, {
                    entryType: t.classId,
                    cmEditMode: !0
                }), e.show(), e.mon(e, "destroy", function() {
                    this.view.reload()
                }, this, {
                    single: !0
                })
            },
            onEntryTypeSelected: function(t) {
                this.callParent(arguments), this.currentTab = null, this.currentForeignKey = null, this.currentDetail = null, this.view.loadDetailsAndFKThenBuildSideTabs(this.entryType.get("id")), this.view.resetDetailGrid()
            },
            onCardSelected: function(t) {
                this.callParent(arguments), this.view.setDisabled(this.view.empty), o(this.view) ? n.call(this) : this.view.on("activate", n, this, {
                    single: !0
                })
            },
            onAddCardButtonClick: function(t) {
                this.view.disable()
            },
            onEditDetailClick: function(t) {
                var e = this.buildWindow({
                    editable: !0
                });
                new CMDBuild.controller.management.common.CMDetailWindowController(e, {
                    entryType: t.get("IdClass"),
                    card: t.get("Id"),
                    cmEditMode: !0
                });
                e.mon(e, "destroy", function() {
                    this.view.reload(), 0, delete e
                }, this, {
                    single: !0
                }), e.show()
            },
            onShowDetailClick: function(t) {
                var e = this.buildWindow({
                    editable: !1
                });
                new CMDBuild.controller.management.common.CMDetailWindowController(e, {
                    entryType: t.get("IdClass"),
                    card: t.get("Id"),
                    cmEditMode: !1
                });
                e.mon(e, "destroy", function() {
                    0, delete e
                }, this, {
                    single: !0
                }), e.show()
            },
            onDeleteDetailClick: function(t) {
                Ext.Msg.confirm(CMDBuild.Translation.attention, CMDBuild.Translation.management.modcard.delete_card_confirm, function(t) {
                    if ("yes" != t) return;
                    var a = {};
                    this.currentDetail && (a.domainName = e.currentDetail.get("name"));
                    a.masterClassName = _CMCache.getEntryTypeNameById(n.get("IdClass")), a.masterCardId = n.get("Id"), a.detailClassName = _CMCache.getEntryTypeNameById(i.get("IdClass")), a.detailCardId = i.get("Id"), CMDBuild.core.LoadMask.show(), CMDBuild.proxy.Relation.removeDetail({
                        params: a,
                        loadMask: !1,
                        callback: function() {
                            CMDBuild.core.LoadMask.hide(), e.view.reload()
                        }
                    })
                }, this);
                var e = this,
                    i = t,
                    n = this.card
            },
            onOpenGraphClick: function(t) {
                Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.graph.Window", {
                    parentDelegate: this,
                    classId: t.get("IdClass"),
                    cardId: t.get("id")
                })
            },
            onOpenNoteClick: function(t) {
                this.controllerWindowNote.cmfg("classesFormTabMasterDetailWindowNoteConfigureAndShow", {
                    cardId: t.get(CMDBuild.core.constants.Proxy.ID),
                    className: _CMCache.getEntryTypeNameById(t.get("IdClass"))
                })
            },
            onOpenAttachmentClick: function(t) {
                if (!Ext.isObject(t) || Ext.Object.isEmpty(t)) return _error("onOpenAttachmentClick(): unmanaged model parameter", this, t);
                this.controllerWindowAttachment.cmfg("panelModuleAttachmentWindowConfigureAndShow", {
                    entityId: t.get("IdClass"),
                    id: t.get("Id")
                })
            },
            onTabClick: a,
            activeTabSet: function(t) {
                return this.view.tabs.setActiveTab(t)
            }
        })
    }(),
    function() {
        function t(t) {
            return _CMUtils.getEntryTypePrivilegesByCard(t).write
        }
        Ext.define("CMDBuild.controller.management.classes.CMNoteController", {
            extend: "CMDBuild.controller.management.classes.CMModCardSubController",
            uses: ["CMDBuild.proxy.Card", "CMDBuild.proxy.management.classes.tabs.Note"],
            constructor: function(t, e) {
                this.mixins.observable.constructor.call(this, arguments), this.callParent(arguments), this.CMEVENTS = {
                    noteWasSaved: "cm-note-saved"
                }, this.mon(this.view, this.view.CMEVENTS.modifyNoteButtonClick, this.onModifyNoteClick, this), this.mon(this.view, this.view.CMEVENTS.saveNoteButtonClick, this.onSaveNoteClick, this), this.mon(this.view, this.view.CMEVENTS.cancelNoteButtonClick, this.onCancelNoteClick, this), this.addEvents(this.addEvents.noteWasSaved)
            },
            onEntryTypeSelected: function() {
                this.unlockCard(), this.callParent(arguments), this.view.disable()
            },
            onCardSelected: function(t) {
                this.unlockCard(), this.callParent(arguments), this.updateView(t), this.disableTheTabBeforeCardSelection(t) ? this.view.disable() : (this.view.enable(), this.view.loadCard(t))
            },
            disableTheTabBeforeCardSelection: function(t) {
                return !t || CMDBuild.Utils.isSimpleTable(t.get("IdClass"))
            },
            updateView: function(t) {
                this.updateViewPrivilegesForCard(t), this.view.reset(), this.view.disableModify()
            },
            updateViewPrivilegesForCard: function(t) {
                var e = _CMUtils.getEntryTypePrivilegesByCard(t);
                this.view.updateWritePrivileges(e.write && !e.crudDisabled.modify)
            },
            onSaveNoteClick: function() {
                var t = this._getSaveParams();
                this.view.getForm().isValid() && this.beforeSave(this.card) && CMDBuild.proxy.management.classes.tabs.Note.update({
                    params: t,
                    scope: this,
                    success: function(t, e, i) {
                        this.view.disableModify(enableToolbar = !0);
                        var n = this.view.syncForms();
                        this.syncSavedNoteWithModel(this.card, n), this.fireEvent(this.CMEVENTS.noteWasSaved, this.card)
                    }
                })
            },
            onCancelNoteClick: function() {
                this.onCardSelected(this.card), this.view.disableModify(couldModify = t(this.card))
            },
            onModifyNoteClick: function() {
                if (t(this.card)) {
                    var e = this;
                    this.lockCard(function() {
                        e.view.enableModify()
                    })
                }
            },
            beforeSave: function(t) {
                return !0
            },
            _getSaveParams: function() {
                var t = {};
                return t.Notes = this.view.getForm().getValues().Notes, this.card && (t[CMDBuild.core.constants.Proxy.CARD_ID] = this.card.get("Id"), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.card.get("IdClass"))), t
            },
            syncSavedNoteWithModel: function(t, e) {
                t.set("Notes", e), t.commit(), t.raw && (t.raw.Notes = e)
            },
            lockCard: function(t) {
                if (CMDBuild.configuration.instance.get("enableCardLock")) {
                    if (this.card) {
                        var e = this.card.get("Id");
                        CMDBuild.proxy.Card.lock({
                            params: {
                                id: e
                            },
                            loadMask: !1,
                            success: t
                        })
                    }
                } else t()
            },
            unlockCard: function() {
                if (CMDBuild.configuration.instance.get("enableCardLock") && this.card && this.view.isInEditing()) {
                    var t = this.card.get("Id");
                    CMDBuild.proxy.Card.unlock({
                        params: {
                            id: t
                        },
                        loadMask: !1
                    })
                }
            }
        })
    }(), Ext.define("CMDBuild.view.management.map.CMMapPanelDelegate", {
        onLayerAdded: Ext.emptyFn,
        onLayerRemoved: Ext.emptyFn,
        onLayerChanged: Ext.emptyFn,
        onMapPanelVisibilityChanged: Ext.emptyFn
    }), Ext.define("CMDBuild.view.management.classes.map.CMMapPanel", {
        alternateClassName: "CMDBuild.Management.MapPanel",
        extend: "Ext.panel.Panel",
        uses: ["CMDBuild.controller.management.classes.map.CardGrid", "CMDBuild.controller.management.classes.map.LayerTree", "CMDBuild.view.management.classes.map.navigationTree.ViewTree", "CMDBuild.controller.management.classes.map.thematism.ThematismMainWindow", "CMDBuild.view.management.classes.map.thematism.ThematicDocument", "CMDBuild.view.management.classes.map.thematism.ThematicStrategiesManager", "CMDBuild.view.management.classes.map.geoextension.CMDBuildGeoExt", "CMDBuild.view.management.classes.map.thematism.ThematicColors"],
        mixins: {
            delegable: "CMDBuild.core.CMDelegable"
        },
        lon: void 0,
        lat: void 0,
        initialZoomLevel: void 0,
        layout: "border",
        thematismButton: void 0,
        printMapButton: void 0,
        searchMapButton: void 0,
        interactionDocument: void 0,
        geoExtension: void 0,
        constructor: function() {
            this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.map.CMMapPanelDelegate"), this.callParent(arguments), this.hideMode = "offsets", this.cmAlreadyDisplayed = !1, this.cmVisible = !1
        },
        initComponent: function() {
            if (CMDBuild.gis.values.browserEnabled) {
                this.geoExtension = Ext.create("CMDBuild.view.management.classes.map.geoextension.CMDBuildGeoExt");
                var t = Ext.create("CMDBuild.view.management.classes.map.thematism.ThematicDocument"),
                    e = Ext.create("CMDBuild.view.management.classes.map.thematism.ThematicStrategiesManager");
                t.configureStrategiesManager(e), t.setThematismButton(this.thematismButton), this.interactionDocument = Ext.create("CMDBuild.view.management.classes.map.geoextension.InteractionDocument"), this.geoExtension.interactionDocument = this.interactionDocument, this.thematismButton.interactionDocument = this.interactionDocument;
                var i = Ext.create("CMDBuild.view.management.classes.map.thematism.ThematicColors");
                t.init(this.interactionDocument, i), this.interactionDocument.setThematicDocument(t), this.thematicView = Ext.create("CMDBuild.controller.management.classes.map.thematism.ThematismMainWindow", {
                    interactionDocument: this.interactionDocument
                }), this.mapPanel = Ext.create("CMDBuild.Management.CMMap", {
                    geoExtension: this.geoExtension,
                    interactionDocument: this.interactionDocument,
                    thematicView: this.thematicView
                });
                var n = [];
                if (CMDBuild.configuration.gis.get("cardBrowserByDomainConfiguration").root) {
                    var a = CMDBuild.configuration.gis.get("cardBrowserByDomainConfiguration").root;
                    this.interactionDocument.setStarted(!1), this.cardBrowser = new CMDBuild.view.management.classes.map.navigationTree.ViewTree({
                        title: CMDBuild.Translation.management.modcard.gis.gisNavigation,
                        frame: !1,
                        border: !1,
                        rootText: a.classDescription || a.className,
                        interactionDocument: this.interactionDocument
                    }), this.interactionDocument.setNavigationTree(this.cardBrowser), n.push(this.cardBrowser)
                }
                this.editingWindow = new CMDBuild.view.management.map.CMMapEditingToolsWindow({
                    owner: this,
                    interactionDocument: this.interactionDocument
                }), this.layerGridController = new CMDBuild.controller.management.classes.map.LayerTree({
                    title: CMDBuild.Translation.administration.modClass.layers,
                    interactionDocument: this.interactionDocument
                }), n.push(this.layerGridController.getView()), this.cardGridController = new CMDBuild.controller.management.classes.map.CardGrid({
                    title: CMDBuild.Translation.management.modcard.title,
                    interactionDocument: this.interactionDocument,
                    parentDelegate: this.delegate,
                    mainGrid: this.mainGrid
                }), n.push(this.cardGridController.getView()), this.layout = "border", this.items = [this.mapPanel, {
                    xtype: "tabpanel",
                    region: "east",
                    cls: "cmdb-border-left",
                    width: "25%",
                    split: !0,
                    collapsible: !0,
                    collapseMode: "mini",
                    header: !1,
                    frame: !1,
                    border: !1,
                    plain: !0,
                    activeItem: 0,
                    padding: "2 0 0 0",
                    items: n
                }], this.callParent(arguments)
            } else this.callParent(arguments)
        },
        print: function(t, e) {
            this.geoExtension.print()
        },
        search: function(t, e) {
            this.geoExtension.search()
        },
        executeThematism: function(t, e) {
            var i = this.interactionDocument.getCurrentCard().className;
            switch (t) {
                case CMDBuild.gis.constants.thematic_commands.NEW:
                    this.thematicView.show();
                    break;
                case CMDBuild.gis.constants.thematic_commands.MODIFY:
                    var n = this.interactionDocument.getCurrentThematicLayer(i);
                    this.thematicView.show(n);
                    break;
                case CMDBuild.gis.constants.thematic_commands.HIDE_CURRENT:
                    this.interactionDocument.setCursorActive(!e.checked), this.interactionDocument.changed();
                    break;
                case CMDBuild.gis.constants.thematic_commands.HIDE_LEGEND:
                    var a = this.interactionDocument.getMapPanel();
                    e.checked ? a.legend.hide() : a.legend.show();
                    break;
                case CMDBuild.gis.constants.thematic_commands.CHANGE_LAYER:
                    this.interactionDocument.setCurrentThematicLayer(i, e.text), this.interactionDocument.changedThematicDocument()
            }
        },
        updateSize: function() {},
        getMap: function() {
            return this.mapPanel
        },
        setCmVisible: function(t) {
            this.cmVisible = t, this.callDelegates("onMapPanelVisibilityChanged", [this, t])
        },
        editMode: function() {
            this.editingWindow && this.editingWindow.show()
        },
        displayMode: function() {
            this.editingWindow && (this.editingWindow.closeAllEditings(), this.editingWindow.hide(), this.interactionDocument.setCurrentFeature("", "", "Select"), this.interactionDocument.changedFeature())
        },
        getGeoServerLayerByName: function() {
            this.mapPanel.getGeoServerLayerByName(name)
        },
        updateMap: function(t) {
            this.editingWindow.removeAllLayerBinding()
        },
        addLayerToEditingWindow: function(t) {
            this.editingWindow.addLayer(t)
        },
        getCardBrowserPanel: function() {
            return this.cardBrowser
        },
        getCardGridController: function() {
            return this.cardGridController
        }
    }),
    function() {
        var t = {
            POINT: "mapFeaturePoint",
            LINESTRING: "mapFeatureLine",
            POLYGON: "mapFeaturePolygon"
        };
        Ext.define("CMDBuild.view.management.map.CMMapEditingToolsWindowDelegate", {
            addFeatureButtonHasBeenToggled: Ext.emptyFn,
            removeFeatureButtonHasBeenClicked: Ext.emptyFn,
            geoAttributeMenuItemHasBeenClicked: Ext.emptyFn
        }), Ext.define("CMDBuild.view.management.map.CMMapEditingToolsWindow", {
            extend: "Ext.Window",
            editingControls: {},
            layers: {},
            translation: CMDBuild.Translation,
            mixins: {
                delegable: "CMDBuild.core.CMDelegable"
            },
            owner: {
                getPosition: function() {
                    return [0, 0]
                }
            },
            constructor: function() {
                this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.map.CMMapEditingToolsWindowDelegate"), this.callParent(arguments)
            },
            initComponent: function() {
                this.closable = !1, this.hideBorders = !0, this.resizable = !1, this.frame = !1, this.interactionDocument.observe(this), this.layout = {
                    type: "hbox",
                    padding: "2",
                    align: "stretch"
                }, this.geoAttrMenuButton = new Ext.Button({
                    text: this.translation.management.modcard.gis.geo_attributes,
                    menu: new Ext.menu.Menu({
                        items: []
                    })
                }), this.addButton = new Ext.Button({
                    text: this.translation.add,
                    creationControl: void 0,
                    iconCls: "add",
                    enableToggle: !1,
                    allowDepress: !0,
                    disabled: !0,
                    scope: this,
                    handler: function(t) {
                        this.callDelegates("addFeatureButtonHasBeenToggled"), t.disable()
                    }
                }), this.removeButton = new Ext.Button({
                    text: this.translation.remove,
                    iconCls: "delete",
                    scope: this,
                    disabled: !0,
                    handler: function() {
                        var t = this.geoAttrMenuButton.attributeName;
                        t && this.onRemoveMenuitemSelect.call(this, t), this.callDelegates("removeFeatureButtonHasBeenClicked"), this.interactionDocument.getMapPanel().clearSelections()
                    }
                }), this.callParent(arguments)
            },
            refresh: function(t, e) {
                var i = this.interactionDocument.getCurrentCard();
                if (i) {
                    var n = i.className,
                        a = i.cardId,
                        o = this;
                    this.interactionDocument.getAllLayers(function(t) {
                        o.refreshAllLayers(t, n, a)
                    }, this)
                }
            },
            refreshAllLayers: function(t, e, i) {
                if (i) {
                    this.removeAllLayerBinding();
                    for (var n = 0; n < t.length; n++) {
                        var a = t[n];
                        this.interactionDocument.isVisible(a, e, i) && !this.interactionDocument.isGeoServerLayer(a) && this.addLayer(a)
                    }
                }
            },
            onRender: function() {
                this.callParent(arguments), this.interactionDocument.setNoZoom(!0), this.add([this.geoAttrMenuButton, this.addButton, this.removeButton])
            },
            show: function() {
                if (this.geoAttrMenuButton.menu.items.length > 0) {
                    this.interactionDocument.setEditing(!0), this.callParent(arguments);
                    var t = this.geoAttrMenuButton.menu.items.first();
                    t && this.onAddMenuitemSelect.call(this, t)
                }
            },
            closeAllEditings: function() {
                if (this.interactionDocument.getEditing()) {
                    this.interactionDocument.setEditing(!1);
                    this.interactionDocument.getCurrentCard().className;
                    for (var t in this.layers) {
                        var e = this.interactionDocument.getGeoLayerByName(t);
                        if (e) {
                            var i = e.get("adapter");
                            i && i.closeAllEditings && i.closeAllEditings()
                        }
                    }
                }
            },
            addLayer: function(e) {
                if (e && !this.interactionDocument.isGeoServerLayer(e)) {
                    var i = this.interactionDocument.getCurrentCard().className;
                    this.layers[e.name] || e.masterTableName !== i || (this.layers[e.name] = this.geoAttrMenuButton.menu.add({
                        iconCls: t[e.type],
                        text: e.description,
                        geoType: e.type,
                        name: e.name,
                        scope: this,
                        handler: this.onAddMenuitemSelect,
                        layer: e
                    }))
                }
            },
            removeAllLayerBinding: function() {
                this.geoAttrMenuButton.menu.removeAll(!0), this.layers = {}
            },
            onRemoveMenuitemSelect: function(t) {
                var e = this.interactionDocument.getCurrentCard(),
                    i = this.interactionDocument.getMapPanel().getLayerByClassAndName(e.className, t),
                    n = this.searchFeature(i, t, e.cardId);
                i.getSource().removeFeature(n);
                var a = i.get("adapter");
                a.onRemovedFeature && a.onRemovedFeature(), a.setStatus("None"), this.removeButton.disable()
            },
            onAddMenuitemSelect: function(t) {
                this.geoAttrMenuButton.setText(t.text), this.geoAttrMenuButton.attributeName = t.name, this.geoAttrMenuButton.setIconCls(t.iconCls);
                var e = this.interactionDocument.getCurrentCard(),
                    i = this.interactionDocument.getMapPanel().getLayerByClassAndName(e.className, t.name),
                    n = !0,
                    a = null;
                if (i) {
                    var o = i.get("cmdbuildLayer"),
                        r = this.interactionDocument.getZoom();
                    n = r < o.minZoom || r > o.maxZoom, a = this.searchFeature(i, t.name, e.cardId)
                } - 1 == e.cardId && (a = null), n ? (this.removeButton.disable(), this.addButton.disable()) : null !== a ? (this.removeButton.enable(), this.addButton.disable()) : (this.removeButton.disable(), this.addButton.enable()), this.callDelegates("geoAttributeMenuItemHasBeenClicked", t)
            },
            searchFeature: function(t, e, i) {
                if (!t || !t.getSource()) return null;
                for (var n = t.getSource().getFeatures(), a = 0; a < n.length; a++)
                    if (n[a].get("master_card") == i) return n[a];
                return null
            }
        })
    }(),
    function() {
        function t(t) {
            var e = {};
            if (t) {
                var i = null;
                "CMDBuild.model.CMActivityInstance" == Ext.getClassName(t) ? i = _CMWFState.getProcessInstance() : "CMDBuild.model.CMProcessInstance" == Ext.getClassName(t) && (i = t), e = null != i ? Ext.apply({
                    Id: i.get("Id"),
                    IdClass: i.get("IdClass"),
                    IdClass_value: i.get("IdClass_value")
                }, i.getValues()) : t.raw || t.data
            }
            return _debug("Server vars", e), e
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMWidgetController", {
            uses: ["CMDBuild.core.constants.Proxy"],
            statics: {
                WIDGET_NAME: "",
                getTemplateResolverServerVars: t
            },
            card: void 0,
            clientForm: void 0,
            ownerController: void 0,
            templateResolver: void 0,
            view: void 0,
            widgetConf: void 0,
            constructor: function(t, e, i, n, a) {
                if ("object" != typeof t) throw "The view of a WidgetController must be an object";
                if ("object" != typeof i) throw "The widget configuration is mandatory";
                this.WIDGET_NAME = this.self.WIDGET_NAME, this.card = a, this.clientForm = n, this.ownerController = e, this.view = t, this.widgetConf = i, this.outputName = this.widgetConf.outputName
            },
            beforeActiveView: Ext.emptyFn,
            beforeHideView: Ext.emptyFn,
            destroy: Ext.emptyFn,
            getData: function() {
                return null
            },
            getLabel: function() {
                return this.widgetConf[CMDBuild.core.constants.Proxy.LABEL]
            },
            getVariable: function(t) {
                try {
                    return this.templateResolver.getVariable(t)
                } catch (t) {
                    return void _debug("There is no template resolver")
                }
            },
            getTemplateResolverServerVars: function() {
                return t(this.card)
            },
            getWidgetId: function() {
                return this.widgetConf[CMDBuild.core.constants.Proxy.ID]
            },
            isValid: function() {
                return !0
            },
            onBeforeSave: function(t) {
                Ext.isObject(t) && !Ext.Object.isEmpty(t) && Ext.isFunction(t.callback) ? Ext.callback(t.callback, Ext.isEmpty(t.scope) ? this : t.scope) : _error("[" + this.getLabel() + "] onBeforeSave invalid parameters", this)
            },
            onEditMode: Ext.emptyFn,
            toString: function() {
                return Ext.getClassName(this)
            }
        })
    }(),
    function() {
        function t(t) {
            if (t) {
                var e = t.split(" "),
                    i = e[0],
                    n = e[1] || "00:00:00";
                return Ext.Date.parse(i + " " + n, "d/m/Y H:i:s")
            }
            return new Date
        }

        function e(t) {
            return t.getDate() + "/" + (t.getMonth() + 1) + "/" + t.getFullYear()
        }

        function i(e, i) {
            var n = i || {};
            i || (n.className = e.reader.getEventClass(e.widgetConf), n.filter = Ext.encode({
                CQL: e.paginationQuery
            })), CMDBuild.proxy.management.widget.Calendar.readAll({
                params: n,
                loadMask: !1,
                success: function(i, n, a) {
                    e.view.clearStore();
                    for (var o = a.rows || [], r = 0, s = o.length; r < s; ++r) {
                        var l = {},
                            d = o[r],
                            c = Extensible.calendar.data.EventMappings;
                        l[c.EventId.name] = d[e.eventMapping.id], l[c.StartDate.name] = t(d[e.eventMapping.start]), l[c.Title.name] = d[e.eventMapping.title], e.eventMapping.end ? l[c.EndDate.name] = t(d[e.eventMapping.end]) : l[c.EndDate.name] = t(d[e.eventMapping.start]);
                        var u = new Extensible.calendar.data.EventModel(l);
                        u && e.view.addEvent(u)
                    }
                }
            })
        }

        function n(t, e, i) {
            var n = _CMCache.getEntryTypeByName(this.reader.getEventClass(this.widgetConf));
            if (n) {
                var a = new CMDBuild.view.management.common.CMCardWindow({
                    cmEditMode: !1,
                    withButtons: !1,
                    title: e.get("Title")
                });
                new CMDBuild.controller.management.common.CMCardWindowController(a, {
                    entryType: n.get("id"),
                    card: e.get("EventId"),
                    cmEditMode: !1
                }), a.show()
            }
        }

        function a() {
            this.filteredWithCQL || (this.updatePaginationQuery(), i(this))
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMCalendarController", {
            uses: ["CMDBuild.core.Message", "CMDBuild.proxy.management.widget.Calendar"],
            mixins: {
                observable: "Ext.util.Observable",
                widgetcontroller: "CMDBuild.controller.management.common.widgets.CMWidgetController"
            },
            constructor: function(t, e, i, n, a) {
                if (this.mixins.observable.constructor.call(this), this.mixins.widgetcontroller.constructor.apply(this, arguments), this.reader = new CMDBuild.controller.management.common.widgets.CMCalendarControllerWidgetReader, !this.reader.getStartDate(this.widgetConf) || !this.reader.getTitle(this.widgetConf)) return CMDBuild.core.Message.error(CMDBuild.Translation.common.failure, CMDBuild.Translation.warnings.calendarIsNotWellConfigured), void(this.skipLoading = !0);
                this.eventMapping = {
                    id: "Id",
                    start: this.reader.getStartDate(this.widgetConf),
                    end: this.reader.getEndDate(this.widgetConf),
                    title: this.reader.getTitle(this.widgetConf)
                }, this.templateResolver = new CMDBuild.Management.TemplateResolver({
                    clientForm: this.clientForm,
                    xaVars: this.widgetConf,
                    serverVars: this.getTemplateResolverServerVars()
                })
            },
            beforeActiveView: function() {
                if (this.view.clearStore(), function(e) {
                        var i = e.reader.getDefaultDate(e.widgetConf);
                        if (i) {
                            var n = e.templateResolver.getVariable("client:" + i),
                                a = t(n);
                            a && e.view.setStartDate(a)
                        }
                    }(this), !this.skipLoading) {
                    var e = this,
                        o = this.templateResolver.getVariable("xa:" + e.reader.getFilterVarName());
                    o ? (this.filteredWithCQL = !0, this.templateResolver.resolveTemplates({
                        attributes: [e.reader.getFilterVarName()],
                        scope: e.view,
                        callback: function(t, n) {
                            var a = e.templateResolver.buildCQLQueryParameters(o, n);
                            i(e, a)
                        }
                    })) : (this.filteredWithCQL = !1, e.updatePaginationQuery(), i(e)), this._alreadyOpene || (this.mon(this.view, "eventclick", n, this), this.mon(this.view, "viewchange", a, this), this._alreadyOpened = !0)
                }
            },
            updatePaginationQuery: function() {
                function t(t) {
                    return "'" + t + "'"
                }
                var i = this,
                    n = this.view.getWievBounds(),
                    a = i.reader.getEventClass(i.widgetConf),
                    o = i.eventMapping.start,
                    r = i.eventMapping.end,
                    s = e(n.viewStart),
                    l = e(n.viewEnd),
                    d = "SELECT " + i.eventMapping.id + "," + i.eventMapping.title + "," + o + ",";
                i.eventMapping.end ? (d += i.eventMapping.end, d += " FROM " + a + " WHERE " + o + " <= " + t(l) + " AND " + r + " >= " + t(s)) : d += " FROM " + a + " WHERE " + o + " >= " + t(s) + " AND " + o + " <= " + t(l) + '"', this.paginationQuery = d
            },
            destroy: function() {
                this.mun(this.view, "eventclick", n, this), this.mun(this.view, "viewchange", a, this)
            }
        })
    }(),
    function() {
        var t = "_domNode",
            e = "_nodeType";

        function i(t) {
            return [].concat(t.widgetConf.nodesToUseAsColumns)
        }

        function n(t) {
            return [].concat(t.widgetConf.nodesToUseAsRows)
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMWebServiceController", {
            uses: ["CMDBuild.proxy.widget.WebService"],
            mixins: {
                observable: "Ext.util.Observable",
                widgetcontroller: "CMDBuild.controller.management.common.widgets.CMWidgetController",
                webServiceWidgetDelegate: "CMDBuild.view.management.common.widgets.CMWebServiceDelegate"
            },
            constructor: function(t, e, i, n, a) {
                this.mixins.observable.constructor.call(this), this.mixins.widgetcontroller.constructor.apply(this, arguments), this.wsCallParameters = i.callParameters, this.loaded = !1, this.store = null, this.templateResolver = null, this.view.addDelegate(this)
            },
            beforeActiveView: function() {
                var a, o, r = this;
                this.loaded || (null == r.store && (r.store = ((a = i(r)).push({
                    name: t,
                    type: "auto"
                }, {
                    name: e,
                    type: "string"
                }), Ext.define("CMWebServiceModel", {
                    extend: "Ext.data.Model",
                    fields: a,
                    idProperty: "_CM_ID"
                }), new Ext.data.Store({
                    model: "CMWebServiceModel",
                    data: [],
                    autoLoad: !1
                })), r.view.configureGrid(r.store, function(t) {
                    var a = n(t),
                        o = i(t),
                        r = [];
                    a.length > 1 && r.push({
                        header: CMDBuild.Translation.administration.modClass.attributeProperties.type,
                        dataIndex: e,
                        flex: 1
                    });
                    for (var s = 0, l = o.length; s < l; ++s) {
                        var d = o[s];
                        r.push({
                            header: d,
                            dataIndex: d,
                            flex: 1
                        })
                    }
                    return r
                }(r), function(t) {
                    var e = {};
                    t.widgetConf.readOnly || (e = {
                        selType: "checkboxmodel",
                        allowDeselect: !0,
                        mode: t.widgetConf.singleSelect ? "SINGLE" : "MULTI"
                    });
                    return e
                }(r))), null == r.templateResolver && (r.templateResolver = new CMDBuild.Management.TemplateResolver({
                    clientForm: r.clientForm,
                    xaVars: r.wsCallParameters,
                    serverVars: this.getTemplateResolverServerVars()
                })), (o = r).templateResolver.resolveTemplates({
                    attributes: Ext.Object.getKeys(o.wsCallParameters),
                    callback: function(i) {
                        var a = o.getTemplateResolverServerVars(),
                            r = _CMCache.getEntryTypeNameById(a.IdClass),
                            s = {};
                        for (var l in o.wsCallParameters) s[l] = i[l];
                        var d = o.view.getEl();
                        d && d.mask(CMDBuild.Translation.pleaseWait), CMDBuild.proxy.widget.WebService.callWidget({
                            method: "GET",
                            params: {
                                className: r,
                                id: a.Id,
                                activityId: _CMWFState.getActivityInstance().getId(),
                                widgetId: o.getWidgetId(),
                                params: Ext.encode(s)
                            },
                            loadMask: !1,
                            success: function(i, a, r) {
                                o.loaded = !0;
                                var s = r.response || "",
                                    l = CMDBuild.core.xml.XMLUtility,
                                    d = l.xmlDOMFromString(s),
                                    c = l.fromDOMToArrayOfObjects(d, n(o), t, e);
                                o.store.loadRawData(c), o.templateResolver.bindLocalDepsChange(function() {
                                    o.loaded = !1
                                })
                            },
                            callback: function() {
                                d && d.unmask()
                            }
                        })
                    }
                }))
            },
            getData: function() {
                var e = [];
                if (!this.widgetConf.readOnly)
                    for (var i = this.view.getSelectedRecords(), n = 0, a = i.length; n < a; ++n) {
                        var o = i[n].get(t);
                        e.push(CMDBuild.core.xml.XMLUtility.serializeToString(o))
                    }
                return {
                    output: e
                }
            },
            isValid: function() {
                return !this.widgetConf.mandatory || this.getData().output.length > 0
            },
            destroy: function() {
                this.callParent(arguments)
            },
            onWebServiceWidgetShowAllInfoButtonClick: function(e, i) {
                new CMDBuild.view.management.common.widgets.CMXMLWindow({
                    xmlNode: i.get(t)
                }).show()
            }
        })
    }(),
    function() {
        var t = "_filter";

        function e(t, e, i, n, a, o) {
            var r = a.target.className;
            this.callBacks[r] && this.callBacks[r](e)
        }
        Ext.define("CMDBuild.controller.management.common.widgets.CMPresetFromCardController", {
            mixins: {
                observable: "Ext.util.Observable",
                widgetcontroller: "CMDBuild.controller.management.common.widgets.CMWidgetController",
                cmPresetFromCardDelegate: "CMDBuild.view.management.common.widgets.CMPresetFromCardDelegate"
            },
            constructor: function(i, n, a, o, r) {
                var s, l;
                this.mixins.observable.constructor.call(this), this.mixins.widgetcontroller.constructor.apply(this, arguments), i.addDelegate(this), this.callBacks = {
                    "action-card-show": this.onShowCardkClick
                }, this.templateResolver = new CMDBuild.Management.TemplateResolver({
                    clientForm: o,
                    xaVars: (s = a, l = s.templates || {}, l[t] = s.filter, l),
                    serverVars: this.getTemplateResolverServerVars()
                }), this.mon(this.view.grid, "beforeitemclick", e, this)
            },
            onShowCardkClick: function(t) {
                var e = new CMDBuild.view.management.common.CMCardWindow({
                    cmEditMode: !1,
                    withButtons: !1,
                    title: t.get("IdClass_value")
                });
                new CMDBuild.controller.management.common.CMCardWindowController(e, {
                    entryType: t.get("IdClass"),
                    card: t.get("Id"),
                    cmEditMode: !1
                }), e.show()
            },
            beforeActiveView: function() {
                ! function(e) {
                    var i = e.widgetConf,
                        n = _CMCache.getEntryTypeByName(i.className);
                    if (!n) return;
                    var a = n.getId(),
                        o = i.filter;
                    e.templateResolver.resolveTemplates({
                        attributes: [t],
                        callback: function(t, i) {
                            var n = e.templateResolver.buildCQLQueryParameters(o, i);
                            e.view.updateGrid(a, n)
                        }
                    })
                }(this)
            },
            onPresetFromCardSaveButtonClick: function(t) {
                var e = t.getSelection(),
                    i = this.clientForm.getFields(),
                    n = this.widgetConf.presetMapping;
                e && i && n && i.each(function(t) {
                    t._belongToEditableSubpanel && n[t.name] && t.setValue(e.get(n[t.name]))
                }), "function" == typeof this.ownerController.hideWidgetsContainer && this.ownerController.hideWidgetsContainer()
            }
        })
    }(), Ext.define("CMDBuild.controller.management.common.CMWidgetManagerController", {
        uses: ["CMDBuild.controller.management.common.widgets.workflow.CMWorkflowController", "CMDBuild.controller.management.widget.linkCards.LinkCardsController", "CMDBuild.controller.management.widget.manageRelation.CMManageRelationController", "CMDBuild.core.configurations.Timeout", "CMDBuild.core.Message"],
        controllerClasses: {},
        controllers: {},
        constructor: function(t) {
            Ext.apply(this, {
                controllerClasses: {
                    ".Calendar": CMDBuild.controller.management.common.widgets.CMCalendarController,
                    ".CreateModifyCard": "CMDBuild.controller.management.widget.createModifyCard.CMCreateModifyCardController",
                    ".CustomForm": "CMDBuild.controller.management.widget.customForm.CustomForm",
                    ".Grid": "CMDBuild.controller.management.common.widgets.grid.Grid",
                    ".LinkCards": CMDBuild.controller.management.widget.linkCards.LinkCardsController,
                    ".ManageEmail": "CMDBuild.controller.management.widget.ManageEmail",
                    ".ManageRelation": CMDBuild.controller.management.widget.manageRelation.CMManageRelationController,
                    ".NavigationTree": "CMDBuild.controller.management.widget.navigationTree.NavigationTree",
                    ".OpenAttachment": "CMDBuild.controller.management.widget.OpenAttachment",
                    ".OpenNote": "CMDBuild.controller.management.widget.OpenNote",
                    ".OpenReport": "CMDBuild.controller.management.widget.openReport.OpenReport",
                    ".Ping": "CMDBuild.controller.management.widget.Ping",
                    ".PresetFromCard": CMDBuild.controller.management.common.widgets.CMPresetFromCardController,
                    ".WebService": CMDBuild.controller.management.common.widgets.CMWebServiceController,
                    ".Workflow": CMDBuild.controller.management.common.widgets.workflow.CMWorkflowController
                },
                view: t
            }), this.view.delegate = this
        },
        setDelegate: function(t) {
            this.delegate = t
        },
        beforeHideView: function(t) {
            Ext.isEmpty(t.widgetConfiguration) || ".OpenReport" != t.widgetConfiguration.type || CMDBuild.global.interfaces.Configurations.set("disableAllMessages", !1), Ext.isEmpty(t) || (!Ext.isEmpty(t.cmfg) && Ext.isFunction(t.cmfg) ? t.cmfg("beforeHideView") : Ext.isFunction(t.beforeHideView) && t.beforeHideView())
        },
        buildControllers: function(t) {
            var e = this;
            if (e.removeAll(), t) {
                for (var i = e.takeWidgetFromCard(t), n = {}, a = 0, o = i.length, r = null, s = null; a < o; ++a)
                    if (r = i[a], s = e.view.buildWidget(r, t)) {
                        var l = e.buildWidgetController(s, r, t);
                        l && (n[e.getWidgetId(r)] = l)
                    }
                this.controllers = Ext.clone(n)
            }
        },
        onWidgetButtonClick: function(t) {
            var e = this.controllers[this.getWidgetId(t)];
            Ext.Object.isEmpty(t) || ".OpenReport" != t.type || CMDBuild.global.interfaces.Configurations.set("disableAllMessages", !0), this.delegate.ensureEditPanel(), Ext.isEmpty(e) || (this.view.showWidget(e.view, this.getWidgetLable(t)), !Ext.isEmpty(e.cmfg) && Ext.isFunction(e.cmfg) ? e.cmfg("beforeActiveView") : Ext.isFunction(e.beforeActiveView) && e.beforeActiveView())
        },
        onCardGoesInEdit: function() {
            Ext.Object.each(this.controllers, function(t, e, i) {
                !Ext.isEmpty(e.instancesDataStorageReset) && Ext.isFunction(e.instancesDataStorageReset) && e.instancesDataStorageReset(), !Ext.isEmpty(e.cmfg) && Ext.isFunction(e.cmfg) ? e.cmfg("onEditMode") : !Ext.isEmpty(e.onEditMode) && Ext.isFunction(e.onEditMode) && e.onEditMode()
            }, this)
        },
        getWrongWFAsHTML: function() {
            var t = "",
                e = !0;
            return Ext.Object.each(this.controllers, function(i, n, a) {
                Ext.isEmpty(n.cmfg) || !Ext.isFunction(n.cmfg) || n.cmfg("isValid") ? Ext.isEmpty(n.isValid) || !Ext.isFunction(n.isValid) || Ext.isEmpty(n.getLabel) || !Ext.isFunction(n.getLabel) || n.isValid() || (e = !1, t += "<li>" + n.getLabel() + "</li>") : (e = !1, t += "<li>" + n.cmfg("getLabel") + "</li>")
            }, this), e ? null : '<ul style="text-align: left;">' + t + "</ul>"
        },
        removeAll: function() {
            for (var t in this.view.reset(), this.controllers) {
                var e = this.controllers[t];
                e.destroy(), delete this.controllers[t], delete e
            }
        },
        waitForBusyWidgets: function(t, e) {
            var i = Ext.create("CMDBuild.core.RequestBarrier", {
                id: "widgetManagerBeforeSaveBarrier",
                executionTimeout: CMDBuild.core.configurations.Timeout.getWorkflowWidgetsExecutionTimeout(),
                scope: e,
                callback: t,
                failure: function() {
                    CMDBuild.core.Message.error(null, CMDBuild.Translation.errors.busyVisualControls, !1)
                }
            });
            Ext.Object.each(this.controllers, function(t, e, n) {
                !Ext.isEmpty(e.cmfg) && Ext.isFunction(e.cmfg) ? e.cmfg("onBeforeSave", {
                    scope: this,
                    callback: i.getCallback("widgetManagerBeforeSaveBarrier")
                }) : Ext.isFunction(e.onBeforeSave) && e.onBeforeSave({
                    scope: this,
                    callback: i.getCallback("widgetManagerBeforeSaveBarrier")
                })
            }, this), i.finalize("widgetManagerBeforeSaveBarrier", !0)
        },
        getData: function(t) {
            var e = {};
            return Ext.Object.each(this.controllers, function(i, n, a) {
                if (!Ext.isEmpty(n.cmfg) && Ext.isFunction(n.cmfg)) {
                    var o = n.cmfg("getData", t);
                    Ext.isEmpty(o) || (e[i] = o)
                } else Ext.isFunction(n.getData) && (o = n.getData(t), Ext.isEmpty(o) || (e[i] = o))
            }, this), e
        },
        hideWidgetsContainer: function() {
            this.view.widgetsContainer.hide()
        },
        buildWidgetController: function(t, e, i) {
            var n = null,
                a = this.controllerClasses[e.type];
            return Ext.isEmpty(a) || (Ext.isFunction(a) ? n = new a(t, superController = this, e, clientForm = this.view.getFormForTemplateResolver(), i) : Ext.isString(a) && (n = Ext.create(a, {
                view: t,
                parentDelegate: this,
                widgetConfiguration: e,
                clientForm: this.view.getFormForTemplateResolver(),
                card: i
            }))), n
        },
        takeWidgetFromCard: function(t) {
            var e = [];
            if ("CMDBuild.model.CMActivityInstance" == Ext.getClassName(t)) e = t.getWidgets();
            else {
                var i = _CMCache.getEntryTypeById(t.get("IdClass"));
                i && (e = i.getWidgets())
            }
            return e
        },
        getWidgetId: function(t) {
            return t.id
        },
        getWidgetLable: function(t) {
            return t.label
        },
        activateFirstTab: function() {
            this.view.activateFirstTab()
        }
    }), Ext.define("CMDBuild.controller.management.common.CMWidgetManagerControllerPopup", {
        extend: "CMDBuild.controller.management.common.CMWidgetManagerController",
        uses: ["CMDBuild.controller.management.common.widgets.workflow.CMWorkflowController", "CMDBuild.controller.management.widget.linkCards.LinkCardsController", "CMDBuild.controller.management.widget.manageRelation.CMManageRelationController", "CMDBuild.core.configurations.Timeout", "CMDBuild.core.Message"],
        buildControllers: function(t, e) {
            var i = this;
            for (var n in i.removeAll(), t)
                if (ui = i.view.buildWidget(t[n], e), ui) {
                    var a = i.buildWidgetController(ui, t[n], e);
                    a && (i.controllers[i.getWidgetId(t[n])] = a)
                }
        }
    }), Ext.define("CMDBuild.controller.management.dashboard.CMModDashboardController", {
        extend: "CMDBuild.controller.CMBasePanelController",
        uses: ["CMDBuild.core.constants.Proxy"],
        mixins: {
            columnController: "CMDBuild.controller.common.CMDashboardColumnController"
        },
        constructor: function() {
            this.callParent(arguments), this.view && this.view.setDelegate(this), this.dashboard = null
        },
        onViewOnFront: function(t) {
            if (t && "function" == typeof t.get) {
                var e = Ext.isEmpty(t.get(CMDBuild.core.constants.Proxy.ENTITY_ID)) ? CMDBuild.core.constants.Proxy.ID : CMDBuild.core.constants.Proxy.ENTITY_ID;
                this.dashboard = _CMCache.getDashboardById(t.get(e)), this.view.buildDashboardColumns(this.dashboard), Ext.isEmpty(t) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                    moduleId: this.view.cmName,
                    entryType: {
                        description: t.get(CMDBuild.core.constants.Proxy.DESCRIPTION),
                        id: t.get(CMDBuild.core.constants.Proxy.ID),
                        object: t
                    }
                })
            }
        }
    }),
    function() {
        function t() {
            this.view.cardTabPanel.reset(_CMCardModuleState.entryType.get("id"))
        }

        function e(t) {
            this.setCard(null), this.callForSubControllers("onAddCardButtonClick", t.classId), this.view.activateFirstTab(), _CMUIState.onlyFormIfFullScreen()
        }
        Ext.define("CMDBuild.controller.management.common.CMModController", {
            uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.administration.userAndGroup.group.tabs.DefaultFilters"],
            extend: "CMDBuild.controller.CMBasePanelController",
            mixins: {
                commonFunctions: "CMDBuild.controller.management.common.CMModClassAndWFCommons",
                observable: "Ext.util.Observable"
            },
            constructor: function(t) {
                this.callParent(arguments), this.view.delegate = this, this.buildSubControllers()
            },
            onViewOnFront: function(t) {
                if (!Ext.isEmpty(t)) {
                    var e = Ext.isEmpty(t.get(CMDBuild.core.constants.Proxy.ENTITY_ID)) ? CMDBuild.core.constants.Proxy.ID : CMDBuild.core.constants.Proxy.ENTITY_ID,
                        i = CMDBuild.global.controller.MainViewport.cmfg("mainViewportDanglingCardGet"),
                        n = t.get(CMDBuild.core.constants.Proxy.FILTER),
                        a = t.get(e);
                    if (this.selectedAccordionNode = t, CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE) && _CMUIState.onlyGrid(), Ext.isEmpty(n)) {
                        var o = {};
                        o[CMDBuild.core.constants.Proxy.CLASS_NAME] = t.get(CMDBuild.core.constants.Proxy.NAME), o[CMDBuild.core.constants.Proxy.GROUP] = CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.DEFAULT_GROUP_NAME), CMDBuild.proxy.administration.userAndGroup.group.tabs.DefaultFilters.read({
                            params: o,
                            scope: this,
                            success: function(t, e, o) {
                                o = o.response.elements[0], Ext.isEmpty(o) || (Ext.isString(o[CMDBuild.core.constants.Proxy.CONFIGURATION]) && CMDBuild.core.Utils.isJsonString(o[CMDBuild.core.constants.Proxy.CONFIGURATION]) && (o[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.decode(o[CMDBuild.core.constants.Proxy.CONFIGURATION])), n = Ext.create("CMDBuild.model.CMFilterModel", o)), this.setEntryType(a, i, n)
                            }
                        })
                    } else this.setEntryType(a, i, n)
                }
            },
            onCardSelected: function(t) {
                this.setCard(t)
            },
            setEntryType: function(t, e, i) {
                this.entryType = _CMCache.getEntryTypeById(t), this.setCard(null), this.callForSubControllers("onEntryTypeSelected", [this.entryType, e, i]), Ext.isEmpty(e) || Ext.isEmpty(e.activateFirstTab) || this.view.cardTabPanel.activeTabSet(e.activateFirstTab)
            },
            getEntryType: function() {
                return this.entryType || null
            },
            getEntryTypeId: function() {
                var t = null;
                return this.entryType && (t = this.entryType.get("id")), t
            },
            setCard: function(t) {
                this.card = t, this.onCardChanged(t)
            },
            getCard: function() {
                return this.card
            },
            onCardChanged: function(t) {
                this.callForSubControllers("onCardSelected", this.card)
            },
            callForSubControllers: function(t, e) {
                for (var i = 0, n = this.subControllers.length, a = null; i < n; ++i) a = this.subControllers[i], "string" == typeof t && "function" == typeof a[t] && (e = Ext.isArray(e) ? e : [e], a[t].apply(a, e))
            },
            buildSubControllers: Ext.emptyFn
        }), Ext.define("CMDBuild.controller.management.classes.CMModCardController", {
            uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.administration.userAndGroup.group.tabs.DefaultFilters"],
            extend: "CMDBuild.controller.management.common.CMModController",
            card: void 0,
            cardPanelController: void 0,
            controllerMap: void 0,
            controllerTabAttachment: void 0,
            controllerTabEmail: void 0,
            controllerTabHistory: void 0,
            enableNewCardModule: !0,
            mdController: void 0,
            noteController: void 0,
            relationsController: void 0,
            subControllers: [],
            view: void 0,
            constructor: function(t) {
                this.callParent(arguments), this.mon(this.view, this.view.CMEVENTS.addButtonClick, e, this)
            },
            buildSubControllers: function() {
                var e, i;
                Ext.suspendLayouts(), this.enableNewCardModule ? this.buildTabControllerCard2() : this.buildTabControllerCard(), this.buildTabControllerDetails(), this.buildTabControllerNotes(), this.buildTabControllerRelations(), this.buildTabControllerHistory(), this.buildTabControllerEmail(), this.buildTabControllerAttachments(), e = this, (i = this.view.getGrid()) && (e.gridController = new CMDBuild.controller.management.common.CMCardGridController(i), e.mon(e.gridController, e.gridController.CMEVENTS.cardSelected, e.onCardSelected, e), e.mon(e.gridController, e.gridController.CMEVENTS.wrongSelection, t, e), e.mon(e.gridController, e.gridController.CMEVENTS.gridVisible, e.onGridVisible, e), e.mon(e.gridController, e.gridController.CMEVENTS.load, e.onGridLoad, e), e.mon(e.gridController, e.gridController.CMEVENTS.itemdblclick, function() {
                        if (e.enableNewCardModule) {
                            if (!e.controllerTabCard2.cmfg("panelGridAndFormSelectedEntityGet", [CMDBuild.core.constants.Proxy.CAPABILITIES, CMDBuild.core.constants.Proxy.MODIFY_DISABLED])) {
                                var t = {};
                                t[CMDBuild.core.constants.Proxy.FULL_SCREEN] = "bottom", t[CMDBuild.core.constants.Proxy.VIEW_MODE] = "edit", e.controllerTabCard2.cmfg("classesFormTabCardSelectedEntityIsEmpty") || (t[CMDBuild.core.constants.Proxy.ENTITY_NAME] = e.controllerTabCard2.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME)), e.controllerTabCard2.cmfg("classesFormTabCardSelectedItemIsEmpty") || (t[CMDBuild.core.constants.Proxy.ITEM_ENTITY_NAME] = e.controllerTabCard2.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), t[CMDBuild.core.constants.Proxy.ITEM_ID] = e.controllerTabCard2.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID)), e.controllerTabCard2.cmfg("classesFormTabCardUiUpdate", t)
                            }
                        } else {
                            var i = _CMUtils.getEntryTypePrivilegesByCard(e.cardPanelController.card);
                            i.crudDisabled.modify || (e.cardPanelController.onModifyCardClick(), _CMUIState.onlyFormIfFullScreen())
                        }
                    }, e), e.subControllers.push(e.gridController)),
                    function(t, e) {
                        if (null == e) return;
                        CMDBuild.configuration.bim.get("enabled") && new CMDBuild.bim.management.CMBimController(e)
                    }(0, this.view.getGrid()), Ext.resumeLayouts(), this.view.cardTabPanel.setActiveTab(0)
            },
            buildMapController: function() {
                Ext.isFunction(this.view.getMapPanel) ? this.controllerMap = new CMDBuild.controller.management.classes.CMMapController(this.view.getMapPanel(), this.view.getMapPanel().interactionDocument) : this.controllerMap = {
                    onEntryTypeSelected: Ext.emptyFn,
                    onAddCardButtonClick: Ext.emptyFn,
                    onCardSaved: Ext.emptyFn,
                    getCardData: Ext.emptyFn,
                    getValues: function() {
                        return !1
                    },
                    refresh: Ext.emptyFn,
                    editMode: Ext.emptyFn,
                    displayMode: Ext.emptyFn
                }, this.subControllers.push(this.controllerMap), this.enableNewCardModule || this.cardPanelController.addCardDataProviders(this.controllerMap)
            },
            buildTabControllerAttachments: function() {
                CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_ATTACHMENT_TAB) || (this.controllerTabAttachment = Ext.create("CMDBuild.controller.management.classes.panel.form.tabs.Attachment", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabAttachment), this.view.cardTabPanel.attachmentPanel = this.controllerTabAttachment.getView(), this.view.cardTabPanel.add(this.controllerTabAttachment.getView()))
            },
            buildTabControllerCard: function() {
                var t = this.view.getCardPanel(),
                    e = new CMDBuild.controller.management.common.CMWidgetManagerController(this.view.getWidgetManager());
                Ext.isEmpty(t) || (this.cardPanelController = new CMDBuild.controller.management.classes.CMCardPanelController(t, this, e), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.cardRemoved, function(t, e) {
                    var i = _CMCardModuleState.entryType;
                    this.gridController.onCardDeleted(), this.view.reset(i.get("id")), _CMCache.onClassContentChanged(e)
                }, this), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.cardSaved, function(t) {
                    var e = _CMCardModuleState.entryType;
                    this.gridController.onCardSaved(t), this.controllerMap.onCardSaved(t), _CMCache.onClassContentChanged(e.get("id"))
                }, this), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.displayModeDidActivate, function() {
                    this.controllerMap.displayMode()
                }, this), this.mon(this.cardPanelController, this.cardPanelController.CMEVENTS.cloneCard, function() {
                    this.callForSubControllers("onCloneCard")
                }, this), this.subControllers.push(this.cardPanelController), this.view.cardTabPanel.add(t))
            },
            buildTabControllerCard2: function() {
                this.controllerTabCard2 = Ext.create("CMDBuild.controller.management.classes.panel.form.tabs.card.Tab", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabCard2), this.view.cardTabPanel.cardPanel2 = this.controllerTabCard2.getView(), this.view.cardTabPanel.add(this.controllerTabCard2.getView())
            },
            buildTabControllerDetails: function() {
                var t = this.view.getMDPanel();
                Ext.isEmpty(t) || (this.mdController = new CMDBuild.controller.management.classes.masterDetails.CMMasterDetailsController(t, this), this.mon(this.mdController, "empty", function(t) {
                    t && this.view.cardTabPanel.activateFirstTab()
                }, this), this.subControllers.push(this.mdController), this.view.cardTabPanel.add(t))
            },
            buildTabControllerEmail: function() {
                CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_EMAIL_TAB) || (this.controllerTabEmail = Ext.create("CMDBuild.controller.management.classes.tabs.Email", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabEmail), this.view.cardTabPanel.emailPanel = this.controllerTabEmail.getView(), this.view.cardTabPanel.add(this.controllerTabEmail.getView()))
            },
            buildTabControllerHistory: function() {
                CMDBuild.configuration.userInterface.isDisabledCardTab(CMDBuild.core.constants.Proxy.CLASS_HISTORY_TAB) || (this.controllerTabHistory = Ext.create("CMDBuild.controller.management.classes.tabs.History", {
                    parentDelegate: this
                }), this.subControllers.push(this.controllerTabHistory), this.view.cardTabPanel.cardHistoryPanel = this.controllerTabHistory.getView(), this.view.cardTabPanel.add(this.controllerTabHistory.getView()))
            },
            buildTabControllerNotes: function() {
                var t = this.view.getNotePanel();
                Ext.isEmpty(t) || (this.noteController = new CMDBuild.controller.management.classes.CMNoteController(t), this.subControllers.push(this.noteController), this.view.cardTabPanel.add(t))
            },
            buildTabControllerRelations: function() {
                var t = this.view.getRelationsPanel();
                Ext.isEmpty(t) || (this.relationsController = new CMDBuild.controller.management.classes.CMCardRelationsController(t, this), this.mon(this.relationsController, this.relationsController.CMEVENTS.serverOperationSuccess, function() {
                    this.gridController.reload(!0)
                }, this), this.subControllers.push(this.relationsController), this.view.cardTabPanel.add(t))
            },
            changeClassUIConfigurationForGroup: function(t) {
                var e = _CMUtils.getClassPrivileges(t);
                this.view.addCardButton.disabledForGroup = !(e.write && !e.crudDisabled.create), this.view.addCardButton.disabledForGroup ? this.view.addCardButton.disable() : this.view.addCardButton.enable(), this.enableNewCardModule || this.cardPanelController.changeClassUIConfigurationForGroup(!(e.write && !e.crudDisabled.modify), !(e.write && !e.crudDisabled.clone), !(e.write && !e.crudDisabled.remove))
            },
            getMapSaveParams: function(t) {
                t = Ext.isObject(t) ? t : {};
                var e = {};
                if (CMDBuild.configuration.gis.get(CMDBuild.core.constants.Proxy.ENABLED) && Ext.isString(t.className) && !Ext.isEmpty(t.className)) {
                    var i = this.controllerMap.getCardData(t);
                    i && (e[this.controllerMap.cardDataName] = i)
                }
                return e
            },
            getFormForTemplateResolver: function() {
                return this.view.getCardPanel().getFormForTemplateResolver()
            },
            onGridLoad: function(t) {
                Ext.isEmpty(t[1]) && (this.view.cardTabPanel.items.each(function(t) {
                    Ext.isFunction(t.reset) && t.reset(), Ext.isFunction(t.disable) && t.disable()
                }), this.enableNewCardModule || (this.view.getCardPanel().enable(), this.view.getCardPanel().displayMode(), CMDBuild.clearComponent(this.view.getCardPanel().form)))
            },
            onGridVisible: function(t, e) {
                t && this.entryType && this.card && e && e[0] && e[0].get("Id") != this.card.get("Id") && this.gridController.openCard({
                    IdClass: this.entryType.get("id"),
                    Id: this.card.get("Id")
                }, !0)
            },
            onAbortCardClick: function() {
                !Ext.isEmpty(this.controllerTabEmail) && Ext.isFunction(this.controllerTabEmail.onAbortCardClick) && this.controllerTabEmail.onAbortCardClick()
            },
            onModifyCardClick: function() {
                !Ext.isEmpty(this.controllerMap) && Ext.isFunction(this.controllerMap.editMode) && this.controllerMap.editMode(), !Ext.isEmpty(this.controllerTabEmail) && Ext.isFunction(this.controllerTabEmail.onModifyCardClick) && this.controllerTabEmail.onModifyCardClick()
            },
            onSaveCardClick: function() {
                !Ext.isEmpty(this.controllerTabEmail) && Ext.isFunction(this.controllerTabEmail.onSaveCardClick) && this.controllerTabEmail.onSaveCardClick()
            },
            setEntryType: function(t, e, i) {
                var n = _CMCache.getEntryTypeById(t);
                this.view.addCardButton.updateForEntry(n), this.view.mapAddCardButton.updateForEntry(n), this.view.updateTitleForEntry(n), Ext.isEmpty(e) || Ext.isEmpty(e.activateFirstTab) || this.view.cardTabPanel.activeTabSet(e.activateFirstTab), _CMCardModuleState.setEntryType(n, e, i), _CMUIState.onlyGridIfFullScreen(), this.changeClassUIConfigurationForGroup(t), Ext.isString(i) && !Ext.isEmpty(i) && Ext.Array.contains(this.selectedAccordionNode.get(CMDBuild.core.constants.Proxy.SECTION_HIERARCHY), "filter") && (CMDBuild.global.dataViewHack = {
                    filter: i,
                    entryType: n
                })
            }
        })
    }(), Ext.define("CMDBuild.controller.management.classes.CMCardPanelController", {
        uses: ["CMDBuild.proxy.Card"],
        mixins: {
            observable: "Ext.util.Observable"
        },
        extend: "CMDBuild.controller.management.classes.CMBaseCardPanelController",
        constructor: function(t, e, i) {
            this.callParent(arguments), this.mixins.observable.constructor.call(this, arguments), this.CMEVENTS = Ext.apply(this.CMEVENTS, {
                cardRemoved: "cm-card-removed",
                cloneCard: "cm-card-clone"
            }), this.addEvents(this.CMEVENTS.cardRemoved, this.CMEVENTS.cloneCard, this.CMEVENTS.cardSaved, this.CMEVENTS.editModeDidAcitvate, this.CMEVENTS.displayModeDidActivate);
            var n = this.view.CMEVENTS;
            this.mon(this.view, n.removeCardButtonClick, this.onRemoveCardClick, this), this.mon(this.view, n.cloneCardButtonClick, this.onCloneCardClick, this), this.mon(this.view, n.printCardButtonClick, this.onPrintCardMenuClick, this), this.mon(this.view, n.openGraphButtonClick, this.onShowGraphClick, this)
        },
        onEntryTypeSelected: function() {
            this.cloneCard = !1, this.callParent(arguments)
        },
        onCardSelected: function() {
            this.cloneCard = !1, this.callParent(arguments)
        },
        onRemoveCardClick: function() {
            var t = this,
                e = t.card.get("Id"),
                i = t.entryType.get("id");
            Ext.Msg.confirm(CMDBuild.Translation.attention, CMDBuild.Translation.management.modcard.delete_card_confirm, function(n) {
                "yes" == n && (CMDBuild.core.LoadMask.show(), CMDBuild.proxy.Card.remove({
                    params: {
                        IdClass: i,
                        Id: e
                    },
                    loadMask: !1,
                    success: function() {
                        t.fireEvent(t.CMEVENTS.cardRemoved, e, i)
                    },
                    callback: function() {
                        CMDBuild.core.LoadMask.hide()
                    }
                }))
            }, this)
        },
        onCloneCardClick: function() {
            _CMCardModuleState.setPreviousCard(_CMCardModuleState.card), this.cloneCard = !0, this.onModifyCardClick(), this.fireEvent(this.CMEVENTS.cloneCard)
        },
        changeClassUIConfigurationForGroup: function(t, e, i) {
            this.view.form.modifyCardButton.disabledForGroup = t, this.view.form.cloneCardButton.disabledForGroup = e, this.view.form.deleteCardButton.disabledForGroup = i, this.view.form.modifyCardButton.disabledForGroup ? this.view.form.modifyCardButton.disable() : this.view.form.modifyCardButton.enable(), this.view.form.cloneCardButton.disabledForGroup ? this.view.form.cloneCardButton.disable() : this.view.form.cloneCardButton.enable(), this.view.form.deleteCardButton.disabledForGroup ? this.view.form.deleteCardButton.disable() : this.view.form.deleteCardButton.enable()
        },
        onModifyCardClick: function() {
            var t = this;
            this.cloneCard && this.isEditable(this.card) ? t.loadCard(!0, null, function() {
                t.view.editMode()
            }) : this.callParent(arguments)
        },
        onAbortCardClick: function() {
            this.cloneCard ? _CMCardModuleState.setCard(_CMCardModuleState.getPreviousCard()) : this.callParent(arguments), _CMUIState.onlyGridIfFullScreen()
        },
        onSaveSuccess: function() {
            this.cloneCard = !1, this.callParent(arguments), _CMUIState.onlyGridIfFullScreen()
        },
        onPrintCardMenuClick: function(t) {
            if (Ext.isString(t) && !Ext.isEmpty(t)) {
                var e = {};
                e[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.entryType.get(CMDBuild.core.constants.Proxy.NAME), e[CMDBuild.core.constants.Proxy.CARD_ID] = this.card.get("Id"), e[CMDBuild.core.constants.Proxy.FORMAT] = t, this.controllerPrintWindow = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.print.Window", {
                    parentDelegate: this
                }), this.controllerPrintWindow.cmfg("panelGridAndFormPrintWindowShow", {
                    format: t,
                    mode: "cardDetails",
                    params: e
                })
            }
        }
    }), Ext.define("CMDBuild.controller.management.common.CMCardWindowController", {
        extend: "CMDBuild.controller.management.classes.CMBaseCardPanelController",
        uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.Message", "CMDBuild.proxy.Card", "CMDBuild.controller.management.classes.StaticsController"],
        mixins: {
            observable: "Ext.util.Observable"
        },
        constructor: function(t, e) {
            if (this.configuration = e, !Ext.isEmpty(this.configuration.entryType)) {
                var i = this;
                this.callParent(arguments), this.mixins.observable.constructor.call(this, arguments), this.onEntryTypeSelected(_CMCache.getEntryTypeById(this.configuration.entryType)), this.cmEditMode = this.configuration.cmEditMode, this.mon(this.view, "show", function() {
                    this.loadFields(this.configuration.entryType, function() {
                        if (i.configuration.card) {
                            var t = {};
                            t[CMDBuild.core.constants.Proxy.CARD_ID] = i.configuration.card, t[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(i.configuration.entryType), i.loadCard(!0, t, function(t) {
                                i.onCardLoaded(i, t)
                            })
                        } else i.editModeIfPossible()
                    })
                }, this), this.mon(this.view, "destroy", function() {
                    this.unlockCard()
                }, this)
            }
        },
        getForm: function() {
            return this.view.cardPanel.getForm()
        },
        onSaveCardClick: function() {
            var t = this.getForm(),
                e = this.buildSaveParams();
            this.beforeRequest(t), t.isValid() ? this.doFormSubmit(e) : CMDBuild.core.Message.error(null, Ext.String.format('<p class="{0}">{1}</p>', CMDBuild.core.constants.Global.getErrorMsgCss(), CMDBuild.Translation.errors.invalid_attributes) + CMDBuild.controller.management.classes.StaticsController.getInvalidAttributeAsHTML(t), !1)
        },
        doFormSubmit: function(t) {
            CMDBuild.proxy.Card.update({
                params: Ext.Object.merge(t, this.view.getForm().getValues()),
                loadMask: this.view,
                scope: this,
                success: function(t, e, i) {
                    var n = {};
                    n.result = i, n.params = e.params, this.onSaveSuccess(this.view.getForm(), n)
                }
            })
        },
        onAbortCardClick: function() {
            this.view.destroy()
        },
        onEntryTypeSelected: function(t) {
            this.callParent(arguments), this.view.setTitle(this.entryType.get(CMDBuild.core.constants.Proxy.TEXT))
        },
        buildSaveParams: function() {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.entryType.getName(), t[CMDBuild.core.constants.Proxy.CARD_ID] = this.card ? this.card.get("Id") : -1, t
        },
        onSaveSuccess: function(t, e) {
            CMDBuild.core.LoadMask.hide(), _CMCache.onClassContentChanged(this.entryType.get(CMDBuild.core.constants.Proxy.ID)), this.view.destroy()
        },
        onCardLoaded: function(t, e) {
            t.card = e, t.view.loadCard(e), t.widgetControllerManager && t.widgetControllerManager.buildControllers(e), t.editModeIfPossible()
        },
        beforeRequest: Ext.emptyFn,
        editModeIfPossible: function() {
            var t = this;
            t.card ? t.cmEditMode ? t.lockCard(function() {
                t.view.editMode()
            }) : t.view.displayMode() : t.onAddCardButtonClick(this.configuration.entryType)
        }
    }),
    function() {
        function t(t, e) {
            return !(!e || !t.fkAttribute) && e.name == t.fkAttribute.name
        }

        function e(t, e) {
            return !!t.detail && e.idDomain == t.detail.get("id")
        }
        Ext.define("CMDBuild.controller.management.common.CMDetailWindowController", {
            extend: "CMDBuild.controller.management.common.CMCardWindowController",
            constructor: function() {
                this.callParent(arguments)
            },
            getRelationsAttribute: function() {
                for (var t = this.getForm().getFields(), e = [], i = 0, n = null; i < t.items.length; ++i)(n = t.items[i]).CMAttribute && n.CMAttribute.cmRelationAttribute && (n.enable(), e.push(n));
                return e
            },
            buildSaveParams: function() {
                var t = this.callParent(arguments);
                if (this.referenceToMaster) {
                    var e = this.referenceToMaster;
                    t[e.name] = e.value
                }
                return t
            },
            buildParamsToSaveRelation: function(t) {
                var e = this.view.detail,
                    i = function(t, e) {
                        var i = {};
                        "_1" == _CMCache.getDirectedDomainForEntryType(t, e).src ? (i.slaveSide = "_2", i.masterSide = "_1") : (i.slaveSide = "_1", i.masterSide = "_2");
                        return i
                    }(this.entryType, e.getName()),
                    n = {
                        domainName: e.getName(),
                        attributes: Ext.encode(this.fillRelationAttributesParams(t, {})),
                        master: i.masterSide
                    };
                return this.relation && (n.relationId = this.relation.rel_id), n
            },
            fillRelationAttributesParams: function(t, e) {
                for (var i = this.getRelationsAttribute(), n = 0, a = null; n < i.length; ++n) e[(a = i[n]).CMAttribute.attributeName] = a.getValue();
                var o = this.view.detail,
                    r = this.view.masterData,
                    s = function(t, e) {
                        var i = e.get("cardinality"),
                            n = t.get("IdClass");
                        if ("1:1" == i) throw "Wrong cardinality for a MasterDetail domain";
                        return Ext.Array.contains(_CMUtils.getAncestorsId(n), e.get("idClass1")) ? "1:N" == i ? "_1" : "_2" : "N:1" == i ? "_2" : "_1"
                    }(r, o),
                    l = "_1" == s ? "_2" : "_1";
                return e[s] = [{
                    cardId: r.get("Id"),
                    className: _CMCache.getEntryTypeNameById(r.get("IdClass"))
                }], e[l] = [{
                    cardId: t.cardId,
                    className: t.className
                }], e
            },
            beforeRequest: function(t) {
                if (!this.referenceToMaster)
                    for (var e = t.getFields(), i = 0, n = null; i < e.items.length; ++i)(n = e.items[i]).setDisabled(n.CMAttribute && n.CMAttribute.cmRelationAttribute)
            },
            onSaveSuccess: function(t, e) {
                this.relation && !this.referenceToMaster && this.updateRelation(t, e), this.callParent(arguments)
            },
            updateRelation: function(t, e) {
                var i = this.buildParamsToSaveRelation(e.params);
                CMDBuild.proxy.Relation.update({
                    params: i,
                    loadMask: !1
                })
            },
            loadFields: function(i, n) {
                var a = this;
                _CMCache.getAttributeList(i, function(i) {
                    i = function(i, n) {
                        for (var a = [], o = 0; o < n.length; o++) {
                            var r = n[o];
                            r && (t(i.view, r) || e(i.view, r) ? i.view.masterData && (i.referenceToMaster = {
                                name: r.name,
                                value: i.view.masterData.get("Id")
                            }) : a.push(r))
                        }
                        return a
                    }(a, i), i = function(t, e, i) {
                        var n = Ext.isEmpty(e) || Ext.isEmpty(e.detail) ? [] : e.detail.getAttributes() || [],
                            a = [];
                        if (n.length > 0) {
                            e.hasRelationAttributes = !0;
                            for (var o = !1, r = 0, s = i.length; r < s; ++r) {
                                var l = i[r];
                                if (l.group && "" != l.group) {
                                    o = !0;
                                    break
                                }
                            }
                            if (o) a = [].concat(i);
                            else
                                for (var r = 0, l = null; r < i.length; ++r) {
                                    l = i[r];
                                    var d = Ext.apply({}, l);
                                    d.group = CMDBuild.Translation.management.modcard.detail_window.detail_attributes, a.push(d)
                                }
                            for (var r = 0, l = null; r < n.length; ++r) {
                                l = n[r];
                                var d = Ext.apply({}, l);
                                d.group = CMDBuild.Translation.management.modcard.detail_window.relation_attributes, d.attributeName = d.name, t.referenceToMaster && (d.name = "_" + t.referenceToMaster.name + "_" + d.name), d.cmRelationAttribute = !0, a.push(d)
                            }
                        } else a = [].concat(i);
                        return a
                    }(a, a.view, i), a.view.fillForm(i, editMode = !1), n && n()
                })
            },
            onCardLoaded: function(t, e) {
                this.callParent(arguments), t.view.hasRelationAttributes && function(t) {
                    var e = {};
                    e[CMDBuild.core.constants.Proxy.CARD_ID] = t.card.get("Id"), e[CMDBuild.core.constants.Proxy.CLASS_NAME] = t.entryType.getName(), e[CMDBuild.core.constants.Proxy.DOMAIN_ID] = t.view.detail.get("id"), e[CMDBuild.core.constants.Proxy.SRC] = t.view.detail.getDetailSide(), CMDBuild.proxy.Relation.readAll({
                        params: e,
                        loadMask: !1,
                        scope: this,
                        success: function(e, i, n) {
                            var a = n.domains;
                            try {
                                a.length > 1 && _debug("TODO ecco perchè sbaglia il modify, il get relation torna due domini, che in realtà è lo stesso nei due versi", a), t.relation = a[0].relations[0];
                                for (var o = t.getRelationsAttribute(), r = t.relation.rel_attr, s = 0, l = null; s < o.length; ++s)
                                    if ((l = o[s]).CMAttribute) {
                                        var d = r[l.CMAttribute.name] || r[l.CMAttribute.attributeName];
                                        l.setValue(d)
                                    }
                            } catch (e) {
                                t.relation = void 0, _debug("No relations", e)
                            }
                        }
                    })
                }(t)
            }
        })
    }(), Ext.define("CMDBuild.controller.management.common.CMAddDetailWindowController", {
        extend: "CMDBuild.controller.management.common.CMDetailWindowController",
        buildSaveParams: function() {
            var t = this.callParent(arguments);
            if (this.referenceToMaster) {
                var e = this.referenceToMaster;
                t[e.name] = e.value, this.saveRelationAction = Ext.emptyFn
            } else this.saveRelationAction = this.addRelation;
            return t
        },
        onSaveSuccess: function(t, e) {
            this.saveRelationAction && this.saveRelationAction(t, e), this.view.destroy(), CMDBuild.core.LoadMask.hide()
        },
        addRelation: function(t, e) {
            var i = {
                    cardId: e.result.id,
                    className: e.params.className
                },
                n = this.buildParamsToSaveRelation(i);
            CMDBuild.proxy.Relation.create({
                params: n,
                loadMask: !1
            })
        }
    });