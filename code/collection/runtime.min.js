var selectCardId = 0;
Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.runtime.Runtime", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.ALLOW_PASSWORD_CHANGE,
            type: "boolean",
            defaultValue: !0
        }, {
            name: CMDBuild.core.constants.Proxy.DEFAULT_GROUP_DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.DEFAULT_GROUP_ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.DEFAULT_GROUP_NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.GROUP_DESCRIPTIONS,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.GROUPS,
            type: "auto",
            defaultValue: []
        }, {
            name: CMDBuild.core.constants.Proxy.IS_ADMINISTRATOR,
            type: "boolean",
            defaultValue: !0
        }, {
            name: CMDBuild.core.constants.Proxy.LANGUAGE,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.STARTING_CLASS_ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.USER_ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.USERNAME,
            type: "string"
        }]
    }), Ext.define("CMDBuild.core.interfaces.messages.Error", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.Message"],
        singleton: !0,
        display: function(e, t) {
            Ext.isEmpty(e) || Ext.isEmpty(e[CMDBuild.core.constants.Proxy.ERRORS]) || !Ext.isArray(e[CMDBuild.core.constants.Proxy.ERRORS]) || Ext.Array.forEach(e[CMDBuild.core.constants.Proxy.ERRORS], function(e, o, i) {
                Ext.Object.isEmpty(e) || CMDBuild.core.interfaces.messages.Error.showPopup(e, t)
            }, this)
        },
        formatMessage: function(e, t) {
            return Ext.isEmpty(CMDBuild.Translation.errors.reasons) || Ext.isEmpty(CMDBuild.Translation.errors.reasons[e]) ? (_error('"' + e + '" translation not found', "CMDBuild.core.interfaces.messages.Error"), "") : Ext.String.format.apply(null, [].concat(CMDBuild.Translation.errors.reasons[e]).concat(t))
        },
        showPopup: function(e, t) {
            var o = null,
                i = {
                    text: CMDBuild.Translation.errors.anErrorHasOccurred,
                    detail: void 0
                };
            if (Ext.Object.isEmpty(e)) Ext.isEmpty(response) || 200 == response.status || 0 == response.status ? (o = CMDBuild.Translation.errors.error_message, i.text = CMDBuild.Translation.errors.anErrorHasOccurred) : response.status && (o = CMDBuild.Translation.errors.error_message, i.text = CMDBuild.Translation.errors.server_error_code + response.status);
            else {
                var r = "",
                    n = e.reason;
                if (!Ext.Object.isEmpty(t) && !Ext.isEmpty(t.url)) {
                    r = "Call: " + t.url + "\n";
                    for (var a = "", s = 0; s < r.length; ++s) a += "-";
                    r += a + "\n"
                }
                if (r += "Error: " + e.stacktrace, i.detail = r, !Ext.isEmpty(n)) {
                    if ("AUTH_NOT_LOGGED_IN" == n || "AUTH_MULTIPLE_GROUPS" == n) return void Ext.create("CMDBuild.controller.common.sessionExpired.SessionExpired", {
                        ajaxParameters: t,
                        passwordFieldEnable: "AUTH_NOT_LOGGED_IN" == n
                    });
                    var l = CMDBuild.core.interfaces.messages.Error.formatMessage(n, e.reasonParameters);
                    Ext.isEmpty(l) ? _error('cannot format error message from "' + e + '"', "CMDBuild.core.interfaces.messages.Error") : i.text = l
                }
            }
            CMDBuild.core.Message.error(o, i, t.form)
        }
    }), Ext.define("CMDBuild.core.interfaces.messages.Warning", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.Message"],
        singleton: !0,
        display: function(e) {
            Ext.isEmpty(e) || Ext.isEmpty(e[CMDBuild.core.constants.Proxy.WARNINGS]) || !Ext.isArray(e[CMDBuild.core.constants.Proxy.WARNINGS]) || Ext.Array.forEach(e[CMDBuild.core.constants.Proxy.WARNINGS], function(e, t, o) {
                Ext.Object.isEmpty(e) || CMDBuild.core.interfaces.messages.Warning.showPopup(e)
            }, this)
        },
        formatMessage: function(e, t) {
            return Ext.isEmpty(CMDBuild.Translation.errors.reasons) || Ext.isEmpty(CMDBuild.Translation.errors.reasons[e]) ? (_error('"' + e + '" translation not found', "CMDBuild.core.interfaces.messages.Warning"), "") : Ext.String.format.apply(null, [].concat(CMDBuild.Translation.errors.reasons[e]).concat(t))
        },
        showPopup: function(e) {
            if (!Ext.Object.isEmpty(e)) {
                var t = CMDBuild.core.interfaces.messages.Warning.formatMessage(e.reason, e.reasonParameters);
                Ext.isEmpty(t) ? _error('cannot format warning message from "' + e + '"', "CMDBuild.core.interfaces.messages.Warning") : CMDBuild.core.Message.warning(null, t)
            }
        }
    }), Ext.define("CMDBuild.core.interfaces.service.LoadMask", {
        uses: ["CMDBuild.core.LoadMask"],
        singleton: !0,
        manage: function(e, t) {
            if (t = !!Ext.isBoolean(t) && t, !Ext.isEmpty(e)) switch (Ext.typeOf(e)) {
                case "object":
                    return CMDBuild.core.interfaces.service.LoadMask.manageObject(e, t);
                case "boolean":
                default:
                    return CMDBuild.core.interfaces.service.LoadMask.manageBoolean(e, t)
            }
        },
        manageBoolean: function(e, t) {
            t = !!Ext.isBoolean(t) && t, e && (t ? CMDBuild.core.LoadMask.show() : CMDBuild.core.LoadMask.hide())
        },
        manageObject: function(e, t) {
            t = !!Ext.isBoolean(t) && t, Ext.isFunction(e.setLoading) && e.setLoading(t)
        }
    }), Ext.define("CMDBuild.core.LoadMask", {
        uses: ["CMDBuild.core.Splash"],
        singleton: !0,
        instance: void 0,
        build: function(e) {
            return e = Ext.isString(e) ? e : CMDBuild.Translation.pleaseWait, Ext.isEmpty(CMDBuild.core.LoadMask.instance) && (CMDBuild.core.LoadMask.instance = Ext.create("Ext.LoadMask", {
                msg: e,
                target: Ext.getBody()
            })), CMDBuild.core.LoadMask.instance
        },
        hide: function() {
            CMDBuild.core.LoadMask.build().hide()
        },
        show: function(e) {
            (Ext.isEmpty(CMDBuild.core.Splash) || !Ext.isFunction(CMDBuild.core.Splash.build) || CMDBuild.core.Splash.build().isHidden()) && CMDBuild.core.LoadMask.build(e).show()
        }
    }), Ext.define("CMDBuild.core.Splash", {
        singleton: !0,
        instance: void 0,
        build: function(e) {
            return e = !!Ext.isBoolean(e) && e, Ext.isEmpty(CMDBuild.core.Splash.instance) && (CMDBuild.core.Splash.instance = Ext.create("Ext.window.Window", {
                closable: !1,
                draggable: !1,
                modal: !0,
                renderTo: Ext.getBody(),
                resizable: !1,
                contentEl: Ext.create("Ext.dom.Element", {
                    html: '<div class="splash-screen' + (e ? "-administration" : "") + '"><div class="text-container"><div class="description">' + CMDBuild.locale.splashDescription + '</div><span class="copyright">Copyright &copy; Tecnoteca srl</span></div><div class="version">' + CMDBuild.Translation.release + "</div></div>"
                })
            })), CMDBuild.core.Splash.instance
        },
        hide: function(e, t) {
            e = Ext.isFunction(e) ? e : Ext.emptyFn, CMDBuild.core.Splash.build().hide(), Ext.Array.forEach(Ext.DomQuery.select('div[class="display-none"]'), function(e, t, o) {
                new Ext.Element(e).removeCls("display-none")
            }, this), Ext.callback(e, t, [], 500)
        },
        show: function(e) {
            CMDBuild.core.Splash.build(e).show()
        }
    }), Ext.define("CMDBuild.core.Routes", {
        route: void 0,
        constructor: function(e) {
            Ext.apply(this, e), Ext.ns("CMDBuild.global"), CMDBuild.global.Routes = this
        },
        exec: function() {
            if (!this.isRoutePathEmpty()) {
                var e = this.route;
                delete this.route, Ext.Router.parse("exec/" + e)
            }
        },
        isRoutePathEmpty: function() {
            return !Ext.isString(this.route) || Ext.isEmpty(this.route)
        },
        setRoutePath: function(e) {
            Ext.isString(e) && !Ext.isEmpty(e) && (this.route = e)
        }
    }), Ext.define("CMDBuild.core.interfaces.Init", {
        constructor: function(e) {
            Ext.apply(this, e), Ext.ns("CMDBuild.global.interfaces.Configurations"), CMDBuild.global.interfaces.Configurations = Ext.create("CMDBuild.core.interfaces.Configurations")
        }
    }), Ext.define("CMDBuild.core.interfaces.Configurations", {
        disableAllMessages: !1,
        disableErrors: !1,
        disableWarnings: !1,
        get: function(e) {
            return !Ext.isEmpty(this[e]) && this[e]
        },
        set: function(e, t) {
            Ext.isEmpty(this[e]) || (this[e] = t)
        }
    }), Ext.define("CMDBuild.core.Data", {
        uses: ["CMDBuild.core.configurations.Timeout", "CMDBuild.core.constants.Proxy", "CMDBuild.core.CookiesManager"],
        enableLocalized: !1,
        constructor: function(e) {
            Ext.apply(this, e);
            var t = CMDBuild.core.CookiesManager.authorizationGet();
            return !Ext.isObject(CMDBuild) || Ext.isEmpty(CMDBuild) ? _error("constructor(): undefined CMDBuild object", this) : !Ext.isString(t) || Ext.isEmpty(t) ? _error("constructor(): invalid chooky authorization key value", this, t) : (Ext.Ajax.timeout = 1e3 * CMDBuild.core.configurations.Timeout.getBase(), Ext.Ajax[CMDBuild.core.constants.Proxy.AUTHORIZATION_HEADER_KEY] = CMDBuild.core.CookiesManager.authorizationGet(), Ext.Ajax[CMDBuild.core.constants.Proxy.LOCALIZED_HEADER_KEY] = this.enableLocalized, this.dataDefaultHeadersUpdate(), Ext.define("CMDBuild.data.proxy.Ajax", {
                override: "Ext.data.proxy.Ajax",
                timeout: 1e3 * CMDBuild.core.configurations.Timeout.getBase()
            }), Ext.define("CMDBuild.form.Basic", {
                override: "Ext.form.Basic",
                timeout: CMDBuild.core.configurations.Timeout.getBase()
            }), Ext.ns("CMDBuild.global"), void(CMDBuild.global.Data = this))
        },
        dataDefaultHeadersUpdate: function() {
            var e = {};
            e[CMDBuild.core.constants.Proxy.AUTHORIZATION_HEADER_KEY] = CMDBuild.core.CookiesManager.authorizationGet(), e[CMDBuild.core.constants.Proxy.LOCALIZED_HEADER_KEY] = this.enableLocalized, Ext.define("CMDBuild.data.Connection", {
                override: "Ext.data.Connection",
                timeout: 1e3 * CMDBuild.core.configurations.Timeout.getBase(),
                defaultHeaders: e
            }), Ext.Ajax[CMDBuild.core.constants.Proxy.AUTHORIZATION_HEADER_KEY] = CMDBuild.core.CookiesManager.authorizationGet()
        }
    }), Ext.define("CMDBuild.core.cache.Cache", {
        uses: ["CMDBuild.core.configurations.Timeout", "CMDBuild.core.constants.Proxy", "CMDBuild.core.interfaces.Ajax", "CMDBuild.core.interfaces.Rest"],
        bufferObject: {
            standard: {},
            store: {}
        },
        counter: 0,
        enabled: !0,
        managedGroupsArray: [CMDBuild.core.constants.Proxy.GENERIC, CMDBuild.core.constants.Proxy.ATTACHMENT, CMDBuild.core.constants.Proxy.ATTRIBUTE, CMDBuild.core.constants.Proxy.CLASS, CMDBuild.core.constants.Proxy.CARD, CMDBuild.core.constants.Proxy.EMAIL_ACCOUNT, CMDBuild.core.constants.Proxy.EMAIL_TEMPLATE, CMDBuild.core.constants.Proxy.ENTRY_TYPE, CMDBuild.core.constants.Proxy.GROUP, CMDBuild.core.constants.Proxy.GROUP_PRIVILEGE, CMDBuild.core.constants.Proxy.LOOKUP, CMDBuild.core.constants.Proxy.USER, CMDBuild.core.constants.Proxy.WIDGET, CMDBuild.core.constants.Proxy.WORKFLOW],
        managedEntities: [CMDBuild.core.constants.Proxy.CARD],
        constructor: function(e) {
            Ext.apply(this, e), Ext.ns("CMDBuild.global"), CMDBuild.global.Cache = this
        },
        cachedDataExists: function(e) {
            return e = Ext.isObject(e) ? e : {}, !(Ext.isEmpty(this.bufferObject[e.type]) || Ext.isEmpty(this.bufferObject[e.type][e.groupId]) || Ext.isEmpty(this.bufferObject[e.type][e.groupId][e.serviceEndpoint]) || Ext.isEmpty(this.bufferObject[e.type][e.groupId][e.serviceEndpoint][Ext.encode(e.params)]))
        },
        executeRequest: function(e) {
            var t = this,
                o = e.callback;
            switch (!CMDBuild.Administration && CMDBuild.global.controller && CMDBuild.global.controller.MainViewport && (0 === t.counter && CMDBuild.global.controller.MainViewport.cmfg("mainViewAccordionSetLock", !0), t.counter += 1, e.callback = function() {
                t.counter += -1, 0 === t.counter && CMDBuild.global.controller.MainViewport.cmfg("mainViewAccordionSetLock", !1), Ext.callback(o, e.scope)
            }), e.mode) {
                case "ajax":
                    return CMDBuild.core.interfaces.Ajax.request(e);
                case "rest":
                    return CMDBuild.core.interfaces.Rest.request(e);
                default:
                    _error("unmanaged or missing mode parameter", this, e)
            }
        },
        get: function(e) {
            e = this.parametersValidate(e, [CMDBuild.core.constants.Proxy.TYPE, CMDBuild.core.constants.Proxy.GROUP_ID, CMDBuild.core.constants.Proxy.SERVICE_ENDPOINT, CMDBuild.core.constants.Proxy.PARAMS]);
            var t = null;
            return this.cachedDataExists(e) && !this.isExpired(e) && (t = this.bufferObject[e.type][e.groupId][e.serviceEndpoint][Ext.encode(e.params)].get(CMDBuild.core.constants.Proxy.RESPONSE)), t
        },
        invalidate: function(e) {
            e = this.parametersValidate(e, [CMDBuild.core.constants.Proxy.GROUP_ID]), !Ext.isEmpty(e.groupId) && this.isCacheable(e.groupId) && Ext.Object.each(this.bufferObject, function(t, o, i) {
                !Ext.isEmpty(this.bufferObject[t]) && this.bufferObject[t][e.groupId] && delete this.bufferObject[t][e.groupId]
            }, this)
        },
        isCacheable: function(e) {
            return !Ext.isEmpty(e) && e != CMDBuild.core.constants.Proxy.UNCACHED && Ext.Array.contains(this.managedGroupsArray, e)
        },
        isCacheableEntity: function(e) {
            return !Ext.isEmpty(e) && e != CMDBuild.core.constants.Proxy.UNCACHED && Ext.Array.contains(this.managedEntities, e)
        },
        isExpired: function(e) {
            e = this.parametersValidate(e, [CMDBuild.core.constants.Proxy.TYPE, CMDBuild.core.constants.Proxy.GROUP_ID, CMDBuild.core.constants.Proxy.SERVICE_ENDPOINT, CMDBuild.core.constants.Proxy.PARAMS]);
            var t = !0,
                o = this.isCacheableEntity(e[CMDBuild.core.constants.Proxy.GROUP_ID]) ? CMDBuild.core.configurations.Timeout.getCacheEntity() : CMDBuild.core.configurations.Timeout.getCache();
            if (this.cachedDataExists(e)) {
                var i = this.bufferObject[e.type][e.groupId][e.serviceEndpoint][Ext.encode(e.params)];
                (t = Ext.isEmpty(i) || Ext.Object.isEmpty(i) || i.get(CMDBuild.core.constants.Proxy.DATE) < (new Date).valueOf() - o) && delete i
            }
            return t
        },
        isEnabled: function() {
            return this.enabled
        },
        parametersValidate: function(e, t) {
            e = Ext.isObject(e) ? e : {};
            var o = {};
            return Ext.applyIf(e, {
                type: CMDBuild.core.constants.Proxy.STANDARD,
                groupId: CMDBuild.core.constants.Proxy.GENERIC,
                params: CMDBuild.core.constants.Proxy.EMPTY,
                values: null
            }), e.groupId = Ext.isString(e.groupId) ? e.groupId : CMDBuild.core.constants.Proxy.GENERIC, e.serviceEndpoint = Ext.isString(e.serviceEndpoint) ? e.serviceEndpoint : null, e.params = Ext.isEmpty(e.params) || Ext.Object.isEmpty(e.params) ? CMDBuild.core.constants.Proxy.EMPTY : e.params, !Ext.isEmpty(t) && Ext.isArray(t) ? Ext.Array.forEach(t, function(t, i, r) {
                Ext.isEmpty(e[t]) || (o[t] = e[t])
            }, this) : o = e, o
        },
        request: function(e, t, o) {
            if (e = Ext.isString(e) ? e : CMDBuild.core.constants.Proxy.GENERIC, o = !!Ext.isBoolean(o) && o, Ext.isEmpty(CMDBuild.global) || Ext.isEmpty(CMDBuild.global.Data) || CMDBuild.global.Data.dataDefaultHeadersUpdate(), !Ext.isObject(t) || Ext.Object.isEmpty(t)) return _error("request(): unmanaged parameters", this, t);
            if (!Ext.isString(t.url) || Ext.isEmpty(t.url)) return _error("request(): unmanaged url parameter", this, t.url);
            if (Ext.applyIf(t, {
                    mode: "ajax",
                    method: "POST",
                    loadMask: !0,
                    scope: this,
                    callback: Ext.emptyFn,
                    failure: Ext.emptyFn,
                    success: Ext.emptyFn
                }), this.isEnabled() && this.isCacheable(e))
                if (this.isExpired({
                        groupId: e,
                        serviceEndpoint: t.url,
                        params: t.params
                    }) || o) t.success = Ext.Function.createSequence(function(i, r, n) {
                    o ? CMDBuild.global.Cache.invalidate({
                        groupId: e
                    }) : CMDBuild.global.Cache.set({
                        groupId: e,
                        serviceEndpoint: t.url,
                        params: t.params,
                        values: {
                            response: i,
                            options: r,
                            decodedResponse: n
                        }
                    })
                }, t.success), this.executeRequest(t);
                else {
                    var i = this.get({
                        groupId: e,
                        serviceEndpoint: t.url,
                        params: t.params
                    });
                    Ext.Function.createSequence(Ext.bind(t.success, t.scope, [i.response, i.options, i.decodedResponse]), Ext.bind(t.callback, t.scope, [i.options, !0, i.response]), t.scope)()
                } else this.executeRequest(t)
        },
        requestAsStore: function(e, t) {
            return parameters = this.parametersValidate({
                groupId: e
            }, [CMDBuild.core.constants.Proxy.GROUP_ID]), Ext.apply(t, parameters), Ext.create("CMDBuild.core.cache.Store", t)
        },
        set: function(e) {
            if (e = this.parametersValidate(e, [CMDBuild.core.constants.Proxy.TYPE, CMDBuild.core.constants.Proxy.GROUP_ID, CMDBuild.core.constants.Proxy.SERVICE_ENDPOINT, CMDBuild.core.constants.Proxy.PARAMS, CMDBuild.core.constants.Proxy.VALUES]), !Ext.isEmpty(e.serviceEndpoint) && !Ext.isEmpty(e.values) && this.isCacheable(e.groupId)) {
                var t = {};
                return t[CMDBuild.core.constants.Proxy.DATE] = (new Date).valueOf(), t[CMDBuild.core.constants.Proxy.PARAMETERS] = e.params, t[CMDBuild.core.constants.Proxy.RESPONSE] = e.values, Ext.isEmpty(this.bufferObject[e.type][e.groupId]) && (this.bufferObject[e.type][e.groupId] = {}), Ext.isEmpty(this.bufferObject[e.type][e.groupId][e.serviceEndpoint]) && (this.bufferObject[e.type][e.groupId][e.serviceEndpoint] = {}), this.bufferObject[e.type][e.groupId][e.serviceEndpoint][Ext.encode(e.params)] = Ext.create("CMDBuild.model.Cache", t), this.bufferObject[e.type][e.groupId][e.serviceEndpoint][Ext.encode(e.params)]
            }
            return null
        }
    }), Ext.define("CMDBuild.core.navigation.Chronology", {
        constructor: function() {
            Ext.ns("CMDBuild.global.navigation"), CMDBuild.global.navigation.Chronology = Ext.create("CMDBuild.controller.navigation.Chronology")
        }
    }), Ext.define("CMDBuild.controller.navigation.Chronology", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.configurations.DataFormat", "CMDBuild.core.constants.FieldWidths", "CMDBuild.core.constants.Global", "CMDBuild.core.constants.ModuleIdentifiers", "CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils"],
        mixins: ["CMDBuild.controller.navigation.ButtonHandlers"],
        records: [],
        cmfgCatchedFunctions: ["navigationChronologyItemConfigurationGet", "navigationChronologyButtonHandler", "navigationChronologyRecordSave", "onNavigationChronologyMenuBeforeShow"],
        getIconClass: function(e) {
            switch (e.get(CMDBuild.core.constants.Proxy.MODULE_ID)) {
                case "class":
                    return e.get([CMDBuild.core.constants.Proxy.ENTRY_TYPE, CMDBuild.core.constants.Proxy.OBJECT, "superclass"]) ? "cmdb-tree-superclass-icon" : "cmdb-tree-class-icon";
                case CMDBuild.core.constants.ModuleIdentifiers.getCustomPage():
                    return "cmdb-tree-custompage-icon";
                case "dashboard":
                    return "cmdb-tree-dashboard-icon";
                case CMDBuild.core.constants.ModuleIdentifiers.getWorkflow():
                    return e.get([CMDBuild.core.constants.Proxy.ENTRY_TYPE, CMDBuild.core.constants.Proxy.OBJECT, "superclass"]) ? "cmdb-tree-superprocessclass-icon" : "cmdb-tree-processclass-icon";
                default:
                    return "x-tree-icon-leaf"
            }
        },
        getLabel: function(e) {
            if (!Ext.isEmpty(e) && Ext.isObject(e)) {
                var t = [];
                return t.push(Ext.Date.format(e.get(CMDBuild.core.constants.Proxy.DATE), CMDBuild.core.configurations.DataFormat.getTime())), this.getLabelPropertyModuleId(t, e.get(CMDBuild.core.constants.Proxy.MODULE_ID)), this.getLabelProperty(t, e.get(CMDBuild.core.constants.Proxy.ENTRY_TYPE)), this.getLabelProperty(t, e.get(CMDBuild.core.constants.Proxy.ITEM)), this.getLabelProperty(t, e.get(CMDBuild.core.constants.Proxy.SECTION)), this.getLabelProperty(t, e.get(CMDBuild.core.constants.Proxy.SUB_SECTION)), t.join(CMDBuild.core.constants.Global.getTitleSeparator())
            }
            return ""
        },
        getLabelProperty: function(e, t) {
            Ext.isArray(e) && !Ext.isEmpty(t) && Ext.isObject(t) && (t.isEmpty(CMDBuild.core.constants.Proxy.DESCRIPTION) ? t.isEmpty(CMDBuild.core.constants.Proxy.ID) || e.push(t.get(CMDBuild.core.constants.Proxy.ID)) : e.push(t.get(CMDBuild.core.constants.Proxy.DESCRIPTION)))
        },
        getLabelPropertyModuleId: function(e, t) {
            if (Ext.isArray(e)) switch (t) {
                case "class":
                    return e.push(CMDBuild.Translation.classes);
                case CMDBuild.core.constants.ModuleIdentifiers.getCustomPage():
                    return e.push(CMDBuild.Translation.customPages);
                case "dashboard":
                    return e.push(CMDBuild.Translation.dashboard);
                case CMDBuild.core.constants.ModuleIdentifiers.getDataView():
                    return e.push(CMDBuild.Translation.views);
                case CMDBuild.core.constants.ModuleIdentifiers.getReport():
                    return e.push(CMDBuild.Translation.report);
                case CMDBuild.core.constants.ModuleIdentifiers.getWorkflow():
                    return e.push(CMDBuild.Translation.processes)
            }
        },
        menuItemsBuild: function() {
            var e = [];
            return !Ext.isEmpty(this.records) && Ext.isArray(this.records) ? (CMDBuild.core.Utils.objectArraySort(this.records, CMDBuild.core.constants.Proxy.DATE, "DESC"), Ext.Array.forEach(this.records, function(t, o, i) {
                Ext.Object.isEmpty(t) || e.push({
                    delegate: this,
                    iconCls: this.getIconClass(t),
                    record: t,
                    text: this.getLabel(t),
                    handler: function(e, t) {
                        this.delegate.cmfg("navigationChronologyButtonHandler", this.record)
                    }
                }), 0 == o && e.push("-")
            }, this)) : e.push({
                text: "- " + CMDBuild.Translation.empty + " -",
                disabled: !0
            }), e
        },
        navigationChronologyItemConfigurationGet: function() {
            return {
                text: CMDBuild.Translation.navigationChronology,
                iconCls: "navigation-chronology",
                menu: Ext.create("Ext.menu.Menu"),
                listeners: {
                    beforeshow: function(e, t) {
                        return CMDBuild.global.navigation.Chronology.cmfg("onNavigationChronologyMenuBeforeShow", this)
                    }
                }
            }
        },
        navigationChronologyRecordSave: function(e) {
            if (Ext.isEmpty(e) || !Ext.isObject(e) || Ext.isEmpty(e[CMDBuild.core.constants.Proxy.MODULE_ID]) || Ext.isEmpty(e[CMDBuild.core.constants.Proxy.ENTRY_TYPE])) _error("navigationChronologyRecordSave(): invalid record field configuration", this, e);
            else {
                var t = Ext.create("CMDBuild.model.navigation.chronology.Record", e);
                !Ext.isEmpty(this.records) && this.records[0].equals(t) || this.records.unshift(t), this.records = Ext.Array.slice(this.records, 0, CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.REFERENCE_COMBO_STORE_LIMIT))
            }
        },
        onNavigationChronologyMenuBeforeShow: function(e) {
            return !Ext.isEmpty(e) && (Ext.apply(e, {
                menu: Ext.create("Ext.menu.Menu", {
                    overflowX: "auto",
                    maxWidth: CMDBuild.core.constants.FieldWidths.MENU_DROPDOWN,
                    items: this.menuItemsBuild()
                })
            }), !0)
        }
    }), Ext.define("CMDBuild.controller.navigation.ButtonHandlers", {
        uses: ["CMDBuild.core.constants.ModuleIdentifiers", "CMDBuild.core.constants.Proxy"],
        navigationChronologyButtonHandler: function(e) {
            switch (e.get(CMDBuild.core.constants.Proxy.MODULE_ID)) {
                case "class":
                    return this.navigationChronologyButtonHandlerClass(e);
                case CMDBuild.core.constants.ModuleIdentifiers.getCustomPage():
                case "dashboard":
                case CMDBuild.core.constants.ModuleIdentifiers.getDataView():
                case CMDBuild.core.constants.ModuleIdentifiers.getReport():
                    return this.navigationChronologyButtonHandlerDefault(e);
                case CMDBuild.core.constants.ModuleIdentifiers.getWorkflow():
                    return this.navigationChronologyButtonHandlerWorkflow(e)
            }
        },
        navigationChronologyButtonHandlerClass: function(e) {
            Ext.isEmpty(e) || e.isEmpty() || e.isEmpty([CMDBuild.core.constants.Proxy.ENTRY_TYPE, CMDBuild.core.constants.Proxy.ID]) || e.isEmpty([CMDBuild.core.constants.Proxy.ITEM, CMDBuild.core.constants.Proxy.ID]) || (CMDBuild.global.controller.MainViewport.cmfg("mainViewportCardSelect", {
                Id: e.get([CMDBuild.core.constants.Proxy.ITEM, CMDBuild.core.constants.Proxy.ID]),
                IdClass: e.get([CMDBuild.core.constants.Proxy.ENTRY_TYPE, CMDBuild.core.constants.Proxy.ID]),
                activateFirstTab: !!e.isEmpty([CMDBuild.core.constants.Proxy.SECTION, CMDBuild.core.constants.Proxy.OBJECT]) || e.isEmpty([CMDBuild.core.constants.Proxy.SECTION, CMDBuild.core.constants.Proxy.OBJECT])
            }), e.isEmpty([CMDBuild.core.constants.Proxy.SECTION, CMDBuild.core.constants.Proxy.OBJECT]) || CMDBuild.global.controller.MainViewport.cmfg("mainViewportModuleControllerGet", e.get(CMDBuild.core.constants.Proxy.MODULE_ID)).gridController.view.getStore().on("load", function(t, o, i, r) {
                Ext.callback(function() {
                    CMDBuild.global.controller.MainViewport.cmfg("mainViewportModuleControllerGet", e.get(CMDBuild.core.constants.Proxy.MODULE_ID)).view.cardTabPanel.activeTabSet(e.get([CMDBuild.core.constants.Proxy.SECTION, CMDBuild.core.constants.Proxy.OBJECT]))
                }, this, {
                    single: !0
                })
            }, this, {
                single: !0
            }))
        },
        navigationChronologyButtonHandlerDefault: function(e) {
            if (!Ext.isEmpty(e) && !e.isEmpty() && !e.isEmpty([CMDBuild.core.constants.Proxy.ENTRY_TYPE, CMDBuild.core.constants.Proxy.ID])) {
                var t = CMDBuild.global.controller.MainViewport.cmfg("mainViewportAccordionControllerWithNodeWithIdGet", e.get([CMDBuild.core.constants.Proxy.ENTRY_TYPE, CMDBuild.core.constants.Proxy.ID]));
                !Ext.isEmpty(t) && Ext.isFunction(t.cmfg) && (Ext.apply(t, {
                    disableSelection: !0,
                    scope: this,
                    callback: function() {
                        t.cmfg("accordionDeselect"), t.cmfg("accordionNodeByIdSelect", {
                            id: e.get([CMDBuild.core.constants.Proxy.ENTRY_TYPE, CMDBuild.core.constants.Proxy.ID])
                        })
                    }
                }), t.cmfg("accordionExpand"))
            }
        },
        navigationChronologyButtonHandlerWorkflow: function(e) {
            Ext.isEmpty(e) || e.isEmpty() || e.isEmpty([CMDBuild.core.constants.Proxy.ENTRY_TYPE, CMDBuild.core.constants.Proxy.ID]) || e.isEmpty([CMDBuild.core.constants.Proxy.ITEM, CMDBuild.core.constants.Proxy.ID]) || CMDBuild.global.controller.MainViewport.cmfg("mainViewportCardSelect", {
                Id: e.get([CMDBuild.core.constants.Proxy.ITEM, CMDBuild.core.constants.Proxy.ID]),
                IdClass: e.get([CMDBuild.core.constants.Proxy.ENTRY_TYPE, CMDBuild.core.constants.Proxy.ID]),
                activateFirstTab: !!e.isEmpty([CMDBuild.core.constants.Proxy.SECTION, CMDBuild.core.constants.Proxy.OBJECT]) || e.isEmpty([CMDBuild.core.constants.Proxy.SECTION, CMDBuild.core.constants.Proxy.OBJECT])
            })
        }
    }), Ext.define("CMDBuild.core.RequestBarrier", {
        buffer: {},
        enableCallbackExecution: !1,
        constructor: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).executionTimeout = Ext.isNumber(e.executionTimeout) ? e.executionTimeout : 5e3, !Ext.isString(e.id) || Ext.isEmpty(e.id)) return _error("constructor(): unmanaged id parameter", this, e.id);
            this.barrierBufferSet({
                id: e.id,
                callback: e.callback,
                scope: e.scope
            }), Ext.isFunction(e.failure) && Ext.defer(function() {
                this.barrierBufferIsEmpty(e.id) || Ext.callback(this.barrierBufferGet({
                    id: e.id,
                    property: CMDBuild.core.constants.Proxy.FAILURE
                }), this.barrierBufferGet({
                    id: e.id,
                    property: CMDBuild.core.constants.Proxy.SCOPE
                }))
            }, e.executionTimeout, this)
        },
        barrierBufferGet: function(e) {
            return (e = Ext.isObject(e) ? e : {}).property = Ext.isString(e.property) ? e.property : null, !Ext.isString(e.id) || Ext.isEmpty(e.id) ? _error("barrierBufferGet(): unmanaged id parameter", this, e.id) : Ext.isObject(this.buffer[e.id]) && !Ext.Object.isEmpty(this.buffer[e.id]) ? Ext.isString(e.property) && !Ext.isEmpty(e.property) ? this.buffer[e.id].get(e.property) : this.buffer[e.id] : null
        },
        barrierBufferIsEmpty: function(e) {
            return !Ext.isString(e) || Ext.isEmpty(e) ? _error("barrierBufferIsEmpty(): unmanaged id parameter", this, e) : Ext.isObject(this.buffer[e]) && Ext.Object.isEmpty(this.buffer[e])
        },
        barrierBufferManageIndex: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).action = Ext.isString(e.action) ? e.action : "increase", !Ext.isString(e.id) || Ext.isEmpty(e.id)) return _error("barrierBufferManageIndex(): unmanaged id parameter", this, e.id);
            if (Ext.isObject(this.buffer[e.id]) && !Ext.Object.isEmpty(this.buffer[e.id])) switch (e.action) {
                case "dec":
                    return this.buffer[e.id].set(CMDBuild.core.constants.Proxy.INDEX, this.buffer[e.id].get(CMDBuild.core.constants.Proxy.INDEX) - 1);
                case "inc":
                    return this.buffer[e.id].set(CMDBuild.core.constants.Proxy.INDEX, this.buffer[e.id].get(CMDBuild.core.constants.Proxy.INDEX) + 1);
                default:
                    return _error("barrierBufferManageIndex(): unmanaged action parameter", this, e.action)
            }
        },
        barrierBufferRemove: function(e) {
            return !Ext.isString(e) || Ext.isEmpty(e) ? _error("barrierBufferDelete(): unmanaged id parameter", this, e) : Ext.isObject(this.buffer[e]) && !Ext.Object.isEmpty(this.buffer[e]) ? delete this.buffer[e] : void 0
        },
        barrierBufferSet: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).callback = Ext.isFunction(e.callback) ? e.callback : Ext.emptyFn, e.scope = Ext.isObject(e.scope) ? e.scope : this, !Ext.isString(e.id) || Ext.isEmpty(e.id)) return _error("barrierBufferGet(): unmanaged id parameter", this, e.id);
            var t = {};
            t[CMDBuild.core.constants.Proxy.CALLBACK] = e.callback, t[CMDBuild.core.constants.Proxy.SCOPE] = e.scope, this.buffer[e.id] = Ext.create("CMDBuild.model.core.Barrier", t)
        },
        callback: function(e) {
            if (!Ext.isString(e) || Ext.isEmpty(e)) return _error("callback(): unmanaged id parameter", this, e);
            this.barrierBufferIsEmpty(e) || (this.barrierBufferManageIndex({
                action: "dec",
                id: e
            }), this.finalize(e))
        },
        finalize: function(e, t) {
            if (!Ext.isString(e) || Ext.isEmpty(e)) return _error("finalize(): unmanaged id parameter", this, e);
            this.enableCallbackExecution || (this.enableCallbackExecution = !!Ext.isBoolean(t) && t), !this.barrierBufferIsEmpty(e) && 0 == this.barrierBufferGet({
                id: e,
                property: CMDBuild.core.constants.Proxy.INDEX
            }) && this.enableCallbackExecution && (Ext.callback(this.barrierBufferGet({
                id: e,
                property: CMDBuild.core.constants.Proxy.CALLBACK
            }), this.barrierBufferGet({
                id: e,
                property: CMDBuild.core.constants.Proxy.SCOPE
            })), this.barrierBufferRemove(e))
        },
        getCallback: function(e) {
            return !Ext.isString(e) || Ext.isEmpty(e) ? _error("getCallback(): unmanaged id parameter", this, e) : this.barrierBufferIsEmpty(e) ? void 0 : (this.barrierBufferManageIndex({
                action: "inc",
                id: e
            }), Ext.bind(this.callback, this, [e]))
        }
    }), Ext.require(["CMDBuild.core.constants.Proxy"]), Ext.define("CMDBuild.model.core.Barrier", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.CALLBACK,
            type: "auto",
            defaultValue: Ext.emptyFn
        }, {
            name: CMDBuild.core.constants.Proxy.FAILURE,
            type: "auto",
            defaultValue: Ext.emptyFn
        }, {
            name: CMDBuild.core.constants.Proxy.INDEX,
            type: "int",
            defaultValue: 0
        }, {
            name: CMDBuild.core.constants.Proxy.SCOPE,
            type: "auto",
            defaultValue: {}
        }]
    }), Ext.define("CMDBuild.core.configurations.builder.Instance", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.core.configurations.builder.Instance"],
        constructor: function(e) {
            (e = Ext.isObject(e) ? e : {}).callback = Ext.isFunction(e.callback) ? e.callback : Ext.emptyFn, e.enableServerCalls = !Ext.isBoolean(e.enableServerCalls) || e.enableServerCalls, e.scope = Ext.isObject(e.scope) ? e.scope : this, Ext.ns("CMDBuild.configuration"), CMDBuild.configuration.instance = Ext.create("CMDBuild.model.core.configuration.builder.Instance"), e.enableServerCalls ? CMDBuild.proxy.core.configurations.builder.Instance.read({
                loadMask: !1,
                scope: e.scope,
                callback: e.callback,
                success: function(e, t, o) {
                    o = o[CMDBuild.core.constants.Proxy.DATA], CMDBuild.configuration.instance = Ext.create("CMDBuild.model.core.configuration.builder.Instance", o)
                }
            }) : Ext.callback(e.callback, e.scope)
        }
    }), Ext.define("CMDBuild.proxy.core.configurations.builder.Instance", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        read: function(e) {
            (e = Ext.isEmpty(e) ? {} : e).params = Ext.isEmpty(e.params) ? {} : e.params, e.params[CMDBuild.core.constants.Proxy.NAME] = "cmdbuild", Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.configuration.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CONFIGURATION, e)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.builder.Instance", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.CARD_FORM_RATIO,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.CARD_LOCK_TIMEOUT,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.CARD_TABS_POSITION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.CSV_IMPORT_ONEBYONE,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.DISPLAY_CARD_LOCKER_NAME,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.ENABLE_CARD_LOCK,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.INSTANCE_NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.LOGOUT_REDIRECT,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.POPUP_HEIGHT_PERCENTAGE,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.POPUP_WIDTH_PERCENTAGE,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.REFERENCE_COMBO_STORE_LIMIT,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.RELATION_LIMIT,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.ROW_LIMIT,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.SESSION_TIMEOUT,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.STARTING_CLASS,
            type: "int",
            useNull: !0
        }],
        constructor: function(e) {
            (e = Ext.isObject(e) ? e : {})[CMDBuild.core.constants.Proxy.CARD_FORM_RATIO] = e.grid_card_ratio, e[CMDBuild.core.constants.Proxy.CARD_LOCK_TIMEOUT] = e.lockcardtimeout, e[CMDBuild.core.constants.Proxy.CARD_TABS_POSITION] = e.card_tab_position, e[CMDBuild.core.constants.Proxy.CSV_IMPORT_ONEBYONE] = e["import_csv.one_by_one"], e[CMDBuild.core.constants.Proxy.DISPLAY_CARD_LOCKER_NAME] = e.lockcarduservisible, e[CMDBuild.core.constants.Proxy.ENABLE_CARD_LOCK] = e.lockcardenabled, e[CMDBuild.core.constants.Proxy.INSTANCE_NAME] = e.instance_name, e[CMDBuild.core.constants.Proxy.LOGOUT_REDIRECT] = e["logout.redirect"], e[CMDBuild.core.constants.Proxy.POPUP_HEIGHT_PERCENTAGE] = e.popuppercentageheight, e[CMDBuild.core.constants.Proxy.POPUP_WIDTH_PERCENTAGE] = e.popuppercentagewidth, e[CMDBuild.core.constants.Proxy.REFERENCE_COMBO_STORE_LIMIT] = e.referencecombolimit, e[CMDBuild.core.constants.Proxy.RELATION_LIMIT] = e.relationlimit, e[CMDBuild.core.constants.Proxy.ROW_LIMIT] = e.rowlimit, e[CMDBuild.core.constants.Proxy.SESSION_TIMEOUT] = e["session.timeout"], e[CMDBuild.core.constants.Proxy.STARTING_CLASS] = e.startingclass, this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.core.configurations.builder.Bim", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.core.configurations.builder.Bim"],
        callback: Ext.emptyFn,
        scope: void 0,
        constructor: function(e) {
            Ext.apply(this, e), Ext.ns("CMDBuild.configuration"), CMDBuild.configuration.bim = Ext.create("CMDBuild.model.core.configuration.builder.Bim"), CMDBuild.proxy.core.configurations.builder.Bim.read({
                loadMask: !1,
                scope: this,
                success: function(e, t, o) {
                    var i = o[CMDBuild.core.constants.Proxy.DATA] || {};
                    Ext.isEmpty(i) || Ext.isEmpty(i[CMDBuild.core.constants.Proxy.DATA]) || (i = i[CMDBuild.core.constants.Proxy.DATA]), CMDBuild.proxy.core.configurations.builder.Bim.readRootLayerName({
                        loadMask: !1,
                        scope: this.scope || this,
                        success: function(e, t, o) {
                            i[CMDBuild.core.constants.Proxy.ROOT_CLASS] = o[CMDBuild.core.constants.Proxy.ROOT], CMDBuild.configuration.bim = Ext.create("CMDBuild.model.core.configuration.builder.Bim", i)
                        },
                        callback: this.callback
                    })
                }
            })
        }
    }), Ext.define("CMDBuild.proxy.core.configurations.builder.Bim", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        read: function(e) {
            (e = Ext.isEmpty(e) ? {} : e).params = Ext.isEmpty(e.params) ? {} : e.params, e.params[CMDBuild.core.constants.Proxy.NAME] = "bim", Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.configuration.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CONFIGURATION, e)
        },
        readRootLayerName: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.bim.layer.rootName
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.BIM, e)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.builder.Bim", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.ENABLED,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.PASSWORD,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ROOT_CLASS,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.URL,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.USERNAME,
            type: "string"
        }]
    }), Ext.define("CMDBuild.core.configurations.builder.Dms", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.core.configurations.builder.Dms"],
        callback: Ext.emptyFn,
        scope: void 0,
        constructor: function(e) {
            Ext.apply(this, e), Ext.ns("CMDBuild.configuration"), CMDBuild.configuration.dms = Ext.create("CMDBuild.model.core.configuration.builder.Dms"), CMDBuild.proxy.core.configurations.builder.Dms.read({
                loadMask: !1,
                scope: this.scope || this,
                success: function(e, t, o) {
                    o = o[CMDBuild.core.constants.Proxy.DATA], CMDBuild.configuration.dms = Ext.create("CMDBuild.model.core.configuration.builder.Dms", o)
                },
                callback: this.callback
            })
        }
    }), Ext.define("CMDBuild.proxy.core.configurations.builder.Dms", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        read: function(e) {
            (e = Ext.isEmpty(e) ? {} : e).params = Ext.isEmpty(e.params) ? {} : e.params, e.params[CMDBuild.core.constants.Proxy.NAME] = "dms", Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.configuration.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CONFIGURATION, e)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.builder.Dms", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.ALFRESCO_LOOKUP_CATEGORY,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ENABLED,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.TYPE,
            type: "string"
        }],
        constructor: function(e) {
            (e = Ext.isObject(e) ? e : {})[CMDBuild.core.constants.Proxy.ALFRESCO_LOOKUP_CATEGORY] = e["category.lookup"], e[CMDBuild.core.constants.Proxy.TYPE] = e["dms.service.type"], this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.core.configurations.builder.Gis", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.core.configurations.builder.Gis"],
        callback: Ext.emptyFn,
        scope: void 0,
        constructor: function(e) {
            Ext.apply(this, e), Ext.ns("CMDBuild.configuration"), CMDBuild.configuration.gis = Ext.create("CMDBuild.model.core.configuration.builder.gis.Gis"), CMDBuild.proxy.core.configurations.builder.Gis.read({
                loadMask: !1,
                scope: this,
                success: function(e, t, o) {
                    var i = o[CMDBuild.core.constants.Proxy.DATA] || {};
                    Ext.isEmpty(i) || Ext.isEmpty(i[CMDBuild.core.constants.Proxy.DATA]) || (i = i[CMDBuild.core.constants.Proxy.DATA]), CMDBuild.proxy.core.configurations.builder.Gis.readTreeNavigation({
                        loadMask: !1,
                        scope: this.scope || this,
                        success: function(e, t, o) {
                            i[CMDBuild.core.constants.Proxy.CARD_BROWSER_BY_DOMAIN_CONFIGURATION] = {
                                geoServerLayersMapping: o[CMDBuild.core.constants.Proxy.GEO_SERVER_LAYERS_MAPPING],
                                root: o[CMDBuild.core.constants.Proxy.ROOT]
                            }, CMDBuild.configuration.gis = Ext.create("CMDBuild.model.core.configuration.builder.gis.Gis", i)
                        },
                        callback: this.callback
                    })
                }
            })
        }
    }), Ext.define("CMDBuild.proxy.core.configurations.builder.Gis", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        read: function(e) {
            (e = Ext.isEmpty(e) ? {} : e).params = Ext.isEmpty(e.params) ? {} : e.params, e.params[CMDBuild.core.constants.Proxy.NAME] = "gis", Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.configuration.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CONFIGURATION, e)
        },
        readTreeNavigation: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.gis.treeNavigation.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.GIS, e)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.builder.gis.Gis", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.CARD_BROWSER_BY_DOMAIN_CONFIGURATION,
            type: "auto",
            defaultValue: {}
        }, {
            name: CMDBuild.core.constants.Proxy.CENTER_LATITUDE,
            type: "float"
        }, {
            name: CMDBuild.core.constants.Proxy.CENTER_LONGITUDE,
            type: "float"
        }, {
            name: CMDBuild.core.constants.Proxy.ENABLED,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.GEO_SERVER,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.GOOGLE,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.OSM,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.YAHOO,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.INITIAL_ZOOM_LEVEL,
            type: "int"
        }],
        constructor: function(e) {
            (e = Ext.isObject(e) ? e : {})[CMDBuild.core.constants.Proxy.CENTER_LATITUDE] = e["center.lat"], e[CMDBuild.core.constants.Proxy.CENTER_LONGITUDE] = e["center.lon"], e[CMDBuild.core.constants.Proxy.INITIAL_ZOOM_LEVEL] = e.initialZoomLevel, e[CMDBuild.core.constants.Proxy.GEO_SERVER] = Ext.create("CMDBuild.model.core.configuration.builder.gis.Geoserver", Ext.clone(e)), e[CMDBuild.core.constants.Proxy.GOOGLE] = Ext.create("CMDBuild.model.core.configuration.builder.gis.Google", Ext.clone(e)), e[CMDBuild.core.constants.Proxy.OSM] = Ext.create("CMDBuild.model.core.configuration.builder.gis.Osm", Ext.clone(e)), e[CMDBuild.core.constants.Proxy.YAHOO] = Ext.create("CMDBuild.model.core.configuration.builder.gis.Yahoo", Ext.clone(e)), this.callParent(arguments)
        },
        get: function(e) {
            if (!Ext.isEmpty(e) && Ext.isArray(e)) {
                var t = this;
                return Ext.Array.each(e, function(e, o, i) {
                    !Ext.isEmpty(t) && Ext.isFunction(t.get) && (t = t.get(e))
                }, this), t
            }
            return this.callParent(arguments)
        }
    }), Ext.require(["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils"]), Ext.define("CMDBuild.model.core.configuration.builder.gis.Geoserver", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.ENABLED,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.PASSWORD,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.URL,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.USER,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.WORKSPACE,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ZOOM_MAX,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.ZOOM_MIN,
            type: "int"
        }],
        constructor: function(e) {
            (e = Ext.isObject(e) ? e : {})[CMDBuild.core.constants.Proxy.ENABLED] = CMDBuild.core.Utils.decodeAsBoolean(e.geoserver), e[CMDBuild.core.constants.Proxy.PASSWORD] = e.geoserver_admin_password, e[CMDBuild.core.constants.Proxy.USER] = e.geoserver_admin_user, e[CMDBuild.core.constants.Proxy.ZOOM_MAX] = e.geoserver_maxzoom, e[CMDBuild.core.constants.Proxy.ZOOM_MIN] = e.geoserver_minzoom, e[CMDBuild.core.constants.Proxy.URL] = e.geoserver_url, e[CMDBuild.core.constants.Proxy.WORKSPACE] = e.geoserver_workspace, this.callParent(arguments)
        }
    }), Ext.require(["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils"]), Ext.define("CMDBuild.model.core.configuration.builder.gis.Google", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.ENABLED,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.KEY,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ZOOM_MAX,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.ZOOM_MIN,
            type: "int"
        }],
        constructor: function(e) {
            (e = Ext.isObject(e) ? e : {})[CMDBuild.core.constants.Proxy.ENABLED] = CMDBuild.core.Utils.decodeAsBoolean(e.google), e[CMDBuild.core.constants.Proxy.KEY] = e.google_key, e[CMDBuild.core.constants.Proxy.ZOOM_MAX] = e.google_maxzoom, e[CMDBuild.core.constants.Proxy.ZOOM_MIN] = e.google_minzoom, this.callParent(arguments)
        }
    }), Ext.require(["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils"]), Ext.define("CMDBuild.model.core.configuration.builder.gis.Osm", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.ENABLED,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.ZOOM_MAX,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.ZOOM_MIN,
            type: "int"
        }],
        constructor: function(e) {
            (e = Ext.isObject(e) ? e : {})[CMDBuild.core.constants.Proxy.ENABLED] = CMDBuild.core.Utils.decodeAsBoolean(e.osm), e[CMDBuild.core.constants.Proxy.ZOOM_MAX] = e.osm_maxzoom, e[CMDBuild.core.constants.Proxy.ZOOM_MIN] = e.osm_minzoom, this.callParent(arguments)
        }
    }), Ext.require(["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils"]), Ext.define("CMDBuild.model.core.configuration.builder.gis.Yahoo", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.ENABLED,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.KEY,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ZOOM_MAX,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.ZOOM_MIN,
            type: "int"
        }],
        constructor: function(e) {
            (e = Ext.isObject(e) ? e : {})[CMDBuild.core.constants.Proxy.ENABLED] = CMDBuild.core.Utils.decodeAsBoolean(e.yahoo), e[CMDBuild.core.constants.Proxy.KEY] = e.yahoo_key, e[CMDBuild.core.constants.Proxy.ZOOM_MAX] = e.yahoo_maxzoom, e[CMDBuild.core.constants.Proxy.ZOOM_MIN] = e.yahoo_minzoom, this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.core.configurations.builder.Localization", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.administration.configuration.GeneralOptions", "CMDBuild.proxy.core.configurations.builder.Localization"],
        callback: Ext.emptyFn,
        enableServerCalls: !0,
        scope: void 0,
        constructor: function(e) {
            Ext.apply(this, e), Ext.ns("CMDBuild.configuration"), CMDBuild.configuration.localization = Ext.create("CMDBuild.model.core.configuration.builder.Localization"), CMDBuild.proxy.core.configurations.builder.Localization.readAllAvailableTranslations({
                loadMask: !1,
                scope: this,
                success: function(e, t, o) {
                    o = o[CMDBuild.core.constants.Proxy.TRANSLATIONS], !Ext.isEmpty(o) && Ext.isArray(o) && (CMDBuild.configuration.localization.set(CMDBuild.core.constants.Proxy.LANGUAGES, o), this.enableServerCalls ? CMDBuild.proxy.administration.configuration.GeneralOptions.read({
                        loadMask: !1,
                        scope: this.scope || this,
                        success: function(e, t, o) {
                            o = o[CMDBuild.core.constants.Proxy.DATA], !Ext.isEmpty(o) && Ext.isObject(o) && (CMDBuild.configuration.localization.set(CMDBuild.core.constants.Proxy.ENABLED_LANGUAGES, o.enabled_languages), CMDBuild.configuration.localization.set(CMDBuild.core.constants.Proxy.DEFAULT_LANGUAGE, o[CMDBuild.core.constants.Proxy.LANGUAGE]), CMDBuild.configuration.localization.set(CMDBuild.core.constants.Proxy.LANGUAGE_PROMPT, o.languageprompt))
                        },
                        callback: this.callback
                    }) : CMDBuild.proxy.core.configurations.builder.Localization.readDefaultLanguage({
                        loadMask: !1,
                        scope: this.scope || this,
                        success: function(e, t, o) {
                            var i = o[CMDBuild.core.constants.Proxy.LANGUAGE];
                            !Ext.isEmpty(i) && Ext.isString(i) && CMDBuild.configuration.localization.set(CMDBuild.core.constants.Proxy.DEFAULT_LANGUAGE, i)
                        },
                        callback: this.callback
                    }))
                }
            })
        }
    }), Ext.define("CMDBuild.proxy.administration.configuration.GeneralOptions", {
        uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json", "CMDBuild.model.administration.configuration.generalOptions.StartingClass"],
        singleton: !0,
        getStoreStartingClass: function() {
            return CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.ENTRY_TYPE, {
                autoLoad: !0,
                model: "CMDBuild.model.administration.configuration.generalOptions.StartingClass",
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.entryType.readAll,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.CLASSES
                    },
                    extraParams: {
                        limitParam: void 0,
                        pageParam: void 0,
                        startParam: void 0
                    }
                },
                filters: [function(e) {
                    return e.get(CMDBuild.core.constants.Proxy.NAME) != CMDBuild.core.constants.Global.getRootNameClasses()
                }],
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.TEXT,
                    direction: "ASC"
                }]
            })
        },
        read: function(e) {
            (e = Ext.isEmpty(e) ? {} : e).params = Ext.isObject(e.params) ? e.params : {}, e.params[CMDBuild.core.constants.Proxy.NAME] = "cmdbuild", Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.configuration.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CONFIGURATION, e)
        },
        update: function(e) {
            (e = Ext.isEmpty(e) ? {} : e).params = Ext.isObject(e.params) ? e.params : {}, e.params[CMDBuild.core.constants.Proxy.NAME] = "cmdbuild", Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.configuration.update
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CONFIGURATION, e, !0)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.administration.configuration.generalOptions.StartingClass", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.TEXT,
            type: "string"
        }]
    }), Ext.define("CMDBuild.proxy.core.configurations.builder.Localization", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        readAllAvailableTranslations: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.utils.readAllAvailableTranslations
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.LOCALIZATION, e)
        },
        readDefaultLanguage: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.utils.readDefaultLanguage
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.LOCALIZATION, e)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.builder.Localization", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.DEFAULT_LANGUAGE,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ENABLED_LANGUAGES,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.LANGUAGE_PROMPT,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.LANGUAGES,
            type: "auto"
        }],
        constructor: function(e) {
            (e = Ext.isObject(e) ? e : {})[CMDBuild.core.constants.Proxy.DEFAULT_LANGUAGE] = e[CMDBuild.core.constants.Proxy.LANGUAGE], this.callParent(arguments)
        },
        getAllLanguages: function() {
            return this.get(CMDBuild.core.constants.Proxy.LANGUAGES) || {}
        },
        getEnabledLanguages: function() {
            var e = {};
            return Ext.Array.each(this.get(CMDBuild.core.constants.Proxy.ENABLED_LANGUAGES), function(t, o, i) {
                e[t] = this.getLanguageObject(t)
            }, this), e
        },
        getLanguageObject: function(e) {
            return this.isManagedLanguage(e) ? this.get(CMDBuild.core.constants.Proxy.LANGUAGES)[e] : null
        },
        hasEnabledLanguages: function() {
            var e = this.get(CMDBuild.core.constants.Proxy.ENABLED_LANGUAGES);
            return Ext.isArray(e) && e.length > 0
        },
        isManagedLanguage: function(e) {
            return this.get(CMDBuild.core.constants.Proxy.LANGUAGES).hasOwnProperty(e)
        },
        set: function(e, t) {
            switch (e) {
                case CMDBuild.core.constants.Proxy.ENABLED_LANGUAGES:
                    var o = [],
                        i = [];
                    if (Ext.isString(t)) {
                        var r = t.split(", ");
                        Ext.isArray(r) && r.length > 0 && (o = r)
                    } else Ext.isArray(t) && t.length > 0 && (o = t);
                    return Ext.Array.each(o, function(e, t, o) {
                        this.isManagedLanguage(e) && i.push(e)
                    }, this), this.callParent([e, i]);
                case CMDBuild.core.constants.Proxy.DEFAULT_LANGUAGE:
                    return !Ext.isEmpty(t) && this.isManagedLanguage(t) ? this.callParent(arguments) : _error("empty language tag", this);
                case CMDBuild.core.constants.Proxy.LANGUAGES:
                    var n = {};
                    if (Ext.isArray(t)) return Ext.Array.each(t, function(e, t, o) {
                        n[e[CMDBuild.core.constants.Proxy.TAG]] = Ext.create("CMDBuild.model.localization.Localization", e)
                    }, this), this.callParent([e, n]);
                    _error("wrong languages array format", this);
                default:
                    return this.callParent(arguments)
            }
        }
    }), Ext.define("CMDBuild.core.configurations.builder.RelationGraph", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.core.configurations.builder.RelationGraph"],
        callback: Ext.emptyFn,
        scope: void 0,
        constructor: function(e) {
            Ext.apply(this, e), Ext.ns("CMDBuild.configuration"), CMDBuild.configuration.graph = Ext.create("CMDBuild.model.core.configuration.builder.RelationGraph"), CMDBuild.proxy.core.configurations.builder.RelationGraph.read({
                loadMask: !1,
                scope: this.scope || this,
                success: function(e, t, o) {
                    o = o[CMDBuild.core.constants.Proxy.DATA], CMDBuild.configuration.graph = Ext.create("CMDBuild.model.core.configuration.builder.RelationGraph", o)
                },
                callback: this.callback
            })
        }
    }), Ext.define("CMDBuild.proxy.core.configurations.builder.RelationGraph", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        read: function(e) {
            (e = Ext.isEmpty(e) ? {} : e).params = Ext.isEmpty(e.params) ? {} : e.params, e.params[CMDBuild.core.constants.Proxy.NAME] = "graph", Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.configuration.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CONFIGURATION, e)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.builder.RelationGraph", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.BASE_LEVEL,
            type: "int",
            defaultValue: 1,
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.CLUSTERING_THRESHOLD,
            type: "int",
            defaultValue: 5,
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.DISPLAY_LABEL,
            type: "string",
            defaultValue: CMDBuild.core.constants.Proxy.NONE
        }, {
            name: CMDBuild.core.constants.Proxy.EDGE_COLOR,
            type: "string",
            defaultValue: "#000000"
        }, {
            name: CMDBuild.core.constants.Proxy.ENABLE_EDGE_TOOLTIP,
            type: "boolean",
            defaultValue: !0
        }, {
            name: CMDBuild.core.constants.Proxy.ENABLE_NODE_TOOLTIP,
            type: "boolean",
            defaultValue: !0
        }, {
            name: CMDBuild.core.constants.Proxy.ENABLED,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.SPRITE_DIMENSION,
            type: "int",
            defaultValue: 40,
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.STEP_RADIUS,
            type: "int",
            defaultValue: 200,
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.VIEW_POINT_DISTANCE,
            type: "int",
            defaultValue: 50,
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.VIEW_POINT_HEIGHT,
            type: "int",
            defaultValue: 50,
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.USERNAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.PASSWORD,
            type: "string"
        }]
    }), Ext.define("CMDBuild.core.configurations.builder.UserInterface", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.core.configurations.builder.UserInterface"],
        callback: Ext.emptyFn,
        scope: void 0,
        constructor: function(e) {
            Ext.apply(this, e), Ext.ns("CMDBuild.configuration"), CMDBuild.configuration.userInterface = Ext.create("CMDBuild.model.core.configuration.builder.userInterface.UserInterface"), CMDBuild.proxy.core.configurations.builder.UserInterface.read({
                loadMask: !1,
                scope: this.scope || this,
                success: function(e, t, o) {
                    o = o[CMDBuild.core.constants.Proxy.RESPONSE], CMDBuild.configuration.userInterface = Ext.create("CMDBuild.model.core.configuration.builder.userInterface.UserInterface", o)
                },
                callback: this.callback
            })
        }
    }), Ext.define("CMDBuild.proxy.core.configurations.builder.UserInterface", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        read: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.configuration.ui.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CONFIGURATION, e)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.builder.userInterface.UserInterface", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.CLOUD_ADMIN,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.DISABLED_CARD_TABS,
            type: "auto",
            defaultValue: []
        }, {
            name: CMDBuild.core.constants.Proxy.DISABLED_MODULES,
            type: "auto",
            defaultValue: []
        }, {
            name: CMDBuild.core.constants.Proxy.DISABLED_PROCESS_TABS,
            type: "auto",
            defaultValue: []
        }, {
            name: CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.HIDE_SIDE_PANEL,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.PROCESS_WIDGET_ALWAYS_ENABLED,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.SIMPLE_HISTORY_MODE_FOR_CARD,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.SIMPLE_HISTORY_MODE_FOR_PROCESS,
            type: "boolean"
        }],
        constructor: function(e) {
            this.callParent(arguments), this.toModel(CMDBuild.core.constants.Proxy.DISABLED_CARD_TABS, "CMDBuild.model.core.configuration.builder.userInterface.DisabledCardTabs"), this.toModel(CMDBuild.core.constants.Proxy.DISABLED_MODULES, "CMDBuild.model.core.configuration.builder.userInterface.DisabledModules"), this.toModel(CMDBuild.core.constants.Proxy.DISABLED_PROCESS_TABS, "CMDBuild.model.core.configuration.builder.userInterface.DisabledProcessTabs")
        },
        get: function(e) {
            if (Ext.isArray(e) && !Ext.isEmpty(e)) {
                var t = this;
                return Ext.Array.forEach(e, function(e, o, i) {
                    Ext.isObject(t) && !Ext.Object.isEmpty(t) && (t = Ext.isFunction(t.get) ? t.get(e) : Ext.isEmpty(t[e]) ? null : t[e])
                }, this), t
            }
            return this.callParent(arguments)
        },
        isDisabledCardTab: function(e) {
            return this.get(CMDBuild.core.constants.Proxy.DISABLED_CARD_TABS).get(e)
        },
        isDisabledModule: function(e) {
            return this.get(CMDBuild.core.constants.Proxy.DISABLED_MODULES).get(e)
        },
        isDisabledProcessTab: function(e) {
            return this.get(CMDBuild.core.constants.Proxy.DISABLED_PROCESS_TABS).get(e)
        },
        toModel: function(e, t) {
            if (Ext.isArray(this.get(e))) {
                var o = {};
                return Ext.Array.forEach(this.get(e), function(e, t, i) {
                    o[e] = !0
                }, this), this.set(e, Ext.create(t, o))
            }
            return this.set(e, Ext.create(t, this.get(e)))
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.builder.userInterface.DisabledCardTabs", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.CLASS_ATTACHMENT_TAB,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.CLASS_DETAIL_TAB,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.CLASS_EMAIL_TAB,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.CLASS_HISTORY_TAB,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.CLASS_NOTE_TAB,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.CLASS_RELATION_TAB,
            type: "boolean"
        }]
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.builder.userInterface.DisabledModules", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.BULK_UPDATE,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.CHANGE_PASSWORD,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.CLASS,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.CUSTOM_PAGES,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.DASHBOARD,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.DATA_VIEW,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.EXPORT_CSV,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.IMPORT_CSV,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.PROCESS,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.REPORT,
            type: "boolean"
        }],
        constructor: function(e) {
            e = Ext.isObject(e) ? e : {}, Ext.isEmpty(e[CMDBuild.core.constants.Proxy.BULK_UPDATE]) && (e[CMDBuild.core.constants.Proxy.BULK_UPDATE] = e.bulkupdate), Ext.isEmpty(e[CMDBuild.core.constants.Proxy.EXPORT_CSV]) && (e[CMDBuild.core.constants.Proxy.EXPORT_CSV] = e.exportcsv), Ext.isEmpty(e[CMDBuild.core.constants.Proxy.IMPORT_CSV]) && (e[CMDBuild.core.constants.Proxy.IMPORT_CSV] = e.importcsv), this.callParent(arguments)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.builder.userInterface.DisabledProcessTabs", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.PROCESS_ATTACHMENT_TAB,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.PROCESS_EMAIL_TAB,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.PROCESS_HISTORY_TAB,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.PROCESS_NOTE_TAB,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.PROCESS_RELATION_TAB,
            type: "boolean"
        }]
    }), Ext.define("CMDBuild.core.configurations.builder.Workflow", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.core.configurations.builder.Workflow"],
        callback: Ext.emptyFn,
        scope: void 0,
        constructor: function(e) {
            Ext.apply(this, e), Ext.ns("CMDBuild.configuration"), CMDBuild.configuration.workflow = Ext.create("CMDBuild.model.core.configuration.builder.Workflow"), CMDBuild.proxy.core.configurations.builder.Workflow.read({
                loadMask: !1,
                scope: this.scope || this,
                success: function(e, t, o) {
                    o = o[CMDBuild.core.constants.Proxy.DATA], CMDBuild.configuration.workflow = Ext.create("CMDBuild.model.core.configuration.builder.Workflow", o)
                },
                callback: this.callback
            })
        }
    }), Ext.define("CMDBuild.proxy.core.configurations.builder.Workflow", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        read: function(e) {
            (e = Ext.isEmpty(e) ? {} : e).params = Ext.isEmpty(e.params) ? {} : e.params, e.params[CMDBuild.core.constants.Proxy.NAME] = "workflow", Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.configuration.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CONFIGURATION, e)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.core.configuration.builder.Workflow", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.DISABLE_SYNCHRONIZATION_OF_MISSING_VARIABLES,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.ENABLE_ADD_ATTACHMENT_ON_CLOSED_ACTIVITIES,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.ENABLED,
            type: "boolean"
        }, {
            name: CMDBuild.core.constants.Proxy.PASSWORD,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.URL,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.USER,
            type: "string"
        }],
        constructor: function(e) {
            (e = Ext.isObject(e) ? e : {})[CMDBuild.core.constants.Proxy.URL] = e.endpoint, this.callParent(arguments)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.localization.Localization", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.TAG,
            type: "string"
        }]
    }), Ext.require(["CMDBuild.core.constants.Proxy"]), Ext.define("CMDBuild.model.Cache", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.DATE,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.PARAMETERS,
            type: "auto",
            defaultValue: {}
        }, {
            name: CMDBuild.core.constants.Proxy.RESPONSE,
            type: "auto",
            defaultValue: {}
        }]
    }),
    function() {
        var e = "x-btn-split-right";
        Ext.define("CMDBuild.core.buttons.iconized.split.add.Card", {
            extend: "Ext.button.Split",
            translation: CMDBuild.Translation.management.moddetail,
            iconCls: "add",
            cmName: void 0,
            baseText: CMDBuild.Translation.management.modcard.add_card,
            textPrefix: CMDBuild.Translation.management.modcard.add_card,
            initComponent: function() {
                this.subClasses = {}, Ext.applyIf(this, {
                    text: this.baseText,
                    menu: {
                        items: []
                    },
                    handler: i,
                    scope: this
                }), this.callParent(arguments)
            },
            updateForEntry: function(e) {
                if (e) {
                    this.classId = e.get("id"),
                        function(e) {
                            if (this.menu.removeAll(), e) {
                                var i = e.get("id"),
                                    r = _CMUtils.isSuperclass(i);
                                if (this.setTextSuffix(e.data.text), r) {
                                    var n = _CMUtils.getDescendantsById(i);
                                    Ext.Array.sort(n, function(e, o) {
                                        return e.get(t) >= o.get(t)
                                    });
                                    for (var a = 0; a < n.length; ++a) {
                                        var s = n[a];
                                        o.call(this, s)
                                    }
                                }
                            }
                        }.call(this, e);
                    var i = _CMUtils.getClassPrivileges(this.classId);
                    _CMUtils.isSuperclass(this.classId) ? (this.setDisabled(this.isEmpty() || i.crudDisabled.create), this.showDropDownArrow()) : (this.setDisabled(!i.create || i.crudDisabled.create), this.hideDropDownArrow())
                }
            },
            enable: function() {
                Ext.isEmpty(this.classId) || _CMUtils.isSuperclass(this.classId) && (!_CMUtils.isSuperclass(this.classId) || this.isEmpty()) || this.callParent(arguments)
            },
            showDropDownArrow: function() {
                var t = this.getArrowEl();
                t && t.addCls(e)
            },
            hideDropDownArrow: function() {
                var t = this.getArrowEl();
                t && t.removeCls(e)
            },
            disableIfEmpty: function() {
                this.isEmpty() ? this.disable() : this.enable()
            },
            setTextSuffix: function(e) {
                this.setText(this.textPrefix + " " + e)
            },
            getArrowEl: function() {
                try {
                    var e = Ext.DomQuery.selectNode(".x-btn-split", this.el.dom);
                    return Ext.get(e)
                } catch (e) {
                    return null
                }
            },
            isEmpty: function() {
                return this.menu && 0 == this.menu.items.length
            },
            resetText: function() {
                this.setText(this.baseText)
            }
        });
        var t = "text";

        function o(e) {
            var t = _CMUtils.getClassPrivileges(e.get("id"));
            t.create && !t.crudDisabled.create && this.menu.add({
                text: e.get("text"),
                subclassId: e.get("id"),
                subclassName: e.get("text"),
                scope: this,
                handler: function(e, t) {
                    this.fireEvent("cmClick", {
                        classId: e.subclassId,
                        className: e.subclassName
                    })
                }
            })
        }

        function i() {
            this.disabled || (this.isEmpty() ? this.fireEvent("cmClick", {
                classId: this.classId,
                className: this.text
            }) : this.showMenu())
        }
    }(), Ext.define("CMDBuild.core.cache.Store", {
        extend: "Ext.data.Store",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.interfaces.Ajax"],
        groupId: void 0,
        type: "store",
        callbackInterceptor: function(e, t, o) {
            var i = {};
            return Ext.isEmpty(t) || Ext.isEmpty(t.response) || Ext.isEmpty(t.response.responseText) || (i = CMDBuild.core.interfaces.Ajax.decodeJson(t.response.responseText)), CMDBuild.global.interfaces.Configurations.get("disableAllMessages") || (CMDBuild.global.interfaces.Configurations.get("disableWarnings") || CMDBuild.core.interfaces.messages.Warning.display(i), CMDBuild.global.interfaces.Configurations.get("disableErrors") || CMDBuild.core.interfaces.messages.Error.display(i, t.request)), !0
        },
        load: function(e) {
            if (e = Ext.isEmpty(e) ? {} : e, Ext.applyIf(e, {
                    callback: Ext.emptyFn,
                    params: {},
                    scope: this
                }), CMDBuild.global.Cache.isEnabled() && CMDBuild.global.Cache.isCacheable(this.groupId)) {
                var t = {
                    type: this.type,
                    groupId: this.groupId,
                    serviceEndpoint: this.proxy.url,
                    params: Ext.clone(Ext.Object.merge(this.getProxy().extraParams, e.params))
                };
                if (t.params.modelName = this.model.getName(), !CMDBuild.global.Cache.isExpired(t)) {
                    var o = CMDBuild.global.Cache.get(t);
                    return this.loadData(o.records), e.callback = Ext.Function.createInterceptor(e.callback, this.callbackInterceptor, this), this.hasListeners.load && this.fireEvent("load", this, o.records, o.success), Ext.callback(e.callback, e.scope, [o.records, o.operation, o.success])
                }
                e.callback = Ext.Function.createSequence(function(e, o, i) {
                    Ext.apply(t, {
                        values: {
                            records: e,
                            operation: o,
                            success: i
                        }
                    }), CMDBuild.global.Cache.set(t)
                }, e.callback)
            }
            e.callback = Ext.Function.createInterceptor(e.callback, this.callbackInterceptor, this), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.Advanced", {
        extend: "CMDBuild.controller.common.abstract.Base",
        parentDelegate: void 0,
        appliedFilter: void 0,
        cmfgCatchedFunctions: ["panelGridAndFormFilterAdvancedAppliedFilterGet", "panelGridAndFormFilterAdvancedAppliedFilterIsEmpty", "panelGridAndFormFilterAdvancedAppliedFilterReset", "panelGridAndFormFilterAdvancedAppliedFilterSet", "panelGridAndFormFilterAdvancedEntryTypeGet", "panelGridAndFormFilterAdvancedEntryTypeIsEmpty", "panelGridAndFormFilterAdvancedEntryTypeSet = entryTypeSet", "panelGridAndFormFilterAdvancedLocalFilterAdd", "panelGridAndFormFilterAdvancedLocalFilterGet", "panelGridAndFormFilterAdvancedLocalFilterIsEmpty", "panelGridAndFormFilterAdvancedLocalFilterRemove", "panelGridAndFormFilterAdvancedManageToggleButtonLabelSet", "panelGridAndFormFilterAdvancedManageToggleStateReset", "panelGridAndFormFilterAdvancedMasterGridGet", "getView = panelGridAndFormFilterAdvancedViewGet", "onPanelGridAndFormFilterAdvancedClearButtonClick", "onPanelGridAndFormFilterAdvancedDisable", "onPanelGridAndFormFilterAdvancedEnable", "onPanelGridAndFormFilterAdvancedFilterSelect", "onPanelGridAndFormFilterAdvancedManageToggleButtonClick"],
        controllerManager: void 0,
        localFilterCache: {},
        masterGrid: void 0,
        selectedEntryType: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.AdvancedView", {
                delegate: this
            }), this.controllerManager = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.Manager", {
                parentDelegate: this
            })
        },
        panelGridAndFormFilterAdvancedAppliedFilterGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "appliedFilter", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        panelGridAndFormFilterAdvancedAppliedFilterIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "appliedFilter", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        panelGridAndFormFilterAdvancedAppliedFilterReset: function() {
            this.propertyManageReset("appliedFilter")
        },
        panelGridAndFormFilterAdvancedAppliedFilterSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.common.panel.gridAndForm.filter.advanced.Filter", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "appliedFilter", this.propertyManageSet(e))
        },
        panelGridAndFormFilterAdvancedEntryTypeGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntryType", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        panelGridAndFormFilterAdvancedEntryTypeIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntryType", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        panelGridAndFormFilterAdvancedEntryTypeSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.common.panel.gridAndForm.filter.advanced.SelectedEntryType", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntryType", this.propertyManageSet(e))
        },
        panelGridAndFormFilterAdvancedManageToggleButtonLabelSet: function(e) {
            this.view.manageToggleButton.setText(Ext.isEmpty(e) ? CMDBuild.Translation.searchFilter : Ext.String.ellipsis(e, 35)), this.view.manageToggleButton.setTooltip(Ext.isEmpty(e) ? "" : e)
        },
        panelGridAndFormFilterAdvancedManageToggleStateReset: function() {
            this.view.manageToggleButton.toggle(!1)
        },
        panelGridAndFormFilterAdvancedMasterGridGet: function() {
            return this.masterGrid
        },
        panelGridAndFormFilterAdvancedLocalFilterAdd: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = e.get(CMDBuild.core.constants.Proxy.ID),
                    o = e.get(CMDBuild.core.constants.Proxy.TEMPORARY_ID);
                Ext.isEmpty(t) && Ext.isEmpty(o) ? (t = (new Date).valueOf(), e.set(CMDBuild.core.constants.Proxy.TEMPORARY_ID, t)) : Ext.isEmpty(t) && (t = o), this.localFilterCache[t] = e
            } else _error("panelGridAndFormFilterAdvancedLocalFilterAdd(): unmanaged filterModel parameter", this, e)
        },
        panelGridAndFormFilterAdvancedLocalFilterGet: function() {
            var e = Ext.Object.getValues(this.localFilterCache),
                t = this.cmfg("panelGridAndFormFilterAdvancedEntryTypeGet", CMDBuild.core.constants.Proxy.NAME);
            return Ext.isArray(e) && !Ext.isEmpty(e) && (e = Ext.Array.filter(e, function(e, o, i) {
                return e.get(CMDBuild.core.constants.Proxy.ENTRY_TYPE) == t
            }, this)), e
        },
        panelGridAndFormFilterAdvancedLocalFilterIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "localFilterCache", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        panelGridAndFormFilterAdvancedLocalFilterRemove: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = null;
                Ext.Object.each(this.localFilterCache, function(o, i, r) {
                    var n = e.getData(),
                        a = i.getData();
                    Ext.Object.equals(n, a) && (t = o)
                }, this), Ext.isEmpty(t) || delete this.localFilterCache[t]
            } else _error("panelGridAndFormFilterAdvancedLocalFilterRemove(): unmanaged filterModel parameter", this, e)
        },
        onPanelGridAndFormFilterAdvancedClearButtonClick: function() {
            var e = this.cmfg("panelGridAndFormFilterAdvancedMasterGridGet");
            Ext.isEmpty(e) ? _error("onPanelGridAndFormFilterAdvancedClearButtonClick(): empty master grid", this, e) : (e.getSelectionModel().hasSelection() && e.getSelectionModel().deselectAll(), this.cmfg("panelGridAndFormFilterAdvancedAppliedFilterIsEmpty") || this.cmfg("panelGridAndFormFilterAdvancedAppliedFilterReset"), this.cmfg("panelGridAndFormFilterAdvancedManageToggleButtonLabelSet"), this.view.clearButton.disable(), Ext.isObject(CMDBuild.global.dataViewHack) && !Ext.Object.isEmpty(CMDBuild.global.dataViewHack) && Ext.isString(CMDBuild.global.dataViewHack.filter) && !Ext.isEmpty(CMDBuild.global.dataViewHack.filter) && CMDBuild.global.dataViewHack.entryType.get(CMDBuild.core.constants.Proxy.ID) == this.cmfg("panelGridAndFormFilterAdvancedEntryTypeGet", CMDBuild.core.constants.Proxy.ID) ? (e.applyFilterToStore(Ext.decode(CMDBuild.global.dataViewHack.filter)), e.reload()) : (Ext.isEmpty(CMDBuild.global.dataViewHack) || delete CMDBuild.global.dataViewHack, e.applyFilterToStore({}), e.reload()))
        },
        onPanelGridAndFormFilterAdvancedDisable: function() {
            this.view.clearButton.disable(), this.view.manageToggleButton.disable()
        },
        onPanelGridAndFormFilterAdvancedEnable: function() {
            this.view.clearButton.enable(), this.view.manageToggleButton.enable()
        },
        onPanelGridAndFormFilterAdvancedFilterSelect: function(e) {
            var t = this.cmfg("panelGridAndFormFilterAdvancedMasterGridGet");
            Ext.isEmpty(t) ? _error("onPanelGridAndFormFilterAdvancedFilterSelect(): empty master grid", this, t) : (this.controllerManager.cmfg("panelGridAndFormFilterAdvancedManagerViewClose"), e.resetRuntimeParametersValue(), this.cmfg("panelGridAndFormFilterAdvancedAppliedFilterSet", {
                value: e
            }), this.cmfg("panelGridAndFormFilterAdvancedManageToggleButtonLabelSet", this.cmfg("panelGridAndFormFilterAdvancedAppliedFilterGet", CMDBuild.core.constants.Proxy.DESCRIPTION)), this.view.clearButton.enable(), t.delegate.onFilterMenuButtonApplyActionClick(Ext.create("CMDBuild.model.CMFilterModel", e.getData())))
        },
        onPanelGridAndFormFilterAdvancedManageToggleButtonClick: function(e) {
            e ? this.controllerManager.cmfg("panelGridAndFormFilterAdvancedManagerViewShow") : this.controllerManager.cmfg("panelGridAndFormFilterAdvancedManagerViewClose")
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.AdvancedView", {
        extend: "Ext.container.ButtonGroup",
        delegate: void 0,
        clearButton: void 0,
        manageToggleButton: void 0,
        border: !1,
        frame: !1,
        shadow: !1,
        initComponent: function() {
            Ext.apply(this, {
                items: [this.manageToggleButton = Ext.create("CMDBuild.core.buttons.iconized.filter.SearchSet", {
                    enableToggle: !0,
                    scope: this,
                    toggleHandler: function(e, t) {
                        this.delegate.cmfg("onPanelGridAndFormFilterAdvancedManageToggleButtonClick", t)
                    }
                }), this.clearButton = Ext.create("CMDBuild.core.buttons.iconized.filter.SearchClear", {
                    disabled: !0,
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onPanelGridAndFormFilterAdvancedClearButtonClick")
                    }
                })]
            }), this.callParent(arguments)
        },
        disable: function() {
            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedDisable")
        },
        disableClearFilterButton: function() {
            _deprecated("disableClearFilterButton", this), this.clearButton.disable()
        },
        enable: function() {
            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedEnable")
        },
        enableClearFilterButton: function() {
            _deprecated("enableClearFilterButton", this), this.clearButton.enable()
        },
        getFilterStore: function() {
            return _deprecated("getFilterStore", this), this.delegate.controllerManager.grid.getStore()
        },
        setFilterButtonLabel: function(e) {
            _deprecated("setFilterButtonLabel", this), this.delegate.cmfg("panelGridAndFormFilterAdvancedManageToggleButtonLabelSet", e)
        }
    }), Ext.define("CMDBuild.core.buttons.iconized.filter.SearchSet", {
        extend: "CMDBuild.core.buttons.Base",
        width: 200,
        cls: "cmdb-button-filter",
        iconCls: "searchFilter",
        textDefault: CMDBuild.Translation.searchFilter
    }), Ext.define("CMDBuild.core.buttons.Base", {
        extend: "Ext.button.Button",
        textDefault: void 0,
        withSpacer: !1,
        initComponent: function() {
            Ext.isEmpty(this.iconCls) && Ext.apply(this, {
                minWidth: 75
            }), Ext.isEmpty(this.text, !0) && Ext.isEmpty(this.tooltip) && Ext.apply(this, {
                text: this.textDefault
            }), !Ext.isEmpty(this.tooltip) && this.withSpacer && Ext.apply(this, {
                iconCls: this.iconCls + " cm-action-col-icon-spacer"
            }), !Ext.isEmpty(this.isDisabled) && Ext.isFunction(this.isDisabled) && Ext.apply(this, {
                isDisabled: Ext.bind(this.isDisabled, this.scope)
            }), this.on("show", function(e, t) {
                Ext.isFunction(this.isDisabled) && this.setDisabled(this.isDisabled())
            }, this), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.core.buttons.iconized.filter.SearchClear", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "searchFilterClear",
        textDefault: CMDBuild.Translation.clearFilter
    }), Ext.define("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.Manager", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.Manager"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["panelGridAndFormFilterAdvancedManagerSave", "panelGridAndFormFilterAdvancedManagerSelectedFilterGet", "panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty", "panelGridAndFormFilterAdvancedManagerSelectedFilterSet", "panelGridAndFormFilterAdvancedManagerStoreIsEmpty", "panelGridAndFormFilterAdvancedManagerViewClose", "panelGridAndFormFilterAdvancedManagerViewShow", "onPanelGridAndFormFilterAdvancedManagerAddButtonClick", "onPanelGridAndFormFilterAdvancedManagerCloneButtonClick", "onPanelGridAndFormFilterAdvancedManagerModifyButtonClick", "onPanelGridAndFormFilterAdvancedManagerRemoveButtonClick", "onPanelGridAndFormFilterAdvancedManagerSaveButtonClick", "onPanelGridAndFormFilterAdvancedManagerViewShow"],
        controllerFilterEditor: void 0,
        controllerSaveDialog: void 0,
        grid: void 0,
        selectedFilter: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.manager.ManagerWindow", {
                delegate: this
            }), this.controllerFilterEditor = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.FilterEditor", {
                parentDelegate: this
            }), this.controllerSaveDialog = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.SaveDialog", {
                parentDelegate: this
            }), this.grid = this.view.grid
        },
        panelGridAndFormFilterAdvancedManagerSave: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).enableApply = !!Ext.isBoolean(e.enableApply) && e.enableApply, e.enableSaveDialog = !Ext.isBoolean(e.enableSaveDialog) || e.enableSaveDialog, !this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty")) return e.enableSaveDialog ? this.controllerSaveDialog.cmfg("panelGridAndFormFilterAdvancedSaveDialogShow", e.enableApply) : this.saveActionManage(e.enableApply);
            _error("panelGridAndFormFilterAdvancedManagerSave(): cannot save empty filter", this, this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet"))
        },
        panelGridAndFormFilterAdvancedManagerStoreIsEmpty: function() {
            return 0 == this.grid.getStore().count()
        },
        panelGridAndFormFilterAdvancedManagerViewClose: function() {
            this.view.close()
        },
        panelGridAndFormFilterAdvancedManagerViewShow: function() {
            var e = {};
            e[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("panelGridAndFormFilterAdvancedEntryTypeGet", CMDBuild.core.constants.Proxy.NAME), this.grid.getStore().load({
                params: e,
                scope: this,
                callback: function(e, t, o) {
                    o && (this.cmfg("panelGridAndFormFilterAdvancedLocalFilterIsEmpty") || (this.grid.getStore().add(this.cmfg("panelGridAndFormFilterAdvancedLocalFilterGet")), this.grid.getStore().sort()), 0 == this.grid.getStore().count() ? this.cmfg("onPanelGridAndFormFilterAdvancedManagerAddButtonClick") : this.view.show())
                }
            })
        },
        onPanelGridAndFormFilterAdvancedManagerAddButtonClick: function() {
            var e = {};
            e[CMDBuild.core.constants.Proxy.ENTRY_TYPE] = this.cmfg("panelGridAndFormFilterAdvancedEntryTypeGet", CMDBuild.core.constants.Proxy.NAME), e[CMDBuild.core.constants.Proxy.NAME] = CMDBuild.Translation.newSearchFilter, this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterSet", {
                value: e
            }), this.controllerFilterEditor.getView().show()
        },
        onPanelGridAndFormFilterAdvancedManagerCloneButtonClick: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = e.getData();
                t[CMDBuild.core.constants.Proxy.ID] = null, t[CMDBuild.core.constants.Proxy.NAME] = CMDBuild.Translation.copyOf + " " + e.get(CMDBuild.core.constants.Proxy.NAME), this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterSet", {
                    value: t
                }), this.controllerFilterEditor.getView().show()
            } else _error("onPanelGridAndFormFilterAdvancedManagerCloneButtonClick(): wrong filter parameter", this, e)
        },
        onPanelGridAndFormFilterAdvancedManagerModifyButtonClick: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) ? (this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterSet", {
                value: e
            }), this.controllerFilterEditor.getView().show()) : _error("onPanelGridAndFormFilterAdvancedManagerModifyButtonClick(): wrong filter parameter", this, e)
        },
        onPanelGridAndFormFilterAdvancedManagerRemoveButtonClick: function(e) {
            Ext.MessageBox.confirm(CMDBuild.Translation.attention, CMDBuild.Translation.common.confirmpopup.areyousure, function(t, o, i) {
                "yes" == t && this.removeItem(e)
            }, this)
        },
        onPanelGridAndFormFilterAdvancedManagerSaveButtonClick: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = e.getData();
                delete t[CMDBuild.core.constants.Proxy.DESCRIPTION], delete t[CMDBuild.core.constants.Proxy.NAME], this.cmfg("panelGridAndFormFilterAdvancedLocalFilterRemove", e), this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterSet", {
                    value: t
                }), this.cmfg("panelGridAndFormFilterAdvancedManagerSave")
            } else _error("onPanelGridAndFormFilterAdvancedManagerSaveButtonClick(): wrong filter parameter", this, e)
        },
        onPanelGridAndFormFilterAdvancedManagerViewShow: function() {
            this.grid.getSelectionModel().hasSelection() && this.grid.getSelectionModel().deselectAll();
            var e = this.cmfg("panelGridAndFormFilterAdvancedViewGet").getBox();
            Ext.isEmpty(e) || this.view.setPosition(e.x, e.y + e.height), Ext.getBody().on("click", this.onViewOutsideClick, this)
        },
        onViewOutsideClick: function(e, t, o) {
            var i = this.view.getEl();
            i.dom === t || i.contains(t) || (Ext.getBody().un("click", this.onViewOutsideClick, this), this.cmfg("panelGridAndFormFilterAdvancedManageToggleStateReset"), this.view.close())
        },
        removeItem: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e))
                if (this.cmfg("panelGridAndFormFilterAdvancedManagerViewClose"), Ext.isEmpty(e.get(CMDBuild.core.constants.Proxy.ID))) e.get(CMDBuild.core.constants.Proxy.ID) == this.cmfg("panelGridAndFormFilterAdvancedAppliedFilterGet", CMDBuild.core.constants.Proxy.ID) && this.cmfg("onPanelGridAndFormFilterAdvancedClearButtonClick"), this.cmfg("panelGridAndFormFilterAdvancedLocalFilterRemove", e), this.cmfg("panelGridAndFormFilterAdvancedManageToggleButtonLabelSet"), this.cmfg("panelGridAndFormFilterAdvancedManagerViewShow");
                else {
                    var t = {};
                    t[CMDBuild.core.constants.Proxy.ID] = e.get(CMDBuild.core.constants.Proxy.ID), CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.Manager.remove({
                        params: t,
                        scope: this,
                        success: function(t, o, i) {
                            e.get(CMDBuild.core.constants.Proxy.ID) == this.cmfg("panelGridAndFormFilterAdvancedAppliedFilterGet", CMDBuild.core.constants.Proxy.ID) && this.cmfg("onPanelGridAndFormFilterAdvancedClearButtonClick"), this.cmfg("panelGridAndFormFilterAdvancedManageToggleButtonLabelSet"), this.cmfg("panelGridAndFormFilterAdvancedManagerViewShow")
                        }
                    })
                } else _error("removeItem(): wrong filter parameter", this, e)
        },
        saveActionManage: function(e) {
            if (e = !!Ext.isBoolean(e) && e, this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty")) return _error("saveActionManage(): empty selected filter", this, this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet"));
            var t = this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet"),
                o = {};
            o[CMDBuild.core.constants.Proxy.CLASS_NAME] = t.get(CMDBuild.core.constants.Proxy.ENTRY_TYPE), o[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.encode(t.get(CMDBuild.core.constants.Proxy.CONFIGURATION)), o[CMDBuild.core.constants.Proxy.DESCRIPTION] = t.get(CMDBuild.core.constants.Proxy.DESCRIPTION), o[CMDBuild.core.constants.Proxy.NAME] = t.get(CMDBuild.core.constants.Proxy.NAME), Ext.isEmpty(t.get(CMDBuild.core.constants.Proxy.ID)) ? CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.Manager.create({
                params: o,
                scope: this,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.FILTER], Ext.isObject(i) && !Ext.isEmpty(i) ? (this.controllerSaveDialog.cmfg("onPanelGridAndFormFilterAdvancedSaveDialogAbortButtonClick"), this.controllerFilterEditor.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorAbortButtonClick"), this.cmfg("panelGridAndFormFilterAdvancedManagerViewClose"), e ? (this.cmfg("onPanelGridAndFormFilterAdvancedFilterSelect", Ext.create("CMDBuild.model.common.panel.gridAndForm.filter.advanced.Filter", i)), this.panelGridAndFormFilterAdvancedManagerSelectedFilterReset()) : this.cmfg("panelGridAndFormFilterAdvancedManagerViewShow")) : _error("saveActionManage(): unmanaged create response", this, i)
                }
            }) : (o[CMDBuild.core.constants.Proxy.ID] = t.get(CMDBuild.core.constants.Proxy.ID), CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.Manager.update({
                params: o,
                scope: this,
                success: function(t, i, r) {
                    (r = o)[CMDBuild.core.constants.Proxy.ENTRY_TYPE] = r[CMDBuild.core.constants.Proxy.CLASS_NAME], r[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.decode(r[CMDBuild.core.constants.Proxy.CONFIGURATION]), Ext.isObject(r) && !Ext.isEmpty(r) ? (this.controllerSaveDialog.cmfg("onPanelGridAndFormFilterAdvancedSaveDialogAbortButtonClick"), this.controllerFilterEditor.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorAbortButtonClick"), this.cmfg("panelGridAndFormFilterAdvancedManagerViewClose"), e ? (this.cmfg("onPanelGridAndFormFilterAdvancedFilterSelect", Ext.create("CMDBuild.model.common.panel.gridAndForm.filter.advanced.Filter", r)), this.panelGridAndFormFilterAdvancedManagerSelectedFilterReset()) : this.cmfg("panelGridAndFormFilterAdvancedManagerViewShow")) : _error("saveActionManage(): unmanaged update response", this, r)
                }
            }))
        },
        panelGridAndFormFilterAdvancedManagerSelectedFilterGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedFilter", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedFilter", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        panelGridAndFormFilterAdvancedManagerSelectedFilterReset: function() {
            this.propertyManageReset("selectedFilter")
        },
        panelGridAndFormFilterAdvancedManagerSelectedFilterSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.common.panel.gridAndForm.filter.advanced.Filter", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedFilter", this.propertyManageSet(e))
        }
    }), Ext.define("CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.Manager", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.model.common.panel.gridAndForm.filter.advanced.Filter", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        create: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.filter.group.create
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.FILTER, e, !0)
        },
        getStoreUser: function() {
            return CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.FILTER, {
                autoLoad: !1,
                model: "CMDBuild.model.common.panel.gridAndForm.filter.advanced.Filter",
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.filter.user.readAll,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.FILTERS,
                        idProperty: CMDBuild.core.constants.Proxy.ID
                    }
                },
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.DESCRIPTION,
                    direction: "ASC"
                }, {
                    property: CMDBuild.core.constants.Proxy.NAME,
                    direction: "ASC"
                }]
            })
        },
        update: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.filter.group.update
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.FILTER, e, !0)
        },
        remove: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.filter.group.remove
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.FILTER, e, !0)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.common.panel.gridAndForm.filter.advanced.Filter", {
        extend: "Ext.data.Model",
        isFilterAdvancedCompatible: !0,
        fields: [{
            name: CMDBuild.core.constants.Proxy.CONFIGURATION,
            type: "auto",
            defaultValue: {}
        }, {
            name: CMDBuild.core.constants.Proxy.TEMPORARY_ID,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ENTRY_TYPE,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.TEMPLATE,
            type: "boolean"
        }],
        get: function(e) {
            switch (e) {
                case CMDBuild.core.constants.Proxy.DESCRIPTION:
                    return this.callParent(arguments) || this.get(CMDBuild.core.constants.Proxy.NAME) || "";
                default:
                    return this.callParent(arguments)
            }
        },
        getEmptyRuntimeParameters: function() {
            var e = [];
            return this.findParameters(this.get(CMDBuild.core.constants.Proxy.CONFIGURATION)[CMDBuild.core.constants.Proxy.ATTRIBUTE], CMDBuild.core.constants.Proxy.RUNTIME, e, !0), e
        },
        findParameters: function(e, t, o, i) {
            if (i = !!Ext.isBoolean(i) && i, Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isString(t) && !Ext.isEmpty(t) && Ext.isArray(o))
                if (Ext.isObject(e.simple)) {
                    var r = e.simple;
                    if (r.parameterType == t) return i ? Ext.Object.isEmpty(r.value) ? o.push(r) : null : o.push(r)
                } else if (Ext.isArray(e.and) || Ext.isArray(e.or)) {
                var n = e.and || e.or;
                Ext.isArray(n) && !Ext.isEmpty(n) && Ext.Array.each(n, function(e, r, n) {
                    this.findParameters(e, t, o, i)
                }, this)
            }
        },
        resetRuntimeParametersValue: function() {
            var e = this.get(CMDBuild.core.constants.Proxy.CONFIGURATION),
                t = [];
            this.findParameters(e[CMDBuild.core.constants.Proxy.ATTRIBUTE], CMDBuild.core.constants.Proxy.RUNTIME, t), Ext.Array.each(t, function(e, t, o) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.VALUE] = [])
            }, this), this.set(CMDBuild.core.constants.Proxy.CONFIGURATION, e)
        },
        resolveCalculatedParameters: function() {
            var e = this.get(CMDBuild.core.constants.Proxy.CONFIGURATION),
                t = [];
            this.findParameters(e[CMDBuild.core.constants.Proxy.ATTRIBUTE] || {}, CMDBuild.core.constants.Proxy.CALCULATED, t), Ext.isArray(t) && !Ext.isEmpty(t) && (Ext.Array.each(t, function(e, t, o) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e = this.resolveCalculatedParameterValue(e))
            }, this), this.set(CMDBuild.core.constants.Proxy.CONFIGURATION, e))
        },
        resolveCalculatedParameterValue: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) switch (e.value[0]) {
                case "@MY_USER":
                    e.value[0] = String(CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.USER_ID));
                    break;
                case "@MY_GROUP":
                    e.value[0] = String(CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.DEFAULT_GROUP_ID))
            }
            return e
        },
        setRuntimeParameterValue: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("setRuntimeParameterValue(): unmanaged parameter", this, e);
            var t = this.get(CMDBuild.core.constants.Proxy.CONFIGURATION),
                o = [];
            this.findParameters(t[CMDBuild.core.constants.Proxy.ATTRIBUTE], CMDBuild.core.constants.Proxy.RUNTIME, o, !0), Ext.Array.each(o, function(t, o, i) {
                if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) {
                    var r = e[t[CMDBuild.core.constants.Proxy.ATTRIBUTE]];
                    Ext.isEmpty(r) || (t[CMDBuild.core.constants.Proxy.VALUE] = [r])
                }
            }, this), this.set(CMDBuild.core.constants.Proxy.CONFIGURATION, t)
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.manager.ManagerWindow", {
        extend: "CMDBuild.core.window.AbstractCustomModal",
        delegate: void 0,
        dimensions: {
            height: 200,
            width: 350
        },
        dimensionsMode: "absolute",
        grid: void 0,
        border: !0,
        closeAction: "hide",
        draggable: !1,
        frame: !0,
        header: !1,
        modal: !1,
        resizable: !1,
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "top",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP,
                    items: [Ext.create("CMDBuild.core.buttons.iconized.add.Add", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedManagerAddButtonClick")
                        }
                    })]
                })],
                items: [this.grid = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.manager.GridPanel", {
                    delegate: this.delegate
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            show: function(e, t) {
                this.delegate.cmfg("onPanelGridAndFormFilterAdvancedManagerViewShow")
            }
        }
    }), Ext.define("CMDBuild.core.buttons.iconized.add.Add", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "add",
        textDefault: CMDBuild.Translation.add
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.manager.GridPanel", {
        extend: "Ext.grid.Panel",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.Manager"],
        delegate: void 0,
        border: !1,
        frame: !1,
        hideHeaders: !0,
        menuDisabled: !0,
        initComponent: function() {
            Ext.apply(this, {
                columns: [{
                    dataIndex: CMDBuild.core.constants.Proxy.DESCRIPTION,
                    flex: 1,
                    renderer: function(e, t, o, i, r, n, a) {
                        return o.get(CMDBuild.core.constants.Proxy.DESCRIPTION)
                    }
                }, Ext.create("Ext.grid.column.Action", {
                    align: "center",
                    width: 100,
                    fixed: !0,
                    items: [Ext.create("CMDBuild.core.buttons.iconized.Save", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.save,
                        scope: this,
                        isDisabled: function(e, t, o, i, r) {
                            return !Ext.isEmpty(r.get(CMDBuild.core.constants.Proxy.ID)) || r.get(CMDBuild.core.constants.Proxy.TEMPLATE)
                        },
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedManagerSaveButtonClick", n)
                        }
                    }), Ext.create("CMDBuild.core.buttons.iconized.Modify", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.modify,
                        scope: this,
                        isDisabled: function(e, t, o, i, r) {
                            return r.get(CMDBuild.core.constants.Proxy.TEMPLATE)
                        },
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedManagerModifyButtonClick", n)
                        }
                    }), Ext.create("CMDBuild.core.buttons.iconized.Clone", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.clone,
                        scope: this,
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedManagerCloneButtonClick", n)
                        }
                    }), Ext.create("CMDBuild.core.buttons.iconized.Remove", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.remove,
                        scope: this,
                        isDisabled: function(e, t, o, i, r) {
                            return r.get(CMDBuild.core.constants.Proxy.TEMPLATE)
                        },
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedManagerRemoveButtonClick", n)
                        }
                    })]
                })],
                store: CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.Manager.getStoreUser()
            }), this.callParent(arguments)
        },
        listeners: {
            beforecellclick: function(e, t, o, i, r, n, a, s) {
                return 0 == o
            },
            select: function(e, t, o, i) {
                this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterSelect", t)
            }
        }
    }), Ext.define("CMDBuild.core.buttons.iconized.Save", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "save",
        textDefault: CMDBuild.Translation.save
    }), Ext.define("CMDBuild.core.buttons.iconized.Modify", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "modify",
        textDefault: CMDBuild.Translation.modify
    }), Ext.define("CMDBuild.core.buttons.iconized.Clone", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "clone",
        textDefault: CMDBuild.Translation.clone
    }), Ext.define("CMDBuild.core.buttons.iconized.Remove", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "remove",
        textDefault: CMDBuild.Translation.remove
    }), Ext.define("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.FilterEditor", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onPanelGridAndFormFilterAdvancedFilterEditorAbortButtonClick", "onPanelGridAndFormFilterAdvancedFilterEditorApplyButtonClick", "onPanelGridAndFormFilterAdvancedFilterEditorSaveAndApplyButtonClick", "onPanelGridAndFormFilterAdvancedFilterEditorViewHide", "onPanelGridAndFormFilterAdvancedFilterEditorViewShow"],
        controllerAttributes: void 0,
        controllerRelations: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.FilterEditorWindow", {
                delegate: this
            }), this.controllerAttributes = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.Attributes", {
                parentDelegate: this
            }), this.controllerRelations = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.Relations", {
                parentDelegate: this
            }), this.view.wrapper.removeAll(), this.view.wrapper.add([this.controllerAttributes.getView(), this.controllerRelations.getView()]), this.manageActiveTabSet(!0)
        },
        manageActiveTabSet: function(e) {
            return this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty", [CMDBuild.core.constants.Proxy.CONFIGURATION, CMDBuild.core.constants.Proxy.RELATION]) ? (this.view.wrapper.setActiveTab(0), e ? null : this.view.wrapper.getActiveTab().fireEvent("show")) : this.view.wrapper.setActiveTab(1)
        },
        onPanelGridAndFormFilterAdvancedFilterEditorAbortButtonClick: function() {
            this.view.close()
        },
        onPanelGridAndFormFilterAdvancedFilterEditorApplyButtonClick: function() {
            var e = this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet").getData();
            e[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.Object.merge(this.controllerAttributes.cmfg("panelGridAndFormFilterAdvancedFilterEditorAttributesDataGet"), this.controllerRelations.cmfg("panelGridAndFormFilterAdvancedFilterEditorRelationsDataGet")), Ext.isEmpty(e[CMDBuild.core.constants.Proxy.ID]) && (e[CMDBuild.core.constants.Proxy.DESCRIPTION] = CMDBuild.Translation.newSearchFilter, e[CMDBuild.core.constants.Proxy.NAME] = CMDBuild.Translation.newSearchFilter), this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterSet", {
                value: e
            }), this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty", CMDBuild.core.constants.Proxy.ID) && this.cmfg("panelGridAndFormFilterAdvancedLocalFilterAdd", this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet")), this.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorAbortButtonClick"), this.cmfg("panelGridAndFormFilterAdvancedManagerViewClose"), this.cmfg("onPanelGridAndFormFilterAdvancedFilterSelect", this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet"))
        },
        onPanelGridAndFormFilterAdvancedFilterEditorSaveAndApplyButtonClick: function() {
            var e = this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet").getData();
            e[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.Object.merge(this.controllerAttributes.cmfg("panelGridAndFormFilterAdvancedFilterEditorAttributesDataGet"), this.controllerRelations.cmfg("panelGridAndFormFilterAdvancedFilterEditorRelationsDataGet")), this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterSet", {
                value: e
            }), this.cmfg("panelGridAndFormFilterAdvancedManagerSave", {
                enableApply: !0
            })
        },
        onPanelGridAndFormFilterAdvancedFilterEditorViewHide: function() {
            this.cmfg("panelGridAndFormFilterAdvancedManagerStoreIsEmpty") && this.cmfg("panelGridAndFormFilterAdvancedManageToggleStateReset")
        },
        onPanelGridAndFormFilterAdvancedFilterEditorViewShow: function() {
            var e = Ext.create("CMDBuild.core.RequestBarrier", {
                id: "panelGridAndFormFilterAdvancedFilterEditorBarrier",
                scope: this,
                callback: function() {
                    this.setViewTitle([this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet", CMDBuild.core.constants.Proxy.NAME), this.cmfg("panelGridAndFormFilterAdvancedEntryTypeGet", CMDBuild.core.constants.Proxy.DESCRIPTION)]), this.manageActiveTabSet()
                }
            });
            this.controllerAttributes.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorAttributesInit", {
                callback: e.getCallback("panelGridAndFormFilterAdvancedFilterEditorBarrier")
            }), this.controllerRelations.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsInit", {
                callback: e.getCallback("panelGridAndFormFilterAdvancedFilterEditorBarrier")
            }), e.finalize("panelGridAndFormFilterAdvancedFilterEditorBarrier", !0)
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.FilterEditorWindow", {
        extend: "CMDBuild.core.window.AbstractCustomModal",
        delegate: void 0,
        baseTitle: CMDBuild.Translation.searchFilter,
        dimensionsMode: "percentage",
        wrapper: void 0,
        border: !0,
        closeAction: "hide",
        frame: !0,
        layout: "fit",
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    },
                    items: [Ext.create("CMDBuild.core.buttons.text.Apply", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorApplyButtonClick")
                        }
                    }), Ext.create("CMDBuild.core.buttons.text.SaveAndApply", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorSaveAndApplyButtonClick")
                        }
                    }), Ext.create("CMDBuild.core.buttons.text.Abort", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorAbortButtonClick")
                        }
                    })]
                })],
                items: [this.wrapper = Ext.create("Ext.tab.Panel", {
                    border: !1,
                    frame: !1
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            hide: function(e, t) {
                this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorViewHide")
            },
            show: function(e, t) {
                this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorViewShow")
            }
        }
    }), Ext.define("CMDBuild.core.buttons.text.Apply", {
        extend: "CMDBuild.core.buttons.Base",
        textDefault: CMDBuild.Translation.apply
    }), Ext.define("CMDBuild.core.buttons.text.SaveAndApply", {
        extend: "CMDBuild.core.buttons.Base",
        textDefault: CMDBuild.Translation.saveAndApply
    }), Ext.define("CMDBuild.core.buttons.text.Abort", {
        extend: "CMDBuild.core.buttons.Base",
        textDefault: CMDBuild.Translation.cancel
    }), Ext.define("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.Attributes", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils", "CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.filterEditor.Attributes"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["panelGridAndFormFilterAdvancedFilterEditorAttributesDataGet", "filterConditionsGroupsRemove = onPanelGridAndFormFilterAdvancedFilterEditorAttributesFieldSetEmptied", "onPanelGridAndFormFilterAdvancedFilterEditorAttributesAddButtonSelect", "onPanelGridAndFormFilterAdvancedFilterEditorAttributesInit"],
        filterConditions: {},
        form: void 0,
        selectedEntityAttributes: {
            objectsArray: [],
            sortedByName: {}
        },
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.attributes.AttributesView", {
                delegate: this
            }), this.form = this.view.form
        },
        attributeButtonBuild: function() {
            var e = [],
                t = CMDBuild.core.Utils.groupAttributesObjects(this.selectedEntityAttributesGet());
            this.attributeButtonReset(), Ext.Object.each(t, function(t, o, i) {
                var r = [];
                Ext.Array.each(o, function(e, t, o) {
                    r.push({
                        text: e[CMDBuild.core.constants.Proxy.DESCRIPTION],
                        attribute: e,
                        scope: this,
                        handler: function(e, t) {
                            this.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorAttributesAddButtonSelect", e[CMDBuild.core.constants.Proxy.ATTRIBUTE])
                        }
                    })
                }, this), e.push({
                    text: t,
                    menu: r
                })
            }, this), e = 1 == Ext.Object.getKeys(t).length ? e[0].menu : e, Ext.isEmpty(e) || (this.form.addAttributeButton.menu.add(e), this.form.addAttributeButton.enable())
        },
        attributeButtonReset: function() {
            this.form.addAttributeButton.menu.removeAll()
        },
        decodeFilterConfigurationObject: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = e.or || e.and || e;
                if (Ext.isArray(t)) Ext.Array.forEach(t, function(e, t, o) {
                    return this.decodeFilterConfigurationObject(e)
                }, this);
                else if (Ext.isObject(t) && !Ext.isEmpty(t[CMDBuild.core.constants.Proxy.SIMPLE]) && !Ext.isEmpty(t[CMDBuild.core.constants.Proxy.SIMPLE][CMDBuild.core.constants.Proxy.ATTRIBUTE])) {
                    var o = this.selectedEntityAttributesFindByName(t[CMDBuild.core.constants.Proxy.SIMPLE][CMDBuild.core.constants.Proxy.ATTRIBUTE]);
                    if (!Ext.isEmpty(o)) return this.filterConditionsConditionAdd(o, t[CMDBuild.core.constants.Proxy.SIMPLE]);
                    _error("decodeFilterConfigurationObject(): empty attribute name", this, o)
                }
            }
        },
        panelGridAndFormFilterAdvancedFilterEditorAttributesDataGet: function() {
            var e = {};
            if (!this.filterConditionsIsEmpty()) {
                var t = [],
                    o = {};
                Ext.Object.each(this.filterConditionsGroupGet(), function(e, o, i) {
                    !Ext.isEmpty(o) && Ext.isFunction(o.getData) && t.push(o.getData())
                }, this), 1 == t.length ? o = t[0] : t.length > 1 && (o[CMDBuild.core.constants.Proxy.AND] = t), e[CMDBuild.core.constants.Proxy.ATTRIBUTE] = o
            }
            return e
        },
        filterConditionsConditionAdd: function(e, t) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.filterConditionsGroupAdd(e), !this.filterConditionsIsGroupEmpty(e[CMDBuild.core.constants.Proxy.NAME]))) {
                var o = Ext.create("CMDBuild.Management.FieldManager.getFieldSetForFilter", e);
                this.filterConditionsGroupGet(e[CMDBuild.core.constants.Proxy.NAME]).addCondition(o), o.setData(t), this.view.doLayout()
            }
        },
        filterConditionsGroupAdd: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e) && this.filterConditionsIsGroupEmpty(e[CMDBuild.core.constants.Proxy.NAME])) {
                var t = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.attributes.FieldSet", {
                    delegate: this,
                    attributeName: e[CMDBuild.core.constants.Proxy.NAME],
                    title: e[CMDBuild.core.constants.Proxy.DESCRIPTION]
                });
                this.filterConditions[e[CMDBuild.core.constants.Proxy.NAME]] = t, this.form.add(t)
            }
        },
        filterConditionsGroupGet: function(e) {
            return Ext.isEmpty(e) ? this.filterConditions : this.filterConditionsIsGroupEmpty(e) ? null : this.filterConditions[e]
        },
        filterConditionsIsEmpty: function(e) {
            return Ext.Object.isEmpty(this.filterConditions)
        },
        filterConditionsIsGroupEmpty: function(e) {
            return !Ext.isEmpty(e) && Ext.isEmpty(this.filterConditions[e])
        },
        filterConditionsGroupsRemove: function(e) {
            this.filterConditionsIsGroupEmpty(e) || (this.form.remove(this.filterConditionsGroupGet(e)), delete this.filterConditions[e])
        },
        filterConditionsGroupsReset: function() {
            this.filterConditions = {}, this.form.removeAll()
        },
        onPanelGridAndFormFilterAdvancedFilterEditorAttributesAddButtonSelect: function(e) {
            this.filterConditionsConditionAdd(e), this.form.doLayout()
        },
        onPanelGridAndFormFilterAdvancedFilterEditorAttributesInit: function(e) {
            if (e = Ext.isObject(e) ? e : {}, this.cmfg("panelGridAndFormFilterAdvancedEntryTypeIsEmpty")) return _error("onPanelGridAndFormFilterAdvancedFilterEditorAttributesInit(): entryType is empty", this, this.cmfg("panelGridAndFormFilterAdvancedEntryTypeGet"));
            var t = {};
            t[CMDBuild.core.constants.Proxy.ACTIVE] = !0, t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("panelGridAndFormFilterAdvancedEntryTypeGet", CMDBuild.core.constants.Proxy.NAME), CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.filterEditor.Attributes.read({
                params: t,
                loadMask: this.view,
                scope: this,
                callback: e.callback,
                success: function(e, t, o) {
                    o = o[CMDBuild.core.constants.Proxy.ATTRIBUTES], this.attributeButtonReset(), !Ext.isEmpty(o) && Ext.isArray(o) ? (this.selectedEntityAttributesSet(o), this.attributeButtonBuild(), this.viewBuild()) : _error("onPanelGridAndFormFilterAdvancedFilterEditorAttributesInit(): unmanaged response", this, o)
                }
            })
        },
        selectedEntityAttributesFindByName: function(e) {
            return Ext.isString(e) && !Ext.isEmpty(e) ? this.selectedEntityAttributes.sortedByName[e] : null
        },
        selectedEntityAttributesGet: function() {
            return this.selectedEntityAttributes.objectsArray
        },
        selectedEntityAttributesSet: function(e) {
            this.selectedEntityAttributes = {
                objectsArray: [],
                sortedByName: {}
            }, !Ext.isEmpty(e) && Ext.isArray(e) && (this.selectedEntityAttributes.objectsArray = e, Ext.Array.each(e, function(e, t, o) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.selectedEntityAttributes.sortedByName[e[CMDBuild.core.constants.Proxy.NAME]] = e)
            }, this))
        },
        viewBuild: function() {
            this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty") ? _error("viewBuild(): selected filter is empty", this, this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet")) : (this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet", CMDBuild.core.constants.Proxy.CONFIGURATION), this.filterConditionsGroupsReset(), this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty", CMDBuild.core.constants.Proxy.CONFIGURATION) || this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty", [CMDBuild.core.constants.Proxy.CONFIGURATION, CMDBuild.core.constants.Proxy.ATTRIBUTE]) || this.decodeFilterConfigurationObject(this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet", [CMDBuild.core.constants.Proxy.CONFIGURATION, CMDBuild.core.constants.Proxy.ATTRIBUTE])))
        }
    }), Ext.define("CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.filterEditor.Attributes", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        read: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.attribute.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTRIBUTE, e)
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.attributes.AttributesView", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        form: void 0,
        border: !1,
        frame: !1,
        layout: "fit",
        title: CMDBuild.Translation.attributes,
        initComponent: function() {
            Ext.apply(this, {
                items: [this.form = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.attributes.FormPanel", {
                    delegate: this.delegate
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.attributes.FormPanel", {
        extend: "Ext.form.Panel",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        addAttributeButton: void 0,
        bodyCls: "cmdb-blue-panel",
        border: !1,
        frame: !1,
        overflowY: "auto",
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "top",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP,
                    items: [this.addAttributeButton = Ext.create("CMDBuild.core.buttons.iconized.split.add.Add", {
                        text: CMDBuild.Translation.chooseAnAttribute,
                        disabled: !0
                    })]
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.core.buttons.iconized.split.add.Add", {
        extend: "Ext.button.Split",
        menu: void 0,
        iconCls: "add",
        text: CMDBuild.Translation.add,
        initComponent: function() {
            Ext.applyIf(this, {
                scope: this,
                menu: Ext.create("Ext.menu.Menu"),
                handler: function(e, t) {
                    this.showMenu()
                }
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.Relations", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["panelGridAndFormFilterAdvancedFilterEditorRelationsDataGet", "panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainGet", "panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainIsEmpty", "panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainSet", "panelGridAndFormFilterAdvancedFilterEditorRelationsSelectionManage", "onPanelGridAndFormFilterAdvancedFilterEditorRelationsCheckchange", "onPanelGridAndFormFilterAdvancedFilterEditorRelationsDomainSelect", "onPanelGridAndFormFilterAdvancedFilterEditorRelationsInit"],
        controllerGridDomain: void 0,
        controllerGridCard: void 0,
        selectedDomain: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.RelationsView", {
                delegate: this
            }), this.controllerGridCard = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.GridCard", {
                parentDelegate: this
            }), this.controllerGridDomain = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.GridDomain", {
                parentDelegate: this
            }), this.view.add([this.controllerGridCard.getView(), this.controllerGridDomain.getView()])
        },
        onPanelGridAndFormFilterAdvancedFilterEditorRelationsCheckchange: function(e) {
            this.controllerGridDomain.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridDomainCheckchange", e), this.controllerGridCard.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardCheckchange")
        },
        onPanelGridAndFormFilterAdvancedFilterEditorRelationsDomainSelect: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.cmfg("panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainSet", {
                value: e
            }), this.controllerGridCard.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardDomainSelect"))
        },
        decodeFilterConfigurationObject: function(e) {
            Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.each(e, function(e, t, o) {
                if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                    var i = null,
                        r = this.controllerGridDomain.getView().getStore().findBy(function(t) {
                            return t.get([CMDBuild.core.constants.Proxy.DOMAIN, CMDBuild.core.constants.Proxy.NAME]) == e[CMDBuild.core.constants.Proxy.DOMAIN] && t.get(CMDBuild.core.constants.Proxy.DIRECTION) == e[CMDBuild.core.constants.Proxy.DIRECTION]
                        });
                    r >= 0 && (i = this.controllerGridDomain.getView().getStore().getAt(r)), Ext.isEmpty(i) || (i.setType(e[CMDBuild.core.constants.Proxy.TYPE]), Ext.isArray(e[CMDBuild.core.constants.Proxy.CARDS]) && !Ext.isEmpty(e[CMDBuild.core.constants.Proxy.CARDS]) && i.set(CMDBuild.core.constants.Proxy.CHECKED_CARDS, e[CMDBuild.core.constants.Proxy.CARDS]))
                }
            }, this)
        },
        panelGridAndFormFilterAdvancedFilterEditorRelationsSelectionManage: function() {
            if (this.cmfg("panelGridAndFormFilterAdvancedEntryTypeIsEmpty")) return _error("panelGridAndFormFilterAdvancedFilterEditorRelationsSelectionManage(): selected filter is empty", this, this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet"));
            this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty", CMDBuild.core.constants.Proxy.CONFIGURATION) || this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty", [CMDBuild.core.constants.Proxy.CONFIGURATION, CMDBuild.core.constants.Proxy.RELATION]) || this.decodeFilterConfigurationObject(this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet", [CMDBuild.core.constants.Proxy.CONFIGURATION, CMDBuild.core.constants.Proxy.RELATION]))
        },
        panelGridAndFormFilterAdvancedFilterEditorRelationsDataGet: function() {
            var e = [],
                t = {};
            return this.controllerGridDomain.getView().getStore().each(function(t) {
                var o = t.getType();
                if (!Ext.isEmpty(o)) {
                    var i = {};
                    i[CMDBuild.core.constants.Proxy.DESTINATION] = t.get([CMDBuild.core.constants.Proxy.DESTINATION, CMDBuild.core.constants.Proxy.NAME]), i[CMDBuild.core.constants.Proxy.DIRECTION] = t.get(CMDBuild.core.constants.Proxy.DIRECTION), i[CMDBuild.core.constants.Proxy.DOMAIN] = t.get([CMDBuild.core.constants.Proxy.DOMAIN, CMDBuild.core.constants.Proxy.NAME]), i[CMDBuild.core.constants.Proxy.SOURCE] = t.get([CMDBuild.core.constants.Proxy.SOURCE, CMDBuild.core.constants.Proxy.NAME]), i[CMDBuild.core.constants.Proxy.TYPE] = o, "oneof" == o && (i[CMDBuild.core.constants.Proxy.CARDS] = t.get(CMDBuild.core.constants.Proxy.CHECKED_CARDS)), e.push(i)
                }
            }, this), Ext.isEmpty(e) || (t[CMDBuild.core.constants.Proxy.RELATION] = e), t
        },
        onPanelGridAndFormFilterAdvancedFilterEditorRelationsInit: function(e) {
            if (e = Ext.isObject(e) ? e : {}, this.cmfg("panelGridAndFormFilterAdvancedEntryTypeIsEmpty")) return _error("onPanelGridAndFormFilterAdvancedFilterEditorRelationsInit(): empty selected entryType", this, this.cmfg("panelGridAndFormFilterAdvancedEntryTypeGet"));
            this.selectedDomainReset(), this.controllerGridCard.getView().fireEvent("show"), this.controllerGridDomain.getView().fireEvent("show"), !Ext.isEmpty(e.callback) && Ext.isFunction(e.callback) && Ext.callback(e.callback, this)
        },
        panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedDomain", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedDomain", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        selectedDomainReset: function() {
            this.propertyManageReset("selectedDomain")
        },
        panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.DomainGrid", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedDomain", this.propertyManageSet(e))
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.RelationsView", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        border: !1,
        frame: !1,
        layout: "border",
        title: CMDBuild.Translation.relations
    }), Ext.define("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.GridCard", {
        extend: "CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.CMCardGridController",
        mixins: {
            base: "CMDBuild.controller.common.abstract.Base",
            cardGridDelegate: "CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.CardGridPanelDelegate"
        },
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardCheckchange", "onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardDomainSelect", "onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardLoad", "onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardSelectionChange", "onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardViewShow"],
        view: void 0,
        constructor: function(e) {
            this.mixins.base.constructor.call(this, arguments), Ext.apply(this, e), this.view = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.CardGridPanel", {
                delegate: this
            }), this.callParent([this.view, this.parentDelegate]), this.view.addDelegate(this)
        },
        onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardCheckchange: function() {
            return this.cmfg("panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainIsEmpty") ? this.view.setDisabled(!0) : this.view.setDisabled(!this.cmfg("panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainGet", "oneof"))
        },
        onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardDomainSelect: function() {
            this.view.getSelectionModel().clearSelections(), this.view.updateStoreForClassId(this.cmfg("panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainGet", [CMDBuild.core.constants.Proxy.DESTINATION, CMDBuild.core.constants.Proxy.ID])), this.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardCheckchange")
        },
        onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardLoad: function() {
            if (!this.cmfg("panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainIsEmpty")) {
                var e = this.cmfg("panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainGet", CMDBuild.core.constants.Proxy.CHECKED_CARDS);
                Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.each(e, function(e, t, o) {
                    this.view.getSelectionModel().select(this.view.getStore().findBy(function(t) {
                        return e[CMDBuild.core.constants.Proxy.CLASS_NAME] == t.get("IdClass_value") && e[CMDBuild.core.constants.Proxy.ID] == t.get("Id")
                    }), !0)
                }, this)
            }
        },
        onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardSelectionChange: function() {
		//alert('onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardSelectionChange');
            var e = [];
            this.view.getSelectionModel().hasSelection() && Ext.Array.each(this.view.getSelectionModel().getSelection(), function(t, o, i) {
                if (Ext.isObject(t) && !Ext.isEmpty(t)) {
                    var r = {};
                    r[CMDBuild.core.constants.Proxy.CLASS_NAME] = t.get("IdClass_value"), r[CMDBuild.core.constants.Proxy.ID] = t.get("Id"), e.push(r)
                }
            }, this), this.cmfg("panelGridAndFormFilterAdvancedFilterEditorRelationsSelectedDomainSet", {
                propertyName: CMDBuild.core.constants.Proxy.CHECKED_CARDS,
                value: e
            })
        },
        onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardViewShow: function() {
            this.view.getStore().removeAll(), this.view.getSelectionModel().clearSelections(), this.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardCheckchange")
        },
        onCMCardGridDeselect: function(e, t) {
            this.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardSelectionChange")
        },
        onCMCardGridSelect: function(e, t) {
            this.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardSelectionChange")
        },
        onCardSelected: Ext.emptyFn,
        onCMCardGridLoad: function(e) {
            this.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardLoad")
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.CardGridPanelDelegate", {
        onCMCardGridSelect: function(e, t) {},
        onCMCardGridDeselect: function(e, t) {},
        onCMCardGridBeforeLoad: function(e) {},
        onCMCardGridLoad: function(e) {},
        onCMCardGridColumnsReconfigured: function(e) {},
        onCMCardGridIconRowClick: function(e, t, o) {}
    }),
    function() {
        function e(e, t, o, i, r, n) {
            this.callDelegates("onCMCardGridIconRowClick", [e, r.target.className, t])
        }
        Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.CMCardGridPagingBar", {
            extend: "Ext.toolbar.Paging",
            uses: ["CMDBuild.proxy.index.Json"],
            grid: void 0,
            doRefresh: function(e) {
                if (this.grid) {
                    var t = this.grid.getSelectionModel();
                    t && t.deselectAll()
                }
                return this.callOverridden(arguments)
            }
        }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.CardGridPanel", {
            extend: "Ext.grid.Panel",
            uses: ["CMDBuild.proxy.index.Json", "CMDBuild.core.constants.Global"],
            mixins: {
                delegable: "CMDBuild.core.CMDelegable"
            },
            delegate: void 0,
            columns: [],
            extraParams: void 0,
            cmPaginate: !0,
            cmBasicFilter: !0,
            cmAddGraphColumn: !0,
            cmAddPrintButton: !0,
            cls: "cmdb-border-top",
            disabled: !0,
            multiSelect: !0,
            region: "center",
            selType: "checkboxmodel",
            constructor: function(e) {
                this.mixins.delegable.constructor.call(this, "CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.CardGridPanelDelegate"), this.callParent(arguments)
            },
            initComponent: function() {
                this.loadMask = !1, this.store = this.getStoreForFields([]), this.cmPaginate && function(e) {
                    var t = [];
                    e.cmBasicFilter && (e.gridSearchField = new CMDBuild.field.GridSearchField({
                        grid: e
                    }), t.push(e.gridSearchField));
                    e.cmAddPrintButton && (e.printGridMenu = Ext.create("CMDBuild.core.buttons.iconized.split.Print", {
                        formatList: [CMDBuild.core.constants.Proxy.PDF, CMDBuild.core.constants.Proxy.CSV],
                        mode: "legacy",
                        disabled: !0
                    }), t.push(e.printGridMenu));
                    e.pagingBar = new CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.CMCardGridPagingBar({
                        grid: e,
                        store: e.store,
                        displayInfo: !0,
                        displayMsg: "{0} - {1} " + CMDBuild.Translation.of + " {2}",
                        emptyMsg: CMDBuild.Translation.noTopicsToDisplay,
                        items: t
                    }), e.bbar = e.pagingBar
                }(this), this.viewConfig = {
                    stripeRows: !0,
                    autoScroll: !1,
                    overflowX: "hidden",
                    overflowY: "auto"
                }, this.layout = {
                    type: "fit",
                    reserveScrollbar: !0
                }, this.callParent(arguments), this.mon(this, "beforeitemclick", e, this), this.mon(this, "select", function(e, t) {
                    this.callDelegates("onCMCardGridSelect", [e, t])
                }, this), this.mon(this, "deselect", function(e, t) {
                    this.callDelegates("onCMCardGridDeselect", [e, t])
                }, this), this.mon(this, "show", function(e, t) {
                    this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridCardViewShow")
                }, this), this.on("columnhide", function(e, t, o) {
                    this.getStore().reload()
                }, this), this.on("columnshow", function(e, t, o) {
                    this.getStore().reload()
                }, this)
            },
            updateStoreForClassId: function(e, t) {
                var o = this;
                Ext.isEmpty(e) ? (o.store.removeAll(), o.setColumnsForClass([])) : this.loadAttributes(e, function(i) {
                    function r(e) {
                        t && t.cb ? t.cb.call(t.scope || e) : e.store.loadPage(1)
                    }
                    o.currentClassId == e ? r(o) : (o.currentClassId = e, o.gridSearchField && o.gridSearchField.setValue(""), o.printGridMenu && o.printGridMenu.setDisabled(!e), o.setColumnsForClass(i), o.setGridSorting(i), r(o))
                })
            },
            loadAttributes: function(e, t) {
                _CMCache.getAttributeList(e, t)
            },
            loadPage: function(e, t) {
                t = t || {}, scope = t.scope || this, cb = t.cb || function(e) {
                    e[2] || CMDBuild.core.Message.error(null, {
                        text: CMDBuild.Translation.errors.anErrorHasOccurred
                    })
                }, this.mon(this, "load", cb, scope, {
                    single: !0
                }), this.getStore().loadPage(Math.floor(e))
            },
            reload: function(e) {
                e = Ext.isBoolean(e) && e, this.getStore().load({
                    scope: this,
                    callback: function(t, o, i) {
                        if (i && (o.start > 0 && Ext.isEmpty(t) && this.loadPage(1), e))
                            if (this.getSelectionModel().hasSelection()) {
                                var r = this.getStore().findRecord("Id", this.getSelectionModel().getSelection()[0].get("Id"));
                                Ext.isEmpty(r) || this.getSelectionModel().select(r)
                            } else this.getSelectionModel().select(0)
                    }
                })
            },
            getVisibleColumns: function() {
                for (var e = this.columns, t = [], o = 0, i = e.length; o < i; o++) {
                    var r = e[o];
                    if (!r.hidden && r.dataIndex && "Id" != r.dataIndex) {
                        var n = r.dataIndex;
                        if (n) {
                            var a = n.lastIndexOf("_value");
                            a >= 0 && (n = n.slice(0, a)), t.push(n)
                        }
                    }
                }
                return t
            },
            setColumnsForClass: function(e) {
                var t = this.buildColumnsForAttributes(e),
                    o = this.getStoreForFields(t.fields);
                this.suspendLayouts(), this.reconfigure(o, t.headers), this.resumeLayouts(!0), this.pagingBar && this.pagingBar.bindStore(o), this.callDelegates("onCMCardGridColumnsReconfigured", this)
            },
            buildColumnsForAttributes: function(e) {
                this.classAttributes = e;
                var t = [],
                    o = [];
                _CMUtils.isSuperclass(this.currentClassId) && t.push(this.buildClassColumn());
                for (var i = 0; i < e.length; i++) {
                    var r = e[i],
                        n = CMDBuild.Management.FieldManager.getHeaderForAttr(r);
                    n && "IdClass_value" != n.dataIndex ? (this.addRendererToHeader(n), t.push(n), o.push(n.dataIndex)) : "Description" == r.name && o.push("Description")
                }
                return t = t.concat(this.buildExtraColumns()), this.cmAddGraphColumn && CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) && function(e) {
                    var t = _CMCache.getClassById(this.currentClassId);
                    !Ext.isEmpty(t) && t.get("tableType") != CMDBuild.core.constants.Global.getTableTypeSimpleTable() && Ext.isArray(e) && e.push(Ext.create("Ext.grid.column.Action", {
                        align: "center",
                        width: 30,
                        sortable: !1,
                        hideable: !1,
                        menuDisabled: !0,
                        fixed: !0,
                        items: [Ext.create("CMDBuild.core.buttons.iconized.Graph", {
                            withSpacer: !0,
                            tooltip: CMDBuild.Translation.openRelationGraph,
                            scope: this,
                            handler: function(e, t, o, i, r, n, a) {
                                Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.graph.Window", {
                                    parentDelegate: this,
                                    classId: n.get("IdClass"),
                                    cardId: n.get("id")
                                })
                            }
                        })]
                    }))
                }.call(this, t), {
                    headers: t,
                    fields: o
                }
            },
            setGridSorting: function(e) {
                if (this.store.sorters) {
                    this.store.sorters.clear();
                    for (var t = [], o = 0, i = e.length; o < i; ++o) {
                        var r = e[o],
                            n = {},
                            a = r.classOrderSign * r.absoluteClassOrder;
                        0 != a && (n.property = r.name, a > 0 ? n.direction = "ASC" : (n.direction = "DESC", a = -a), t[a] = n)
                    }
                    for (o = 0, i = t.length; o < i; ++o) {
                        (n = t[o]) && this.store.sorters.add(n)
                    }
                }
            },
            addRendererToHeader: function(e) {
                e.renderer = function(t, o, i, r, n, a, s) {
                    return void 0 === (t = t || i.get(e.dataIndex)) || null == t ? "" : ("object" == typeof t ? t = t.description : "boolean" == typeof t ? t = t ? Ext.MessageBox.buttonText.yes : Ext.MessageBox.buttonText.no : "string" == typeof t && (t = Ext.util.Format.stripTags(t)), t)
                }
            },
            getStoreForFields: function(e) {
                var t = CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ROW_LIMIT),
                    o = this.buildStore(e, t);
                return this.mon(o, "beforeload", function(e, t) {
                    this.callDelegates("onCMCardGridBeforeLoad", this), this.fireEvent("beforeload", arguments);
                    var o = this.getStore().getProxy().extraParams;
                    return !(!Ext.isObject(o) || Ext.Object.isEmpty(o) || !Ext.isString(o[CMDBuild.core.constants.Proxy.CLASS_NAME]) || Ext.isEmpty(o[CMDBuild.core.constants.Proxy.CLASS_NAME])) && (o[CMDBuild.core.constants.Proxy.ATTRIBUTES] = Ext.encode(this.getVisibleColumns()), !0)
                }, this), this.mon(o, "load", function(e, t) {
                    this.callDelegates("onCMCardGridLoad", this), this.fireEvent("load", arguments)
                }, this), o
            },
            buildStore: function(e, t) {
                return e.push({
                    name: "Id",
                    type: "int"
                }), e.push({
                    name: "IdClass",
                    type: "int"
                }), e.push("IdClass_value"), CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.UNCACHED, {
                    autoLoad: !1,
                    fields: e,
                    pageSize: t,
                    remoteSort: !0,
                    proxy: {
                        type: "ajax",
                        url: CMDBuild.proxy.index.Json.card.readAll,
                        reader: {
                            type: "json",
                            root: "rows",
                            totalProperty: "results",
                            idProperty: "Id"
                        },
                        extraParams: this.getStoreExtraParams()
                    }
                })
            },
            getStoreExtraParams: function() {
                var e = {
                    className: ""
                };
                return this.currentClassId && (e.className = _CMCache.getEntryTypeNameById(this.currentClassId)), this.CQL && ((e = Ext.apply(e, this.CQL)).filter = Ext.encode(this.CQL)), e
            },
            buildExtraColumns: function() {
                return []
            },
            buildClassColumn: function() {
                return {
                    header: CMDBuild.Translation.subClass,
                    width: 100,
                    sortable: !1,
                    dataIndex: "IdClass_value"
                }
            },
            disableFilterMenuButton: function() {},
            enableFilterMenuButton: function() {},
            applyFilterToStore: function(e) {
                try {
                    var t = e;
                    "string" != typeof t && (t = Ext.encode(e)), this.getStore().proxy.extraParams.filter = t
                } catch (t) {
                    _debug("I'm not able to set the filter to the store", this, e)
                }
            }
        })
    }(), Ext.define("CMDBuild.core.buttons.iconized.split.Print", {
        extend: "Ext.button.Split",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        delegateEventPrefix: "onButton",
        mode: void 0,
        formatList: [CMDBuild.core.constants.Proxy.CSV, CMDBuild.core.constants.Proxy.ODT, CMDBuild.core.constants.Proxy.PDF, CMDBuild.core.constants.Proxy.RTF],
        iconCls: "print",
        text: CMDBuild.Translation.print,
        initComponent: function() {
            switch (Ext.apply(this, {
                menu: Ext.create("Ext.menu.Menu"),
                handler: function(e, t) {
                    e.isDisabled() || e.showMenu()
                }
            }), this.callParent(arguments), this.mode) {
                case "legacy":
                    return this.buildLegacyMenu();
                default:
                    return this.buildMenu()
            }
        },
        buildLegacyMenu: function() {
            Ext.Array.each(this.formatList, function(e, t, o) {
                this.menu.add({
                    text: CMDBuild.Translation.as + " " + e.toUpperCase(),
                    iconCls: e,
                    format: e,
                    scope: this,
                    handler: function(e, t) {
                        this.fireEvent("click", e.format)
                    }
                })
            }, this)
        },
        buildMenu: function() {
            Ext.Array.each(this.formatList, function(e, t, o) {
                this.menu.add({
                    text: CMDBuild.Translation.as + " " + e.toUpperCase(),
                    iconCls: e,
                    format: e,
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg(this.delegateEventPrefix + "PrintButtonClick", e.format)
                    }
                })
            }, this)
        }
    }), Ext.define("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.GridDomain", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils", "CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.filterEditor.Relations"],
        parentDelegate: void 0,
        bufferEntryTypes: {},
        cmfgCatchedFunctions: ["onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridDomainBeforeEdit", "onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridDomainCheckchange", "onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridDomainViewShow"],
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.DomainGridPanel", {
                delegate: this
            })
        },
        bufferEntryTypesGet: function(e, t) {
            return !Ext.isString(e) || Ext.isEmpty(e) ? _error("bufferEntryTypesGet(): unmanaged name parameter", this, e) : Ext.isString(t) && !Ext.isEmpty(t) ? this.bufferEntryTypes[e].get(t) : this.bufferEntryTypes[e]
        },
        bufferEntryTypesSet: function(e) {
            if (!Ext.isFunction(e)) return _error("bufferEntryTypesSet(): unmanaged callback parameter", this, e);
            var t = {};
            t[CMDBuild.core.constants.Proxy.ACTIVE] = !1, CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.filterEditor.Relations.readAllEntryTypes({
                params: t,
                scope: this,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.CLASSES], Ext.isArray(i) && !Ext.isEmpty(i) ? (Ext.Array.each(i, function(e, t, o) {
                        Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.bufferEntryTypes[e[CMDBuild.core.constants.Proxy.NAME]] = Ext.create("CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.EntryType", e))
                    }, this), Ext.callback(e, this)) : _error("bufferEntryTypesSet(): unmanaged response", this, i)
                }
            })
        },
        onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridDomainBeforeEdit: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = e.colIdx,
                    o = e.column,
                    i = !Ext.isEmpty(e.record.get) && Ext.isFunction(e.record.get) ? e.record.get([CMDBuild.core.constants.Proxy.DESTINATION, CMDBuild.core.constants.Proxy.ID]) : null;
                if (!Ext.isEmpty(o) && !Ext.isEmpty(i) && 2 == t) return o.getEditor().getStore().clearFilter(), o.getEditor().getStore().filterBy(function(e, t) {
                    return e.get(CMDBuild.core.constants.Proxy.TABLE_TYPE) != CMDBuild.core.constants.Global.getTableTypeSimpleTable() && (e.get(CMDBuild.core.constants.Proxy.PARENT) == i || e.get(CMDBuild.core.constants.Proxy.ID) == i)
                }, this), !0
            }
            return !1
        },
        onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridDomainCheckchange: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = !!Ext.isBoolean(e.checked) && e.checked,
                    o = e.propertyName,
                    i = e.record;
                Ext.isString(o) && !Ext.isEmpty(o) && Ext.isObject(i) && !Ext.Object.isEmpty(i) && (this.view.getSelectionModel().select(i), t && i.setType(o))
            }
        },
        onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridDomainViewShow: function() {
            if (this.cmfg("panelGridAndFormFilterAdvancedEntryTypeIsEmpty")) return _error("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridDomainViewShow(): empty selected entryType", this, this.cmfg("panelGridAndFormFilterAdvancedEntryTypeGet"));
            this.view.getStore().removeAll(), this.view.getSelectionModel().clearSelections(), this.bufferEntryTypesSet(function(e, t, o) {
                var i = [],
                    r = [],
                    n = [],
                    a = {};
                a[CMDBuild.core.constants.Proxy.ACTIVE_ONLY] = !0, a[CMDBuild.core.constants.Proxy.SOURCE] = this.cmfg("panelGridAndFormFilterAdvancedEntryTypeGet", CMDBuild.core.constants.Proxy.NAME), CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.filterEditor.Relations.getDomains({
                    params: a,
                    scope: this,
                    success: function(e, t, o) {
                        o = o[CMDBuild.core.constants.Proxy.DOMAINS], Ext.isArray(o) && !Ext.isEmpty(o) && Ext.Array.each(o, function(e, t, o) {
                            Ext.isObject(e) && !Ext.Object.isEmpty(e) && r.push(Ext.create("CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.Domain", e))
                        }, this);
                        var a = {};
                        a[CMDBuild.core.constants.Proxy.ACTIVE_ONLY] = !0, a[CMDBuild.core.constants.Proxy.DESTINATION] = this.cmfg("panelGridAndFormFilterAdvancedEntryTypeGet", CMDBuild.core.constants.Proxy.NAME), CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.filterEditor.Relations.getDomains({
                            params: a,
                            scope: this,
                            success: function(e, t, o) {
                                o = o[CMDBuild.core.constants.Proxy.DOMAINS], Ext.isArray(o) && !Ext.isEmpty(o) && Ext.Array.each(o, function(e, t, o) {
                                    Ext.isObject(e) && !Ext.Object.isEmpty(e) && i.push(Ext.create("CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.Domain", e))
                                }, this), Ext.isEmpty(r) && Ext.isEmpty(i) || (Ext.isArray(r) && !Ext.isEmpty(r) && Ext.Array.each(r, function(e, t, o) {
                                    Ext.isObject(e) && !Ext.Object.isEmpty(e) && n.push(Ext.create("CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.DomainGrid", {
                                        destination: this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.DESTINATION_CLASS_NAME)),
                                        direction: "_1",
                                        domain: e,
                                        domainDescription: e.get(CMDBuild.core.constants.Proxy.DESCRIPTION),
                                        orientedDescription: e.get(CMDBuild.core.constants.Proxy.DIRECT_DESCRIPTION),
                                        source: this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.ORIGIN_CLASS_NAME))
                                    }))
                                }, this), Ext.isArray(i) && !Ext.isEmpty(i) && Ext.Array.each(i, function(e, t, o) {
                                    Ext.isObject(e) && !Ext.Object.isEmpty(e) && n.push(Ext.create("CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.DomainGrid", {
                                        destination: this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.ORIGIN_CLASS_NAME)),
                                        direction: "_2",
                                        domain: e,
                                        domainDescription: e.get(CMDBuild.core.constants.Proxy.DESCRIPTION),
                                        orientedDescription: e.get(CMDBuild.core.constants.Proxy.INVERSE_DESCRIPTION),
                                        source: this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.DESTINATION_CLASS_NAME))
                                    }))
                                }, this), Ext.isEmpty(n) || this.view.getStore().add(CMDBuild.core.Utils.objectArraySort(n, CMDBuild.core.constants.Proxy.DOMAIN_DESCRIPTION)), this.cmfg("panelGridAndFormFilterAdvancedFilterEditorRelationsSelectionManage"))
                            }
                        })
                    }
                })
            })
        }
    }), Ext.define("CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.filterEditor.Relations", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.DestinationEditorStore", "CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.DomainGrid"],
        singleton: !0,
        getDomains: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.domain.getDomains
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.DOMAIN, e)
        },
        getStoreDestination: function() {
            return CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.ENTRY_TYPE, {
                autoLoad: !0,
                model: "CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.DestinationEditorStore",
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.entryType.readAll,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.CLASSES
                    },
                    extraParams: {
                        limitParam: void 0,
                        pageParam: void 0,
                        startParam: void 0
                    }
                },
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.TEXT,
                    direction: "ASC"
                }]
            })
        },
        getStoreDomain: function() {
            return Ext.create("Ext.data.ArrayStore", {
                model: "CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.DomainGrid",
                data: [],
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.DOMAIN_DESCRIPTION,
                    direction: "ASC"
                }]
            })
        },
        readAllEntryTypes: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.entryType.readAll
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ENTRY_TYPE, e)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.DestinationEditorStore", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.ID,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.PARENT,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.TABLE_TYPE,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.TEXT,
            type: "string"
        }]
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.common.panel.gridAndForm.filter.advanced.filterEditor.relations.DomainGrid", {
        extend: "Ext.data.Model",
        fields: [{
            name: "noone",
            type: "boolean",
            defaultValue: !1
        }, {
            name: "oneof",
            type: "boolean",
            defaultValue: !1
        }, {
            name: CMDBuild.core.constants.Proxy.ANY,
            type: "boolean",
            defaultValue: !1
        }, {
            name: CMDBuild.core.constants.Proxy.CHECKED_CARDS,
            type: "auto",
            defaultValue: []
        }, {
            name: CMDBuild.core.constants.Proxy.DESTINATION,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.DIRECTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.DOMAIN,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.DOMAIN_DESCRIPTION,
            type: "string",
            persist: !1
        }, {
            name: CMDBuild.core.constants.Proxy.ORIENTED_DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.SOURCE,
            type: "auto"
        }],
        get: function(e) {
            if (Ext.isArray(e) && !Ext.isEmpty(e)) {
                var t = this;
                return Ext.Array.each(e, function(e, o, i) {
                    !Ext.isEmpty(t) && Ext.isFunction(t.get) && (t = t.get(e))
                }, this), t
            }
            return this.callParent(arguments)
        },
        getType: function() {
            return this.get(CMDBuild.core.constants.Proxy.ANY) ? CMDBuild.core.constants.Proxy.ANY : this.get("noone") ? "noone" : this.get("oneof") ? "oneof" : null
        },
        setType: function(e) {
            this.set("noone", "noone" == e), this.set("oneof", "oneof" == e), this.set(CMDBuild.core.constants.Proxy.ANY, e == CMDBuild.core.constants.Proxy.ANY)
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.filterEditor.relations.DomainGridPanel", {
        extend: "Ext.grid.Panel",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.filterEditor.Relations"],
        delegate: void 0,
        border: !1,
        cls: "cmdb-border-bottom",
        frame: !1,
        height: "30%",
        region: "north",
        split: !0,
        initComponent: function() {
            Ext.create("Ext.data.Store", {
                storeId: "domainStore",
                model: "CMDBuild.model.common.panel.gridAndForm.clone.DomainGrid",
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.relation.readAll,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.DOMAINS
                    },
                    extraParams: {
                        cardId: parameters[CMDBuild.core.constants.Proxy.CARD_ID],
                        className: parameters[CMDBuild.core.constants.Proxy.CLASS_NAME]
                    }
                }
            }), Ext.apply(this, {
                columns: [Ext.create("Ext.grid.column.Column", {
                    dataIndex: CMDBuild.core.constants.Proxy.DOMAIN_DESCRIPTION,
                    text: CMDBuild.Translation.domain,
                    flex: 1,
                    sortable: !1,
                    hideable: !1,
                    menuDisabled: !0
                }), Ext.create("Ext.grid.column.Column", {
                    dataIndex: CMDBuild.core.constants.Proxy.ORIENTED_DESCRIPTION,
                    text: CMDBuild.Translation.direction,
                    flex: 1,
                    sortable: !1,
                    hideable: !1,
                    menuDisabled: !0
                }), Ext.create("Ext.grid.column.Column", {
                    text: CMDBuild.Translation.destination,
                    flex: 1,
                    sortable: !1,
                    hideable: !1,
                    menuDisabled: !0,
                    editor: {
                        xtype: "combo",
                        displayField: CMDBuild.core.constants.Proxy.TEXT,
                        valueField: CMDBuild.core.constants.Proxy.ID,
                        editable: !1,
                        forceSelection: !0,
                        store: CMDBuild.proxy.common.panel.gridAndForm.filter.advanced.filterEditor.Relations.getStoreDestination(),
                        queryMode: "local"
                    },
                    renderer: function(e, t, o, i, r, n, a) {
                        return o.get([CMDBuild.core.constants.Proxy.DESTINATION, CMDBuild.core.constants.Proxy.DESCRIPTION])
                    }
                }), Ext.create("Ext.grid.column.Column", {
                    text: CMDBuild.Translation.relations,
                    sortable: !1,
                    hideable: !1,
                    menuDisabled: !0,
                    fixed: !0,
                    columns: [Ext.create("Ext.grid.column.CheckColumn", {
                        dataIndex: "noone",
                        text: CMDBuild.Translation.noOne,
                        width: 90,
                        align: "center",
                        sortable: !1,
                        hideable: !1,
                        menuDisabled: !0,
                        fixed: !0,
                        scope: this,
                        listeners: {
                            scope: this,
                            checkchange: function(e, t, o, i) {
                                this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsCheckchange", {
                                    checked: o,
                                    propertyName: e.dataIndex,
                                    record: this.getStore().getAt(t)
                                })
                            }
                        }
                    }), Ext.create("Ext.grid.column.CheckColumn", {
                        dataIndex: "any",
                        text: CMDBuild.Translation.any,
                        width: 90,
                        align: "center",
                        sortable: !1,
                        hideable: !1,
                        menuDisabled: !0,
                        fixed: !0,
                        scope: this,
                        listeners: {
                            scope: this,
                            checkchange: function(e, t, o, i) {
                                this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsCheckchange", {
                                    checked: o,
                                    propertyName: e.dataIndex,
                                    record: this.getStore().getAt(t)
                                })
                            }
                        }
                    }), Ext.create("Ext.grid.column.CheckColumn", {
                        dataIndex: "oneof",
                        text: CMDBuild.Translation.fromSelection,
                        width: 90,
                        align: "center",
                        sortable: !1,
                        hideable: !1,
                        menuDisabled: !0,
                        fixed: !0,
                        scope: this,
                        listeners: {
                            scope: this,
                            checkchange: function(e, t, o, i) {
                                this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsCheckchange", {
                                    checked: o,
                                    propertyName: e.dataIndex,
                                    record: this.getStore().getAt(t)
                                })
                            }
                        }
                    })]
                })],
                store: Ext.data.StoreManager.lookup("domainStore"),
                plugins: [Ext.create("Ext.grid.plugin.CellEditing", {
                    clicksToEdit: 1,
                    listeners: {
                        scope: this,
                        beforeedit: function(e, t, o) {
                            return this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridDomainBeforeEdit", t)
                        }
                    }
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            select: function(e, t, o, i) {
                this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsDomainSelect", t)
            },
            show: function(e, t) {
                this.delegate.cmfg("onPanelGridAndFormFilterAdvancedFilterEditorRelationsGridDomainViewShow")
            }
        }
    }), Ext.define("CMDBuild.controller.common.panel.gridAndForm.panel.common.filter.advanced.SaveDialog", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["panelGridAndFormFilterAdvancedSaveDialogShow", "onPanelGridAndFormFilterAdvancedSaveDialogAbortButtonClick", "onPanelGridAndFormFilterAdvancedSaveDialogSaveButtonClick"],
        enableApply: !1,
        form: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.saveDialog.SaveDialogWindow", {
                delegate: this
            }), this.form = this.view.form
        },
        panelGridAndFormFilterAdvancedSaveDialogShow: function(e) {
            this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterIsEmpty") ? _error("panelGridAndFormFilterAdvancedSaveDialogShow(): cannot manage empty filter", this, this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet")) : (this.enableApply = !!Ext.isBoolean(e) && e, this.form.loadRecord(this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterGet")), this.view.show())
        },
        onPanelGridAndFormFilterAdvancedSaveDialogAbortButtonClick: function() {
            this.view.close()
        },
        onPanelGridAndFormFilterAdvancedSaveDialogSaveButtonClick: function() {
            if (this.validate(this.form)) {
                var e = this.form.getData();
                this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterSet", {
                    propertyName: CMDBuild.core.constants.Proxy.DESCRIPTION,
                    value: e[CMDBuild.core.constants.Proxy.DESCRIPTION]
                }), this.cmfg("panelGridAndFormFilterAdvancedManagerSelectedFilterSet", {
                    propertyName: CMDBuild.core.constants.Proxy.NAME,
                    value: e[CMDBuild.core.constants.Proxy.NAME]
                }), this.cmfg("panelGridAndFormFilterAdvancedManagerSave", {
                    enableApply: this.enableApply,
                    enableSaveDialog: !1
                }), this.cmfg("onPanelGridAndFormFilterAdvancedSaveDialogAbortButtonClick")
            }
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.saveDialog.SaveDialogWindow", {
        extend: "CMDBuild.core.window.AbstractCustomModal",
        delegate: void 0,
        dimensions: {
            width: 650
        },
        dimensionsMode: "absolute",
        form: void 0,
        border: !0,
        closeAction: "hide",
        frame: !0,
        layout: "fit",
        title: CMDBuild.Translation.filterParameters,
        initComponent: function() {
            Ext.apply(this, {
                items: [this.form = Ext.create("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.saveDialog.FormPanel", {
                    delegate: this.delegate
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.filter.advanced.saveDialog.FormPanel", {
        extend: "Ext.form.Panel",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils"],
        mixins: ["CMDBuild.view.common.PanelFunctions"],
        delegate: void 0,
        bodyCls: "cmdb-blue-panel",
        border: !1,
        frame: !1,
        overflowY: "auto",
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    },
                    items: [Ext.create("CMDBuild.core.buttons.text.Save", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedSaveDialogSaveButtonClick")
                        }
                    }), Ext.create("CMDBuild.core.buttons.text.Abort", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onPanelGridAndFormFilterAdvancedSaveDialogAbortButtonClick")
                        }
                    })]
                })],
                items: [Ext.create("Ext.form.field.Text", {
                    name: CMDBuild.core.constants.Proxy.NAME,
                    fieldLabel: CMDBuild.core.Utils.prependMandatoryLabel(CMDBuild.Translation.name),
                    maxWidth: CMDBuild.core.constants.FieldWidths.STANDARD_BIG,
                    allowBlank: !1
                }), Ext.create("Ext.form.field.TextArea", {
                    name: CMDBuild.core.constants.Proxy.DESCRIPTION,
                    fieldLabel: CMDBuild.core.Utils.prependMandatoryLabel(CMDBuild.Translation.descriptionLabel),
                    maxWidth: CMDBuild.core.constants.FieldWidths.STANDARD_BIG,
                    allowBlank: !1
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.common.PanelFunctions", {
        uses: ["CMDBuild.core.constants.Proxy"],
        mixins: ["CMDBuild.view.common.PanelFunctions2"],
        fieldSynch: function(e, t, o) {
            if (this.isManagedField(e)) {
                var i = e.getValue();
                (Ext.isEmpty(i) || i == o) && e.setValue(t)
            }
        },
        getData: function(e) {
            if (e) {
                var t = {};
                return this.cascade(function(e) {
                    !Ext.isEmpty(e) && Ext.isFunction(e.getValue) && this.isManagedField(e) && !e.disablePanelFunctions && (t[e.name] = e.getValue())
                }, this), t
            }
            return this.getForm().getValues()
        },
        getNonValidFields: function() {
            var e = [];
            return this.cascade(function(t) {
                Ext.isEmpty(t) || !this.isManagedField(t) || !Ext.isFunction(t.isDisabled) || t.isDisabled() || !Ext.isFunction(t.isHidden) || t.isHidden() || !Ext.isFunction(t.isValid) || t.isValid() || t.disablePanelFunctions || e.push(t)
            }, this), e
        },
        isManagedField: function(e) {
            return e instanceof Ext.form.Field || e instanceof Ext.form.field.Base || e instanceof Ext.form.field.HtmlEditor || e instanceof Ext.form.FieldContainer
        },
        reset: function() {
            this.cascade(function(e) {
                !Ext.isEmpty(e) && Ext.isFunction(e.setValue) && this.isManagedField(e) && !e.disablePanelFunctions && e.setValue()
            }, this), this.cascade(function(e) {
                !Ext.isEmpty(e) && Ext.isFunction(e.reset) && this.isManagedField(e) && !e.disablePanelFunctions && e.reset()
            }, this)
        },
        setDisabledBottomBar: function(e) {
            var t = this.getDockedComponent(CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM);
            Ext.isEmpty(t) || Ext.Array.forEach(t.items.items, function(t, o, i) {
                Ext.isEmpty(t) || !Ext.isFunction(t.setDisabled) || t.disablePanelFunctions || t.setDisabled(!(!Ext.isBoolean(t.forceDisabledState) || !t.forceDisabledState) || e)
            }, this)
        },
        setDisableFields: function(e, t, o) {
            t = !!Ext.isBoolean(t) && t, o = !!Ext.isBoolean(o) && o, this.getForm().getFields().each(function(o, i, r) {
                Ext.isEmpty(o) || !Ext.isFunction(o.setDisabled) || o.disablePanelFunctions || (e ? o.setDisabled(e) : !t && o.disableEnableFunctions || !o.isVisible() || o.setDisabled(e))
            }, this), this.cascade(function(i) {
                !Ext.isEmpty(i) && Ext.isFunction(i.setDisabled) && (i instanceof Ext.button.Button || i.considerAsFieldToDisable) && !i.disablePanelFunctions && (e ? i.setDisabled(e) : !t && i.disableEnableFunctions || !i.isVisible() && !o || i.setDisabled(e))
            }, this)
        },
        setDisabledFieldSet: function(e, t) {
            t = !Ext.isBoolean(t) || t, e instanceof Ext.form.FieldSet && e.cascade(function(e) {
                !Ext.isEmpty(e) && Ext.isFunction(e.setDisabled) && (this.isManagedField(e) || e instanceof Ext.button.Button || e.considerAsFieldToDisable) && !e.disablePanelFunctions && (t ? e.setDisabled(t) : e.disableEnableFunctions || !e.isVisible() && !disableIsVisibleCheck || e.setDisabled(t))
            }, this)
        },
        setDisabledModify: function(e, t, o, i) {
            this.setDisableFields(e, t), this.setDisabledTopBar(Ext.isBoolean(o) ? o : !e), this.setDisabledBottomBar(Ext.isBoolean(i) ? i : e)
        },
        setDisabledTopBar: function(e) {
            var t = this.getDockedComponent(CMDBuild.core.constants.Proxy.TOOLBAR_TOP);
            Ext.isEmpty(t) || Ext.Array.forEach(t.items.items, function(t, o, i) {
                Ext.isEmpty(t) || !Ext.isFunction(t.setDisabled) || t.disablePanelFunctions || t.setDisabled(!(!Ext.isBoolean(t.forceDisabledState) || !t.forceDisabledState) || e)
            }, this)
        }
    }), Ext.define("CMDBuild.view.common.PanelFunctions2", {
        uses: ["CMDBuild.core.constants.Proxy"],
        isPanelFunctionManagedField: function(e) {
            return Ext.isObject(e) && !Ext.Object.isEmpty(e) && !e.disablePanelFunctions && (e instanceof Ext.button.Button || e instanceof Ext.form.Field || e instanceof Ext.form.field.Base || e instanceof Ext.form.FieldContainer || e instanceof Ext.form.FieldSet || e instanceof Ext.ux.form.MultiSelect || Ext.isBoolean(e.enablePanelFunctions) && e.enablePanelFunctions || Ext.isBoolean(e.considerAsFieldToDisable) && e.considerAsFieldToDisable)
        },
        panelFunctionDataGet: function(e) {
            (e = Ext.isObject(e) ? e : {}).includeDisabled = !!Ext.isBoolean(e.includeDisabled) && e.includeDisabled, e.target = Ext.isObject(e.target) ? e.target : this;
            var t = Ext.isFunction(e.target.getForm) ? e.target.getForm().getValues() : {};
            if (e.includeDisabled) {
                var o = {};
                return e.target.cascade(function(e) {
                    this.isPanelFunctionManagedField(e) && Ext.isFunction(e.getValue) && Ext.isFunction(e.getName) && Ext.isBoolean(e.submitValue) && e.submitValue && (o[e.getName()] = e.getValue())
                }, this), Ext.apply(t, o)
            }
            return t
        },
        panelFunctionValueGet: function(e) {
            return (e = Ext.isObject(e) ? e : {}).includeDisabled = !Ext.isBoolean(e.includeDisabled) || e.includeDisabled, !Ext.isString(e.propertyName) || Ext.isEmpty(e.propertyName) ? _error("panelFunctionValueGet(): unmanaged propertyName parameter", this, e.propertyName) : this.panelFunctionDataGet({
                includeDisabled: e.includeDisabled
            })[e.propertyName]
        }
    }), Ext.define("CMDBuild.core.buttons.text.Save", {
        extend: "CMDBuild.core.buttons.Base",
        textDefault: CMDBuild.Translation.save
    }), Ext.define("CMDBuild.core.buttons.iconized.add.Relation", {
        extend: "Ext.button.Split",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils", "CMDBuild.proxy.core.buttons.iconized.add.Relation"],
        bufferEntryTypes: {},
        iconCls: "add",
        text: CMDBuild.Translation.addRelations,
        initComponent: function() {
            Ext.apply(this, {
                scope: this,
                menu: Ext.create("Ext.menu.Menu"),
                handler: function(e, t) {
                    this.showMenu()
                }
            }), this.callParent(arguments)
        },
        bufferEntryTypesGet: function(e, t) {
            if (Ext.isString(e) && !Ext.isEmpty(e)) return Ext.isString(t) && !Ext.isEmpty(t) && Ext.isObject(this.bufferEntryTypes[e]) && !Ext.Object.isEmpty(this.bufferEntryTypes[e]) ? this.bufferEntryTypes[e].get(t) : this.bufferEntryTypes[e];
            _error("bufferEntryTypesGet(): unmanaged name parameter", this, e)
        },
        bufferEntryTypesSet: function(e) {
            if (!Ext.isFunction(e)) return _error("bufferEntryTypesSet(): unmanaged callback parameter", this, e);
            var t = {};
            t[CMDBuild.core.constants.Proxy.ACTIVE] = !0, CMDBuild.proxy.core.buttons.iconized.add.Relation.readAllEntryTypes({
                params: t,
                scope: this,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.CLASSES], Ext.isArray(i) && !Ext.isEmpty(i) ? (Ext.Array.each(i, function(e, t, o) {
                        Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.bufferEntryTypes[e[CMDBuild.core.constants.Proxy.NAME]] = Ext.create("CMDBuild.model.core.buttons.iconized.add.relation.EntryType", e))
                    }, this), Ext.callback(e, this)) : _error("bufferEntryTypesSet(): unmanaged response", this, i)
                }
            })
        },
        onEntryTypeSelect: function(e) {
            Ext.isString(e) && !Ext.isEmpty(e) ? this.bufferEntryTypesSet(function(t, o, i) {
                var r = [],
                    n = [],
                    a = [];
                this.disable(), this.menu.removeAll();
                var s = {};
                s[CMDBuild.core.constants.Proxy.ACTIVE_ONLY] = !0, s[CMDBuild.core.constants.Proxy.EXCLUDE_PROCESSES] = !0, s[CMDBuild.core.constants.Proxy.SOURCE] = e, CMDBuild.proxy.core.buttons.iconized.add.Relation.getDomains({
                    params: s,
                    scope: this,
                    success: function(t, o, i) {
                        i = i[CMDBuild.core.constants.Proxy.DOMAINS], Ext.isArray(i) && !Ext.isEmpty(i) && Ext.Array.each(i, function(e, t, o) {
                            Ext.isObject(e) && !Ext.Object.isEmpty(e) && n.push(Ext.create("CMDBuild.model.core.buttons.iconized.add.relation.Domain", e))
                        }, this);
                        var s = {};
                        s[CMDBuild.core.constants.Proxy.ACTIVE_ONLY] = !0, s[CMDBuild.core.constants.Proxy.DESTINATION] = e, s[CMDBuild.core.constants.Proxy.EXCLUDE_PROCESSES] = !0, CMDBuild.proxy.core.buttons.iconized.add.Relation.getDomains({
                            params: s,
                            scope: this,
                            success: function(e, t, o) {
                                o = o[CMDBuild.core.constants.Proxy.DOMAINS], Ext.isArray(o) && !Ext.isEmpty(o) && Ext.Array.each(o, function(e, t, o) {
                                    Ext.isObject(e) && !Ext.Object.isEmpty(e) && r.push(Ext.create("CMDBuild.model.core.buttons.iconized.add.relation.Domain", e))
                                }, this), Ext.isEmpty(n) && Ext.isEmpty(r) || (this.enable(), Ext.isArray(n) && !Ext.isEmpty(n) && Ext.Array.each(n, function(e, t, o) {
                                    e.get([CMDBuild.core.constants.Proxy.PRIVILEGES, CMDBuild.core.constants.Proxy.CREATE]) && a.push({
                                        text: e.get(CMDBuild.core.constants.Proxy.DIRECT_DESCRIPTION) + " (" + this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.DESTINATION_CLASS_NAME), CMDBuild.core.constants.Proxy.DESCRIPTION) + ")",
                                        domain: {
                                            dom_id: e.get(CMDBuild.core.constants.Proxy.ID),
                                            description: e.get(CMDBuild.core.constants.Proxy.DIRECT_DESCRIPTION) + " (" + this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.DESTINATION_CLASS_NAME), CMDBuild.core.constants.Proxy.DESCRIPTION) + ")",
                                            dst_cid: e.get(CMDBuild.core.constants.Proxy.DESTINATION_CLASS_ID),
                                            src_cid: e.get(CMDBuild.core.constants.Proxy.ORIGIN_CLASS_ID),
                                            src: "_1"
                                        },
                                        scope: this,
                                        handler: function(e, t) {
                                            this.fireEvent("cmClick", e.domain)
                                        }
                                    })
                                }, this), Ext.isArray(r) && !Ext.isEmpty(r) && Ext.Array.each(r, function(e, t, o) {
                                    e.get([CMDBuild.core.constants.Proxy.PRIVILEGES, CMDBuild.core.constants.Proxy.CREATE]) && a.push({
                                        text: e.get(CMDBuild.core.constants.Proxy.INVERSE_DESCRIPTION) + " (" + this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.ORIGIN_CLASS_NAME), CMDBuild.core.constants.Proxy.DESCRIPTION) + ")",
                                        domain: {
                                            dom_id: e.get(CMDBuild.core.constants.Proxy.ID),
                                            description: e.get(CMDBuild.core.constants.Proxy.INVERSE_DESCRIPTION) + " (" + this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.ORIGIN_CLASS_NAME), CMDBuild.core.constants.Proxy.DESCRIPTION) + ")",
                                            dst_cid: e.get(CMDBuild.core.constants.Proxy.ORIGIN_CLASS_ID),
                                            src_cid: e.get(CMDBuild.core.constants.Proxy.DESTINATION_CLASS_ID),
                                            src: "_2"
                                        },
                                        scope: this,
                                        handler: function(e, t) {
                                            this.fireEvent("cmClick", e.domain)
                                        }
                                    })
                                }, this), Ext.isEmpty(a) || this.menu.add(CMDBuild.core.Utils.objectArraySort(a, CMDBuild.core.constants.Proxy.TEXT)))
                            }
                        })
                    }
                })
            }) : _error("onEntryTypeSelect(): unmanaged name parameter", this, e)
        }
    }), Ext.define("CMDBuild.proxy.core.buttons.iconized.add.Relation", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        getDomains: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.domain.getDomains
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.DOMAIN, e)
        },
        readAllEntryTypes: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.entryType.readAll
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ENTRY_TYPE, e)
        }
    }), Ext.define("CMDBuild.core.buttons.iconized.RelationGraph", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "graph",
        textDefault: CMDBuild.Translation.relationGraph
    }), Ext.define("CMDBuild.view.management.classes.tools.Properties", {
        extend: "CMDBuild.view.management.classes.tools.Menu",
        tooltip: CMDBuild.Translation.properties,
        type: "properties",
        style: {
            margin: "0 5px 0 0"
        },
        initComponent: function() {
            Ext.apply(this, {
                menu: Ext.create("Ext.menu.Menu", {
                    items: [CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyItemConfigurationGet")]
                })
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.management.classes.tools.Menu", {
        extend: "Ext.panel.Tool",
        listeners: {
            beforeshow: function(e, t) {
                Ext.isEmpty(this.menu) || Ext.isEmpty(this.menu.items) || !Ext.isFunction(this.menu.items.getRange) || Ext.Array.each(this.menu.items.getRange(), function(e, t, o) {
                    e.fireEvent("beforeshow")
                }, this)
            }
        },
        onClick: function(e, t) {
            return this.fireEvent("beforeshow") && (!Ext.isEmpty(this.menu) && Ext.isArray(this.menu) && Ext.apply(this, {
                menu: Ext.create("Ext.menu.Menu", {
                    items: this.menu
                })
            }), Ext.isEmpty(this.menu) || "Ext.menu.Menu" != Ext.getClassName(this.menu) || (this.menu.showAt(0, 0), this.menu.showAt(this.getX() + this.getWidth() - this.menu.getWidth(), this.getY() + this.getHeight()))), this.callParent(arguments)
        },
        onDestroy: function() {
            Ext.destroyMembers(this, "menu"), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.management.classes.tools.Minimize", {
        extend: "Ext.panel.Tool",
        tooltip: CMDBuild.Translation.minimizeGrid,
        type: "minimize",
        handler: function(e, t, o, i) {
            _CMUIState.onlyForm()
        }
    }), Ext.define("CMDBuild.view.management.classes.tools.Maximize", {
        extend: "Ext.panel.Tool",
        tooltip: CMDBuild.Translation.maximizeGrid,
        type: "maximize",
        handler: function(e, t, o, i) {
            _CMUIState.onlyGrid()
        }
    }), Ext.define("CMDBuild.view.management.classes.tools.Restore", {
        extend: "Ext.panel.Tool",
        tooltip: CMDBuild.Translation.restore,
        type: "restore",
        handler: function(e, t, o, i) {
            _CMUIState.fullScreenOff()
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.tools.Properties", {
        extend: "CMDBuild.view.common.panel.gridAndForm.tools.Menu",
        delegate: void 0,
        tooltip: CMDBuild.Translation.properties,
        type: "properties",
        style: {
            margin: "0 5px 0 0"
        },
        initComponent: function() {
            Ext.apply(this, {
                menu: Ext.create("Ext.menu.Menu", {
                    items: [CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyItemConfigurationGet")]
                })
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.tools.Menu", {
        extend: "Ext.panel.Tool",
        delegate: void 0,
        listeners: {
            beforeshow: function(e, t) {
                Ext.isEmpty(this.menu) || Ext.isEmpty(this.menu.items) || !Ext.isFunction(this.menu.items.getRange) || Ext.Array.each(this.menu.items.getRange(), function(e, t, o) {
                    e.fireEvent("beforeshow")
                }, this)
            }
        },
        onClick: function(e, t) {
            return this.fireEvent("beforeshow") && (!Ext.isEmpty(this.menu) && Ext.isArray(this.menu) && Ext.apply(this, {
                menu: Ext.create("Ext.menu.Menu", {
                    items: this.menu
                })
            }), Ext.isEmpty(this.menu) || "Ext.menu.Menu" != Ext.getClassName(this.menu) || (this.menu.showAt(0, 0), this.menu.showAt(this.getX() + this.getWidth() - this.menu.getWidth(), this.getY() + this.getHeight()))), this.callParent(arguments)
        },
        onDestroy: function() {
            Ext.destroyMembers(this, "menu"), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.common.MainViewport", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.ModuleIdentifiers", "CMDBuild.core.constants.Proxy", "CMDBuild.core.Message"],
        parentDelegate: void 0,
        callback: void 0,
        cmfgCatchedFunctions: ["mainViewportAccordionControllerExists", "mainViewportAccordionControllerGet", "mainViewportAccordionControllerUpdateStore", "mainViewportAccordionControllerWithNodeWithIdGet", "mainViewportAccordionDeselect", "mainViewportAccordionIsCollapsed", "mainViewportAccordionSetDisabled", "mainViewportAccordionViewsGet", "mainViewportActivitySelect", "mainViewportCardSelect", "mainViewportDanglingCardGet", "mainViewportInstanceNameSet", "mainViewportModuleControllerExists", "mainViewportModuleControllerGet", "mainViewportModuleShow", "mainViewportModuleViewsGet", "mainViewportSelectFirstExpandedAccordionSelectableNode", "mainViewportStartingEntitySelect", "onMainViewportAccordionSelect", "onMainViewportCreditsClick", "mainViewAccordionSetLock"],
        accordion: [],
        accordionControllers: {},
        danglingCard: null,
        isAdministration: !1,
        module: [],
        moduleControllers: [],
        scope: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments);
            var t = Ext.create("CMDBuild.core.RequestBarrier", {
                id: "mainViewportAccordionBarrier",
                scope: this,
                callback: function() {
                    this.view = Ext.create("CMDBuild.view.common.MainViewport", {
                        delegate: this,
                        listeners: {
                            scope: this,
                            afterrender: function(e, t) {
                                Ext.isFunction(this.callback) && Ext.callback(this.callback, this.scope || this)
                            }
                        }
                    })
                }
            });
            this.accordionControllerBuild(t), this.moduleControllerBuild(), t.finalize("mainViewportAccordionBarrier", !0)
        },
        accordionControllerBuild: function(e) {
            Ext.isArray(this.accordion) && !Ext.isEmpty(this.accordion) && Ext.Array.each(this.accordion, function(t, o, i) {
                Ext.isObject(t) && !Ext.Object.isEmpty(t) && Ext.isString(t.className) && !Ext.isEmpty(t.className) && Ext.isString(t.identifier) && !Ext.isEmpty(t.identifier) && (this.accordionControllers[t.identifier] = Ext.create(t.className, {
                    parentDelegate: this,
                    identifier: t.identifier,
                    callback: e.getCallback("mainViewportAccordionBarrier")
                }))
            }, this)
        },
        mainViewportAccordionControllerExists: function(e) {
            var t = !Ext.isEmpty(e) && Ext.isString(e) && !Ext.isEmpty(this.accordionControllers[e]);
            return t || _error("mainViewportAccordionControllerExists(): accordion not found", this, e)
        },
        mainViewportAccordionControllerGet: function(e) {
            return this.mainViewportAccordionControllerExists(e) ? this.accordionControllers[e] : null
        },
        mainViewportAccordionControllerWithNodeWithIdGet: function(e) {
            var t = this.accordionControllerExpandedGet();
            return Ext.isEmpty(t) || Ext.isEmpty(t.cmfg("accordionNodeByIdGet", e)) ? (t = null, Ext.Object.each(this.accordionControllers, function(o, i, r) {
                if (!Ext.isEmpty(i) && !Ext.isEmpty(i.cmfg("accordionNodeByIdGet", e))) return t = i, !1
            }, this), t) : t
        },
        mainViewportAccordionControllerUpdateStore: function(e) {
            (e = Ext.isObject(e) ? e : {}).params = Ext.isObject(e.params) ? e.params : {}, e.params.selectionId = Ext.isEmpty(e.params.selectionId) ? null : e.params.selectionId;
            var t = this.cmfg("mainViewportAccordionControllerGet", e.identifier);
            if (!Ext.isObject(t) || Ext.Object.isEmpty(t) || !Ext.isFunction(t.cmfg)) return _error("mainViewportAccordionControllerUpdateStore(): accordion controller retriving error", this, t);
            t.cmfg("accordionUpdateStore", e.params)
        },
        mainViewportAccordionDeselect: function(e) {
            this.mainViewportAccordionControllerExists(e) && this.cmfg("mainViewportAccordionControllerGet", e).cmfg("accordionDeselect")
        },
        mainViewportAccordionIsCollapsed: function() {
            return !this.isAdministration && CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.HIDE_SIDE_PANEL)
        },
        mainViewportAccordionSetDisabled: function(e) {
            (e = Ext.isObject(e) ? e : {}).state = !Ext.isBoolean(e.state) || e.state, this.mainViewportAccordionControllerExists(e.identifier) && this.cmfg("mainViewportAccordionControllerGet", e.identifier).getView().setDisabled(e.state)
        },
        mainViewportAccordionViewsGet: function() {
            var e = [];
            return Ext.isObject(this.accordionControllers) && !Ext.Object.isEmpty(this.accordionControllers) && Ext.Object.each(this.accordionControllers, function(t, o, i) {
                Ext.isObject(o) && !Ext.Object.isEmpty(o) && Ext.isFunction(o.getView) && e.push(o.getView())
            }, this), e
        },
        accordionControllerExpandedGet: function() {
            var e = null;
            return Ext.Object.each(this.accordionControllers, function(t, o, i) {
                if (!Ext.isEmpty(o) && !o.getView().getCollapsed()) return e = o, !1
            }, this), e
        },
        accordionControllerWithSelectableNodeGet: function() {
            var e = null;
            return Ext.Object.each(this.accordionControllers, function(t, o, i) {
                if (!Ext.isEmpty(o) && !Ext.isEmpty(o.cmfg("accordionFirtsSelectableNodeGet"))) return e = o, !1
            }, this), e
        },
        mainViewportDanglingCardGet: function() {
            var e = Ext.clone(this.danglingCard);
            return this.danglingCardReset(), e
        },
        danglingCardReset: function() {
            this.danglingCard = null
        },
        danglingCardSet: function(e) {
            this.danglingCard = e
        },
        mainViewportActivitySelect: function(e) {
            (e = Ext.isObject(e) ? e : {}).activateFirstTab = !!Ext.isEmpty(e.activateFirstTab) || e.activateFirstTab;
            var t = this.cmfg("mainViewportAccordionControllerWithNodeWithIdGet", e[CMDBuild.core.constants.Proxy.WORKFLOW_ID]),
                o = this.cmfg("mainViewportModuleControllerGet", CMDBuild.core.constants.ModuleIdentifiers.getWorkflow());
            return !Ext.isString(e[CMDBuild.core.constants.Proxy.INSTANCE_ID]) || Ext.isEmpty(e[CMDBuild.core.constants.Proxy.INSTANCE_ID]) ? _error("mainViewportActivitySelect(): unmanaged instanceId parameter", this, e[CMDBuild.core.constants.Proxy.INSTANCE_ID]) : !Ext.isString(e[CMDBuild.core.constants.Proxy.WORKFLOW_ID]) || Ext.isEmpty(e[CMDBuild.core.constants.Proxy.WORKFLOW_ID]) ? _error("mainViewportActivitySelect(): unmanaged workflowId parameter", this, e[CMDBuild.core.constants.Proxy.WORKFLOW_ID]) : Ext.isObject(o) && !Ext.Object.isEmpty(o) && Ext.isFunction(o.cmfg) ? Ext.isObject(t) && !Ext.Object.isEmpty(t) && Ext.isFunction(t.cmfg) ? (Ext.apply(t, {
                disableSelection: !0,
                scope: this,
                callback: function() {
                    t.cmfg("accordionDeselect"), t.cmfg("accordionNodeByIdSelect", {
                        id: e[CMDBuild.core.constants.Proxy.WORKFLOW_ID]
                    }), o.cmfg("workflowTreeApplyStoreEvent", {
                        eventName: "load",
                        fn: function(t, i, r, n, a) {
                            o.cmfg("workflowTreeActivitySelect", {
                                enableForceFlowStatus: !0,
                                instanceId: Ext.isString(e[CMDBuild.core.constants.Proxy.INSTANCE_ID]) ? parseInt(e[CMDBuild.core.constants.Proxy.INSTANCE_ID]) : e[CMDBuild.core.constants.Proxy.INSTANCE_ID]
                            })
                        },
                        scope: this,
                        options: {
                            single: !0
                        }
                    })
                }
            }), void t.cmfg("accordionExpand")) : CMDBuild.core.Message.warning(CMDBuild.Translation.warning, CMDBuild.Translation.warnings.itemNotAvailable) : _error("mainViewportActivitySelect(): module controller retriving error", this, o)
        },
        mainViewportCardSelect: function(e) {
            if (e = Ext.isObject(e) ? e : {}, Ext.isEmpty(e.Id) || Ext.isEmpty(e.IdClass)) return _error("mainViewportActivitySelect(): unmanaged parameter", this, e);
            if (_CMCache.isClassById(e.IdClass)) {
                e.activateFirstTab = !!Ext.isEmpty(e.activateFirstTab) || e.activateFirstTab;
                var t = this.cmfg("mainViewportAccordionControllerWithNodeWithIdGet", e.IdClass);
                this.danglingCardSet(e), !Ext.isEmpty(t) && Ext.isFunction(t.cmfg) ? (Ext.apply(t, {
                    disableSelection: !0,
                    scope: this,
                    callback: function() {
                        t.cmfg("accordionDeselect"), t.cmfg("accordionNodeByIdSelect", {
                            id: e.IdClass
                        })
                    }
                }), t.cmfg("accordionExpand")) : CMDBuild.core.Message.warning(CMDBuild.Translation.warning, CMDBuild.Translation.warnings.itemNotAvailable)
            } else {
                var o = {};
                o.activateFirstTab = !!Ext.isEmpty(e.activateFirstTab) || e.activateFirstTab, o[CMDBuild.core.constants.Proxy.INSTANCE_ID] = e.Id, o[CMDBuild.core.constants.Proxy.WORKFLOW_ID] = e.IdClass, this.cmfg("mainViewportActivitySelect", o)
            }
        },
        mainViewportInstanceNameSet: function(e) {
            e = Ext.isString(e) ? e : "";
            var t = Ext.get("instance-name");
            if (!Ext.isEmpty(t)) try {
                t.setHTML(e)
            } catch (e) {}
        },
        mainViewportSelectFirstExpandedAccordionSelectableNode: function() {
            var e = this.accordionControllerExpandedGet();
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.cmfg("mainViewportModuleShow", {
                identifier: e.cmfg("accordionIdentifierGet")
            }), e.cmfg("accordionFirstSelectableNodeSelect"))
        },
        mainViewportStartingEntitySelect: function() {
            var e = CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.STARTING_CLASS_ID) || CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.STARTING_CLASS),
                t = Ext.isEmpty(e) ? null : this.cmfg("mainViewportAccordionControllerWithNodeWithIdGet", e),
                o = null;
            if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) Ext.apply(t, {
                disableSelection: !0,
                scope: this,
                callback: function() {
                    t.cmfg("accordionDeselect"), t.cmfg("accordionNodeByIdSelect", {
                        id: e
                    })
                }
            }), t.cmfg("accordionExpand"), o = t.cmfg("accordionNodeByIdGet", e);
            else {
                var i = this.accordionControllerWithSelectableNodeGet();
                Ext.isObject(i) && !Ext.Object.isEmpty(i) && (i.cmfg("accordionExpand"), o = i.cmfg("accordionFirtsSelectableNodeGet"))
            }
            this.cmfg("mainViewportAccordionIsCollapsed") && !Ext.isEmpty(o) && this.cmfg("mainViewportModuleShow", {
                identifier: o.get("cmName"),
                parameters: o
            })
        },
        moduleControllerBuild: function() {
            Ext.isArray(this.module) && !Ext.isEmpty(this.module) && (this.moduleViewsBuffer = [], Ext.Array.forEach(this.module, function(e, t, o) {
                if (Ext.isObject(e) && !Ext.Object.isEmpty(e))
                    if (!Ext.isEmpty(e.className) && Ext.isString(e.className) && !Ext.isEmpty(e.identifier) && Ext.isString(e.identifier)) {
                        var i = Ext.create(e.className, {
                            parentDelegate: this,
                            identifier: e.identifier
                        });
                        this.moduleControllers[e.identifier] = i, this.moduleViewsBuffer.push(i.getView())
                    } else !Ext.isEmpty(e.cmName) && Ext.isString(e.cmName) && !Ext.isEmpty(e.cmfg) && Ext.isFunction(e.cmfg) ? Ext.isEmpty(e.cmfg("identifierGet")) || (e.parentDelegate = this, this.moduleControllers[e.cmfg("identifierGet")] = e, this.moduleViewsBuffer.push(e.getView())) : !Ext.isEmpty(e.cmName) && Ext.isString(e.cmName) && (this.moduleControllers[e.cmName] = e.delegate, Ext.isFunction(e.cmControllerType) ? Ext.isFunction(e.cmControllerType.cmcreate) ? this.moduleControllers[e.cmName] = new e.cmControllerType.cmcreate(e) : this.moduleControllers[e.cmName] = new e.cmControllerType(e) : Ext.isString(e.cmControllerType) ? this.moduleControllers[e.cmName] = Ext.create(e.cmControllerType, e) : this.moduleControllers[e.cmName] = new CMDBuild.controller.CMBasePanelController(e), this.moduleViewsBuffer.push(e))
            }, this))
        },
        mainViewportModuleControllerExists: function(e) {
            return !Ext.isEmpty(e) && Ext.isString(e) && !Ext.isEmpty(this.moduleControllers[e])
        },
        mainViewportModuleControllerGet: function(e) {
            return this.cmfg("mainViewportModuleControllerExists", e) ? this.moduleControllers[e] : null
        },
        mainViewportModuleShow: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).parameters = Ext.isEmpty(e.parameters) ? null : e.parameters, this.cmfg("mainViewportModuleControllerExists", e.identifier)) {
                var t = this.cmfg("mainViewportModuleControllerGet", e.identifier);
                if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) {
                    Ext.isFunction(t.getView) ? t = t.getView() : Ext.isEmpty(t.view) || (t = t.view);
                    var o = this.view.moduleContainer.getLayout().getActiveItem();
                    "CMDBuild.view.management.workflow.WorkflowView" === Ext.ClassManager.getName(o) && o.fireEvent("workflowUnlockOnContentChange"), this.view.moduleContainer.getLayout().setActiveItem(t), t.fireEvent("CM_iamtofront", e.parameters), Ext.isObject(t.delegate) && !Ext.Object.isEmpty(t.delegate) && Ext.isFunction(t.delegate.cmfg) && t.delegate.cmfg("onModuleInit", e.parameters)
                }
                return !0
            }
            return !1
        },
        mainViewportModuleViewsGet: function() {
            return this.moduleViewsBuffer
        },
        getEnableSynchronizationForAccordions: function() {
            return [CMDBuild.core.constants.ModuleIdentifiers.getClasses(), CMDBuild.core.constants.ModuleIdentifiers.getWorkflow()]
        },
        onMainViewportAccordionSelect: function(e) {
            if (e = Ext.isObject(e) ? e : {}, Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isObject(e.node) && !Ext.Object.isEmpty(e.node) && Ext.isString(e.id) && !Ext.isEmpty(e.id) && Ext.Array.contains(this.getEnableSynchronizationForAccordions(), e.id) && !this.isAdministration) {
                var t = this.cmfg("mainViewportAccordionControllerGet", CMDBuild.core.constants.ModuleIdentifiers.getNavigation()),
                    o = e.node;
                t.cmfg("accordionNodeByIdExists", o.get(CMDBuild.core.constants.Proxy.ENTITY_ID)) && t.cmfg("accordionNodeByIdSelect", {
                    id: o.get(CMDBuild.core.constants.Proxy.ENTITY_ID),
                    mode: "silently"
                })
            }
        },
        mainViewAccordionSetLock: function(e) {
            var t = this.accordionControllerExpandedGet().getView().findParentByType("panel");
            t && (e ? (t.disable(), t.addCls("cmdb-lock-panel")) : (t.enable(), t.removeCls("cmdb-lock-panel")))
        },
        onMainViewportCreditsClick: function() {
            Ext.create("CMDBuild.core.window.Credits").show()
        }
    }), Ext.define("CMDBuild.controller.management.accordion.Menu", {
        extend: "CMDBuild.controller.common.abstract.Accordion",
        uses: ["CMDBuild.core.constants.ModuleIdentifiers", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.CustomPage", "CMDBuild.proxy.Menu"],
        parentDelegate: void 0,
        customPagesResponse: [],
        hideIfEmpty: !0,
        identifier: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.accordion.Menu", {
                delegate: this
            }), this.cmfg("accordionUpdateStore")
        },
        accordionUpdateStore: function(e) {
            (e = Ext.isObject(e) ? e : {}).selectionId = Ext.isNumber(e.selectionId) ? e.selectionId : null;
            var t = {};
            t[CMDBuild.core.constants.Proxy.GROUP_NAME] = CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.DEFAULT_GROUP_NAME), CMDBuild.proxy.Menu.read({
                params: t,
                loadMask: !!Ext.isBoolean(e.loadMask) && e.loadMask,
                scope: this,
                success: function(t, o, i) {
                    var r = i[CMDBuild.core.constants.Proxy.MENU];
                    CMDBuild.proxy.CustomPage.readForCurrentUser({
                        loadMask: !1,
                        scope: this,
                        success: function(t, o, i) {
                            this.customPagesResponse = i[CMDBuild.core.constants.Proxy.RESPONSE], Ext.isEmpty(r) || !Ext.isArray(r[CMDBuild.core.constants.Proxy.CHILDREN]) || Ext.isEmpty(r[CMDBuild.core.constants.Proxy.CHILDREN]) || "root" != r[CMDBuild.core.constants.Proxy.TYPE] || (this.view.getStore().getRootNode().removeAll(), this.view.getStore().getRootNode().appendChild(this.menuStructureChildrenBuilder(r)), this.view.getStore().sort()), this.updateStoreCommonEndpoint(e)
                        }
                    })
                }
            }), this.callParent(arguments)
        },
        menuStructureChildrenBuilder: function(e) {
            var t = [];
            return !Ext.isEmpty(e[CMDBuild.core.constants.Proxy.CHILDREN]) && Ext.isArray(e[CMDBuild.core.constants.Proxy.CHILDREN]) && Ext.Array.each(e[CMDBuild.core.constants.Proxy.CHILDREN], function(e, o, i) {
                t.push(this.menuStructureNodeBuilder(e))
            }, this), t
        },
        menuStructureNodeBuilder: function(e) {
            var t = {};
            if (!Ext.Object.isEmpty(e)) {
                switch (t.cmIndex = e[CMDBuild.core.constants.Proxy.INDEX], t[CMDBuild.core.constants.Proxy.DESCRIPTION] = e[CMDBuild.core.constants.Proxy.DESCRIPTION], t[CMDBuild.core.constants.Proxy.TEXT] = e[CMDBuild.core.constants.Proxy.DESCRIPTION], t[CMDBuild.core.constants.Proxy.LEAF] = !0, e[CMDBuild.core.constants.Proxy.TYPE]) {
                    case "class":
                        var o = _CMCache.getEntryTypeByName(e[CMDBuild.core.constants.Proxy.REFERENCED_CLASS_NAME]);
                        Ext.isEmpty(o) || (t.cmName = e[CMDBuild.core.constants.Proxy.TYPE], t.iconCls = "cmdb-tree-" + (o.isSuperClass() ? "super" : "") + "class-icon", t[CMDBuild.core.constants.Proxy.ENTITY_ID] = o.getId(), t[CMDBuild.core.constants.Proxy.FILTER] = e[CMDBuild.core.constants.Proxy.FILTER], t[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", [e[CMDBuild.core.constants.Proxy.TYPE], o.getId(), e[CMDBuild.core.constants.Proxy.INDEX], e.uuid]), t[CMDBuild.core.constants.Proxy.NAME] = e[CMDBuild.core.constants.Proxy.REFERENCED_CLASS_NAME]);
                        break;
                    case CMDBuild.core.constants.ModuleIdentifiers.getCustomPage():
                        var i = Ext.Array.findBy(this.customPagesResponse, function(t, o) {
                            return e[CMDBuild.core.constants.Proxy.REFERENCED_ELEMENT_ID] == t[CMDBuild.core.constants.Proxy.ID]
                        }, this);
                        t.cmName = e[CMDBuild.core.constants.Proxy.TYPE], t.iconCls = "cmdb-tree-custompage-icon", t[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", [e[CMDBuild.core.constants.Proxy.TYPE], e[CMDBuild.core.constants.Proxy.INDEX], e.uuid]), t[CMDBuild.core.constants.Proxy.NAME] = i[CMDBuild.core.constants.Proxy.NAME];
                        break;
                    case "dashboard":
                        t.cmName = "dashboard", t.iconCls = "cmdb-tree-dashboard-icon", t[CMDBuild.core.constants.Proxy.ENTITY_ID] = e[CMDBuild.core.constants.Proxy.REFERENCED_ELEMENT_ID], t[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", [e[CMDBuild.core.constants.Proxy.TYPE], e[CMDBuild.core.constants.Proxy.REFERENCED_ELEMENT_ID], e[CMDBuild.core.constants.Proxy.INDEX], e.uuid]);
                        break;
                    case "folder":
                        t.cmName = "folder", t.expandable = !1, t[CMDBuild.core.constants.Proxy.SELECTABLE] = !1, t[CMDBuild.core.constants.Proxy.LEAF] = !1;
                        break;
                    case "processclass":
                        o = _CMCache.getEntryTypeByName(e[CMDBuild.core.constants.Proxy.REFERENCED_CLASS_NAME]), Ext.isEmpty(o) || (t.cmName = CMDBuild.core.constants.ModuleIdentifiers.getWorkflow(), t.iconCls = "cmdb-tree-" + (o.isSuperClass() ? "super" : "") + "processclass-icon", t[CMDBuild.core.constants.Proxy.ENTITY_ID] = o.getId(), t[CMDBuild.core.constants.Proxy.FILTER] = e[CMDBuild.core.constants.Proxy.FILTER], t[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", [e[CMDBuild.core.constants.Proxy.TYPE], o.getId(), e[CMDBuild.core.constants.Proxy.INDEX], e.uuid]), t[CMDBuild.core.constants.Proxy.NAME] = e[CMDBuild.core.constants.Proxy.REFERENCED_CLASS_NAME]);
                        break;
                    case "reportcsv":
                        t.cmName = CMDBuild.core.constants.ModuleIdentifiers.getReportSingle(), t.iconCls = "cmdb-tree-reportcsv-icon", t[CMDBuild.core.constants.Proxy.ENTITY_ID] = e[CMDBuild.core.constants.Proxy.REFERENCED_ELEMENT_ID], t[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", [CMDBuild.core.constants.ModuleIdentifiers.getReportSingle(), e[CMDBuild.core.constants.Proxy.REFERENCED_ELEMENT_ID], e[CMDBuild.core.constants.Proxy.INDEX]]), t[CMDBuild.core.constants.Proxy.SECTION_HIERARCHY] = [CMDBuild.core.constants.Proxy.CSV];
                        break;
                    case "reportpdf":
                        t.cmName = CMDBuild.core.constants.ModuleIdentifiers.getReportSingle(), t.iconCls = "cmdb-tree-reportpdf-icon", t[CMDBuild.core.constants.Proxy.ENTITY_ID] = e[CMDBuild.core.constants.Proxy.REFERENCED_ELEMENT_ID], t[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", [CMDBuild.core.constants.ModuleIdentifiers.getReportSingle(), e[CMDBuild.core.constants.Proxy.REFERENCED_ELEMENT_ID], e[CMDBuild.core.constants.Proxy.INDEX]]), t[CMDBuild.core.constants.Proxy.SECTION_HIERARCHY] = [CMDBuild.core.constants.Proxy.PDF];
                        break;
                    case "view":
                        switch (e[CMDBuild.core.constants.Proxy.SPECIFIC_TYPE_VALUES][CMDBuild.core.constants.Proxy.TYPE]) {
                            case "FILTER":
                                if (o = _CMCache.getEntryTypeByName(e[CMDBuild.core.constants.Proxy.SPECIFIC_TYPE_VALUES][CMDBuild.core.constants.Proxy.SOURCE_CLASS_NAME]), !Ext.isEmpty(o)) {
                                    var r = "class";
                                    "processclass" === o.get("type") && (r = CMDBuild.core.constants.ModuleIdentifiers.getWorkflow()), t.cmName = r, t[CMDBuild.core.constants.Proxy.ENTITY_ID] = o.getId(), t[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", ["dataview-filter", o.getId(), e[CMDBuild.core.constants.Proxy.INDEX], e.uuid]), t[CMDBuild.core.constants.Proxy.SECTION_HIERARCHY] = ["filter"], t[CMDBuild.core.constants.Proxy.FILTER] = e[CMDBuild.core.constants.Proxy.SPECIFIC_TYPE_VALUES][CMDBuild.core.constants.Proxy.FILTER]
                                }
                                break;
                            case "SQL":
                                t.cmName = CMDBuild.core.constants.ModuleIdentifiers.getDataView(), t[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", ["dataview-sql", e[CMDBuild.core.constants.Proxy.INDEX], e.uuid]), t[CMDBuild.core.constants.Proxy.SECTION_HIERARCHY] = ["sql"], t[CMDBuild.core.constants.Proxy.SOURCE_FUNCTION] = e[CMDBuild.core.constants.Proxy.SPECIFIC_TYPE_VALUES][CMDBuild.core.constants.Proxy.SOURCE_FUNCTION];
                                break;
                            default:
                                _error('specificTypeValues.type "' + e[CMDBuild.core.constants.Proxy.SPECIFIC_TYPE_VALUES][CMDBuild.core.constants.Proxy.TYPE] + '" not managed', this), t = {}
                        }
                        break;
                    default:
                        _error('menu item type "' + e[CMDBuild.core.constants.Proxy.TYPE] + '" not managed', this), t = {}
                }
                Ext.isArray(e[CMDBuild.core.constants.Proxy.CHILDREN]) && !Ext.isEmpty(e[CMDBuild.core.constants.Proxy.CHILDREN]) && (t.expandable = !0, t[CMDBuild.core.constants.Proxy.CHILDREN] = this.menuStructureChildrenBuilder(e), t[CMDBuild.core.constants.Proxy.LEAF] = !1)
            }
            return t
        }
    }),
    function() {
        Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.controller.common.abstract.Accordion", {
            extend: "CMDBuild.controller.common.abstract.Base",
            parentDelegate: void 0,
            cmfgCatchedFunctions: ["accordionBuildId", "accordionDeselect", "accordionExpand", "accordionFirstSelectableNodeSelect", "accordionFirtsSelectableNodeGet", "accordionIdentifierGet", "accordionNodeByIdExists", "accordionNodeByIdGet", "accordionNodeByIdSelect", "accordionUpdateStore", "onAccordionBeforeItemClick", "onAccordionBeforeSelect", "onAccordionExpand"],
            callback: void 0,
            disableSelection: !0,
            disableStoreLoad: !1,
            hideIfEmpty: !1,
            identifier: void 0,
            lastSelection: void 0,
            scope: this,
            view: void 0,
            accordionBuildId: function(e) {
                return Ext.isEmpty(e) ? CMDBuild.core.constants.Proxy.ACCORDION + "-" + this.cmfg("accordionIdentifierGet") + "-" + (new Date).valueOf() : (e = Ext.isArray(e) ? Ext.Array.clean(e) : [e], e = Ext.Array.push([CMDBuild.core.constants.Proxy.ACCORDION, this.cmfg("accordionIdentifierGet")], e), Ext.Array.each(e, function(t, o, i) {
                    e[o] = Ext.String.trim(String(t))
                }, this), e.join("-"))
            },
            accordionDeselect: function() {
                this.view.getSelectionModel().deselectAll()
            },
            accordionExpand: function(e) {
                if (Ext.isObject(this.view) && !Ext.Object.isEmpty(this.view) && Ext.isFunction(this.view.expand)) {
                    var t = !1 === this.view.getCollapsed() && this.view.isVisible();
                    this.view.expand(), t && this.view.fireEvent("expand")
                }
            },
            accordionFirtsSelectableNodeGet: function() {
                var e = null;
                if (!this.view.isDisabled())
                    for (var t = this.view.getRootNode(); t;) {
                        if (this.isNodeSelectable(t)) {
                            e = t;
                            break
                        }
                        t = t.firstChild
                    }
                return e
            },
            accordionFirstSelectableNodeSelect: function() {
                var e = this.cmfg("accordionFirtsSelectableNodeGet");
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.cmfg("accordionDeselect"), this.cmfg("accordionNodeByIdSelect", {
                    id: e.get(CMDBuild.core.constants.Proxy.ID)
                }))
            },
            accordionIdentifierGet: function() {
                return Ext.isEmpty(this.identifier) ? null : this.identifier
            },
            accordionNodeByIdExists: function(e) {
                return !Ext.isEmpty(this.cmfg("accordionNodeByIdGet", e))
            },
            accordionNodeByIdGet: function(e) {
                return this.view.getStore().getRootNode().findChild(CMDBuild.core.constants.Proxy.ID, e, !0) || this.view.getStore().getRootNode().findChild(CMDBuild.core.constants.Proxy.ENTITY_ID, e, !0)
            },
            accordionNodeByIdSelect: function(e) {
                if ((e = Ext.isObject(e) ? e : {}).mode = Ext.isString(e.mode) ? e.mode : "normal", !Ext.Object.isEmpty(e) && !Ext.isEmpty(e.id)) {
                    var t = this.cmfg("accordionNodeByIdGet", e.id);
                    if (!Ext.isObject(t) || Ext.Object.isEmpty(t)) return _error("accordionNodeByIdSelect(): unmanaged node", this, t);
                    t.bubble(function() {
                        this.expand()
                    }), this.view.getSelectionModel().select(t), "silently" != e.mode && this.eventForwardSelection()
                }
            },
            accordionUpdateStore: Ext.emptyFn,
            eventForwardSelection: function() {
                if (this.view.getSelectionModel().hasSelection()) {
                    var e = this.view.getSelectionModel().getSelection()[0];
                    this.cmfg("mainViewportModuleShow", {
                        identifier: e.get("cmName"),
                        parameters: e
                    }) ? this.lastSelection = e : Ext.isEmpty(this.lastSelection) ? this.view.getSelectionModel().deselectAll(!0) : this.view.getSelectionModel().select(this.lastSelection), this.cmfg("onMainViewportAccordionSelect", {
                        id: this.cmfg("accordionIdentifierGet"),
                        node: e
                    })
                }
            },
            isEmpty: function() {
                return !this.view.getStore().getRootNode().hasChildNodes()
            },
            isNodeSelectable: function(e) {
                return !e.isRoot() && e.get(CMDBuild.core.constants.Proxy.SELECTABLE) && !Ext.isEmpty(e.get(CMDBuild.core.constants.Proxy.ID))
            },
            onAccordionBeforeItemClick: function(e) {
                if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("onAccordionBeforeItemClick(): unmanaged node", this, e);
                "folder" != e.raw.cmName && this.eventForwardSelection()
            },
            onAccordionBeforeSelect: function(e) {
                return this.isNodeSelectable(e)
            },
            onAccordionExpand: function() {
                if (this.cmfg("mainViewportModuleShow", {
                        identifier: this.cmfg("accordionIdentifierGet")
                    }), !this.disableStoreLoad)
                    if (this.view.getSelectionModel().hasSelection()) {
                        var e = this.view.getSelectionModel().getSelection()[0];
                        this.cmfg("accordionDeselect"), this.cmfg("accordionUpdateStore", {
                            selectionId: e.get(CMDBuild.core.constants.Proxy.ENTITY_ID) || e.get(CMDBuild.core.constants.Proxy.ID)
                        })
                    } else this.cmfg("accordionUpdateStore")
            },
            updateStoreCommonEndpoint: function(e) {
                this.disableSelection || (Ext.isEmpty(e.selectionId) || this.cmfg("accordionNodeByIdSelect", {
                    id: e.selectionId
                }), !this.view.getSelectionModel().hasSelection() && !1 === this.view.getCollapsed() && this.view.isVisible() && (Ext.getCmp(this.view.id).isDisabled() ? (this.parentDelegate.cmfg("mainViewAccordionSetLock", !1), this.cmfg("accordionFirstSelectableNodeSelect"), this.parentDelegate.cmfg("mainViewAccordionSetLock", !0)) : this.cmfg("accordionFirstSelectableNodeSelect")));
                this.hideIfEmpty && this.isEmpty() && this.view.hide(), Ext.isFunction(this.callback) && Ext.callback(this.callback, Ext.isObject(this.scope) ? this.scope : this), Ext.apply(this, {
                    callback: void 0,
                    disableSelection: !1,
                    disableStoreLoad: !1,
                    scope: this
                })
            }
        })
    }(), Ext.define("CMDBuild.proxy.CustomPage", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        readForCurrentUser: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.customPage.readForCurrentUser
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CUSTOM_PAGE, e)
        }
    }), Ext.define("CMDBuild.view.management.accordion.Menu", {
        extend: "CMDBuild.view.common.abstract.Accordion",
        uses: ["CMDBuild.model.menu.accordion.Management"],
        delegate: void 0,
        storeModelName: "CMDBuild.model.menu.accordion.Management",
        title: CMDBuild.Translation.navigation
    }), Ext.require(["CMDBuild.core.constants.Proxy", "CMDBuild.model.common.Accordion"]), Ext.define("CMDBuild.view.common.abstract.Accordion", {
        extend: "Ext.tree.Panel",
        delegate: void 0,
        storeModelName: "CMDBuild.model.common.Accordion",
        autoRender: !0,
        border: !0,
        floatable: !1,
        rootVisible: !1,
        collapsed: !1,
        bodyStyle: {
            background: "#ffffff"
        },
        initComponent: function() {
            Ext.applyIf(this, {
                store: Ext.create("Ext.data.TreeStore", {
                    autoLoad: !0,
                    model: this.storeModelName,
                    root: {
                        expanded: !0,
                        children: []
                    },
                    sorters: [{
                        property: "cmIndex",
                        direction: "ASC"
                    }, {
                        property: CMDBuild.core.constants.Proxy.TEXT,
                        direction: "ASC"
                    }]
                })
            }), this.callParent(arguments), this.on("expand", function(e, t) {
                Ext.isEmpty(this.delegate) || this.delegate.cmfg("onAccordionExpand")
            }, this), this.on("beforeselect", function(e, t, o, i) {
                if (!Ext.isEmpty(this.delegate)) return this.delegate.cmfg("onAccordionBeforeSelect", t)
            }, this), this.on("beforeitemclick", function(e, t, o, i, r, n) {
                Ext.isEmpty(this.delegate) || this.delegate.cmfg("onAccordionBeforeItemClick", t)
            }, this)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.common.Accordion", {
        extend: "Ext.data.TreeModel",
        fields: [{
            name: "cmName",
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ENTITY_ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.PARENT,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.SECTION_HIERARCHY,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.SOURCE_FUNCTION,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.FILTER,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.SELECTABLE,
            type: "boolean",
            defaultValue: !0
        }, {
            name: CMDBuild.core.constants.Proxy.TEXT,
            type: "string"
        }]
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.menu.accordion.Management", {
        extend: "Ext.data.TreeModel",
        fields: [{
            name: "cmIndex",
            type: "int"
        }, {
            name: "cmName",
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ENTITY_ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.FILTER,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.PARENT,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.SOURCE_FUNCTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.SECTION_HIERARCHY,
            type: "auto",
            defaultValue: []
        }, {
            name: CMDBuild.core.constants.Proxy.SELECTABLE,
            type: "boolean",
            defaultValue: !0
        }, {
            name: CMDBuild.core.constants.Proxy.TEXT,
            type: "string"
        }]
    }), Ext.define("CMDBuild.controller.management.accordion.Classes", {
        extend: "CMDBuild.controller.common.abstract.Accordion",
        uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.classes.Classes"],
        parentDelegate: void 0,
        hideIfEmpty: !0,
        identifier: void 0,
        view: void 0,
        constructor: function(e) {
            Ext.apply(this, {
                cmfgCatchedFunctions: Ext.Array.merge(this.cmfgCatchedFunctions, ["onAccordionClassesCollapse"])
            }), this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.accordion.Classes", {
                delegate: this
            }), this.cmfg("accordionUpdateStore")
        },
        accordionUpdateStore: function(e) {
            (e = Ext.isObject(e) ? e : {}).selectionId = Ext.isNumber(e.selectionId) ? e.selectionId : null;
            var t = {};
            t[CMDBuild.core.constants.Proxy.ACTIVE] = !0, CMDBuild.proxy.management.classes.Classes.readAll({
                params: t,
                loadMask: !!Ext.isBoolean(e.loadMask) && e.loadMask,
                scope: this,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.RESPONSE];
                    var r = [],
                        n = [],
                        a = [],
                        s = {};
                    if (i = Ext.Array.filter(i, function(e, t, o) {
                            return e[CMDBuild.core.constants.Proxy.NAME] != CMDBuild.core.constants.Global.getRootNameClasses() && !e[CMDBuild.core.constants.Proxy.SYSTEM]
                        }, this), this.view.getStore().getRootNode().removeAll(), !Ext.isEmpty(i) && Ext.isArray(i)) {
                        for (var l in Ext.Array.each(i, function(e, t, o) {
                                var i = {};
                                i.cmName = this.cmfg("accordionIdentifierGet"), i[CMDBuild.core.constants.Proxy.TEXT] = e[CMDBuild.core.constants.Proxy.TEXT], i[CMDBuild.core.constants.Proxy.DESCRIPTION] = e[CMDBuild.core.constants.Proxy.TEXT], i[CMDBuild.core.constants.Proxy.ENTITY_ID] = e[CMDBuild.core.constants.Proxy.ID], i[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", e[CMDBuild.core.constants.Proxy.ID]), i[CMDBuild.core.constants.Proxy.NAME] = e[CMDBuild.core.constants.Proxy.NAME], i[CMDBuild.core.constants.Proxy.LEAF] = !0, e[CMDBuild.core.constants.Proxy.TABLE_TYPE] == CMDBuild.core.constants.Global.getTableTypeSimpleTable() ? (i.iconCls = "cmdb-tree-class-icon", a.push(i)) : (i.iconCls = e.superclass ? "cmdb-tree-superclass-icon" : "cmdb-tree-class-icon", i[CMDBuild.core.constants.Proxy.PARENT] = e[CMDBuild.core.constants.Proxy.PARENT], s[i[CMDBuild.core.constants.Proxy.ENTITY_ID]] = i)
                            }, this), s) {
                            var c = s[l];
                            if (Ext.isEmpty(c[CMDBuild.core.constants.Proxy.PARENT]) || Ext.isEmpty(s[c[CMDBuild.core.constants.Proxy.PARENT]])) n.push(c);
                            else {
                                var d = s[c[CMDBuild.core.constants.Proxy.PARENT]];
                                d.children = d.children || [], d.children.push(c), d[CMDBuild.core.constants.Proxy.LEAF] = !1
                            }
                        }
                        CMDBuild.core.Utils.objectArraySort(n, CMDBuild.core.constants.Proxy.TEXT), CMDBuild.core.Utils.objectArraySort(a, CMDBuild.core.constants.Proxy.TEXT), r = Ext.isEmpty(a) ? n : [{
                            iconCls: "cmdb-tree-superclass-icon",
                            text: CMDBuild.Translation.standard,
                            description: CMDBuild.Translation.standard,
                            children: n,
                            expanded: !0,
                            selectable: !1,
                            leaf: !1
                        }, {
                            iconCls: "cmdb-tree-superclass-icon",
                            text: CMDBuild.Translation.simple,
                            description: CMDBuild.Translation.simple,
                            children: a,
                            expanded: !0,
                            selectable: !1,
                            leaf: !1
                        }], Ext.isEmpty(r) || this.view.getStore().getRootNode().appendChild(r)
                    }
                    this.updateStoreCommonEndpoint(e)
                }
            }), this.callParent(arguments)
        },
        onAccordionClassesCollapse: function() {
            if (this.cmfg("mainViewportModuleControllerExists", "class")) {
                var e = this.cmfg("mainViewportModuleControllerGet", "class").cardPanelController;
                !Ext.isEmpty(e) && Ext.isFunction(e.onAbortCardClick) && e.onAbortCardClick()
            } else _error("onAccordionClassesCollapse(): non-existent module controller", this)
        }
    }), Ext.define("CMDBuild.proxy.management.classes.Classes", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        readAll: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.classes.readAll
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CLASS, e)
        }
    }), Ext.define("CMDBuild.view.management.accordion.Classes", {
        extend: "CMDBuild.view.common.abstract.Accordion",
        delegate: void 0,
        title: CMDBuild.Translation.classes,
        listeners: {
            collapse: function(e, t) {
                this.delegate.cmfg("onAccordionClassesCollapse")
            }
        }
    }), Ext.define("CMDBuild.controller.management.accordion.Dashboard", {
        extend: "CMDBuild.controller.common.abstract.Accordion",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.dashboard.Dashboard"],
        parentDelegate: void 0,
        hideIfEmpty: !0,
        identifier: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.accordion.Dashboard", {
                delegate: this
            }), this.cmfg("accordionUpdateStore")
        },
        accordionUpdateStore: function(e) {
            (e = Ext.isObject(e) ? e : {}).selectionId = Ext.isNumber(e.selectionId) ? e.selectionId : null, CMDBuild.proxy.dashboard.Dashboard.readAllVisible({
                loadMask: !!Ext.isBoolean(e.loadMask) && e.loadMask,
                scope: this,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.RESPONSE][CMDBuild.core.constants.Proxy.DASHBOARDS];
                    var r = [];
                    this.view.getStore().getRootNode().removeAll(), Ext.Object.isEmpty(i) || (Ext.Object.each(i, function(e, t, o) {
                        var i = {};
                        i.cmName = this.cmfg("accordionIdentifierGet"), i.iconCls = "cmdb-tree-dashboard-icon", i[CMDBuild.core.constants.Proxy.TEXT] = t[CMDBuild.core.constants.Proxy.DESCRIPTION], i[CMDBuild.core.constants.Proxy.DESCRIPTION] = t[CMDBuild.core.constants.Proxy.DESCRIPTION], i[CMDBuild.core.constants.Proxy.ENTITY_ID] = e, i[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", e), i[CMDBuild.core.constants.Proxy.NAME] = t[CMDBuild.core.constants.Proxy.NAME], i[CMDBuild.core.constants.Proxy.LEAF] = !0, r.push(i)
                    }, this), Ext.isEmpty(r) || (this.view.getStore().getRootNode().appendChild(r), this.view.getStore().sort())), this.updateStoreCommonEndpoint(e)
                }
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.management.accordion.Dashboard", {
        extend: "CMDBuild.view.common.abstract.Accordion",
        delegate: void 0,
        title: CMDBuild.Translation.dashboard
    }), Ext.define("CMDBuild.controller.management.accordion.Report", {
        extend: "CMDBuild.controller.common.abstract.Accordion",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.report.Report"],
        parentDelegate: void 0,
        hideIfEmpty: !0,
        identifier: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.accordion.Report", {
                delegate: this
            }), this.cmfg("accordionUpdateStore")
        },
        accordionUpdateStore: function(e) {
            (e = Ext.isObject(e) ? e : {}).selectionId = Ext.isNumber(e.selectionId) ? e.selectionId : null, CMDBuild.proxy.report.Report.readTypesTree({
                loadMask: !!Ext.isBoolean(e.loadMask) && e.loadMask,
                scope: this,
                success: function(t, o, i) {
                    if (!Ext.isEmpty(i) && Ext.isArray(i)) {
                        var r = [];
                        Ext.Array.forEach(i, function(e, t, o) {
                            var i = {};
                            i.cmName = this.cmfg("accordionIdentifierGet"), i.iconCls = "cmdb-tree-report-icon", i[CMDBuild.core.constants.Proxy.TEXT] = e[CMDBuild.core.constants.Proxy.TEXT], i[CMDBuild.core.constants.Proxy.DESCRIPTION] = e[CMDBuild.core.constants.Proxy.TEXT], i[CMDBuild.core.constants.Proxy.ENTITY_ID] = e[CMDBuild.core.constants.Proxy.ID], i[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", e[CMDBuild.core.constants.Proxy.ID]), i[CMDBuild.core.constants.Proxy.SECTION_HIERARCHY] = ["custom"], i[CMDBuild.core.constants.Proxy.NAME] = e[CMDBuild.core.constants.Proxy.NAME], i[CMDBuild.core.constants.Proxy.LEAF] = !0, r.push(i)
                        }, this), Ext.isEmpty(r) || (this.view.getStore().getRootNode().removeAll(), this.view.getStore().getRootNode().appendChild(r), this.view.getStore().sort())
                    }
                    this.updateStoreCommonEndpoint(e)
                }
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.proxy.report.Report", {
        uses: ["CMDBuild.core.configurations.Timeout", "CMDBuild.core.constants.Proxy", "CMDBuild.core.interfaces.FormSubmit", "CMDBuild.proxy.index.Json", "CMDBuild.model.report.Grid"],
        singleton: !0,
        create: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                timeout: CMDBuild.core.configurations.Timeout.getReport(),
                url: CMDBuild.proxy.index.Json.report.factory.create
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.REPORT, e, !0)
        },
        download: function(e) {
		//alert('download');
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.report.factory.print + "?donotdelete=true"
            }), CMDBuild.core.interfaces.FormSubmit.submit(e)
        },
        getStore: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TYPE] = e, CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.REPORT, {
                autoLoad: !1,
                model: "CMDBuild.model.report.Grid",
                pageSize: CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ROW_LIMIT),
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.report.readByType,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.ROWS,
                        totalProperty: CMDBuild.core.constants.Proxy.RESULTS
                    },
                    extraParams: t
                },
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.DESCRIPTION,
                    direction: "ASC"
                }]
            })
        },
        readTypesTree: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.report.readTypesTree
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.REPORT, e)
        },
        update: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                timeout: CMDBuild.core.configurations.Timeout.getReport(),
                url: CMDBuild.proxy.index.Json.report.factory.updateParams
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.REPORT, e, !0)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.report.Grid", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.GROUPS,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.QUERY,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.TITLE,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.TYPE,
            type: "string",
            defaultValue: "CUSTOM"
        }]
    }), Ext.define("CMDBuild.view.management.accordion.Report", {
        extend: "CMDBuild.view.common.abstract.Accordion",
        uses: ["CMDBuild.model.report.accordion.Management"],
        delegate: void 0,
        storeModelName: "CMDBuild.model.report.accordion.Management",
        title: CMDBuild.Translation.report
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.report.accordion.Management", {
        extend: "Ext.data.TreeModel",
        fields: [{
            name: "cmName",
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ENTITY_ID,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.PARENT,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.SECTION_HIERARCHY,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.SELECTABLE,
            type: "boolean",
            defaultValue: !0
        }, {
            name: CMDBuild.core.constants.Proxy.TEXT,
            type: "string"
        }]
    }), Ext.define("CMDBuild.controller.management.accordion.CustomPage", {
        extend: "CMDBuild.controller.common.abstract.Accordion",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.CustomPage"],
        parentDelegate: void 0,
        hideIfEmpty: !0,
        identifier: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.accordion.CustomPage", {
                delegate: this
            }), this.cmfg("accordionUpdateStore")
        },
        accordionUpdateStore: function(e) {
            (e = Ext.isObject(e) ? e : {}).selectionId = Ext.isNumber(e.selectionId) ? e.selectionId : null, CMDBuild.proxy.CustomPage.readForCurrentUser({
                loadMask: !!Ext.isBoolean(e.loadMask) && e.loadMask,
                scope: this,
                success: function(t, o, i) {
                    if (i = i[CMDBuild.core.constants.Proxy.RESPONSE], !Ext.isEmpty(i)) {
                        var r = [];
                        Ext.Array.forEach(i, function(e, t, o) {
                            var i = {};
                            i.cmName = this.cmfg("accordionIdentifierGet"), i.iconCls = "cmdb-tree-custompage-icon", i[CMDBuild.core.constants.Proxy.TEXT] = e[CMDBuild.core.constants.Proxy.DESCRIPTION], i[CMDBuild.core.constants.Proxy.DESCRIPTION] = e[CMDBuild.core.constants.Proxy.DESCRIPTION], i[CMDBuild.core.constants.Proxy.ENTITY_ID] = e[CMDBuild.core.constants.Proxy.ID], i[CMDBuild.core.constants.Proxy.ID] = this.cmfg("accordionBuildId", e[CMDBuild.core.constants.Proxy.ID]), i[CMDBuild.core.constants.Proxy.NAME] = e[CMDBuild.core.constants.Proxy.NAME], i[CMDBuild.core.constants.Proxy.LEAF] = !0, r.push(i)
                        }, this), Ext.isEmpty(r) || (this.view.getStore().getRootNode().removeAll(), this.view.getStore().getRootNode().appendChild(r), this.view.getStore().sort())
                    }
                    this.updateStoreCommonEndpoint(e)
                }
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.management.accordion.CustomPage", {
        extend: "CMDBuild.view.common.abstract.Accordion",
        delegate: void 0,
        title: CMDBuild.Translation.customPages
    }), Ext.define("CMDBuild.controller.management.accordion.Utility", {
        extend: "CMDBuild.controller.common.abstract.Accordion",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        hideIfEmpty: !0,
        identifier: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.accordion.Utility", {
                delegate: this
            }), this.cmfg("accordionUpdateStore")
        },
        accordionUpdateStore: function(e) {
            (e = Ext.isObject(e) ? e : {}).selectionId = Ext.isNumber(e.selectionId) ? e.selectionId : null;
            var t = [];
            this.isSectionDisabled(CMDBuild.core.constants.Proxy.CHANGE_PASSWORD) || t.push({
                cmName: "utility",
                iconCls: "cmdb-tree-utility-icon",
                text: CMDBuild.Translation.changePassword,
                description: CMDBuild.Translation.changePassword,
                id: this.cmfg("accordionBuildId", "changepassword"),
                sectionHierarchy: ["changepassword"],
                leaf: !0
            }), this.isSectionDisabled(CMDBuild.core.constants.Proxy.BULK_UPDATE) || t.push({
                cmName: "utility",
                iconCls: "cmdb-tree-utility-icon",
                text: CMDBuild.Translation.multipleUpdate,
                description: CMDBuild.Translation.multipleUpdate,
                id: this.cmfg("accordionBuildId", "bulkcardupdate"),
                sectionHierarchy: ["bulkcardupdate"],
                leaf: !0
            }), this.isSectionDisabled(CMDBuild.core.constants.Proxy.IMPORT_CSV) || t.push({
                cmName: "utility",
                iconCls: "cmdb-tree-utility-icon",
                text: CMDBuild.Translation.importCsvFile,
                description: CMDBuild.Translation.importCsvFile,
                id: this.cmfg("accordionBuildId", "importcsv"),
                sectionHierarchy: ["importcsv"],
                leaf: !0
            }), this.isSectionDisabled(CMDBuild.core.constants.Proxy.EXPORT_CSV) || t.push({
                cmName: "utility",
                iconCls: "cmdb-tree-utility-icon",
                text: CMDBuild.Translation.exportCsvFile,
                description: CMDBuild.Translation.exportCsvFile,
                id: this.cmfg("accordionBuildId", "exportcsv"),
                sectionHierarchy: ["exportcsv"],
                leaf: !0
            }), Ext.isEmpty(t) || (this.view.getStore().getRootNode().removeAll(), this.view.getStore().getRootNode().appendChild(t)), this.updateStoreCommonEndpoint(e), this.callParent(arguments)
        },
        isSectionDisabled: function(e) {
            switch (e) {
                case CMDBuild.core.constants.Proxy.CHANGE_PASSWORD:
                    return CMDBuild.configuration.userInterface.get([CMDBuild.core.constants.Proxy.DISABLED_MODULES, CMDBuild.core.constants.Proxy.CHANGE_PASSWORD]) || !CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.ALLOW_PASSWORD_CHANGE);
                default:
                    return CMDBuild.configuration.userInterface.isDisabledModule(e)
            }
        }
    }), Ext.define("CMDBuild.view.management.accordion.Utility", {
        extend: "CMDBuild.view.common.abstract.Accordion",
        delegate: void 0,
        title: CMDBuild.Translation.utility
    }), Ext.define("CMDBuild.controller.management.customPage.SinglePage", {
        extend: "CMDBuild.controller.common.abstract.Base",
        parentDelegate: void 0,
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.configurations.CustomPage"],
        cmfgCatchedFunctions: ["onCustomPageModuleInit = onModuleInit"],
        identifier: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.customPage.SinglePagePanel", {
                delegate: this
            })
        },
        onCustomPageModuleInit: function(e) {
            if (!Ext.isEmpty(e)) {
                var t = window.location.toString().split("/");
                t = Ext.Array.slice(t, 0, t.length - 1).join("/"), this.setViewTitle(e.get(CMDBuild.core.constants.Proxy.DESCRIPTION)), CMDBuild.clearComponent(this.view), this.view.add({
                    xtype: "component",
                    autoEl: {
                        tag: "iframe",
                        src: CMDBuild.core.configurations.CustomPage.getCustomizationsPath() + e.get(CMDBuild.core.constants.Proxy.NAME) + "/?basePath=" + t + "&frameworkVersion=" + CMDBuild.core.configurations.CustomPage.getVersion() + "&language=" + CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.LANGUAGE)
                    }
                }), Ext.isEmpty(e) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                    moduleId: this.cmfg("identifierGet"),
                    entryType: {
                        description: e.get(CMDBuild.core.constants.Proxy.DESCRIPTION),
                        id: e.get(CMDBuild.core.constants.Proxy.ID),
                        object: e
                    }
                }), this.onModuleInit(e)
            }
        }
    }), Ext.define("CMDBuild.core.configurations.CustomPage", {
        singleton: !0,
        config: {
            customizationsPath: "upload/custompages/",
            version: "1.2.0"
        },
        constructor: function(e) {
            this.initConfig(e)
        }
    }), Ext.define("CMDBuild.view.management.customPage.SinglePagePanel", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        baseTitle: CMDBuild.Translation.customPages,
        border: !0,
        frame: !1,
        layout: "fit",
        initComponent: function() {
            Ext.apply(this, {
                tools: [Ext.create("CMDBuild.view.common.panel.gridAndForm.tools.Properties", {
                    style: {}
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.management.report.Report", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onReportModuleInit = onModuleInit", "reportSelectedAccordionGet", "reportSelectedAccordionIsEmpty"],
        identifier: void 0,
        sectionController: void 0,
        selectedAccordion: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.report.ReportView", {
                delegate: this
            })
        },
        onReportModuleInit: function(e) {
            if (!Ext.Object.isEmpty(e)) {
                var t = e.getData();
                switch (t[CMDBuild.core.constants.Proxy.TYPE] = t[CMDBuild.core.constants.Proxy.ENTITY_ID], this.reportSelectedAccordionSet({
                    value: t
                }), this.view.removeAll(!0), this.reportSelectedAccordionGet(CMDBuild.core.constants.Proxy.SECTION_HIERARCHY)[0]) {
                    case "custom":
                    default:
                        this.sectionController = Ext.create("CMDBuild.controller.management.report.Custom", {
                            parentDelegate: this
                        })
                }
                this.setViewTitle(e.get(CMDBuild.core.constants.Proxy.TEXT)), this.view.add(this.sectionController.getView()), this.sectionController.cmfg("onReportShow"), CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                    moduleId: this.cmfg("identifierGet"),
                    entryType: {
                        description: this.reportSelectedAccordionGet(CMDBuild.core.constants.Proxy.DESCRIPTION),
                        id: this.reportSelectedAccordionGet(CMDBuild.core.constants.Proxy.ID),
                        object: this.reportSelectedAccordionGet()
                    }
                }), this.onModuleInit(e)
            }
        },
        reportSelectedAccordionGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedAccordion", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        reportSelectedAccordionIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedAccordion", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        reportSelectedAccordionSet: function(e) {
            Ext.Object.isEmpty(e) || (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.report.SelectedAccordion", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedAccordion", this.propertyManageSet(e))
        }
    }), Ext.define("CMDBuild.view.management.report.ReportView", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        baseTitle: CMDBuild.Translation.report,
        border: !0,
        frame: !1,
        layout: "fit",
        initComponent: function() {
            Ext.apply(this, {
                tools: [Ext.create("CMDBuild.view.common.panel.gridAndForm.tools.Properties", {
                    style: {}
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.management.report.Single", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.Message", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json", "CMDBuild.proxy.report.Report"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onSingleReportDownloadButtonClick", "onSingleReportModuleInit = onModuleInit", "onSingleReportTypeButtonClick", "reportSingleSelectedReportParametersSet = selectedReportParametersSet", "reportSingleUpdateReport = updateReport", "singleReportSelectedReportRecordGet = selectedReportRecordGet"],
        controllerParametersWindow: void 0,
        currentReportParameters: {},
        identifier: void 0,
        managedCurrentReportParametersCallIdentifiers: ["create", "update"],
        managedReportTypes: [CMDBuild.core.constants.Proxy.CSV, CMDBuild.core.constants.Proxy.ODT, CMDBuild.core.constants.Proxy.PDF, CMDBuild.core.constants.Proxy.RTF],
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.report.SinglePanel", {
                delegate: this
            }), this.controllerParametersWindow = Ext.create("CMDBuild.controller.management.report.Parameters", {
                parentDelegate: this
            })
        },
        createReport: function(e) {
            e = e || !1, Ext.isEmpty(this.currentReportParametersGet({
                callIdentifier: "create",
                property: CMDBuild.core.constants.Proxy.ID
            })) || CMDBuild.proxy.report.Report.create({
                params: this.currentReportParametersGet({
                    callIdentifier: "create"
                }),
                scope: this,
                success: function(t, o, i) {
                    i.filled ? this.showReport(e) : ((Ext.isIE || navigator.userAgent.match(/Trident.*rv[ :]*11\./)) && this.view.removeAll(), this.currentReportParametersIsEmpty("update") ? this.controllerParametersWindow.cmfg("reportParametersWindowReconfigureAndShow", {
                        attributes: i.attribute,
                        forceDownload: e
                    }) : this.cmfg("reportSingleUpdateReport", e))
                }
            })
        },
        currentReportParametersGet: function(e) {
            var t = e.callIdentifier,
                o = e.property;
            return !Ext.isEmpty(t) && Ext.isString(t) && Ext.Array.contains(this.managedCurrentReportParametersCallIdentifiers, t) ? Ext.isEmpty(o) || !Ext.isString(o) || Ext.isEmpty(this.currentReportParameters[t]) ? this.currentReportParameters[t] : this.currentReportParameters[t][o] : this.currentReportParameters
        },
        currentReportParametersIsEmpty: function(e) {
            return !Ext.isEmpty(e) && Ext.isString(e) && Ext.Array.contains(this.managedCurrentReportParametersCallIdentifiers, e) ? Ext.isEmpty(this.currentReportParametersGet({
                callIdentifier: e
            })) : Ext.isEmpty(this.currentReportParametersGet())
        },
        reportSingleSelectedReportParametersSet: function(e) {
            if (!Ext.isEmpty(e) && Ext.isObject(e)) {
                var t = e.params || null;
                switch (e.callIdentifier || null) {
                    case "create":
                        this.currentReportParameters.create = Ext.applyIf(t, {
                            extension: CMDBuild.core.constants.Proxy.PDF,
                            type: "CUSTOM"
                        });
                        break;
                    case "update":
                        this.currentReportParameters.update = t;
                        break;
                    default:
                        _error("unsupported report parameter call identifier", this)
                }
            } else this.currentReportParameters = {}
        },
        onSingleReportDownloadButtonClick: function() {
            this.showReport(!0)
        },
        onSingleReportModuleInit: function(e) {
            this.cmfg("reportSingleSelectedReportParametersSet"), Ext.Object.isEmpty(e) || Ext.isEmpty(e.get(CMDBuild.core.constants.Proxy.ID)) || e.get(CMDBuild.core.constants.Proxy.ID) == CMDBuild.core.constants.Proxy.CUSTOM || (this.setViewTitle(e.get(CMDBuild.core.constants.Proxy.TEXT)), this.cmfg("reportSingleSelectedReportParametersSet", {
                callIdentifier: "create",
                params: {
                    extension: e.get(CMDBuild.core.constants.Proxy.SECTION_HIERARCHY)[0],
                    id: e.get(CMDBuild.core.constants.Proxy.ENTITY_ID)
                }
            }), this.createReport(), this.onModuleInit(e))
        },
        onSingleReportTypeButtonClick: function(e) {
		//alert('onSingleReportTypeButtonClick');
            Ext.Array.contains(this.managedReportTypes, e) ? (this.cmfg("reportSingleSelectedReportParametersSet", {
                callIdentifier: "create",
                params: {
                    extension: e,
                    id: this.currentReportParametersGet({
                        callIdentifier: "create",
                        property: CMDBuild.core.constants.Proxy.ID
                    })
                }
            }), this.createReport()) : CMDBuild.core.Message.error(CMDBuild.Translation.error, CMDBuild.Translation.errors.unmanagedReportType, !1)
        },
        showReport: function(e) {
		//alert('show report');
            e = e || !1;
            var t = {};
            t[CMDBuild.core.constants.Proxy.FORCE_DOWNLOAD_PARAM_KEY] = !0, e ? CMDBuild.proxy.report.Report.download({
                buildRuntimeForm: !0,
                params: t
            }) : (this.view.removeAll(), this.view.add({
                xtype: "component",
                autoEl: {
                    tag: "iframe",
                    src: CMDBuild.proxy.index.Json.report.factory.print + "?donotdelete=true"
                }
            }))
        },
        reportSingleUpdateReport: function(e) 
		{
			//alert('reportSingleUpdateReport');
            this.currentReportParametersIsEmpty("update") || CMDBuild.proxy.report.Report.update({
                params: this.currentReportParametersGet({
                    callIdentifier: "update"
                }),
                scope: this,
                success: function(t, o, i) {
                    this.showReport(e)
                }
            })
        },
        singleReportSelectedReportRecordGet: Ext.emptyFn
    }), Ext.define("CMDBuild.view.management.report.SinglePanel", {
        extend: "Ext.panel.Panel",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        reportId: void 0,
        baseTitle: CMDBuild.Translation.report,
        border: !0,
        frame: !1,
        layout: "fit",
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "top",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP,
                    items: [Ext.create("CMDBuild.core.buttons.fileTypes.Pdf", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onSingleReportTypeButtonClick", CMDBuild.core.constants.Proxy.PDF)
                        }
                    }), Ext.create("CMDBuild.core.buttons.fileTypes.Odt", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onSingleReportTypeButtonClick", CMDBuild.core.constants.Proxy.ODT)
                        }
                    }), Ext.create("CMDBuild.core.buttons.fileTypes.Rtf", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onSingleReportTypeButtonClick", CMDBuild.core.constants.Proxy.RTF)
                        }
                    }), Ext.create("CMDBuild.core.buttons.fileTypes.Csv", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onSingleReportTypeButtonClick", CMDBuild.core.constants.Proxy.CSV)
                        }
                    }), "->", Ext.create("CMDBuild.core.buttons.iconized.Download", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onSingleReportDownloadButtonClick")
                        }
                    })]
                })],
                tools: [Ext.create("CMDBuild.view.common.panel.gridAndForm.tools.Properties", {
                    style: {}
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.core.buttons.fileTypes.Pdf", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "pdf",
        textDefault: CMDBuild.Translation.pdf
    }), Ext.define("CMDBuild.core.buttons.fileTypes.Odt", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "odt",
        textDefault: CMDBuild.Translation.odt
    }), Ext.define("CMDBuild.core.buttons.fileTypes.Rtf", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "rtf",
        textDefault: CMDBuild.Translation.rtf
    }), Ext.define("CMDBuild.core.buttons.fileTypes.Csv", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "csv",
        textDefault: CMDBuild.Translation.csv
    }), Ext.define("CMDBuild.core.buttons.iconized.Download", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "download",
        textDefault: CMDBuild.Translation.download
    }), Ext.define("CMDBuild.controller.management.report.Parameters", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["reportParametersWindowReconfigureAndShow", "onReportParametersWindowAbortButtonClick", "onReportParametersWindowPrintButtonClick"],
        forceDownload: !1,
        form: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.report.ParametersWindow", {
                delegate: this
            }), this.form = this.view.form
        },
        buildFields: function(e) {
            if (!Ext.isArray(e) || Ext.isEmpty(e)) return _error("buildFields(): unmanaged attributes parameter", this, e);
            var t = Ext.create("CMDBuild.core.fieldManager.FieldManager", {
                    parentDelegate: this,
                    targetForm: this.form
                }),
                o = [];
            Ext.Array.each(e, function(e, i, r) {
                if (t.isAttributeManaged(e[CMDBuild.core.constants.Proxy.TYPE])) t.attributeModelSet(Ext.create("CMDBuild.model.common.attributes.Attribute", e)), t.push(o, t.buildField());
                else {
                    e = this.validateFilterProperty(e);
                    var n = CMDBuild.Management.FieldManager.getFieldForAttr(e, !1, !1);
                    Ext.isEmpty(n) || (n.maxWidth = n.width || CMDBuild.core.constants.FieldWidths.STANDARD_BIG, e.defaultvalue && n.setValue(e.defaultvalue), o.push(n))
                }
            }, this), this.form.removeAll(), this.form.add(o)
        },
        onReportParametersWindowAbortButtonClick: function() {
            this.view.close()
        },
        onReportParametersWindowPrintButtonClick: function() {
		//alert('onReportParametersWindowPrintButtonClick');
            this.view.form.getForm().isValid() && (this.cmfg("selectedReportParametersSet", 
			{
                callIdentifier: "update",
                params: this.form.getValues()
            }), this.cmfg("updateReport", this.forceDownload), this.cmfg("onReportParametersWindowAbortButtonClick"))
        },
        reportParametersWindowReconfigureAndShow: function(e) {
            (e = Ext.isObject(e) ? e : {}).forceDownload = !!Ext.isBoolean(e.forceDownload) && e.forceDownload, this.forceDownload = e.forceDownload, this.setViewTitle(this.cmfg("selectedReportRecordGet", CMDBuild.core.constants.Proxy.DESCRIPTION)), this.buildFields(e.attributes), this.view.show()
        },
        validateFilterProperty: function(e) {
            return Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isString(e[CMDBuild.core.constants.Proxy.FILTER]) && !Ext.isEmpty(e[CMDBuild.core.constants.Proxy.FILTER]) && CMDBuild.core.templateResolver.Utils.hasTemplates(e[CMDBuild.core.constants.Proxy.FILTER]) && (e[CMDBuild.core.constants.Proxy.FILTER] = null), e
        }
    }), Ext.define("CMDBuild.view.management.report.ParametersWindow", {
        extend: "CMDBuild.core.window.AbstractCustomModal",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        dimensions: {
            height: "auto",
            width: 60
        },
        dimensionsMode: "percentage",
        form: void 0,
        baseTitle: CMDBuild.Translation.reportParameters,
        border: !0,
        closeAction: "hide",
        frame: !1,
        layout: "fit",
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    },
                    items: [Ext.create("CMDBuild.core.buttons.text.Print", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onReportParametersWindowPrintButtonClick")
                        }
                    }), Ext.create("CMDBuild.core.buttons.text.Abort", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onReportParametersWindowAbortButtonClick")
                        }
                    })]
                })],
                items: [this.form = Ext.create("Ext.form.Panel", {
                    bodyCls: "cmdb-blue-panel",
                    border: !1,
                    frame: !1,
                    layout: {
                        type: "vbox",
                        align: "stretch"
                    }
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.core.buttons.text.Print", {
        extend: "CMDBuild.core.buttons.Base",
        textDefault: CMDBuild.Translation.print
    }), Ext.define("CMDBuild.controller.management.utility.Utility", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onUtilityModuleInit = onModuleInit"],
        identifier: void 0,
        sectionController: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.utility.UtilityView", {
                delegate: this
            })
        },
        buildController: function(e) {
            switch (e) {
                case "changepassword":
                    return Ext.create("CMDBuild.controller.management.utility.changePassword.ChangePassword", {
                        parentDelegate: this
                    });
                case "exportcsv":
                    return Ext.create("CMDBuild.controller.management.utility.exportCsv.ExportCsv", {
                        parentDelegate: this
                    });
                case "importcsv":
                    return Ext.create("CMDBuild.controller.management.utility.importCsv.ImportCsv", {
                        parentDelegate: this
                    });
                case "bulkcardupdate":
                default:
                    return Ext.create("CMDBuild.controller.management.utility.bulkUpdate.BulkUpdate", {
                        parentDelegate: this
                    })
            }
        },
        onUtilityModuleInit: function(e) {
            Ext.Object.isEmpty(e) || (this.view.removeAll(!1), this.sectionController = this.buildController(e.get(CMDBuild.core.constants.Proxy.SECTION_HIERARCHY)[0]), this.setViewTitle(e.get(CMDBuild.core.constants.Proxy.DESCRIPTION)), this.view.add(this.sectionController.getView()), this.sectionController.getView().fireEvent("show"), this.onModuleInit(e))
        }
    }), Ext.define("CMDBuild.view.management.utility.UtilityView", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        baseTitle: CMDBuild.Translation.utility,
        bodyCls: "cmdb-blue-panel-no-padding",
        border: !0,
        frame: !1,
        layout: "fit",
        initComponent: function() {
            Ext.apply(this, {
                tools: [Ext.create("CMDBuild.view.common.panel.gridAndForm.tools.Properties", {
                    style: {}
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.management.workflow.Workflow", {
        extend: "CMDBuild.controller.common.panel.gridAndForm.GridAndForm",
        uses: ["CMDBuild.core.constants.Metadata", "CMDBuild.core.constants.Proxy", "CMDBuild.core.constants.WorkflowStates", "CMDBuild.core.interfaces.service.LoadMask", "CMDBuild.core.Utils", "CMDBuild.proxy.management.workflow.Activity", "CMDBuild.proxy.management.workflow.Instance", "CMDBuild.proxy.management.workflow.Workflow"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["identifierGet = panelGridAndFormIdentifierGet", "onWorkflowAbortButtonClick", "onWorkflowActivityItemDoubleClick", "onWorkflowActivityRemoveCallback", "onWorkflowActivitySelect", "onWorkflowActivityUpdateCallback", "onWorkflowAddButtonClick", "onWorkflowGraphButtonClick", "onWorkflowInstanceSelect", "onWorkflowModifyButtonClick", "onWorkflowModuleInit = onModuleInit", "onWorkflowRemoveButtonClick", "onWorkflowSaveFailure", "onWorkflowTreePrintButtonClick -> controllerTree", "onWorkflowUpdateButtonClick", "onWorkflowWokflowSelect -> controllerForm, controllerTree", "panelGridAndFormMixinsExpansionModeSet = workflowExpansionModeSet", "workflowActivityLock", "workflowFormReset -> controllerForm", "workflowIsStartActivityGet", "workflowLocalCacheWorkflowGetAll", "workflowSelectedActivityGet", "workflowSelectedActivityIsEmpty", "workflowSelectedActivityReset", "workflowSelectedActivityWidgetsGet = panelGridAndFormSelectedItemWidgetsGet", "workflowSelectedActivityWidgetsIsEmpty = panelGridAndFormSelectedItemWidgetsIsEmpty", "workflowSelectedInstanceAttributesGet = panelGridAndFormSelectedItemAttributesGet", "workflowSelectedInstanceAttributesIsEmpty = panelGridAndFormSelectedItemAttributesIsEmpty", "workflowSelectedInstanceGet = panelGridAndFormSelectedItemGet", "workflowSelectedInstanceIsEmpty = panelGridAndFormSelectedItemIsEmpty", "workflowSelectedInstanceReset", "workflowSelectedPreviousActivityGet", "workflowSelectedPreviousActivityIsEmpty", "workflowSelectedPreviousActivityReset", "workflowSelectedWorkflowAttributesGet = panelGridAndFormSelectedEntityAttributesGet", "workflowSelectedWorkflowAttributesIsEmpty = panelGridAndFormSelectedEntityAttributesIsEmpty", "workflowSelectedWorkflowGet = panelGridAndFormSelectedEntityGet", "workflowSelectedWorkflowIsEmpty = panelGridAndFormSelectedEntityIsEmpty", "workflowTreeActivitySelect -> controllerTree", "workflowTreeApplyStoreEvent -> controllerTree", "workflowTreeFilterApply -> controllerTree", "workflowTreeToolbarTopStatusValueSet -> controllerTree"],
        identifier: void 0,
        isStartActivity: !1,
        controllerForm: void 0,
        controllerTree: void 0,
        form: void 0,
        localCacheWorkflow: {
            byId: {},
            byName: {}
        },
        selectedActivity: void 0,
        selectedInstance: void 0,
        selectedInstanceAttributes: void 0,
        selectedPreviousActivity: void 0,
        selectedWorkflow: void 0,
        isOnAdvanceWorkflow: !1,
        selectedWorkflowAttributes: void 0,
        tree: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.workflow.WorkflowView", {
                delegate: this
            }), this.view.removeAll(), this.view.removeDocked(this.view.getDockedComponent(CMDBuild.core.constants.Proxy.TOOLBAR_TOP)), this.controllerForm = Ext.create("CMDBuild.controller.management.workflow.panel.form.Form", {
                parentDelegate: this
            }), this.controllerTree = Ext.create("CMDBuild.controller.management.workflow.panel.tree.Tree", {
                parentDelegate: this
            }), this.view.add([this.tree = this.controllerTree.getView(), this.form = this.controllerForm.getView()]), this.view.mon(this.view, "workflowUnlockOnContentChange", function() {
                this.controllerForm.cmfg("onWorkflowFormAbortButtonClick")
            }, this)
        },
        buildLocalCache: function(e, t) {
            this.buildLocalCacheWorkflow(e, function() {
                this.buildLocalCacheWorkflowAttributes(function() {
                    this.buildLocalCacheDefaultFilter(e, t)
                })
            })
        },
        buildLocalCacheDefaultFilter: function(e, t) {
            if (this.cmfg("workflowSelectedWorkflowIsEmpty")) return _error("buildLocalCacheDefaultFilter(): empty selected workflow", this, this.cmfg("workflowSelectedWorkflowGet"));
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("buildLocalCacheWorkflow(): unmanaged node parameter", this, e);
            var o = e.get(CMDBuild.core.constants.Proxy.FILTER);
            if (Ext.isEmpty(o)) {
                var i = {};
                i[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME), i[CMDBuild.core.constants.Proxy.GROUP] = CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.DEFAULT_GROUP_NAME), CMDBuild.proxy.management.workflow.Workflow.readDefaultFilter({
                    params: i,
                    loadMask: !1,
                    scope: this,
                    callback: t,
                    success: function(t, o, i) {
                        if (i = i[CMDBuild.core.constants.Proxy.RESPONSE][CMDBuild.core.constants.Proxy.ELEMENTS][0], Ext.isObject(i) && !Ext.Object.isEmpty(i)) {
                            var r = i[CMDBuild.core.constants.Proxy.CONFIGURATION];
                            Ext.isString(r) && !Ext.isEmpty(r) && CMDBuild.core.Utils.isJsonString(r) && (i[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.decode(r)), e.set(CMDBuild.core.constants.Proxy.FILTER, Ext.create("CMDBuild.model.management.workflow.panel.tree.filter.advanced.Filter", i))
                        }
                    }
                })
            } else Ext.isString(o) && e.set(CMDBuild.core.constants.Proxy.FILTER, Ext.create("CMDBuild.model.management.workflow.panel.tree.filter.advanced.Filter", {
                configuration: JSON.parse(o)
            })), Ext.callback(t, this)
        },
        buildLocalCacheWorkflow: function(e, t) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("buildLocalCacheWorkflow(): unmanaged node parameter", this, e);
            if (!Ext.isNumber(e.get(CMDBuild.core.constants.Proxy.ENTITY_ID)) || Ext.isEmpty(e.get(CMDBuild.core.constants.Proxy.ENTITY_ID))) return _error("buildLocalCacheWorkflow(): unmanaged node entityId property", this, e.get(CMDBuild.core.constants.Proxy.ENTITY_ID));
            var o = {};
            o[CMDBuild.core.constants.Proxy.ACTIVE] = !0, CMDBuild.proxy.management.workflow.Workflow.readAll({
                params: o,
                loadMask: !1,
                scope: this,
                success: function(o, i, r) {
                    if (r = r[CMDBuild.core.constants.Proxy.RESPONSE], Ext.isArray(r) && !Ext.isEmpty(r)) {
                        this.workflowLocalCacheWorkflowSet(r);
                        var n = this.workflowLocalCacheWorkflowGet({
                            id: e.get(CMDBuild.core.constants.Proxy.ENTITY_ID)
                        });
                        Ext.isObject(n) && !Ext.Object.isEmpty(n) ? (this.workflowIsStartActivityReset(), this.workflowSelectedWorkflowSet({
                            value: n
                        }), Ext.callback(t, this)) : _error("buildLocalCacheWorkflow(): workflow not found", this, id)
                    } else _error("buildLocalCacheWorkflow(): unmanaged response", this, r)
                }
            })
        },
        buildLocalCacheWorkflowAttributes: function(e) {
            if (this.cmfg("workflowSelectedWorkflowIsEmpty")) return _error("buildLocalCacheWorkflowAttributes(): empty selected workflow", this, this.cmfg("workflowSelectedWorkflowGet"));
            var t = {};
            t[CMDBuild.core.constants.Proxy.ACTIVE] = !0, t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME), CMDBuild.proxy.management.workflow.Workflow.readAttributes({
                params: t,
                loadMask: !1,
                scope: this,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.ATTRIBUTES], Ext.isArray(i) && !Ext.isEmpty(i) ? (this.workflowSelectedWorkflowAttributesSet(i), Ext.callback(e, this)) : _error("buildLocalCacheWorkflowAttributes(): unmanaged response", this, i)
                }
            })
        },
        onWorkflowAbortButtonClick: function() {
            this.cmfg("workflowExpansionModeSet", {
                maximize: "top"
            }), this.cmfg("workflowSelectedActivityReset"), this.cmfg("workflowSelectedInstanceReset"), this.workflowIsStartActivityReset(), this.controllerForm.cmfg("onWorkflowFormAbortButtonClick"), this.controllerTree.cmfg("onWorkflowTreeAbortButtonClick")
        },
        onWorkflowActivityItemDoubleClick: function() {
            this.cmfg("workflowExpansionModeSet", {
                maximize: "bottom"
            }), this.controllerForm.cmfg("onWorkflowFormActivityItemDoubleClick")
        },
        onWorkflowActivityRemoveCallback: function() {
            this.cmfg("workflowSelectedActivityReset"), this.cmfg("workflowSelectedInstanceReset"), this.controllerForm.cmfg("workflowFormReset"), this.controllerTree.cmfg("workflowTreeStoreLoad", {
                disableFirstRowSelection: !0
            })
        },
        onWorkflowActivitySelect: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).loadMask = !Ext.isBoolean(e.loadMask) || e.loadMask, !Ext.isObject(e.record) || Ext.Object.isEmpty(e.record) || !Ext.isFunction(e.record.get)) return _error("onWorkflowActivitySelect(): unmanaged record parameter", this, record);
            if (!Ext.isString(e.record.get(CMDBuild.core.constants.Proxy.ACTIVITY_ID)) || Ext.isEmpty(e.record.get(CMDBuild.core.constants.Proxy.ACTIVITY_ID)) || !Ext.isNumber(e.record.get(CMDBuild.core.constants.Proxy.CARD_ID)) || Ext.isEmpty(e.record.get(CMDBuild.core.constants.Proxy.CARD_ID)) || !Ext.isNumber(e.record.get(CMDBuild.core.constants.Proxy.CLASS_ID)) || Ext.isEmpty(e.record.get(CMDBuild.core.constants.Proxy.CLASS_ID))) return _error("onWorkflowActivitySelect(): not correctly filled record model", this, e.record);
            this.cmfg("workflowSelectedActivityReset"), this.workflowIsStartActivityReset(), this.workflowActivityUnlock();
            var t = {};
            t[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_ID] = e.record.get(CMDBuild.core.constants.Proxy.ACTIVITY_ID), t[CMDBuild.core.constants.Proxy.CARD_ID] = e.record.get(CMDBuild.core.constants.Proxy.CARD_ID), t[CMDBuild.core.constants.Proxy.CLASS_ID] = e.record.get(CMDBuild.core.constants.Proxy.CLASS_ID), t[CMDBuild.core.constants.Proxy.VIEW_MODE] = e.record.getData()[CMDBuild.core.constants.Proxy.ACTIVITY_WRITABLE] && this.isOnAdvanceWorkflow ? "edit" : "read", this.isOnAdvanceWorkflow = !1, CMDBuild.proxy.management.workflow.Activity.read({
                params: t,
                loadMask: !0,
                scope: this,
                failure: this.saveFailure,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.RESPONSE], Ext.isObject(i) && !Ext.Object.isEmpty(i) ? (i.rawData = i, this.workflowSelectedActivitySet({
                        value: i
                    }), this.controllerForm.cmfg("onWorkflowFormActivitySelect", o.params), !Ext.isEmpty(e.callback) && Ext.isFunction(e.callback) && Ext.callback(e.callback, Ext.isObject(e.scope) ? e.scope : this)) : _error("onWorkflowActivitySelect(): unmanaged response", this, i)
                }
            })
        },
        onWorkflowActivityUpdateCallback: function(e) {
            if (this.cmfg("workflowSelectedActivityReset"), this.cmfg("workflowSelectedInstanceReset"), !Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("onWorkflowActivityUpdateCallback(): unmanaged responseModel parameter", this, e);
            if (!Ext.isString(e.get(CMDBuild.core.constants.Proxy.FLOW_STATUS)) || Ext.isEmpty(e.get(CMDBuild.core.constants.Proxy.FLOW_STATUS)) || e.get(CMDBuild.core.constants.Proxy.FLOW_STATUS) != CMDBuild.core.constants.WorkflowStates.getCompletedCapitalized() && e.get(CMDBuild.core.constants.Proxy.FLOW_STATUS) != CMDBuild.core.constants.WorkflowStates.getSuspendedCapitalized()) {
                this.cmfg("workflowExpansionModeSet", {
                    maximize: "bottom"
                });
                var t = {};
                t[CMDBuild.core.constants.Proxy.INSTANCE_ID] = e.get(CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.METADATA] = e.get(CMDBuild.core.constants.Proxy.METADATA), this.cmfg("workflowTreeActivitySelect", t)
            } else this.cmfg("workflowExpansionModeSet", {
                maximize: "top"
            }), _CMWFState.setProcessInstance(Ext.create("CMDBuild.model.CMProcessInstance")), this.controllerForm.cmfg("workflowFormReset"), this.controllerTree.cmfg("workflowTreeReset"), this.controllerTree.cmfg("workflowTreeStoreLoad", {
                disableFirstRowSelection: !0
            })
        },
        onWorkflowAddButtonClick: function(e) {
            e = Ext.isNumber(e) && !Ext.isEmpty(e) ? e : this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.ID), this.controllerForm.cmfg("workflowFormReset"), this.cmfg("workflowExpansionModeSet", {
                maximize: "bottom"
            }), this.cmfg("workflowSelectedActivityReset"), this.cmfg("workflowSelectedInstanceReset");
            var t = {};
            t[CMDBuild.core.constants.Proxy.CLASS_ID] = e, CMDBuild.proxy.management.workflow.Workflow.readStart({
                params: t,
                scope: this,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.RESPONSE], Ext.isObject(i) && !Ext.Object.isEmpty(i) ? (i.rawData = i, this.workflowIsStartActivitySet(), this.workflowSelectedActivitySet({
                        value: i
                    }), this.workflowSelectedInstanceSet({
                        value: {
                            classId: e,
                            className: _CMCache.getEntryTypeNameById(e)
                        }
                    }), this.readInstanceAttributes(function() {
                        this.setViewTitle(), this.controllerForm.cmfg("onWorkflowFormAddButtonClick", e), this.controllerTree.cmfg("onWorkflowTreeAddButtonClick", e)
                    })) : _error("onWorkflowAddButtonClick(): unmanaged response", this, i)
                }
            })
        },
        onWorkflowGraphButtonClick: function() {
            if (this.cmfg("workflowSelectedInstanceIsEmpty")) return _error("onWorkflowGraphButtonClick(): unmanaged selectedInstance property", this, this.cmfg("workflowSelectedInstanceGet"));
            Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.graph.Window", {
                parentDelegate: this,
                classId: this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.CLASS_ID),
                cardId: this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID)
            })
        },
        onWorkflowInstanceSelect: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).loadMask = !Ext.isBoolean(e.loadMask) || e.loadMask, e.scope = Ext.isObject(e.scope) ? e.scope : this, this.cmfg("workflowSelectedInstanceReset"), this.workflowIsStartActivityReset(), !Ext.isObject(e.record) || Ext.Object.isEmpty(e.record) || !Ext.isFunction(e.record.get)) return _error("onWorkflowInstanceSelect(): unmanaged record parameter", this, e.record);
            if (!Ext.isNumber(e.record.get(CMDBuild.core.constants.Proxy.CARD_ID)) || Ext.isEmpty(e.record.get(CMDBuild.core.constants.Proxy.CARD_ID)) || !Ext.isString(e.record.get(CMDBuild.core.constants.Proxy.CLASS_NAME)) || Ext.isEmpty(e.record.get(CMDBuild.core.constants.Proxy.CLASS_NAME))) return _error("onWorkflowInstanceSelect(): not correctly filled record model", this, e.record);
            var t = {};
            t[CMDBuild.core.constants.Proxy.CARD_ID] = e.record.get(CMDBuild.core.constants.Proxy.CARD_ID), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = e.record.get(CMDBuild.core.constants.Proxy.CLASS_NAME), CMDBuild.proxy.management.workflow.Instance.read({
                params: t,
                loadMask: !0,
                scope: this,
                failure: this.saveFailure,
                success: function(t, o, i) {
                    if (i = i[CMDBuild.core.constants.Proxy.RESPONSE], Ext.isObject(i) && !Ext.Object.isEmpty(i)) {
                        var r = i;
                        r.rawData = i, this.workflowSelectedInstanceSet({
                            value: r
                        }), this.readInstanceAttributes(function() {
                            this.controllerForm.cmfg("onWorkflowFormInstanceSelect"), Ext.isFunction(e.callback) && Ext.callback(e.callback, e.scope)
                        })
                    } else _error("onWorkflowInstanceSelect(): unmanaged response", this, i)
                }
            })
        },
        onWorkflowModifyButtonClick: function() {
            this.cmfg("workflowExpansionModeSet", {
                maximize: "bottom"
            }), this.cmfg("workflowActivityLock", {
                scope: this,
                callback: function() {
                    this.controllerForm.cmfg("onWorkflowFormModifyButtonClick")
                }
            })
        },
        onWorkflowModuleInit: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (CMDBuild.core.interfaces.service.LoadMask.manage(!0, !0), this.cmfg("workflowSelectedActivityReset"), this.cmfg("workflowSelectedInstanceReset"), this.workflowSelectedPreviousActivityReset(), this.workflowSelectedWorkflowReset(), this.resetScreenUiParameters(), this.controllerForm.cmfg("onWorkflowFormActivityInit"), this.buildLocalCache(e, function() {
                CMDBuild.core.interfaces.service.LoadMask.manage(!0, !1), this.setViewTitle(this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.DESCRIPTION)), this.cmfg("workflowExpansionModeSet", {
                    maximize: "top"
                }), this.cmfg("onWorkflowWokflowSelect", e), this.onModuleInit(e)
            }))
        },
        onWorkflowRemoveButtonClick: function() {
            Ext.MessageBox.show({
                title: CMDBuild.Translation.abortProcess,
                msg: CMDBuild.Translation.areYouSureYouWantToAbortThisProcess,
                buttons: Ext.MessageBox.YESNO,
                scope: this,
                fn: function(e, t, o) {
                    "yes" == e && this.removeItem()
                }
            })
        },
        onWorkflowSaveFailure: function() {
            this.cmfg("workflowExpansionModeSet", {
                maximize: "bottom"
            }), this.controllerTree.cmfg("onWorkflowTreeSaveFailure")
        },
        onWorkflowUpdateButtonClick: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).activityData = Ext.isObject(e.activityData) ? e.activityData : {}, e.advance = !!Ext.isBoolean(e.advance) && e.advance, e.widgetData = Ext.isObject(e.widgetData) ? e.widgetData : {}, this.isOnAdvanceWorkflow = e.advance, this.cmfg("workflowSelectedInstanceIsEmpty")) return _error("onWorkflowUpdateButtonClick(): unmanaged selectedInstance property", this, this.cmfg("workflowSelectedInstanceGet"));
            var t = e.activityData;
            t[CMDBuild.core.constants.Proxy.BEGIN_DATE] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.BEGIN_DATE_AS_LONG);
            var o = {};
            o.ww = Ext.encode(e.widgetData), o[CMDBuild.core.constants.Proxy.ADVANCE] = e.advance, o[CMDBuild.core.constants.Proxy.ATTRIBUTES] = Ext.encode(t), o[CMDBuild.core.constants.Proxy.CLASS_ID] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.CLASS_ID), this.cmfg("workflowSelectedActivityIsEmpty", CMDBuild.core.constants.Proxy.ID) || (o[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_ID] = this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.ID)), this.cmfg("workflowSelectedInstanceIsEmpty", CMDBuild.core.constants.Proxy.ID) || (o[CMDBuild.core.constants.Proxy.CARD_ID] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID)), Ext.isEmpty(o[CMDBuild.core.constants.Proxy.CARD_ID]) ? CMDBuild.proxy.management.workflow.Activity.create({
                params: o,
                scope: this,
                failure: this.saveFailure,
                success: this.saveSuccess
            }) : CMDBuild.proxy.management.workflow.Activity.update({
                params: o,
                scope: this,
                failure: this.saveFailure,
                success: this.saveSuccess
            })
        },
        readInstanceAttributes: function(e) {
            if (this.cmfg("workflowSelectedInstanceIsEmpty")) return _error("readInstanceAttributes(): unmanaged selectedInstance proeprty", this, this.cmfg("workflowSelectedInstanceGet"));
            var t = {};
            t[CMDBuild.core.constants.Proxy.ACTIVE] = !0, t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.CLASS_NAME), CMDBuild.proxy.management.workflow.Workflow.readAttributes({
                params: t,
                loadMask: !1,
                scope: this,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.ATTRIBUTES], Ext.isArray(i) && !Ext.isEmpty(i) ? (this.workflowSelectedInstanceAttributesSet(i), Ext.callback(e, this)) : _error("readInstanceAttributes(): unmanaged response", this, i)
                }
            })
        },
        removeItem: function() {
            if (this.cmfg("workflowSelectedInstanceIsEmpty")) return _error("removeItem(): unmanaged selectedInstance property", this, this.cmfg("workflowSelectedInstanceGet"));
            var e = {};
            e.cardId = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID), e.classId = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.CLASS_ID), CMDBuild.proxy.management.workflow.Instance.abort({
                params: e,
                scope: this,
                success: function(e, t, o) {
                    this.cmfg("workflowSelectedActivityReset"), this.cmfg("workflowSelectedInstanceReset"), this.controllerForm.cmfg("workflowFormReset"), this.controllerTree.cmfg("workflowTreeStoreLoad", {
                        disableFirstRowSelection: !0
                    })
                }
            })
        },
        saveFailure: function(e, t, o) {
            this.cmfg("workflowExpansionModeSet", {
                maximize: "bottom"
            }), this.controllerTree.cmfg("onWorkflowTreeSaveFailure")
        },
        saveSuccess: function(e, t, o) {
            if (o = o[CMDBuild.core.constants.Proxy.RESPONSE], !Ext.isObject(o) || Ext.Object.isEmpty(o)) return _error("saveSuccess(): unmanaged response", this, o);
            if ((o = Ext.create("CMDBuild.model.management.workflow.panel.form.tabs.activity.SaveResponse", o))[CMDBuild.core.constants.Proxy.METADATA] = this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.METADATA), this.cmfg("workflowSelectedActivityReset"), this.cmfg("workflowSelectedInstanceReset"), !Ext.isString(o.get(CMDBuild.core.constants.Proxy.FLOW_STATUS)) || Ext.isEmpty(o.get(CMDBuild.core.constants.Proxy.FLOW_STATUS)) || o.get(CMDBuild.core.constants.Proxy.FLOW_STATUS) != CMDBuild.core.constants.WorkflowStates.getCompletedCapitalized() && o.get(CMDBuild.core.constants.Proxy.FLOW_STATUS) != CMDBuild.core.constants.WorkflowStates.getSuspendedCapitalized()) {
                this.cmfg("workflowExpansionModeSet", {
                    maximize: "bottom"
                }), t.params[CMDBuild.core.constants.Proxy.ADVANCE] && (this.controllerForm.controllerTabActivity.selectedInstanceId = o.get(CMDBuild.core.constants.Proxy.ID));
                var i = {};
                i[CMDBuild.core.constants.Proxy.INSTANCE_ID] = o.get(CMDBuild.core.constants.Proxy.ID), i[CMDBuild.core.constants.Proxy.METADATA] = o.get(CMDBuild.core.constants.Proxy.METADATA), this.cmfg("workflowTreeActivitySelect", i)
            } else this.cmfg("workflowExpansionModeSet", {
                maximize: "top"
            }), _CMWFState.setProcessInstance(Ext.create("CMDBuild.model.CMProcessInstance")), this.controllerForm.cmfg("workflowFormReset"), this.controllerTree.cmfg("workflowTreeReset"), this.controllerTree.cmfg("workflowTreeStoreLoad", {
                disableFirstRowSelection: !0
            })
        },
        workflowActivityLock: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).scope = Ext.isObject(e.scope) ? e.scope : this, CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ENABLE_CARD_LOCK) && !this.cmfg("workflowSelectedActivityIsEmpty") && !this.cmfg("workflowSelectedInstanceIsEmpty")) {
                var t = {};
                return t[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_ID] = this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.PROCESS_INSTANCE_ID] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID), CMDBuild.proxy.management.workflow.Activity.lock({
                    params: t,
                    loadMask: !1,
                    scope: this,
                    success: function(t, o, i) {
                        Ext.isFunction(e.callback) && Ext.callback(e.callback, e.scope)
                    }
                })
            }
            return Ext.callback(e.callback, e.scope)
        },
        workflowActivityUnlock: function() {
            if (CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ENABLE_CARD_LOCK) && !this.cmfg("workflowSelectedPreviousActivityIsEmpty")) {
                var e = {};
                e[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_ID] = this.cmfg("workflowSelectedPreviousActivityGet", CMDBuild.core.constants.Proxy.ACTIVITY_ID), e[CMDBuild.core.constants.Proxy.PROCESS_INSTANCE_ID] = this.cmfg("workflowSelectedPreviousActivityGet", CMDBuild.core.constants.Proxy.INSTANCE_ID), CMDBuild.proxy.management.workflow.Activity.unlock({
                    params: e,
                    loadMask: !1
                })
            }
        },
        workflowLocalCacheWorkflowReset: function() {
            this.localCacheWorkflow = {
                byId: {},
                byName: {}
            }
        },
        workflowLocalCacheWorkflowGet: function(e) {
            return e = Ext.isObject(e) ? e : {}, Ext.isNumber(e.id) && !Ext.isEmpty(e.id) ? this.localCacheWorkflow.byId[e.id] : Ext.isString(e.name) && !Ext.isEmpty(e.name) ? this.localCacheWorkflow.byName[e.name] : null
        },
        workflowLocalCacheWorkflowGetAll: function() {
            return Ext.Object.getValues(this.localCacheWorkflow.byName)
        },
        workflowLocalCacheWorkflowSet: function(e) {
            this.workflowLocalCacheWorkflowReset(), Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.each(e, function(e, t, o) {
                if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                    e.rawData = e;
                    var i = Ext.create("CMDBuild.model.management.workflow.Workflow", e);
                    this.localCacheWorkflow.byId[i.get(CMDBuild.core.constants.Proxy.ID)] = i, this.localCacheWorkflow.byName[i.get(CMDBuild.core.constants.Proxy.NAME)] = i
                }
            }, this)
        },
        workflowSelectedActivityGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedActivity", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        workflowSelectedActivityIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedActivity", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        workflowSelectedActivityReset: function(e) {
            if (!this.cmfg("workflowIsStartActivityGet")) {
                var t = {};
                t[CMDBuild.core.constants.Proxy.ACTIVITY_ID] = this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.INSTANCE_ID] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.METADATA] = this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.METADATA), t[CMDBuild.core.constants.Proxy.WORKFLOW_NAME] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME), this.workflowSelectedPreviousActivitySet({
                    value: t
                })
            }
            this.propertyManageReset("selectedActivity")
        },
        workflowSelectedActivitySet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.workflow.Activity", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedActivity", this.propertyManageSet(e))
        },
        workflowSelectedActivityWidgetsGet: function() {
            return this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.WIDGETS)
        },
        workflowSelectedActivityWidgetsIsEmpty: function() {
            return Ext.isEmpty(this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.WIDGETS))
        },
        workflowSelectedInstanceGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedInstance", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        workflowSelectedInstanceIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedInstance", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        workflowSelectedInstanceReset: function(e) {
            if (!this.cmfg("workflowIsStartActivityGet")) {
                var t = {};
                t[CMDBuild.core.constants.Proxy.INSTANCE_ID] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.WORKFLOW_NAME] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME), this.workflowSelectedPreviousActivitySet({
                    value: t
                })
            }
            this.propertyManageReset("selectedInstance")
        },
        workflowSelectedInstanceSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.workflow.Instance", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedInstance", this.propertyManageSet(e))
        },
        workflowSelectedInstanceAttributesGet: function() {
            return this.selectedInstanceAttributes
        },
        workflowSelectedInstanceAttributesIsEmpty: function() {
            return Ext.isEmpty(this.selectedInstanceAttributes)
        },
        workflowSelectedInstanceAttributesSet: function(e) {
            this.selectedInstanceAttributes = [], Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.each(e, function(e, t, o) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && this.selectedInstanceAttributes.push(Ext.create("CMDBuild.model.management.workflow.Attribute", e))
            }, this)
        },
        workflowSelectedPreviousActivityGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedPreviousActivity", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        workflowSelectedPreviousActivityIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedPreviousActivity", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        workflowSelectedPreviousActivityReset: function() {
            return this.propertyManageReset("selectedPreviousActivity")
        },
        workflowSelectedPreviousActivitySet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.workflow.PreviousActivity", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedPreviousActivity", this.propertyManageSet(e))
        },
        workflowSelectedWorkflowGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedWorkflow", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        workflowSelectedWorkflowIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedWorkflow", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        workflowSelectedWorkflowReset: function() {
            return this.propertyManageReset("selectedWorkflow")
        },
        workflowSelectedWorkflowSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.workflow.Workflow", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedWorkflow", this.propertyManageSet(e))
        },
        workflowSelectedWorkflowAttributesGet: function() {
            return this.selectedWorkflowAttributes
        },
        workflowSelectedWorkflowAttributesIsEmpty: function() {
            return Ext.isEmpty(this.selectedWorkflowAttributes)
        },
        workflowSelectedWorkflowAttributesSet: function(e) {
            this.selectedWorkflowAttributes = [], Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.each(e, function(e, t, o) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && this.selectedWorkflowAttributes.push(Ext.create("CMDBuild.model.management.workflow.Attribute", e))
            }, this)
        },
        workflowIsStartActivityGet: function() {
            return this.isStartActivity
        },
        workflowIsStartActivityReset: function() {
            this.isStartActivity = !1
        },
        workflowIsStartActivitySet: function() {
            this.isStartActivity = !0
        },
        panelGridAndFormMixinsExpansionModeSet: function(e) {
            e.force && (this.forceFullScreen = "both" !== e.maximize, "top" === e.maximize && this.controllerForm.cmfg("onWorkflowFormAbortButtonClick")), e[CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE] = this.forceFullScreen, this.callParent(arguments)
        },
        resetScreenUiParameters: function() {
            this.forceFullScreen = void 0
        }
    }), Ext.define("CMDBuild.controller.common.panel.gridAndForm.GridAndForm", {
        extend: "CMDBuild.controller.common.abstract.Base",
        mixins: ["CMDBuild.controller.common.panel.gridAndForm.panel.mixins.ExpansionMode"],
        parentDelegate: void 0,
        form: void 0,
        grid: void 0,
        view: void 0
    }), Ext.define("CMDBuild.controller.common.panel.gridAndForm.panel.mixins.ExpansionMode", {
        panelGridAndFormMixinsExpansionModeAreBothDisplayed: function() {
            return (Ext.isEmpty(this.grid) ? this.tree : this.grid).isVisible() && this.form.isVisible()
        },
        panelGridAndFormMixinsExpansionModeDisplayBoth: function(e) {
            (e = Ext.isObject(e) ? e : {}).force = !!Ext.isBoolean(e.force) && e.force;
            var t = Ext.isEmpty(this.grid) ? this.tree : this.grid;
            if (!Ext.isObject(this.form) || Ext.Object.isEmpty(this.form) || !this.form instanceof Ext.panel.Panel) return _error("panelGridAndFormMixinsExpansionModeDisplayBoth(): unmanaged form property", this, this.form);
            if (!Ext.isObject(t) || Ext.Object.isEmpty(t) || !t instanceof Ext.panel.Panel) return _error("panelGridAndFormMixinsExpansionModeDisplayBoth(): unmanaged topPanel property", this, t);
            var o = e[CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE];
            void 0 === o && (o = CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE)), (o || !this.panelGridAndFormMixinsExpansionModeAreBothDisplayed() || e.force) && (Ext.suspendLayouts(), t.show(), t.region = "center", this.form.show(), this.form.region = "south", this.panelGridAndFormMixinsExpansionModeStyleClsAdd(), Ext.resumeLayouts(!0))
        },
        panelGridAndFormMixinsExpansionModeMaximizeBottom: function(e) {
            (e = Ext.isObject(e) ? e : {}).force = !!Ext.isBoolean(e.force) && e.force;
            var t = Ext.isEmpty(this.grid) ? this.tree : this.grid;
            if (!Ext.isObject(this.form) || Ext.Object.isEmpty(this.form) || !this.form instanceof Ext.panel.Panel) return _error("panelGridAndFormMixinsExpansionModeMaximizeBottom(): unmanaged form property", this, this.form);
            if (!Ext.isObject(t) || Ext.Object.isEmpty(t) || !t instanceof Ext.panel.Panel) return _error("panelGridAndFormMixinsExpansionModeMaximizeBottom(): unmanaged topPanel property", this, t);
            var o = e[CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE];
            void 0 === o && (o = CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE)), (o || !this.panelGridAndFormMixinsExpansionModeAreBothDisplayed() || e.force) && (Ext.suspendLayouts(), t.hide(), t.region = "", this.form.show(), this.form.region = "center", this.panelGridAndFormMixinsExpansionModeStyleClsRemove(), Ext.resumeLayouts(!0))
        },
        panelGridAndFormMixinsExpansionModeMaximizeTop: function(e) {
            (e = Ext.isObject(e) ? e : {}).force = !!Ext.isBoolean(e.force) && e.force;
            var t = Ext.isEmpty(this.grid) ? this.tree : this.grid;
            if (!Ext.isObject(this.form) || Ext.Object.isEmpty(this.form) || !this.form instanceof Ext.panel.Panel) return _error("panelGridAndFormMixinsExpansionModeMaximizeTop(): unmanaged form property", this, this.form);
            if (!Ext.isObject(t) || Ext.Object.isEmpty(t) || !t instanceof Ext.panel.Panel) return _error("panelGridAndFormMixinsExpansionModeMaximizeTop(): unmanaged topPanel property", this, t);
            var o = e[CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE];
            void 0 === o && (o = CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE)), (o || !this.panelGridAndFormMixinsExpansionModeAreBothDisplayed() || e.force) && (Ext.suspendLayouts(), t.show(), t.region = "center", this.form.hide(), this.form.region = "", this.panelGridAndFormMixinsExpansionModeStyleClsRemove(), Ext.resumeLayouts(!0))
        },
        panelGridAndFormMixinsExpansionModeSet: function(e) {
            (e = Ext.isObject(e) ? e : {}).maximize = Ext.isString(e.maximize) ? e.maximize : "both";
            var t = {};
            switch (t.force = e.force, t[CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE] = e[CMDBuild.core.constants.Proxy.FULL_SCREEN_MODE], e.maximize) {
                case "bottom":
                    return this.panelGridAndFormMixinsExpansionModeMaximizeBottom(t);
                case "top":
                    return this.panelGridAndFormMixinsExpansionModeMaximizeTop(t);
                case "both":
                    return this.panelGridAndFormMixinsExpansionModeDisplayBoth(t);
                default:
                    return _error("panelGridAndFormMixinsExpansionModeSet(): unmanaged maximize parameter", this, e.maximize)
            }
        },
        panelGridAndFormMixinsExpansionModeStyleClsAdd: function() {
            var e = Ext.isEmpty(this.grid) ? this.tree : this.grid;
            return !Ext.isObject(this.form) || Ext.Object.isEmpty(this.form) || !this.form instanceof Ext.panel.Panel ? _error("panelGridAndFromFullScreenRemoveStyleCls(): unmanaged form property", this, this.form) : !Ext.isObject(e) || Ext.Object.isEmpty(e) || !e instanceof Ext.panel.Panel ? _error("panelGridAndFromFullScreenRemoveStyleCls(): unmanaged topPanel property", this, e) : (e.hasCls("cmdb-border-bottom") || e.addCls("cmdb-border-bottom"), void(this.form.hasCls("cmdb-border-top") || this.form.addCls("cmdb-border-top")))
        },
        panelGridAndFormMixinsExpansionModeStyleClsRemove: function() {
            var e = Ext.isEmpty(this.grid) ? this.tree : this.grid;
            return !Ext.isObject(this.form) || Ext.Object.isEmpty(this.form) || !this.form instanceof Ext.panel.Panel ? _error("panelGridAndFromFullScreenRemoveStyleCls(): unmanaged form property", this, this.form) : !Ext.isObject(e) || Ext.Object.isEmpty(e) || !e instanceof Ext.panel.Panel ? _error("panelGridAndFromFullScreenRemoveStyleCls(): unmanaged topPanel property", this, e) : (e.hasCls("cmdb-border-bottom") && e.removeCls("cmdb-border-bottom"), void(this.form.hasCls("cmdb-border-top") && this.form.removeCls("cmdb-border-top")))
        }
    }), Ext.define("CMDBuild.core.constants.Metadata", {
        singleton: !0,
        config: {
            activitySubsetId: "ActivitySubsetId",
            additionalActivityLabel: "AdditionalActivityLabel",
            nextActivitySubsetId: "NextActivitySubsetId",
            selectedAttributesGroup: "SelectedAttributesGroup"
        },
        constructor: function(e) {
            this.initConfig(e)
        }
    }), Ext.define("CMDBuild.proxy.management.workflow.Activity", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        create: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.activity.create
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.WORKFLOW_ACTIVITY, e, !0)
        },
        lock: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.activity.lock
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        },
        read: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.activity.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.WORKFLOW_ACTIVITY, e)
        },
        unlock: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.activity.unlock
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        },
        update: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.activity.update
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.WORKFLOW_ACTIVITY, e, !0)
        }
    }), Ext.define("CMDBuild.proxy.management.workflow.Instance", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        abort: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.activity.abort
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.WORKFLOW_INSTANCE, e, !0)
        },
        read: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.instance.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.WORKFLOW_INSTANCE, e)
        }
    }), Ext.define("CMDBuild.proxy.management.workflow.Workflow", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        readAll: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.readAll
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.WORKFLOW, e)
        },
        readAttributes: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.attribute.readAll
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTRIBUTE, e)
        },
        readDefaultFilter: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.filter.defaults.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.DEFAULT_FILTER, e)
        },
        readStart: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.activity.readStart
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.WORKFLOW_ACTIVITY, e)
        }
    }), Ext.define("CMDBuild.view.management.workflow.WorkflowView", {
        extend: "CMDBuild.view.common.panel.gridAndForm.GridAndFormView",
        delegate: void 0,
        baseTitle: CMDBuild.Translation.processes,
        title: CMDBuild.Translation.processes
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.GridAndFormView", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        enableTools: !0,
        bodyCls: "cmdb-blue-panel-no-padding",
        border: !0,
        frame: !1,
        layout: "border",
        initComponent: function() {
            Ext.apply(this, {
                tools: this.enableTools ? [Ext.create("CMDBuild.view.common.panel.gridAndForm.tools.Properties", {
                    delegate: this.delegate
                }), Ext.create("CMDBuild.view.common.panel.gridAndForm.tools.Minimize", {
                    delegate: this.delegate
                }), Ext.create("CMDBuild.view.common.panel.gridAndForm.tools.Maximize", {
                    delegate: this.delegate
                }), Ext.create("CMDBuild.view.common.panel.gridAndForm.tools.Restore", {
                    delegate: this.delegate
                })] : []
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.tools.Minimize", {
        extend: "Ext.panel.Tool",
        delegate: void 0,
        tooltip: CMDBuild.Translation.minimizeGrid,
        type: "minimize",
        handler: function(e, t, o, i) {
            this.delegate.cmfg("panelGridAndFormMixinsExpansionModeSet", {
                force: !0,
                maximize: "bottom"
            })
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.tools.Maximize", {
        extend: "Ext.panel.Tool",
        delegate: void 0,
        tooltip: CMDBuild.Translation.maximizeGrid,
        type: "maximize",
        handler: function(e, t, o, i) {
            this.delegate.cmfg("panelGridAndFormMixinsExpansionModeSet", {
                force: !0,
                maximize: "top"
            })
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.tools.Restore", {
        extend: "Ext.panel.Tool",
        delegate: void 0,
        tooltip: CMDBuild.Translation.restore,
        type: "restore",
        handler: function(e, t, o, i) {
            this.delegate.cmfg("panelGridAndFormMixinsExpansionModeSet", {
                force: !0,
                maximize: "both"
            })
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.form.TabPanel", {
        extend: "Ext.tab.Panel",
        delegate: void 0,
        border: !1,
        cls: "cmdb-border-right",
        frame: !1,
        region: "center",
        activateFirstTab: function() {
            this.setActiveTab(0)
        },
        getAttachmentsPanel: function() {
            return Ext.isEmpty(this.delegate) || Ext.isEmpty(this.delegate.controllerTabAttachment) ? null : this.delegate.controllerTabAttachment.getView()
        },
        getNotesPanel: function() {
            return Ext.isEmpty(this.delegate) || Ext.isEmpty(this.delegate.controllerTabNote) ? null : this.delegate.controllerTabNote.getView()
        },
        getEmailPanel: function() {
            return Ext.isEmpty(this.delegate) || Ext.isEmpty(this.delegate.controllerTabEmail) ? null : this.delegate.controllerTabEmail.getView()
        },
        showWidget: function(e) {
            var t = {
                "CMDBuild.view.common.panel.module.attachment.TabView": Ext.emptyFn,
                "CMDBuild.view.management.workflow.panel.form.tabs.note.NoteView": Ext.emptyFn,
                "CMDBuild.view.management.workflow.panel.form.tabs.email.Email": function(e) {
                    var t = e.getEmailPanel();
                    !Ext.isEmpty(t) && Ext.isFunction(t.cmActivate) && t.cmActivate()
                }
            }[Ext.getClassName(e)];
            return !!Ext.isFunction(t) && (t(this), !0)
        }
    }), Ext.define("CMDBuild.controller.management.workflow.panel.form.tabs.activityNew.Tab", {
        extend: "CMDBuild.controller.common.panel.module.form.Tab",
        uses: ["CMDBuild.core.constants.Metadata", "CMDBuild.core.constants.ModuleIdentifiers", "CMDBuild.core.constants.Proxy", "CMDBuild.core.constants.WorkflowStates", "CMDBuild.core.LoadMask"],
        mixins: ["CMDBuild.controller.common.panel.gridAndForm.panel.mixins.ViewMode"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onWorkflowFormTabActivityAdvanceButtonClick", "onWorkflowFormTabActivitySaveButtonClick", "onWorkflowFormTabActivityShow = onPanelModuleFormTabShow", "panelGridAndFormMixinsViewModeEquals = panelGridAndFormViewModeEquals", "panelGridAndFormMixinsViewModeGet = panelGridAndFormViewModeGet, workflowViewModeGet", "panelGridAndFormMixinsViewModeSet = panelGridAndFormViewModeSet, workflowViewModeSet", "panelModuleFormFormGet = panelGridAndFormPanelFormTemplateResolverFormGet", "panelModuleFormTabDisable", "panelModuleFormTabReset = workflowFormTabActivityReset", "workflowFormTabActivityUiUpdate = panelModuleFormTabUiUpdate"],
        controllerForm: void 0,
        controllerPanelWidget: void 0,
        selectedInstanceId: void 0,
        subClassesNames: {
            form: "CMDBuild.controller.management.workflow.panel.form.tabs.activityNew.panel.Panel",
            panelWidget: "CMDBuild.controller.management.workflow.panel.form.tabs.activityNew.widget.panel.ButtonGroup",
            view: "CMDBuild.view.management.workflow.panel.form.tabs.activityNew.TabView"
        },
        view: void 0,
        metadataManageSelectedAttributesGroup: function() {
            if (!this.cmfg("workflowSelectedActivityIsEmpty", CMDBuild.core.constants.Proxy.METADATA)) {
                var e = null,
                    t = this.cmfg("workflowSelectedWorkflowAttributesGet");
                return Ext.Array.forEach(this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.METADATA), function(o, i, r) {
                    if (Ext.isObject(o) && !Ext.Object.isEmpty(o)) switch (o[CMDBuild.core.constants.Proxy.NAME]) {
                        case CMDBuild.core.constants.Metadata.getSelectedAttributesGroup():
                            var n = Ext.Array.findBy(t, function(e, t) {
                                    return e.getData()[CMDBuild.core.constants.Proxy.NAME] == o[CMDBuild.core.constants.Proxy.VALUE]
                                }, this),
                                a = null != n ? n.get(CMDBuild.core.constants.Proxy.GROUP) : "";
                            Ext.isString(a) && !Ext.isEmpty(a) && (e = Ext.String.trim(a).replace(/\s+/g, ""))
                    }
                }, this), e
            }
            return null
        },
        onWorkflowFormTabActivityAdvanceButtonClick: function() {
            var e = this.controllerPanelWidget.cmfg("panelModuleWidgetButtonGroupValuesGet"),
                t = "";
            for (var o in e) {
                var i = o,
                    r = e[o],
                    n = this.controllerPanelWidget.controllerWidgetManager.controllers[i].widgetConf;
                n && n.required && Ext.isObject(r.output) && Ext.Object.isEmpty(r.output) && (t += "<li>" + n.label + "</li>")
            }
            if ("" != t) return CMDBuild.core.Message.error(CMDBuild.Translation.common.failure, "<b>" + CMDBuild.Translation.errors.invalid_extended_attributes + '</b><ul style="text-align: left;">' + t + "</ul>", !1), !1;
            this.controllerForm.cmfg("panelModulePanelFunctionsIsValid") && (CMDBuild.core.LoadMask.show(), this.controllerPanelWidget.cmfg("panelModuleWidgetButtonGroupSave", {
                scope: this,
                callback: function() {
                    this.cmfg("onWorkflowUpdateButtonClick", {
                        advance: !0,
                        activityData: this.controllerForm.cmfg("panelModuleFormPanelFieldsDataGet"),
                        widgetData: this.controllerPanelWidget.cmfg("panelModuleWidgetButtonGroupValuesGet")
                    })
                }
            }))
        },
        onWorkflowFormTabActivitySaveButtonClick: function() {
            CMDBuild.core.LoadMask.show(), this.controllerPanelWidget.cmfg("panelModuleWidgetButtonGroupSave", {
                scope: this,
                callback: function() {
                    this.cmfg("onWorkflowUpdateButtonClick", {
                        activityData: this.controllerForm.cmfg("panelModuleFormPanelFieldsDataGet"),
                        widgetData: this.controllerPanelWidget.cmfg("panelModuleWidgetButtonGroupValuesGet")
                    })
                }
            })
        },
        onWorkflowFormTabActivityShow: function(e) {
            (e = Ext.isObject(e) ? e : {}).subTabToSelect = this.metadataManageSelectedAttributesGroup(), this.cmfg("workflowSelectedWorkflowIsEmpty") || this.cmfg("workflowSelectedInstanceIsEmpty") || !this.cmfg("panelGridAndFormViewModeEquals", ["read", "readOnly"]) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                moduleId: CMDBuild.core.constants.ModuleIdentifiers.getWorkflow(),
                entryType: {
                    description: this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.DESCRIPTION),
                    id: this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.ID),
                    object: this.cmfg("workflowSelectedWorkflowGet")
                },
                item: {
                    description: this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.DESCRIPTION),
                    id: this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID),
                    object: this.cmfg("workflowSelectedInstanceGet")
                },
                section: {
                    description: this.view.title,
                    object: this.view
                }
            }), this.onPanelModuleFormTabShow(e)
        },
        workflowFormTabActivityUiUpdate: function(e) {
            switch ((e = Ext.isObject(e) ? e : {}).scope = Ext.isObject(e.scope) ? e.scope : this, e.viewMode = Ext.isString(e.viewMode) ? e.viewMode : "read", Ext.isEmpty(this.selectedInstanceId) || this.selectedInstanceId != this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID) || e.viewMode || (e.viewMode = "edit"), (this.cmfg("workflowSelectedInstanceIsEmpty") || this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.FLOW_STATUS) == CMDBuild.core.constants.WorkflowStates.getAbortedCapitalized() || this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.FLOW_STATUS) == CMDBuild.core.constants.WorkflowStates.getCompletedCapitalized()) && (e.viewMode = "readOnly"), this.cmfg("workflowFormTabActivityReset"), this.cmfg("workflowViewModeSet", e.viewMode), this.cmfg("workflowSelectedActivityIsEmpty") || (this.selectedInstanceId = void 0), this.cmfg("workflowViewModeGet")) {
                case "add":
                    var t = this;
                    _CMWFState.setProcessInstance(Ext.create("CMDBuild.model.CMProcessInstance", {
                        classId: this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.CLASS_ID)
                    }), function() {
                        _CMWFState.setActivityInstance(new CMDBuild.model.CMActivityInstance(t.cmfg("workflowSelectedActivityGet", "rawData")))
                    });
                    break;
                case "edit":
                    this.cmfg("workflowActivityLock", {
                        scope: this,
                        callback: function() {
                            this.controllerForm.cmfg("panelModuleFormPanelUiUpdate"), this.controllerPanelWidget.cmfg("panelModuleWidgetButtonGroupUiUpdate"), this.view.setDisabled(this.cmfg("workflowSelectedWorkflowIsEmpty") || this.cmfg("workflowSelectedInstanceIsEmpty")), Ext.isFunction(e.callback) && Ext.callback(e.callback, e.scope)
                        }
                    })
            }
            this.controllerForm.cmfg("panelModuleFormPanelUiUpdate"), this.controllerPanelWidget.cmfg("panelModuleWidgetButtonGroupUiUpdate"), this.view.setDisabled(this.cmfg("workflowSelectedWorkflowIsEmpty") || this.cmfg("workflowSelectedInstanceIsEmpty")), Ext.isFunction(e.callback) && Ext.callback(e.callback, e.scope)
        }
    }), Ext.define("CMDBuild.controller.common.panel.module.form.Tab", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy"],
        inEditing: !1,
        previousCard: void 0,
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onPanelModuleFormTabShow", "panelModuleFormFormGet = panelGridAndFormPanelFormTemplateResolverFormGet", "panelModuleFormTabDisable", "panelModuleFormTabReset"],
        controllerForm: void 0,
        controllerPanelWidget: void 0,
        subClassesNames: {
            form: "CMDBuild.controller.common.panel.module.form.panel.Panel",
            panelWidget: "CMDBuild.controller.common.panel.module.widget.panel.ButtonGroup",
            view: "CMDBuild.view.common.panel.module.form.TabView"
        },
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create(this.subClassesNames.view, {
                delegate: this
            }), this.controllerForm = Ext.create(this.subClassesNames.form, {
                parentDelegate: this
            }), this.controllerPanelWidget = Ext.create(this.subClassesNames.panelWidget, {
                parentDelegate: this
            }), this.view.add([this.controllerForm.getView(), this.controllerPanelWidget.getView()])
        },
        buildValues: function() {
            return this.cmfg("panelGridAndFormSelectedItemIsEmpty") ? {} : this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.VALUES)
        },
        onPanelModuleFormTabShow: function(e) {
		//ayaw
		//console.log("onPanelModuleFormTabShow");
		//console.log(e);
		//console.log(this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ID));
		document.cookie = "selectCardId="+this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ID);
		//ayaw
		
            Ext.resumeLayouts(), (e = Ext.isObject(e) ? e : {}).scope = Ext.isObject(e.scope) ? e.scope : this;
            var t = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ID),
                o = this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.ID);
            (!this.previousCard || this.previousCard.id != t || o && o !== this.previousCard.activityId) && (this.inEditing = !1), "function" == typeof Ext.ClassManager.get("CMDBuild.controller.management.common.tabs.email.Email").cmfg && Ext.ClassManager.get("CMDBuild.controller.management.common.tabs.email.Email").cmfg("tabEmailEditModeSet", !0), this.previousCard = {
                id: t,
                activityId: o
            };
            var i = "edit" === this.viewMode || "add" === this.viewMode;
            this.inEditing || (this.controllerForm.cmfg("panelModuleFormPanelFieldsBuild", {
                subTabToSelect: e.subTabToSelect
            }), this.controllerForm.cmfg("panelModuleFormPanelFieldsDataSet", this.buildValues())), this.inEditing = i, Ext.isFunction(e.callback) && Ext.callback(e.callback, e.scope)
        },
        panelModuleFormTabDisable: function() {
            this.controllerForm.cmfg("panelModuleFormPanelDisable")
        },
        panelModuleFormFormGet: function() {
            return this.controllerForm.cmfg("panelModuleFormPanelFormGet")
        },
        panelModuleFormTabReset: function() {
            this.cmfg("panelModuleFormTabDisable"), this.controllerForm.cmfg("panelModuleFormPanelReset"), this.controllerPanelWidget.cmfg("panelModuleWidgetButtonGroupReset")
        }
    }), Ext.require(["CMDBuild.core.constants.Proxy", "CMDBuild.core.Message", "Ext.ux.form.MultiSelect"]), Ext.define("CMDBuild.controller.common.panel.gridAndForm.panel.mixins.PanelFunctions", {
        panelGridAndFormMixinsPanelFunctionsFieldIsManaged: function(e) {
            return Ext.isObject(e) && !Ext.Object.isEmpty(e) && !e.disablePanelFunctions && (e instanceof Ext.button.Button || e instanceof Ext.form.Field || e instanceof Ext.form.field.Base || e instanceof Ext.form.FieldContainer || e instanceof Ext.form.FieldSet || e instanceof Ext.ux.form.MultiSelect || Ext.isBoolean(e.enablePanelFunctions) && e.enablePanelFunctions)
        },
        panelGridAndFormMixinsPanelFunctionsManagedFieldsDisabledSet: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).ignoreForceDisabled = !!Ext.isBoolean(e.ignoreForceDisabled) && e.ignoreForceDisabled, e.ignoreIsVisibleCheck = !Ext.isBoolean(e.ignoreIsVisibleCheck) || e.ignoreIsVisibleCheck, e.state = !Ext.isBoolean(e.state) || e.state, e.target = Ext.isObject(e.target) ? e.target : this.view, !Ext.isFunction(e.target.cascade)) return _error("panelGridAndFormMixinsPanelFunctionsManagedFieldsDisabledSet(): unmanaged target component parameter", this, e.target);
            e.target.cascade(function(t) {
                this.panelGridAndFormMixinsPanelFunctionsFieldIsManaged(t) && (t.isVisible() || e.ignoreIsVisibleCheck) && Ext.isFunction(t.setDisabled) && t.setDisabled(!(!Ext.isBoolean(t.forceDisabled) || !t.forceDisabled || e.ignoreForceDisabled) || e.state)
            }, this)
        },
        panelGridAndFormMixinsPanelFunctionsFieldInvalidGet: function() {
            var e = [];
            return this.view.cascade(function(t) {
                this.panelGridAndFormMixinsPanelFunctionsFieldIsManaged(t) && Ext.isFunction(t.isValid) && !t.isValid() && Ext.isFunction(t.isDisabled) && !t.isDisabled() && Ext.isFunction(t.isHidden) && !t.isHidden() && e.push(t)
            }, this), e
        },
        panelGridAndFormMixinsPanelFunctionsDataGet: function(e) {
            (e = Ext.isObject(e) ? e : {}).includeDisabled = !!Ext.isBoolean(e.includeDisabled) && e.includeDisabled, e.target = Ext.isObject(e.target) ? e.target : this.view;
            var t = Ext.isFunction(e.target.getForm) ? e.target.getForm().getValues() : {};
            if (e.includeDisabled) {
                var o = {};
                return e.target.cascade(function(e) {
                    this.panelGridAndFormMixinsPanelFunctionsFieldIsManaged(e) && Ext.isFunction(e.getValue) && Ext.isFunction(e.getName) && Ext.isBoolean(e.submitValue) && e.submitValue && (o[e.getName()] = e.getValue())
                }, this), Ext.apply(t, o)
            }
            return t
        },
        panelGridAndFormMixinsPanelFunctionsFieldSetDisabledSet: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).state = !Ext.isBoolean(e.state) || e.state, !e.fieldset instanceof Ext.form.FieldSet) return _error("panelGridAndFormPanelFormPanelFunctionsFieldSetDisableStateSet(): unmanaged fieldset parameter", this, e.fieldset);
            this.panelGridAndFormMixinsPanelFunctionsManagedFieldsDisabledSet({
                ignoreForceDisabled: e.ignoreForceDisabled,
                ignoreIsVisibleCheck: e.ignoreIsVisibleCheck,
                state: e.state,
                target: e.fieldset
            })
        },
        panelGridAndFormMixinsPanelFunctionsFieldSynch: function(e) {
            if (e = Ext.isObject(e) ? e : {}, !Ext.isObject(e.slaveField) || Ext.isEmpty(e.slaveField)) return _error("panelGridAndFormMixinsPanelFunctionsFieldSynch(): unmanaged slaveField parameter", this, e.slaveField);
            if (this.panelGridAndFormMixinsPanelFunctionsFieldIsManaged(e.slaveField)) {
                var t = e.slaveField.getValue();
                (Ext.isEmpty(t) || t == e.oldValue) && e.slaveField.setValue(e.newValue)
            }
        },
        panelGridAndFormMixinsPanelFunctionsFieldsDisabledSet: function(e) {
            (e = Ext.isObject(e) ? e : {}).state = !!Ext.isBoolean(e.state) && e.state, this.panelGridAndFormMixinsPanelFunctionsManagedFieldsDisabledSet({
                ignoreForceDisabled: e.ignoreForceDisabled,
                ignoreIsVisibleCheck: e.ignoreIsVisibleCheck,
                state: e.state
            })
        },
        panelGridAndFormMixinsPanelFunctionsFieldsReset: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).target = Ext.isObject(e.target) ? e.target : this.view, !Ext.isFunction(e.target.cascade)) return _error("panelGridAndFormMixinsPanelFunctionsFieldsReset(): unmanaged cascade function", this, e.target);
            e.target.cascade(function(e) {
                this.panelGridAndFormMixinsPanelFunctionsFieldIsManaged(e) && Ext.isFunction(e.setValue) && Ext.isFunction(e.reset) && (e.setValue(), e.reset())
            }, this)
        },
        panelGridAndFormMixinsPanelFunctionsValueGet: function(e) {
            return (e = Ext.isObject(e) ? e : {}).includeDisabled = !Ext.isBoolean(e.includeDisabled) || e.includeDisabled, !Ext.isString(e.propertyName) || Ext.isEmpty(e.propertyName) ? _error("panelGridAndFormMixinsPanelFunctionsValueGet(): unmanaged propertyName parameter", this, e.propertyName) : this.panelGridAndFormMixinsPanelFunctionsDataGet({
                includeDisabled: e.includeDisabled
            })[e.propertyName]
        },
        panelGridAndFormMixinsPanelFunctionsIsValid: function(e) {
            (e = Ext.isObject(e) ? e : {}).enablePopup = !Ext.isBoolean(e.enablePopup) || e.enablePopup, e.target = Ext.isObject(e.target) ? e.target : this.view;
            var t = this.panelGridAndFormMixinsPanelFunctionsFieldInvalidGet();
            if (Ext.isArray(t) && !Ext.isEmpty(t)) {
                var o = "";
                return Ext.Array.forEach(t, function(e, t, i) {
                    if (Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isFunction(e.getFieldLabel)) {
                        var r = e.getFieldLabel();
                        Ext.isEmpty(r) || (o += "<li>" + r + "</li>")
                    }
                }, this), e.enablePopup && CMDBuild.core.Message.error(CMDBuild.Translation.common.failure, "<b>" + CMDBuild.Translation.errors.invalid_fields + '</b><ul style="text-align: left;">' + o + "</ul>", !1), !1
            }
            return !0
        }
    }), Ext.define("CMDBuild.view.common.panel.module.form.panel.PanelView", {
        extend: "Ext.form.Panel",
        delegate: void 0,
        bodyCls: "cmdb-blue-panel-no-padding",
        bodyStyle: "padding: 5px 5px 0px 5px;",
        border: !1,
        cls: "x-panel-body-default-framed",
        frame: !1,
        layout: "fit",
        region: "center"
    }), Ext.define("CMDBuild.controller.management.workflow.panel.form.tabs.activityNew.panel.FieldsTab", {
        extend: "CMDBuild.controller.common.panel.module.form.panel.FieldsTab",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        buildGroupedFields: function() {
            var e = {};
            if (!this.cmfg("workflowSelectedInstanceAttributesIsEmpty")) {
                var t = Ext.create("CMDBuild.core.fieldManager.FieldManager", {
                        parentDelegate: this
                    }),
                    o = t.groupAttributesModels(this.getActivityAttributes()),
                    i = this.cmfg("panelGridAndFormViewModeEquals", ["read", "readOnly"]);
                Ext.Object.each(o, function(o, r, n) {
                    if (Ext.isArray(r) && !Ext.isEmpty(r)) {
                        var a = [];
                        Ext.Array.forEach(r, function(e, o, r) {
                            t.isAttributeManaged(e.get(CMDBuild.core.constants.Proxy.TYPE)) ? (t.attributeModelSet(e), t.push(a, t.buildField({
                                readOnly: i
                            }))) : a.push(CMDBuild.Management.FieldManager.getFieldForAttr(e.get(CMDBuild.core.constants.Proxy.SOURCE_OBJECT), i, !1))
                        }, this), e[o] = a
                    }
                }, this)
            }
            return e
        },
        getActivityAttributes: function() {
            var e = [];
            return this.cmfg("workflowSelectedInstanceAttributesIsEmpty") || (this.cmfg("workflowSelectedActivityIsEmpty") ? this.cmfg("workflowSelectedInstanceIsEmpty") || this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.FLOW_STATUS) != CMDBuild.core.constants.WorkflowStates.getAbortedCapitalized() && this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.FLOW_STATUS) != CMDBuild.core.constants.WorkflowStates.getCompletedCapitalized() || (e = this.cmfg("workflowSelectedInstanceAttributesGet")) : Ext.Array.forEach(this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.VARIABLES), function(t, o, i) {
                Ext.Array.each(this.cmfg("workflowSelectedInstanceAttributesGet"), function(o, i, r) {
                    if (o.get(CMDBuild.core.constants.Proxy.NAME) == t[CMDBuild.core.constants.Proxy.NAME]) {
                        o.set(CMDBuild.core.constants.Proxy.MANDATORY, t[CMDBuild.core.constants.Proxy.MANDATORY]), o.set(CMDBuild.core.constants.Proxy.WRITABLE, t[CMDBuild.core.constants.Proxy.WRITABLE]);
                        var n = o.get(CMDBuild.core.constants.Proxy.SOURCE_OBJECT);
                        return n.isnotnull = t[CMDBuild.core.constants.Proxy.MANDATORY], n.fieldmode = t[CMDBuild.core.constants.Proxy.WRITABLE] ? "write" : "read", o.get(CMDBuild.core.constants.Proxy.SOURCE_OBJECT, n), e.push(o), !1
                    }
                }, this)
            }, this)), e
        }
    }), Ext.define("CMDBuild.view.common.panel.module.form.panel.FieldsTabPanel", {
        extend: "CMDBuild.view.common.panel.gridAndForm.panel.tab.TabPanel",
        delegate: void 0
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.tab.TabPanel", {
        extend: "Ext.tab.Panel",
        delegate: void 0,
        bodyCls: "cmdb-blue-panel-no-padding",
        cls: "cmdb-blue-panel-no-padding",
        border: !0,
        frame: !1,
        plain: !0
    }), Ext.define("CMDBuild.controller.management.workflow.panel.form.tabs.activityNew.toolbar.Bottom", {
        extend: "CMDBuild.controller.common.panel.module.form.toolbar.Bottom",
        parentDelegate: void 0,
        subClassesNames: {
            view: "CMDBuild.view.management.workflow.panel.form.tabs.activityNew.toolbar.BottomView"
        },
        view: void 0
    }), Ext.define("CMDBuild.controller.common.panel.module.form.toolbar.Bottom", {
        extend: "CMDBuild.controller.common.panel.module.form.toolbar.gridAndForm.Bottom",
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onPanelModuleFormToolbarBottomAbortButtonClick", "panelGridAndFormMixinsToolbarFunctionsDisabledStateSet = panelModuleFormPanelToolbarBottomDisabledStateSet", "panelModuleFormToolbarBottomReset", "panelModuleFormToolbarBottomUiUpdate"],
        subClassesNames: {
            view: "CMDBuild.view.common.panel.module.form.toolbar.BottomView"
        },
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create(this.subClassesNames.view, {
                delegate: this
            })
        },
        onPanelModuleFormToolbarBottomAbortButtonClick: function() {
            var e = {};
            switch (this.cmfg("panelGridAndFormSelectedEntityIsEmpty") || (e[CMDBuild.core.constants.Proxy.ENTITY_NAME] = this.cmfg("panelGridAndFormSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME)), this.cmfg("panelGridAndFormViewModeGet")) {
                case "add":
                    this.cmfg("panelGridAndFormSelectedPreviousItemIsEmpty") || (e[CMDBuild.core.constants.Proxy.ITEM_ENTITY_NAME] = this.cmfg("panelGridAndFormSelectedPreviousItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), e[CMDBuild.core.constants.Proxy.ITEM_ID] = this.cmfg("panelGridAndFormSelectedPreviousItemGet", CMDBuild.core.constants.Proxy.ID));
                    break;
                case "edit":
                    this.cmfg("panelGridAndFormSelectedItemIsEmpty") || (e[CMDBuild.core.constants.Proxy.ITEM_ENTITY_NAME] = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), e[CMDBuild.core.constants.Proxy.ITEM_ID] = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ID))
            }
            this.cmfg("panelGridAndFormUiUpdate", e)
        },
        panelModuleFormToolbarBottomReset: function() {
            this.cmfg("panelModuleFormPanelToolbarBottomDisabledStateSet", {
                state: !0
            })
        },
        panelModuleFormToolbarBottomUiUpdate: function() {
            switch (this.cmfg("panelGridAndFormViewModeGet")) {
                case "add":
                case "edit":
                    return this.cmfg("panelModuleFormPanelToolbarBottomDisabledStateSet", {
                        state: !1
                    });
                case "read":
                case "readOnly":
                default:
                    return this.cmfg("panelModuleFormPanelToolbarBottomDisabledStateSet", {
                        state: !0
                    })
            }
        }
    }), Ext.define("CMDBuild.controller.common.panel.module.form.toolbar.gridAndForm.Bottom", {
        extend: "CMDBuild.controller.common.abstract.Base",
        mixins: ["CMDBuild.controller.common.panel.module.form.toolbar.gridAndForm.ToolbarFunctions"],
        parentDelegate: void 0,
        view: void 0
    }), Ext.define("CMDBuild.view.management.workflow.panel.form.tabs.activityNew.toolbar.BottomView", {
        extend: "CMDBuild.view.common.panel.module.form.toolbar.gridAndForm.BottomView",
        delegate: void 0,
        initComponent: function() {
            Ext.apply(this, {
                items: [Ext.create("CMDBuild.core.buttons.text.Save", {
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onWorkflowFormTabActivitySaveButtonClick")
                    }
                }), Ext.create("CMDBuild.core.buttons.text.Advance", {
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onWorkflowFormTabActivityAdvanceButtonClick")
                    }
                }), Ext.create("CMDBuild.core.buttons.text.Abort", {
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onWorkflowAbortButtonClick")
                    }
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.common.panel.module.form.toolbar.gridAndForm.BottomView", {
        extend: "Ext.toolbar.Toolbar",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        dock: "bottom",
        ui: "footer",
        layout: {
            type: "hbox",
            align: "middle",
            pack: "center"
        },
        initComponent: function() {
            Ext.apply(this, {
                itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.core.buttons.text.Advance", {
        extend: "CMDBuild.core.buttons.Base",
        textDefault: CMDBuild.Translation.advance
    }), Ext.define("CMDBuild.controller.management.workflow.panel.form.tabs.activityNew.toolbar.Top", {
        extend: "CMDBuild.controller.common.panel.module.form.toolbar.Top",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.constants.WorkflowStates"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["panelGridAndFormMixinsToolbarFunctionsDisabledStateSet = panelModuleFormPanelToolbarTopDisabledStateSet", "panelModuleFormToolbarTopReset", "workflowFormToolbarTopToolbarTopUiUpdate = panelModuleFormToolbarTopUiUpdate"],
        subClassesNames: {
            view: "CMDBuild.view.management.workflow.panel.form.tabs.activityNew.toolbar.TopView"
        },
        view: void 0,
        panelModuleFormToolbarTopReset: function() {
            this.view.activityDescription.setText(), this.view.activityPerformerName.setText(), this.callParent(arguments)
        },
        workflowFormToolbarTopToolbarTopUiUpdate: function() {
            switch (this.view.activityDescription.setText(this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.DESCRIPTION)), this.view.activityPerformerName.setText(this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.PERFORMER_NAME)), this.cmfg("workflowViewModeGet")) {
                case "add":
                case "edit":
                    return this.cmfg("panelModuleFormPanelToolbarTopDisabledStateSet", {
                        state: !this.cmfg("workflowSelectedWorkflowIsEmpty")
                    });
                case "readOnly":
                    return this.cmfg("panelModuleFormPanelToolbarTopDisabledStateSet", {
                        state: !0
                    });
                case "read":
                default:
                    this.cmfg("panelModuleFormPanelToolbarTopDisabledStateSet", {
                        state: this.cmfg("workflowSelectedWorkflowIsEmpty") || this.cmfg("workflowSelectedInstanceIsEmpty") || this.cmfg("workflowSelectedActivityIsEmpty") || !this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.WRITABLE)
                    }), this.view.buttonRemove.setDisabled(!(this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.STOPPABLE) && (this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.FLOW_STATUS) == CMDBuild.core.constants.WorkflowStates.getOpenCapitalized() || this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.FLOW_STATUS) == CMDBuild.core.constants.WorkflowStates.getSuspendedCapitalized())))
            }
        }
    }), Ext.define("CMDBuild.controller.common.panel.module.form.toolbar.Top", {
        extend: "CMDBuild.controller.common.panel.module.form.toolbar.gridAndForm.Top",
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["panelGridAndFormMixinsToolbarFunctionsDisabledStateSet = panelModuleFormPanelToolbarTopDisabledStateSet", "panelModuleFormToolbarTopReset", "panelModuleFormToolbarTopUiUpdate"],
        subClassesNames: {
            view: "CMDBuild.view.common.panel.module.form.toolbar.TopView"
        },
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create(this.subClassesNames.view, {
                delegate: this
            })
        },
        panelModuleFormToolbarTopReset: function() {
            this.cmfg("panelModuleFormPanelToolbarTopDisabledStateSet", {
                state: !0
            })
        },
        panelModuleFormToolbarTopUiUpdate: function() {
            switch (this.cmfg("panelGridAndFormViewModeGet")) {
                case "add":
                case "edit":
                    return this.cmfg("panelModuleFormPanelToolbarTopDisabledStateSet", {
                        state: this.cmfg("panelGridAndFormSelectedEntityIsEmpty")
                    });
                case "readOnly":
                    return this.cmfg("panelModuleFormPanelToolbarTopDisabledStateSet", {
                        state: !0
                    });
                case "read":
                default:
                    return this.cmfg("panelModuleFormPanelToolbarTopDisabledStateSet", {
                        state: this.cmfg("panelGridAndFormSelectedEntityIsEmpty") || this.cmfg("panelGridAndFormSelectedItemIsEmpty") || !this.cmfg("panelGridAndFormSelectedEntityGet", [CMDBuild.core.constants.Proxy.PERMISSIONS, CMDBuild.core.constants.Proxy.WRITE])
                    })
            }
        }
    }), Ext.define("CMDBuild.controller.common.panel.module.form.toolbar.gridAndForm.Top", {
        extend: "CMDBuild.controller.common.abstract.Base",
        mixins: ["CMDBuild.controller.common.panel.module.form.toolbar.gridAndForm.ToolbarFunctions"],
        parentDelegate: void 0,
        view: void 0
    }), Ext.define("CMDBuild.view.management.workflow.panel.form.tabs.activityNew.toolbar.TopView", {
        extend: "CMDBuild.view.common.panel.module.form.toolbar.TopView",
        delegate: void 0,
        activityDescription: void 0,
        activityPerformerName: void 0,
        buttonRemove: void 0,
        initComponent: function() {
            Ext.apply(this, {
                items: [Ext.create("CMDBuild.core.buttons.iconized.Modify", {
                    text: CMDBuild.Translation.modifyActivity,
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onWorkflowModifyButtonClick")
                    }
                }), this.buttonRemove = Ext.create("CMDBuild.core.buttons.iconized.Remove", {
                    text: CMDBuild.Translation.abortProcess,
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onWorkflowRemoveButtonClick")
                    }
                }), CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) ? Ext.create("CMDBuild.core.buttons.iconized.RelationGraph", {
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onWorkflowGraphButtonClick")
                    }
                }) : null, "->", "-", this.activityPerformerName = Ext.create("Ext.toolbar.TextItem"), "-", this.activityDescription = Ext.create("Ext.toolbar.TextItem")]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.common.panel.module.form.toolbar.TopView", {
        extend: "CMDBuild.view.common.panel.module.form.toolbar.gridAndForm.TopView",
        delegate: void 0
    }), Ext.define("CMDBuild.view.common.panel.module.form.toolbar.gridAndForm.TopView", {
        extend: "Ext.toolbar.Toolbar",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        dock: "top",
        initComponent: function() {
            Ext.apply(this, {
                itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.management.workflow.panel.form.tabs.activityNew.widget.panel.ButtonGroup", {
        extend: "CMDBuild.controller.common.panel.module.widget.panel.ButtonGroup",
        parentDelegate: void 0,
        panelModuleWidgetButtonGroupUiUpdate: function() {
            switch (this.cmfg("panelModuleWidgetButtonGroupReset"), this.cmfg("panelGridAndFormSelectedItemWidgetsIsEmpty") || this.controllerWidgetManager.buildControllers(Ext.create("CMDBuild.model.CMActivityInstance", this.cmfg("workflowSelectedActivityGet", "rawData"))), this.cmfg("panelGridAndFormViewModeGet")) {
                case "add":
                case "edit":
                    this.onCardGoesInEdit(), this.view.items.each(function(e, t, o) {
                        e.enable()
                    });
                    break;
                case "read":
                case "readOnly":
                default:
                    this.view.items.each(function(e, t, o) {
                        e.disable()
                    })
            }
        }
    }), Ext.define("CMDBuild.controller.common.panel.module.widget.panel.ButtonGroup", {
        extend: "CMDBuild.controller.common.abstract.Base",
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["panelModuleWidgetButtonGroupAdd", "panelModuleWidgetButtonGroupReset", "panelModuleWidgetButtonGroupSave", "panelModuleWidgetButtonGroupUiUpdate", "panelModuleWidgetButtonGroupValuesGet"],
        subClassesNames: {
            view: "CMDBuild.view.common.panel.module.widget.panel.ButtonGroupView"
        },
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create(this.subClassesNames.view, {
                delegate: this
            }), this.controllerWidgetManager = Ext.create("CMDBuild.controller.management.common.CMWidgetManagerController", new CMDBuild.view.management.common.widgets.CMWidgetManager(this.parentDelegate.getView(), this.cmfg("panelGridAndFormTabPanelGet"))), this.controllerWidgetManager.setDelegate(this)
        },
        panelModuleWidgetButtonGroupAdd: function(e) {
            this.view.add(Ext.create("CMDBuild.core.buttons.text.Widget", {
                disabled: !e.alwaysenabled,
                text: e.label,
                widgetDefinition: Ext.clone(e),
                scope: this,
                handler: function(e, t) {
                    this.controllerWidgetManager.onWidgetButtonClick(e.widgetDefinition)
                }
            }));
            var t = this;
            setTimeout(function() {
                t.setupVisibleState()
            }, 0)
        },
        panelModuleWidgetButtonGroupReset: function() {
            this.controllerWidgetManager.removeAll(), CMDBuild.clearComponent(this.view), this.setupVisibleState()
        },
        panelModuleWidgetButtonGroupUiUpdate: function() {
		//console.log("panelModuleWidgetButtonGroupUiUpdate");
            switch (this.cmfg("panelModuleWidgetButtonGroupReset"), this.cmfg("panelGridAndFormSelectedItemWidgetsIsEmpty") || this.controllerWidgetManager.buildControllers(this.cmfg("panelGridAndFormSelectedItemWidgetsGet")), this.cmfg("panelGridAndFormViewModeGet")) {
                case "add":
                case "edit":
                    this.onCardGoesInEdit(), this.view.items.each(function(e, t, o) {
                        e.enable()
                    });
                    break;
                case "read":
                case "readOnly":
                default:
                    this.view.items.each(function(e, t, o) {
                        e.disable()
                    })
            }
        },
        setupVisibleState: function() {
            this.view.setVisible(this.view.items.getCount() > 0)
        },
        addWidget: function(e) {
            this.cmfg("panelModuleWidgetButtonGroupAdd", e)
        },
        ensureEditPanel: Ext.emptyFn,
        onCardGoesInEdit: function() {
            this.controllerWidgetManager.onCardGoesInEdit()
        },
        panelModuleWidgetButtonGroupSave: function(e) {
            (e = Ext.isObject(e) ? e : {}).callback = Ext.isFunction(e.callback) ? e.callback : Ext.emptyFn, e.scope = Ext.isObject(e.scope) ? e.scope : this, this.controllerWidgetManager.waitForBusyWidgets(e.callback, e.scope)
        },
        panelModuleWidgetButtonGroupValuesGet: function(e) {
            return e = !!Ext.isBoolean(e) && e, this.controllerWidgetManager.getData(e)
        },
        removeAllButtons: function() {
            CMDBuild.clearComponent(this.view)
        }
    }), Ext.define("CMDBuild.view.common.panel.module.widget.panel.ButtonGroupView", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        bodyCls: "cmdb-blue-panel",
        border: !1,
        cls: "cmdb-border-left",
        frame: !1,
        hidden: !0,
        overflowY: "auto",
        padding: "30 0 0 0",
        region: "east"
    }), Ext.define("CMDBuild.controller.management.workflow.panel.form.tabs.attachment.Attachment", {
        extend: "CMDBuild.controller.common.panel.module.attachment.Tab",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.constants.WidgetType", "CMDBuild.core.constants.WorkflowStates"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onPanelModuleAttachmentTabAddButtonClick", "onPanelModuleAttachmentTabBackButtonClick", "onPanelModuleAttachmentTabShow", "onWorkflowFormTabAttachmentShowCallback = onPanelModuleAttachmentTabShowCallback", "onWorkflowFormTabAttachmentInstanceSelect", "panelModuleAttachmentTabReset"],
        grid: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.panel.module.attachment.TabView", {
                delegate: this
            }), this.controllerGrid = Ext.create("CMDBuild.controller.management.workflow.panel.form.tabs.attachment.Grid", {
                parentDelegate: this
            }), this.grid = this.controllerGrid.getView(), this.view.add([this.grid])
        },
        onWorkflowFormTabAttachmentShowCallback: function() {
            this.grid.buttonAdd.setDisabled(this.cmfg("workflowIsStartActivityGet") || !this.cmfg("workflowFormWidgetExists", CMDBuild.core.constants.WidgetType.getOpenAttachment()) || !this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.WRITABLE)), CMDBuild.configuration.workflow.get(CMDBuild.core.constants.Proxy.ENABLE_ADD_ATTACHMENT_ON_CLOSED_ACTIVITIES) && this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.FLOW_STATUS) == CMDBuild.core.constants.WorkflowStates.getCompletedCapitalized() && this.grid.buttonAdd.enable(), this.view.getDockedComponent(CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM).setVisible(this.cmfg("workflowFormWidgetExists", CMDBuild.core.constants.WidgetType.getOpenAttachment())), this.controllerGrid.cmfg("panelModuleAttachmentGridBorderBottomSet", this.cmfg("workflowFormWidgetExists", CMDBuild.core.constants.WidgetType.getOpenAttachment())), this.controllerGrid.cmfg("panelModuleAttachmentGridStoreLoad")
        },
        onWorkflowFormTabAttachmentInstanceSelect: function() {
            this.view.setDisabled(!CMDBuild.configuration.dms.get(CMDBuild.core.constants.Proxy.ENABLED) || this.cmfg("workflowSelectedInstanceIsEmpty"))
        }
    }), Ext.define("CMDBuild.view.common.panel.module.attachment.TabView", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        border: !1,
        cls: "x-panel-body-default-framed",
        frame: !1,
        itemId: "formTabAttachment",
        layout: "fit",
        title: CMDBuild.Translation.attachments,
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    hidden: !0,
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    },
                    items: [this.buttonBack = Ext.create("CMDBuild.core.buttons.text.Back", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onPanelModuleAttachmentTabBackButtonClick")
                        }
                    })]
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            show: function(e, t) {
                this.delegate.cmfg("onPanelModuleAttachmentTabShow")
            }
        }
    }), Ext.define("CMDBuild.core.buttons.text.Back", {
        extend: "CMDBuild.core.buttons.Base",
        textDefault: CMDBuild.Translation.back
    }), Ext.define("CMDBuild.controller.common.panel.module.attachment.Grid", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.core.LoadMask", "CMDBuild.core.Message", "CMDBuild.proxy.common.panel.module.attachment.Attachment"],
        parentDelegate: void 0,
        categories: {},
        cmfgCatchedFunctions: ["onPanelModuleAttachmentGridAddButtonClick", "onPanelModuleAttachmentGridDownloadButtonClick", "onPanelModuleAttachmentGridPopUpButtonClick"/*edit by ayaw*/,"onPanelModuleAttachmentGridModifyButtonClick", "onPanelModuleAttachmentGridRemoveButtonClick", "onPanelModuleAttachmentGridVersionsButtonClick", "panelModuleAttachmentGridBorderBottomSet", "panelModuleAttachmentGridCategoriesIsEmpty", "panelModuleAttachmentGridCategoriesGet", "panelModuleAttachmentGridReadAttachmentContext", "panelModuleAttachmentGridReset", "panelModuleAttachmentGridStoreLoad"],
        controllerVersions: void 0,
        controllerWindowAdd: void 0,
        controllerWindowModify: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.panel.module.attachment.GridPanel", {
                delegate: this
            }), this.controllerVersions = Ext.create("CMDBuild.controller.common.panel.module.attachment.Versions", {
                parentDelegate: this
            }), this.controllerWindowAdd = Ext.create("CMDBuild.controller.common.panel.module.attachment.window.Add", {
                parentDelegate: this
            }), this.controllerWindowModify = Ext.create("CMDBuild.controller.common.panel.module.attachment.window.Modify", {
                parentDelegate: this
            })
        },
        getTemplateResolverServerVars: function() {
            return Ext.apply({
                Id: this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ID),
                IdClass: this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.CLASS_ID),
                IdClass_value: this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.CLASS_DESCRIPTION)
            }, this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.VALUES))
        },
        onPanelModuleAttachmentGridAddButtonClick: function() {
            if (this.cmfg("panelGridAndFormSelectedItemIsEmpty", CMDBuild.core.constants.Proxy.ID)) return CMDBuild.core.Message.error(CMDBuild.Translation.common.failure, CMDBuild.Translation.warnings.canNotAddAnAttachmentBeforeSavingTheActivity, !1);
            var e = function(e) {
                e = e || {};
                var t = {};
                for (var o in e) {
                    var i = e[o];
                    for (var r in i) t[o + "_" + r] = i[r]
                }
                return t
            }(this.cmfg("panelGridAndFormSelectedEntityGet", [CMDBuild.core.constants.Proxy.META, CMDBuild.core.constants.Proxy.ATTACHMENTS, CMDBuild.core.constants.Proxy.AUTOCOMPLETION]));
            new CMDBuild.Management.TemplateResolver({
                clientForm: this.cmfg("panelGridAndFormPanelFormTemplateResolverFormGet"),
                xaVars: e,
                serverVars: this.getTemplateResolverServerVars()
            }).resolveTemplates({
                attributes: Ext.Object.getKeys(e),
                scope: this,
                callback: function(e, t) {
                    this.controllerWindowAdd.cmfg("panelModuleAttachmentWindowAddConfigureAndShow", {
                        presets: function(e) {
                            var t = {};
                            for (var o in e) {
                                var i = null,
                                    r = null;
                                try {
                                    var n = o.split("_");
                                    i = n[0], r = n[1]
                                } catch (e) {}
                                i && r && (t[i] = t[i] || {}, t[i][r] = e[o])
                            }
                            return t
                        }(e)
                    })
                }
            })
        },
        onPanelModuleAttachmentGridDownloadButtonClick: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("onPanelModuleAttachmentGridDownloadButtonClick(): unmanaged record parameter", this, e);
            var t = {};
            t[CMDBuild.core.constants.Proxy.CARD_ID] = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("panelGridAndFormSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME), t[CMDBuild.core.constants.Proxy.FILE_NAME] = e.get(CMDBuild.core.constants.Proxy.FILE_NAME), CMDBuild.proxy.common.panel.module.attachment.Attachment.download({
                params: t
            })
        },
		/**
		 EDIT BY AYAW
		 */
		onPanelModuleAttachmentGridPopUpButtonClick: function (e) {
		if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("onPanelModuleAttachmentGridPopUpButtonClick(): unmanaged record parameter", this, e);
			//console.log(e);
			if(e.data.category == "Document")
			{
				var t = {};
				t[CMDBuild.core.constants.Proxy.CARD_ID] = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("panelGridAndFormSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME), t[CMDBuild.core.constants.Proxy.FILE_NAME] = e.get(CMDBuild.core.constants.Proxy.FILE_NAME), CMDBuild.proxy.common.panel.module.attachment.Attachment.openPopUp({
					params: t, paramAttachment:e
				})
			}
			else
			{
				var t = {};
				t[CMDBuild.core.constants.Proxy.CARD_ID] = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("panelGridAndFormSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME), t[CMDBuild.core.constants.Proxy.FILE_NAME] = e.get(CMDBuild.core.constants.Proxy.FILE_NAME), CMDBuild.proxy.common.panel.module.attachment.Attachment.openPopUp({
					params: t, paramAttachment:e
				})		
			}			
		},
        onPanelModuleAttachmentGridModifyButtonClick: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("onPanelModuleAttachmentGridModifyButtonClick(): unmanaged record parameter", this, e);
            this.controllerWindowModify.cmfg("panelModuleAttachmentWindowModifyConfigureAndShow", {
                record: e
            })
        },
        onPanelModuleAttachmentGridRemoveButtonClick: function(e) {
            Ext.Msg.show({
                title: CMDBuild.Translation.common.confirmpopup.title,
                msg: CMDBuild.Translation.common.confirmpopup.areyousure,
                buttons: Ext.Msg.YESNO,
                scope: this,
                fn: function(t, o, i) {
                    "yes" == t && this.removeItem(e)
                }
            })
        },
        onPanelModuleAttachmentGridVersionsButtonClick: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("onPanelModuleAttachmentGridVersionsButtonClick(): unmanaged record parameter", this, e);
            this.controllerVersions.cmfg("panelModuleAttachmentVersionsConfigureAndShow", {
                record: e
            })
        },
        panelModuleAttachmentGridBorderBottomSet: function(e) {
            return (e = !!Ext.isBoolean(e) && e) ? this.view.addCls("cmdb-border-bottom") : this.view.removeCls("cmdb-border-bottom")
        },
        panelModuleAttachmentGridCategoriesGet: function(e) {
            return e = Ext.isObject(e) ? e : {}, Ext.isString(e.name) && !Ext.isEmpty(e.name) ? this.categories[e.name] : this.categories
        },
        panelModuleAttachmentGridCategoriesIsEmpty: function(e) {
            return e = Ext.isObject(e) ? e : {}, !(Ext.isString(e.name) && !Ext.isEmpty(e.name)) || Ext.isEmpty(this.categories[e.name])
        },
        panelModuleAttachmentCategoriesReset: function() {
            this.categories = {}
        },
        panelModuleAttachmentCategoriesSet: function(e) {
            this.panelModuleAttachmentCategoriesReset(), Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.forEach(e, function(e, t, o) {
                if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                    var i = Ext.create("CMDBuild.model.common.panel.module.attachment.category.Category", e);
                    this.categories[i.get(CMDBuild.core.constants.Proxy.NAME)] = i
                }
            }, this)
        },
        panelModuleAttachmentGridReadAttachmentContext: function(e) {
            (e = Ext.isObject(e) ? e : {}).callback = Ext.isFunction(e.callback) ? e.callback : Ext.emptyFn, e.scope = Ext.isObject(e.scope) ? e.scope : this, CMDBuild.proxy.common.panel.module.attachment.Attachment.readAttachmentContext({
                loadMask: !1,
                scope: this,
                success: function(t, o, i) {
                    i = (i = i[CMDBuild.core.constants.Proxy.RESPONSE])[CMDBuild.core.constants.Proxy.CATEGORIES], this.panelModuleAttachmentCategoriesReset(), Ext.isArray(i) && !Ext.isEmpty(i) && this.panelModuleAttachmentCategoriesSet(i), Ext.callback(e.callback, e.scope)
                }
            })
        },
        panelModuleAttachmentGridReset: function() {
            this.view.getStore().removeAll()
        },
        panelModuleAttachmentGridStoreLoad: function() {
            var e = {};
            e[CMDBuild.core.constants.Proxy.CARD_ID] = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ID), e[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.CLASS_NAME), this.view.getStore().load({
                params: e
            })
        },
        removeItem: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("onPanelModuleAttachmentGridDownloadButtonClick(): unmanaged record parameter", this, e);
            var t = {};
            t[CMDBuild.core.constants.Proxy.CARD_ID] = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.CLASS_NAME), t[CMDBuild.core.constants.Proxy.FILE_NAME] = e.get(CMDBuild.core.constants.Proxy.FILE_NAME), CMDBuild.proxy.common.panel.module.attachment.Attachment.remove({
                params: t,
                scope: this,
                success: function(e, t, o) {
                    this.cmfg("panelModuleAttachmentGridStoreLoad")
                }
            })
        }
    }), Ext.define("CMDBuild.proxy.common.panel.module.attachment.Attachment", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.model.common.panel.module.attachment.Attachment", "CMDBuild.model.common.panel.module.attachment.window.Lookup", "CMDBuild.proxy.common.panel.module.attachment.reader.Lookup", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        download: function(e) {
            e = Ext.isObject(e) ? e : {}, Ext.isObject(e.params) && !Ext.Object.isEmpty(e.params) && window.open(CMDBuild.proxy.index.Json.attachment.download + "?" + Ext.urlEncode(e.params), "_blank")
        },
		/*EDIT BY AYAW*/
		openPopUp: function (parameters,paramAttachment) {
			parameters = Ext.isObject(parameters) ? parameters : {};
			var paramData = parameters.paramAttachment.data;
			var cardId = parameters.params.cardId;
			var className = parameters.params.className;
			var fileName = parameters.params.fileName;
			
			var isAdd = false;
			var isDelete = false;
			if (Ext.isObject(parameters.params) && !Ext.Object.isEmpty(parameters.params))
			{
				var url = CMDBuild.proxy.index.Json.attachment.download + '?' + Ext.urlEncode(parameters.params);
				var str = "";
				var myTopToolbar = {
							text : parameters.params.fileName,
							handler :function(){
								// I disable the parent window.
								x.disable();

							}};
				if(paramData.category == "Panorama")
				{
					var myBtnHandler = function(btn) {
						//console.log(btn.text);
						if(btn.text == "Add Hotspot")
						{
							isAdd = true;
							isDelete = false;
						}
						if(btn.text == "Delete Hotspot")
						{
							isAdd = false;
							isDelete = true;
						}
						
						//Ext.MessageBox.alert('You Clicked', btn.text);
					}
					
					var fileBtn =  new Ext.Button({
						text    : 'Add Hotspot',
						handler : myBtnHandler
					});
					var editBtn = new Ext.Button({
						text    : 'Delete Hotspot',
						handler : myBtnHandler
					});
					
					/*myTopToolbar = new Ext.Toolbar({
						items : [ 
							fileBtn,
							editBtn
						]
					});*/
					myTopToolbar = new Ext.Toolbar({
						items :  [
									{
										xtype: 'radio',
										name: 'AddHotspot',
										boxLabel: 'View',
										checked: true
									},
									{
										xtype: 'radio',
										name: 'AddHotspot',
										boxLabel: 'Add Hotspot',
										handler: function(field, value) {
											if (value) {
												isAdd = true;
												isDelete = false;
											} else {
												isAdd = false;
												isDelete = false;      
											}            
										}
									},
									{
										xtype: 'radio',
										name: 'AddHotspot',
										boxLabel: 'Delete Hotspot',
										handler: function(field, value) {
											if (value) {
												isAdd = false;
												isDelete = true;
											} else {
												isAdd = false;
												isDelete = false;      
											}            
										}
									}
								]
					});	
					
					str = "<div id=\"panorama\"></div>";	
								
				}
				if(paramData.category == "Image")
				{
					str = "<div style=\"width:1000px;height:500px;\"><img src=\""+url+"\" height=\"500\" width=\"1000\"></div>";					
				}
				if(paramData.category == "Video")
				{
					str = "<div id=\"bck\" class=\"overlay\"></div> "+
							"<div id=\"modal-video\" class=\"overlay-modal\"> "+
							  "<video id=\"video_element\" class=\"vid\" width=\"100%\" autoplay>"+
								 "<source id=\"video1\" src=\"\" type=\"video/mp4\">"+
								  "Your browser does not support HTML5 video."+
							  "</video>"+
							"</div>";

				}	

				if(paramData.category != "Document")
				{
					 Ext.define('ToggleComponent', {
						extend: 'Ext.slider.Single',

						alias: 'widget.togglebutton',

						config: {
							defaultBindProperty: 'value'
						},

						cls: 'toggleoff',
						width: 10,
						animate: false,
						maxValue: 1,

						initComponent: function () {
							this.callParent();
						},

						getValue: function () {
							var toggleValue = this.thumbs[0].value;
							if (toggleValue === 1) {
								this.removeCls('toggleoff');
								this.addCls('toggleon');
							} else {
								this.removeCls('toggleon');
								this.addCls('toggleoff');
							}
							return this.callParent([0]);
						},

						listeners: {
							afterRender: function (toggle) {
								var toggleValue = toggle.thumbs[0].value;
								if (toggleValue === 1) {
									this.removeCls('toggleoff');
									this.addCls('toggleon');
								}
							}
						}
					});
		
					var x = Ext.create("Ext.Window",{
						title : 'Attachment',
						width : 1000,
						height: 500,
						html : str,
						tbar: myTopToolbar
						/*tbar : [{
							text : myTopToolbar,
							handler :function(){
								// I disable the parent window.
								x.disable();

							}
						}]*/
					}).show();	
				
					if(paramData.category == "Panorama")
					{
						//console.log(isAdd);
						
						var objData = {};
						objData._dc = "1569406021011";
						objData.className = "HotspotPano";
						objData.attributes = '["Code","Description","Name","Address","City","Condition","LastCheckDate","Pitch","Yaw","InternalId"]';
						objData.filter = '{"attribute":{"and":[{"simple":{"attribute":"CardId","operator":"equal","value":["'+cardId+'"],"parameterType":"fixed"}},{"simple":{"attribute":"ClassName","operator":"equal","value":["'+className+'"],"parameterType":"fixed"}},{"simple":{"attribute":"FileName","operator":"equal","value":["'+fileName+'"],"parameterType":"fixed"}}]}}';
						objData.page = 1;
						objData.start = 0;
						objData.limit = 20;
						
					//CMDBuild.proxy.index.Json.card.readall
						var arrData = [];
						Ext.Ajax.request({
									url: '/cmdbuild/services/json/management/modcard/getcardlist',
									method: 'GET',
									timeout: 60000,
									async : false,
									params:
									{
										className : objData.className,
										attributes : objData.attributes,
										filter : objData.filter,
										page : objData.page,
										start : objData.start,
										limit : objData.limit
									},									
									success: function (response) {
										var jsonData = JSON.parse(response.responseText);
										if(jsonData.success)
										{
											var jsonRow = jsonData.rows;
											for(var i = 0;i<jsonRow.length;i++)
											{
												var objRow = jsonRow[i];												
												arrData.push(objRow);
												//viewer.addHotSpot({"pitch":objRow.Pitch, "yaw":objRow.Yaw, "type":"info", "text":""});
											}
										}
										//console.log();
									},
									failure: function (response) {
										Console.log('Request Failed.');

									}
								});
						
						var arrHotspot = [];
						for(var i = 0;i<arrData.length;i++)
						{
							var objRow = arrData[i];
							var objHotspot = {};
							objHotspot.pitch = objRow.Pitch;
							objHotspot.yaw = objRow.Yaw;
							objHotspot.type = "info";
							objHotspot.text = "text";
							objHotspot.URL = "";
							arrHotspot.push(objHotspot);
							//viewer.addHotSpot({"pitch":objRow.Pitch, "yaw":objRow.Yaw, "type":"info", "text":""});
						}
						
						//console.log(parameters.params);
						var viewer = pannellum.viewer('panorama', {
							"type": "equirectangular",
							"panorama": CMDBuild.proxy.index.Json.attachment.download + '?' + Ext.urlEncode(parameters.params),
							"autoLoad": true,
							"hotSpots": arrHotspot       
						});	
						
						document.addEventListener('click', function(e) 
						{
							if(isAdd)
							{
								var a = viewer.mouseEventToCoords(e);							
								if(!Number.isNaN(a[0]) && !Number.isNaN(a[1]))
								{
									viewer.addHotSpot({"pitch":a[0], "yaw":a[1], "type":"info", "text":""});
									var obj = {};
									var params = {};
									params.Code = "";
									params.Name = "";
									params.className = "HotspotPano";
									params.cardId = -1;
									params.Pitch = a[0].toFixed(2);
									params.Yaw = a[1].toFixed(2);
									//params.InternalId = internalid;
									params.CardId = cardId;
									params.ClassName = className;
									params.FileName = fileName;
									obj.params = params;
									params.Description = "";
									//console.log(obj);
									//console.log(parameters.params);
									obj = Ext.isEmpty(obj) ? {} : obj, Ext.apply(obj, 
									{
										url: CMDBuild.proxy.index.Json.card.create
									}), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CARD, obj, !0)
									   
								}													
							}
						});						
					}	
					if(paramData.category == "Video")
					{
						function fadeIn(el) {   
							el.style.opacity = 0;
							el.style.display = "block";
							var tick = function() {
								el.style.opacity = +el.style.opacity + 0.05;
								if (+el.style.opacity <= 0.8) {
									(window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 10)
								}
							};
							tick();
						}   

						function show_modal(){
							document.getElementById('modal-video').style.display = 'block';
						}

						//plays the video in cinema-view
						function play_video(vid){
							var vid = vid;
							//disable background
							var el = document.getElementById("bck");
							document.getElementsByTagName('body')[0].style.overflow = 'hidden';
							fadeIn(el);
							el.style.display = 'block';

							//show video modal
							var el = document.getElementById("modal-video");
							fadeIn(el);
							el.style.opacity ='1';
							setTimeout(show_modal, 800);
							//To set the source you need to select 
							var video = document.getElementById("video_element");
							video.src = vid;
							video.play();
						}

						var overlay = document.getElementById('bck');
						fadeIn(overlay);
						play_video(url);		
					}
				}
				else
				{
					var x = Ext.create("Ext.Window",{
						title : 'Attachment',
						width : 1000,
						height: 500,
						layout : 'fit',
						items : [{
							xtype : "component",
							autoEl : {
								tag : "iframe",
								src : url
							}
						}]
					}).show();
				}
			}
		},				
		/*EDIT BY AYAW */
        getStore: function() {
            return CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.UNCACHED, {
                autoLoad: !1,
                model: "CMDBuild.model.common.panel.module.attachment.Attachment",
                groupField: CMDBuild.core.constants.Proxy.CATEGORY,
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.attachment.readAll,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.RESPONSE
                    },
                    extraParams: {
                        limitParam: void 0,
                        pageParam: void 0,
                        startParam: void 0
                    }
                },
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.CATEGORY,
                    direction: "ASC"
                }, {
                    property: CMDBuild.core.constants.Proxy.CREATION,
                    direction: "ASC"
                }]
            })
        },
        getStoreLokup: function() {
            return CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.LOOKUP, {
                autoLoad: !1,
                model: "CMDBuild.model.common.panel.module.attachment.window.Lookup",
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.lookup.readAll,
                    reader: {
                        type: "lookupstore",
                        root: CMDBuild.core.constants.Proxy.ROWS
                    },
                    extraParams: {
                        limitParam: void 0,
                        pageParam: void 0,
                        startParam: void 0,
                        active: !0,
                        short: !0,
                        type: CMDBuild.configuration.dms.get(CMDBuild.core.constants.Proxy.ALFRESCO_LOOKUP_CATEGORY)
                    },
                    actionMethods: "POST"
                },
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.NUMBER,
                    direction: "ASC"
                }, {
                    property: CMDBuild.core.constants.Proxy.DESCRIPTION,
                    direction: "ASC"
                }]
            })
        },
        readAttachmentContext: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.attachment.getContext
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTACHMENT, e)
        },
        remove: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.attachment.remove
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTACHMENT, e, !0)
        }
    }), Ext.define("CMDBuild.model.common.panel.module.attachment.Attachment", {
        extend: "Ext.data.Model",
        uses: ["CMDBuild.core.configurations.DataFormat", "CMDBuild.core.constants.Proxy"],
        fields: [{
            name: CMDBuild.core.constants.Proxy.AUTHOR,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.CATEGORY,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.CREATION,
            type: "date",
            dateFormat: CMDBuild.core.configurations.DataFormat.getDateTime()
        }, {
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.FILE_NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.META,
            type: "auto",
            defaultValue: {}
        }, {
            name: CMDBuild.core.constants.Proxy.MODIFICATION,
            type: "date",
            dateFormat: CMDBuild.core.configurations.DataFormat.getDateTime()
        }, {
            name: CMDBuild.core.constants.Proxy.VERSION,
            type: "string",
            sortType: "asNatural"
        }, {
            name: CMDBuild.core.constants.Proxy.VERSIONABLE,
            type: "boolean"
        }]
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.common.panel.module.attachment.window.Lookup", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.NUMBER,
            type: "string"
        }]
    }), Ext.define("CMDBuild.proxy.common.panel.module.attachment.reader.Lookup", {
        extend: "Ext.data.reader.Json",
        alias: "reader.lookupstore",
        uses: ["CMDBuild.core.constants.Proxy"],
        buildRow: function(e) {
            return Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.DESCRIPTION] = e.Description, e[CMDBuild.core.constants.Proxy.ID] = e.Id, e[CMDBuild.core.constants.Proxy.NUMBER] = e.Number), e
        },
        readRecords: function(e) {
            e = e[this.root];
            var t = [];
            return Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.forEach(e, function(e, o, i) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && t.push(this.buildRow(e))
            }, this), this.callParent([t])
        }
    }), Ext.define("CMDBuild.view.management.common.tabs.email.GridPanel", {
        extend: "Ext.grid.Panel",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.common.tabs.email.Email"],
        mixins: {
            panelFunctions: "CMDBuild.view.common.PanelFunctions"
        },
        delegate: void 0,
        overflowY: "auto",
        border: !1,
        collapsible: !1,
        frame: !1,
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "top",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP,
                    items: [this.buttonAdd = Ext.create("CMDBuild.core.buttons.iconized.add.Add", {
                        text: CMDBuild.Translation.composeEmail,
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onTabEmailGridAddEmailButtonClick")
                        },
                        isDisabled: function() {
                            return this.delegate.cmfg("tabEmailConfigurationGet", CMDBuild.core.constants.Proxy.READ_ONLY) || !this.delegate.cmfg("tabEmailEditModeGet")
                        }
                    }), this.buttonRegenerate = Ext.create("CMDBuild.core.buttons.email.Regenerate", {
                        text: CMDBuild.Translation.regenerateAllEmails,
                        scope: this,
                        handler: function(e, t) {
                            Ext.Msg.show({
                                title: CMDBuild.Translation.common.confirmpopup.title,
                                msg: CMDBuild.Translation.emailRegenerationConfirmPopupText,
                                buttons: Ext.Msg.OKCANCEL,
                                icon: Ext.Msg.WARNING,
                                scope: this,
                                fn: function(e, t, o) {
                                    "ok" == e && this.delegate.cmfg("onTabEmailGlobalRegenerationButtonClick")
                                }
                            })
                        },
                        isDisabled: function() {
                            return this.delegate.cmfg("tabEmailConfigurationGet", CMDBuild.core.constants.Proxy.READ_ONLY) || !this.delegate.cmfg("tabEmailEditModeGet")
                        }
                    }), Ext.create("CMDBuild.core.buttons.iconized.Reload", {
                        text: CMDBuild.Translation.gridRefresh,
                        forceDisabledState: !1,
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("tabEmailGridStoreLoad")
                        }
                    })]
                })],
                columns: [{
                    dataIndex: CMDBuild.core.constants.Proxy.STATUS,
                    hidden: !0
                }, {
                    text: CMDBuild.Translation.archivingDate,
                    dataIndex: CMDBuild.core.constants.Proxy.DATE,
                    flex: 1
                }, {
                    text: CMDBuild.Translation.from,
                    dataIndex: CMDBuild.core.constants.Proxy.FROM,
                    flex: 1
                }, {
                    text: CMDBuild.Translation.to,
                    dataIndex: CMDBuild.core.constants.Proxy.TO,
                    flex: 1
                }, {
                    text: CMDBuild.Translation.subject,
                    sortable: !1,
                    dataIndex: CMDBuild.core.constants.Proxy.SUBJECT,
                    flex: 1
                }, {
                    sortable: !1,
                    scope: this,
                    dataIndex: CMDBuild.core.constants.Proxy.BODY,
                    menuDisabled: !0,
                    hideable: !1,
                    renderer: "stripTags",
                    flex: 2
                }, Ext.create("Ext.grid.column.Action", {
                    align: "center",
                    width: 150,
                    sortable: !1,
                    hideable: !1,
                    menuDisabled: !0,
                    fixed: !0,
                    items: [Ext.create("CMDBuild.core.buttons.email.Regenerate", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.manualRegeneration,
                        scope: this,
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onTabEmailGridRegenerationEmailButtonClick", n)
                        },
                        isDisabled: function(e, t, o, i, r) {
                            return this.delegate.cmfg("tabEmailConfigurationGet", CMDBuild.core.constants.Proxy.READ_ONLY) || !this.delegate.cmfg("tabEmailEditModeGet") || !this.delegate.cmfg("tabEmailGridRecordIsRegenerable", r) || !this.delegate.cmfg("tabEmailGridRecordIsEditable", r) || !r.get(CMDBuild.core.constants.Proxy.KEEP_SYNCHRONIZATION)
                        }
                    }), Ext.create("CMDBuild.core.buttons.email.Reply", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.reply,
                        scope: this,
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onTabEmailGridReplyEmailButtonClick", n)
                        },
                        isDisabled: function(e, t, o, i, r) {
                            return this.delegate.cmfg("tabEmailConfigurationGet", CMDBuild.core.constants.Proxy.READ_ONLY) || !this.delegate.cmfg("tabEmailEditModeGet") || this.delegate.cmfg("tabEmailGridRecordIsEditable", r)
                        }
                    }), Ext.create("CMDBuild.core.buttons.email.Send", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.send,
                        scope: this,
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onTabEmailGridSendEmailButtonClick", n)
                        },
                        isDisabled: function(e, t, o, i, r) {
                            return this.delegate.cmfg("tabEmailConfigurationGet", CMDBuild.core.constants.Proxy.READ_ONLY) || !this.delegate.cmfg("tabEmailEditModeGet") || !this.delegate.cmfg("tabEmailGridRecordIsSendable", r)
                        }
                    }), Ext.create("CMDBuild.core.buttons.email.Edit", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.edit,
                        scope: this,
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onTabEmailGridEditEmailButtonClick", n)
                        },
                        isDisabled: function(e, t, o, i, r) {
                            return this.delegate.cmfg("tabEmailConfigurationGet", CMDBuild.core.constants.Proxy.READ_ONLY) || !this.delegate.cmfg("tabEmailEditModeGet") || !this.delegate.cmfg("tabEmailGridRecordIsEditable", r)
                        }
                    }), Ext.create("CMDBuild.core.buttons.email.View", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.view,
                        scope: this,
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onTabEmailGridViewEmailButtonClick", n)
                        }
                    }), Ext.create("CMDBuild.core.buttons.email.Delete", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.remove,
                        scope: this,
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onTabEmailGridDeleteEmailButtonClick", n)
                        },
                        isDisabled: function(e, t, o, i, r) {
                            return this.delegate.cmfg("tabEmailConfigurationGet", CMDBuild.core.constants.Proxy.READ_ONLY) || !this.delegate.cmfg("tabEmailEditModeGet") || !this.delegate.cmfg("tabEmailGridRecordIsEditable", r)
                        }
                    })]
                })],
                features: [{
                    ftype: "groupingsummary",
                    groupHeaderTpl: ["{name:this.formatName}", {
                        formatName: function(e) {
                            return CMDBuild.Translation.emailLookupNames[e]
                        }
                    }],
                    hideGroupedHeader: !0,
                    enableGroupingMenu: !1
                }],
                store: CMDBuild.proxy.common.tabs.email.Email.getStore()
            }), this.callParent(arguments)
        },
        listeners: {
            itemdblclick: function(e, t, o, i, r, n) {
                this.delegate.cmfg("onTabEmailGridItemDoubleClick", t)
            }
        }
    }), Ext.define("CMDBuild.core.buttons.email.Regenerate", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "email-regenerate",
        textDefault: CMDBuild.Translation.regenerateEmail
    }), Ext.define("CMDBuild.core.buttons.iconized.Reload", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "x-tbar-loading",
        textDefault: CMDBuild.Translation.reload
    }), Ext.define("CMDBuild.core.buttons.email.Reply", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "email-reply",
        textDefault: CMDBuild.Translation.reply
    }), Ext.define("CMDBuild.core.buttons.email.Send", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "email-send",
        textDefault: CMDBuild.Translation.send
    }), Ext.define("CMDBuild.core.buttons.email.Edit", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "email-edit",
        textDefault: CMDBuild.Translation.edit
    }), Ext.define("CMDBuild.core.buttons.email.View", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "email-view",
        textDefault: CMDBuild.Translation.view
    }), Ext.define("CMDBuild.core.buttons.email.Delete", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "email-delete",
        textDefault: CMDBuild.Translation.remove
    }), Ext.define("CMDBuild.controller.management.common.tabs.email.EmailWindow", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.controller.common.abstract.Widget", "CMDBuild.core.constants.Proxy", "CMDBuild.core.Message", "CMDBuild.core.Utils", "CMDBuild.proxy.common.tabs.email.Attachment", "CMDBuild.proxy.email.Template"],
        parentDelegate: void 0,
        attachmentsDelegate: void 0,
        cmfgCatchedFunctions: ["getView = tabEmailEmailWindowGetView", "onTabEmailEmailWindowAbortButtonClick", "onTabEmailEmailWindowBeforeClose", "onTabEmailEmailWindowConfirmButtonClick", "onTabEmailEmailWindowFieldChange", "onTabEmailEmailWindowFillFromTemplateButtonClick", "tabEmailEmailWindowConfigureAndShow"],
        form: void 0,
        isAdvicePrompted: !1,
        record: void 0,
        templateResolver: void 0,
        view: void 0,
        windowMode: "create",
        windowModeAvailable: ["create", "edit", "reply", "view"],
        isKeepSynchronizationChecked: function() {
            return this.form.keepSynchronizationCheckbox.getValue()
        },
        loadFormValues: function(e) {
            if (Ext.isEmpty(e)) _error("empty record parameter for loadFormValues()", this);
            else {
                var t = Ext.apply({}, e.getData(), e.get(CMDBuild.core.constants.Proxy.VARIABLES));
                this.templateResolver = new CMDBuild.Management.TemplateResolver({
                    clientForm: this.cmfg("panelGridAndFormPanelFormTemplateResolverFormGet"),
                    xaVars: t,
                    serverVars: CMDBuild.controller.common.abstract.Widget.getTemplateResolverServerVars(this.cmfg("tabEmailSelectedEntityGet", CMDBuild.core.constants.Proxy.ENTITY))
                }), this.templateResolver.resolveTemplates({
                    attributes: Ext.Object.getKeys(t),
                    scope: this,
                    callback: function(e, t) {
                        var o = [],
                            i = e[CMDBuild.core.constants.Proxy.BODY];
                        "reply" == this.windowMode ? o.push({
                            id: CMDBuild.core.constants.Proxy.BODY,
                            value: i + "<br /><br />" + this.record.get(CMDBuild.core.constants.Proxy.BODY)
                        }) : o.push({
                            id: CMDBuild.core.constants.Proxy.FROM,
                            value: e[CMDBuild.core.constants.Proxy.FROM]
                        }, {
                            id: CMDBuild.core.constants.Proxy.TO,
                            value: e[CMDBuild.core.constants.Proxy.TO]
                        }, {
                            id: CMDBuild.core.constants.Proxy.CC,
                            value: e[CMDBuild.core.constants.Proxy.CC]
                        }, {
                            id: CMDBuild.core.constants.Proxy.BCC,
                            value: e[CMDBuild.core.constants.Proxy.BCC]
                        }, {
                            id: CMDBuild.core.constants.Proxy.SUBJECT,
                            value: e[CMDBuild.core.constants.Proxy.SUBJECT]
                        }, {
                            id: CMDBuild.core.constants.Proxy.BODY,
                            value: i
                        }, {
                            id: CMDBuild.core.constants.Proxy.KEEP_SYNCHRONIZATION,
                            value: e[CMDBuild.core.constants.Proxy.KEEP_SYNCHRONIZATION]
                        }), this.form.getForm().setValues(o), this.form.delayField.setValue(e[CMDBuild.core.constants.Proxy.DELAY]), this.record.set(CMDBuild.core.constants.Proxy.PROMPT_SYNCHRONIZATION, e[CMDBuild.core.constants.Proxy.PROMPT_SYNCHRONIZATION])
                    }
                })
            }
        },
        onTabEmailEmailWindowAbortButtonClick: function() {
            Ext.isEmpty(this.view) || this.view.close()
        },
        onTabEmailEmailWindowBeforeClose: function() {
            !Ext.isEmpty(this.form) && Ext.isFunction(this.form.getData) && CMDBuild.core.Utils.isObjectEmpty(this.form.getData()) && this.cmfg("tabEmailGridRecordRemove", this.record)
        },
        onTabEmailEmailWindowConfirmButtonClick: function() {
            if (this.validate(this.form)) {
                var e = this.form.getForm().getValues();
                for (var t in e) this.record.set(t, e[t]);
                CMDBuild.configuration.dms.get(CMDBuild.core.constants.Proxy.ENABLED) && this.record.set(CMDBuild.core.constants.Proxy.ATTACHMENTS, this.attachmentsDelegate.cmfg("tabEmailAttachmentNamesGet")), this.record.set(CMDBuild.core.constants.Proxy.REFERENCE, this.cmfg("tabEmailSelectedEntityGet", CMDBuild.core.constants.Proxy.ID)), Ext.isEmpty(this.record.get(CMDBuild.core.constants.Proxy.ID)) ? this.cmfg("tabEmailGridRecordAdd", {
                    record: this.record
                }) : this.cmfg("tabEmailGridRecordEdit", {
                    record: this.record
                }), Ext.isEmpty(this.templateResolver) || this.cmfg("tabEmailBindLocalDepsChangeEvent", {
                    record: this.record,
                    templateResolver: this.templateResolver
                }), this.cmfg("onTabEmailEmailWindowAbortButtonClick")
            }
        },
        onTabEmailEmailWindowFieldChange: function() {
            !this.isAdvicePrompted && this.isKeepSynchronizationChecked() && (this.isAdvicePrompted = !0, CMDBuild.core.Message.warning(null, CMDBuild.Translation.errors.emailChangedWithAutoSynch))
        },
        onTabEmailEmailWindowFillFromTemplateButtonClick: function(e) {
            var t = {};
            t[CMDBuild.core.constants.Proxy.NAME] = e, CMDBuild.proxy.email.Template.read({
                params: t,
                scope: this,
                loadMask: !0,
                failure: function(e, t, o) {
                    CMDBuild.core.Message.error(CMDBuild.Translation.common.failure, Ext.String.format(CMDBuild.Translation.errors.getTemplateWithNameFailure), !1)
                },
                success: function(e, t, o) {
                    e = o.response, this.loadFormValues(Ext.create("CMDBuild.model.common.tabs.email.Template", e)), this.record.set(CMDBuild.core.constants.Proxy.TEMPLATE, e[CMDBuild.core.constants.Proxy.NAME]), this.record.set(CMDBuild.core.constants.Proxy.ACCOUNT, e[CMDBuild.core.constants.Proxy.DEFAULT_ACCOUNT]), this.form.keepSynchronizationCheckbox.setDisabled(!1)
                }
            })
        },
        tabEmailEmailWindowConfigureAndShow: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                Ext.apply(this, e);
                var t = null;
                if (Ext.Array.contains(this.windowModeAvailable, this.windowMode)) {
                    switch (this.windowMode) {
                        case "view":
                            t = "CMDBuild.view.management.common.tabs.email.emailWindow.ViewWindow";
                            break;
                        default:
                            t = "CMDBuild.view.management.common.tabs.email.emailWindow.EditWindow"
                    }
                    if (this.view = Ext.create(t, {
                            delegate: this
                        }), this.form = this.view.form, CMDBuild.proxy.email.Template.readAll({
                            scope: this,
                            success: function(e, t, o) {
                                o = o[CMDBuild.core.constants.Proxy.RESPONSE][CMDBuild.core.constants.Proxy.ELEMENTS], !Ext.isEmpty(o) && Ext.isArray(o) ? (CMDBuild.core.Utils.objectArraySort(o, CMDBuild.core.constants.Proxy.DESCRIPTION), Ext.Array.each(o, function(e, t, o) {
                                    this.view.fillFromTemplateButton.menu.add({
                                        text: e[CMDBuild.core.constants.Proxy.DESCRIPTION],
                                        templateName: e[CMDBuild.core.constants.Proxy.NAME],
                                        scope: this,
                                        handler: function(e, t) {
                                            this.cmfg("onTabEmailEmailWindowFillFromTemplateButtonClick", e[CMDBuild.core.constants.Proxy.TEMPLATE_NAME])
                                        }
                                    })
                                }, this)) : this.view.fillFromTemplateButton.setDisabled(!0)
                            }
                        }), CMDBuild.configuration.dms.get(CMDBuild.core.constants.Proxy.ENABLED)) {
                        this.attachmentsDelegate = Ext.create("CMDBuild.controller.management.common.tabs.email.attachments.Attachments", {
                            parentDelegate: this,
                            record: this.record,
                            view: this.view.attachmentContainer
                        });
                        var o = {};
                        o[CMDBuild.core.constants.Proxy.EMAIL_ID] = this.record.get(CMDBuild.core.constants.Proxy.ID), o[CMDBuild.core.constants.Proxy.TEMPORARY] = this.record.get(CMDBuild.core.constants.Proxy.TEMPORARY), CMDBuild.proxy.common.tabs.email.Attachment.readAll({
                            params: o,
                            loadMask: this.view,
                            scope: this,
                            success: function(e, t, o) {
                                o = o[CMDBuild.core.constants.Proxy.RESPONSE], !Ext.isEmpty(o) && Ext.isArray(o) && Ext.Array.each(o, function(e, t, o) {
                                    Ext.Object.isEmpty(e) || this.attachmentsDelegate.cmfg("tabEmailAttachmentAddPanel", e[CMDBuild.core.constants.Proxy.FILE_NAME])
                                }, this)
                            }
                        })
                    }
                    this.form.loadRecord(this.record), Ext.isEmpty(this.record.get(CMDBuild.core.constants.Proxy.TEMPLATE)) || "view" == this.windowMode || this.form.keepSynchronizationCheckbox.setDisabled(!1), Ext.isEmpty(this.view) || this.view.show()
                }
            }
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.controller.common.abstract.Widget", {
        extend: "CMDBuild.controller.common.abstract.Base",
        parentDelegate: void 0,
        card: void 0,
        clientForm: void 0,
        enableDelegateApply: !0,
        enableWidgetConfigurationSetup: !0,
        instancesDataStorage: {},
        templateResolver: void 0,
        view: void 0,
        widgetConfiguration: void 0,
        widgetConfigurationModel: void 0,
        widgetConfigurationModelClassName: void 0,
        statics: {
            getTemplateResolverServerVars: function(e) {
                var t = {},
                    o = null;
                return Ext.isEmpty(e) || ("CMDBuild.model.CMActivityInstance" == Ext.getClassName(e) ? o = _CMWFState.getProcessInstance() : "CMDBuild.model.CMProcessInstance" == Ext.getClassName(e) && (o = e), t = !Ext.isEmpty(o) && Ext.isFunction(o.getValues) ? Ext.apply({
                    Id: o.get("Id"),
                    IdClass: o.get("IdClass"),
                    IdClass_value: o.get("IdClass_value")
                }, o.getValues()) : e.raw || e.data), t
            }
        },
        constructor: function(e) {
            return !Ext.isObject(e) || Ext.Object.isEmpty(e) ? _error("constructor(): unmanaged configurationObject parameter", this, e) : !Ext.isObject(e.view) || Ext.Object.isEmpty(e.view) ? _error("constructor(): unmanaged view parameter", this, e.view) : !Ext.isObject(e.widgetConfiguration) || Ext.Object.isEmpty(e.widgetConfiguration) ? _error("constructor(): unmanaged configuration parameter", this, e.widgetConfiguration) : (this.cmfgCatchedFunctions = Ext.Array.merge(this.cmfgCatchedFunctions, ["getLabel", "widgetConfigurationGet"]), this.callParent(arguments), this.enableWidgetConfigurationSetup && this.widgetConfigurationSet({
                value: this.widgetConfiguration
            }), void(this.enableDelegateApply && (this.view.delegate = this)))
        },
        beforeActiveView: function() {
            Ext.isEmpty(this.widgetConfiguration) || this.widgetConfigurationSet({
                value: this.widgetConfiguration
            })
        },
        beforeHideView: Ext.emptyFn,
        getData: function() {
            return null
        },
        getId: function(e) {
            switch (e) {
                case "unique":
                    return Ext.isEmpty(this.card.data[CMDBuild.core.constants.Proxy.ID]) ? this.widgetConfigurationGet(CMDBuild.core.constants.Proxy.ID) : this.card.data[CMDBuild.core.constants.Proxy.ID] + "-" + this.widgetConfigurationGet(CMDBuild.core.constants.Proxy.ID);
                case "strict":
                default:
                    return this.widgetConfigurationGet(CMDBuild.core.constants.Proxy.ID)
            }
        },
        getLabel: function() {
            return this.widgetConfigurationGet(CMDBuild.core.constants.Proxy.LABEL)
        },
        getTemplateResolverServerVars: function() {
            return Ext.isEmpty(this.card) ? {} : this.statics().getTemplateResolverServerVars(this.card)
        },
        instancesDataStorageExists: function() {
            return !Ext.isEmpty(this.getId("unique")) && this.instancesDataStorage.hasOwnProperty(this.getId("unique"))
        },
        instancesDataStorageGet: function() {
            return Ext.isEmpty(this.getId("unique")) || Ext.isEmpty(this.instancesDataStorage[this.getId("unique")]) ? null : this.instancesDataStorage[this.getId("unique")]
        },
        instancesDataStorageIsEmpty: function() {
            return !!Ext.isEmpty(this.getId("unique")) || Ext.isEmpty(this.instancesDataStorage[this.getId("unique")])
        },
        instancesDataStorageReset: function(e) {
            switch (e = Ext.isString(e) ? e : "full") {
                case "single":
                    return this.instancesDataStorage[this.getId("unique")] = null;
                case "full":
                default:
                    return this.instancesDataStorage = {}
            }
        },
        instancesDataStorageSet: function(e) {
            Ext.isEmpty(this.getId("unique")) || (this.instancesDataStorage[this.getId("unique")] = e)
        },
        isValid: function() {
            return !0
        },
        onBeforeSave: function(e) {
            return !Ext.isObject(e) || Ext.Object.isEmpty(e) ? _error("onBeforeSave(): unmanaged parameters object", this, e) : Ext.isFunction(e.callback) ? void Ext.callback(e.callback, Ext.isEmpty(e.scope) ? this : e.scope) : _error("onBeforeSave(): unmanaged callback parameter", this, e.callback)
        },
        onEditMode: Ext.emptyFn,
        widgetConfigurationGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "widgetConfigurationModel", this.propertyManageGet(t)
        },
        widgetConfigurationIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "widgetConfigurationModel", this.propertyManageIsEmpty(t)
        },
        widgetConfigurationSet: function(e) {
            return !Ext.isString(this.widgetConfigurationModelClassName) || Ext.isEmpty(this.widgetConfigurationModelClassName) ? _error("widgetConfigurationSet(): unmanaged widgetConfigurationModelClassName configuration property", this, this.widgetConfigurationModelClassName) : (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = this.widgetConfigurationModelClassName, e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "widgetConfigurationModel", e[CMDBuild.core.constants.Proxy.VALUE] = Ext.clone(e[CMDBuild.core.constants.Proxy.VALUE]), this.propertyManageSet(e))
        },
        widgetControllerPropertyGet: function(e) {
            return Ext.isEmpty(this[e]) ? null : this[e]
        }
    }), Ext.define("CMDBuild.proxy.common.tabs.email.Attachment", {
        uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.core.interfaces.FormSubmit", "CMDBuild.model.common.tabs.email.attachments.Attachment", "CMDBuild.model.common.tabs.email.attachments.TargetClass", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        copy: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.email.attachment.copy
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTACHMENT, e, !0)
        },
        download: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isObject(e.params) && !Ext.Object.isEmpty(e.params) && window.open(CMDBuild.proxy.index.Json.email.attachment.download + "?" + Ext.urlEncode(e.params), "_blank")
        },
        getStore: function() {
            return CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.ATTACHMENT, {
                autoLoad: !1,
                model: "CMDBuild.model.common.tabs.email.attachments.Attachment",
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.attachment.readAll,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.RESPONSE
                    },
                    extraParams: {
                        limitParam: void 0,
                        pageParam: void 0,
                        startParam: void 0
                    }
                },
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.FILE_NAME,
                    direction: "ASC"
                }]
            })
        },
        getStoreTargetEntryType: function() {
            return CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.ENTRY_TYPE, {
                autoLoad: !0,
                model: "CMDBuild.model.common.tabs.email.attachments.TargetClass",
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.entryType.readAll,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.CLASSES
                    },
                    extraParams: {
                        limitParam: void 0,
                        pageParam: void 0,
                        startParam: void 0
                    }
                },
                filters: [function(e) {
                    return e.get(CMDBuild.core.constants.Proxy.NAME) != CMDBuild.core.constants.Global.getRootNameClasses()
                }],
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.TEXT,
                    direction: "ASC"
                }]
            })
        },
        readAll: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                loadMask: !1,
                url: CMDBuild.proxy.index.Json.email.attachment.readAll
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTACHMENT, e, !0)
        },
        readAllEntryTypes: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.entryType.readAll
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ENTRY_TYPE, e)
        },
        remove: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.email.attachment.remove
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTACHMENT, e, !0)
        },
        upload: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.email.attachment.create
            }), CMDBuild.core.interfaces.FormSubmit.submit(e)
        }
    }), Ext.require(["CMDBuild.core.configurations.DataFormat", "CMDBuild.core.constants.Proxy"]), Ext.define("CMDBuild.model.common.tabs.email.attachments.Attachment", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.FILE_NAME,
            type: "string"
        }]
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.common.tabs.email.attachments.TargetClass", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.TEXT,
            type: "string"
        }]
    }), Ext.define("CMDBuild.controller.management.common.tabs.email.ConfirmRegenerationWindow", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.controller.management.common.tabs.email.Email", "CMDBuild.controller.management.common.widgets.CMWidgetController", "CMDBuild.core.constants.Proxy", "CMDBuild.core.LoadMask"],
        parentDelegate: void 0,
        gridDelegate: void 0,
        cmfgCatchedFunctions: ["onConfirmRegenerationWindowClearStore", "onConfirmRegenerationWindowConfirmButtonClick", "onConfirmRegenerationWindowShow"],
        gridStore: void 0,
        recordsCouldBeRegenerated: void 0,
        templatesCouldBeRegenerated: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.common.tabs.email.ConfirmRegenerationWindow", {
                delegate: this
            }), this.gridStore = this.view.grid.getStore()
        },
        addRecordToArray: function(e) {
            this.recordsCouldBeRegenerated.push(e)
        },
        addTemplateToArray: function(e) {
            this.templatesCouldBeRegenerated.push(e)
        },
        beforeShow: function() {
            this.gridStore.loadData(this.recordsCouldBeRegenerated), this.regenerateAndAddTemplateToStore(this.templatesCouldBeRegenerated), this.view.grid.getSelectionModel().deselectAll(), this.show()
        },
        onConfirmRegenerationWindowClearStore: function() {
            this.gridStore.removeAll()
        },
        onConfirmRegenerationWindowConfirmButtonClick: function() {
            this.cmfg("tabEmailRegenerateSelectedEmails", this.view.grid.getSelectionModel().getSelection()), this.view.hide()
        },
        onConfirmRegenerationWindowShow: function() {
            this.reset()
        },
        regenerateAndAddTemplateToStore: function(e) {
            var t = this,
                o = [];
            Ext.isArray(e) && !Ext.isEmpty(e) && (CMDBuild.core.LoadMask.show(), Ext.Array.forEach(e, function(e, i, r) {
                if (!Ext.Object.isEmpty(e)) {
                    CMDBuild.controller.management.common.tabs.email.Email.trafficLightSlotBuild(e, o);
                    var n = Ext.apply({}, e.getData(), e.get(CMDBuild.core.constants.Proxy.VARIABLES));
                    new CMDBuild.Management.TemplateResolver({
                        clientForm: t.parentDelegate.clientForm,
                        xaVars: n,
                        serverVars: CMDBuild.controller.management.common.widgets.CMWidgetController.getTemplateResolverServerVars()
                    }).resolveTemplates({
                        attributes: Ext.Object.getKeys(n),
                        callback: function(i, r) {
                            emailObject = Ext.create("CMDBuild.model.common.tabs.email.Email", i), emailObject.set(CMDBuild.core.constants.Proxy.REFERENCE, t.cmfg("tabEmailSelectedEntityGet", CMDBuild.core.constants.Proxy.ID)), emailObject.set(CMDBuild.core.constants.Proxy.TEMPLATE, e.get(CMDBuild.core.constants.Proxy.KEY)), t.gridStore.add(emailObject), (CMDBuild.controller.management.common.tabs.email.Email.trafficLightArrayCheck(e, o) || Ext.isEmpty(o)) && (CMDBuild.core.LoadMask.hide(), t.show())
                        }
                    })
                }
            }, this))
        },
        reset: function() {
            this.recordsCouldBeRegenerated = [], this.templatesCouldBeRegenerated = []
        },
        show: function() {
            Ext.isEmpty(this.view) || !(this.gridStore.count() > 0) && Ext.isEmpty(this.templatesCouldBeRegenerated) || this.view.show()
        }
    }), Ext.define("CMDBuild.view.management.common.tabs.email.ConfirmRegenerationWindow", {
        extend: "CMDBuild.core.window.AbstractModal",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.model.common.tabs.email.Email"],
        delegate: void 0,
        defaultSizeW: .8,
        defaultSizeH: .5,
        grid: void 0,
        closeAction: "hide",
        title: CMDBuild.Translation.confirmRegeneration,
        layout: "border",
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    },
                    items: [Ext.create("CMDBuild.core.buttons.text.Confirm", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onConfirmRegenerationWindowConfirmButtonClick")
                        }
                    })]
                })],
                items: [{
                    xtype: "component",
                    region: "north",
                    style: "padding: 10px;",
                    html: CMDBuild.Translation.confirmRegenerationWindowText
                }, this.grid = Ext.create("Ext.grid.Panel", {
                    region: "center",
                    border: !1,
                    collapsible: !1,
                    frame: !1,
                    selModel: Ext.create("Ext.selection.CheckboxModel", {
                        injectCheckbox: "last"
                    }),
                    columns: [{
                        text: CMDBuild.Translation.archivingDate,
                        sortable: !0,
                        dataIndex: CMDBuild.core.constants.Proxy.DATE,
                        flex: 1
                    }, {
                        text: CMDBuild.Translation.address,
                        sortable: !1,
                        scope: this,
                        renderer: this.addressRenderer,
                        flex: 1
                    }, {
                        text: CMDBuild.Translation.subject,
                        sortable: !1,
                        dataIndex: CMDBuild.core.constants.Proxy.SUBJECT,
                        flex: 1
                    }, {
                        sortable: !1,
                        scope: this,
                        dataIndex: CMDBuild.core.constants.Proxy.BODY,
                        menuDisabled: !0,
                        hideable: !1,
                        renderer: "stripTags",
                        flex: 2
                    }],
                    plugins: [{
                        ptype: "rowexpander",
                        rowBodyTpl: new Ext.XTemplate("<p><b>Subject:</b> {subject}</p>", "<p><b>Content:</b> {body}</p>")
                    }],
                    store: Ext.create("Ext.data.Store", {
                        model: "CMDBuild.model.common.tabs.email.Email",
                        data: []
                    })
                })]
            }), this.callParent(arguments), this.height = this.height * this.defaultSizeH, this.width = this.width * this.defaultSizeW
        },
        listeners: {
            hide: function(e, t) {
                this.delegate.cmfg("onConfirmRegenerationWindowClearStore")
            },
            show: function(e, t) {
                this.delegate.cmfg("onConfirmRegenerationWindowShow")
            }
        },
        addressRenderer: function(e, t, o) {
            return this.delegate.gridDelegate.recordIsReceived(o) ? o.get(CMDBuild.core.constants.Proxy.FROM) : o.get(CMDBuild.core.constants.Proxy.TO)
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.form.tabs.email.Email", {
        extend: "CMDBuild.view.management.common.tabs.email.EmailView",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        cmActivate: function() {
            this.setDisabled(!1), this.delegate.parentDelegate.tabPanel.setActiveTab(this)
        }
    }), Ext.define("CMDBuild.view.management.common.tabs.email.EmailView", {
        extend: "Ext.panel.Panel",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        border: !1,
        cls: "x-panel-body-default-framed",
        frame: !1,
        layout: "fit",
        title: CMDBuild.Translation.email,
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    hidden: !0,
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    }
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            show: function(e, t) {
                this.delegate.cmfg("onTabEmailPanelShow")
            }
        },
        reset: function() {
            this.setDisabled(this.delegate.cmfg("tabEmailSelectedEntityIsEmpty", CMDBuild.core.constants.Proxy.ENTITY))
        }
    }), Ext.define("CMDBuild.proxy.management.workflow.panel.form.tabs.History", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json", "CMDBuild.model.management.workflow.panel.form.tabs.history.CardRecord"],
        singleton: !0,
        getStore: function() {
            return CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.HISTORY, {
                autoLoad: !1,
                model: "CMDBuild.model.management.workflow.panel.form.tabs.history.CardRecord",
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.history.workflow.activity.read,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.RESPONSE + "." + CMDBuild.core.constants.Proxy.ELEMENTS
                    }
                },
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.BEGIN_DATE,
                    direction: "DESC"
                }]
            })
        },
        readAttributes: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.attribute.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTRIBUTE, e)
        },
        readHistoric: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.history.workflow.activity.readHistoric
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.HISTORY, e)
        },
        readHistoricRelation: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.history.workflow.activity.readHistoricRelation
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.HISTORY, e)
        },
        readLookups: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.lookup.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.LOOKUP, e)
        },
        readRelations: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.history.workflow.activity.readRelations
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.HISTORY, e)
        }
    }), Ext.define("CMDBuild.model.management.workflow.panel.form.tabs.history.CardRecord", {
        extend: "Ext.data.Model",
        uses: ["CMDBuild.core.configurations.DataFormat", "CMDBuild.core.constants.Proxy"],
        fields: [{
            name: CMDBuild.core.constants.Proxy.ACTIVITY_NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.BEGIN_DATE,
            type: "date",
            dateFormat: CMDBuild.core.configurations.DataFormat.getDateTime()
        }, {
            name: CMDBuild.core.constants.Proxy.CLASS_NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.END_DATE,
            type: "date",
            dateFormat: CMDBuild.core.configurations.DataFormat.getDateTime()
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.IS_CARD,
            type: "boolean",
            defaultValue: !0
        }, {
            name: CMDBuild.core.constants.Proxy.IS_RELATION,
            type: "boolean",
            defaultValue: !1
        }, {
            name: CMDBuild.core.constants.Proxy.PERFORMERS,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.STATUS,
            type: "auto",
            mapping: CMDBuild.core.constants.Proxy.STATUS + "." + CMDBuild.core.constants.Proxy.DESCRIPTION
        }, {
            name: CMDBuild.core.constants.Proxy.USER,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.VALUES,
            type: "auto"
        }]
    }), Ext.define("CMDBuild.view.management.workflow.panel.form.tabs.history.HistoryView", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        grid: void 0,
        border: !1,
        cls: "x-panel-body-default-framed",
        frame: !1,
        layout: "fit",
        title: CMDBuild.Translation.history,
        initComponent: function() {
            Ext.apply(this, {
                items: [this.grid = Ext.create("CMDBuild.view.management.workflow.panel.form.tabs.history.GridPanel", {
                    delegate: this.delegate
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            show: function(e, t) {
                this.delegate.cmfg("onWorkflowTabHistoryPanelShow")
            }
        },
        reset: function() {
            this.setDisabled(this.delegate.cmfg("workflowHistorySelectedEntityIsEmpty"))
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.form.tabs.history.GridPanel", {
        extend: "Ext.grid.Panel",
        uses: ["CMDBuild.core.configurations.DataFormat", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.workflow.panel.form.tabs.History"],
        delegate: void 0,
        includeRelationsCheckbox: void 0,
        includeSystemActivitiesCheckbox: void 0,
        config: {
            plugins: [Ext.create("CMDBuild.view.management.workflow.panel.form.tabs.history.RowExpander", {
                id: "processesHistoryTabRowExpander"
            })]
        },
        autoScroll: !0,
        border: !1,
        cls: "cmdb-history-grid",
        disableSelection: !0,
        frame: !1,
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "top",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP,
                    items: ["->", this.includeSystemActivitiesCheckbox = Ext.create("Ext.form.field.Checkbox", {
                        boxLabel: CMDBuild.Translation.includeSystemActivities,
                        boxLabelCls: "cmdb-toolbar-item",
                        checked: !1,
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onWorkflowTabHistoryIncludeSystemActivitiesCheck")
                        }
                    }), this.includeRelationsCheckbox = Ext.create("Ext.form.field.Checkbox", {
                        boxLabel: CMDBuild.Translation.includeRelations,
                        boxLabelCls: "cmdb-toolbar-item",
                        checked: !1,
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onWorkflowTabHistoryIncludeRelationCheck")
                        }
                    })]
                })],
                columns: this.buildColumns(),
                store: CMDBuild.proxy.management.workflow.panel.form.tabs.History.getStore()
            }), this.callParent(arguments), this.getStore().on("load", function(e, t, o, i) {
                this.delegate.cmfg("onWorkflowTabHistoryIncludeSystemActivitiesCheck")
            }, this)
        },
        listeners: {
            viewready: function(e, t) {
                this.getView().on("expandbody", function(e, t, o, i) {
                    this.doLayout(), this.delegate.cmfg("onWorkflowTabHistoryRowExpand", t)
                }, this)
            }
        },
        buildColumns: function() {
            var e = [Ext.create("Ext.grid.column.Date", {
                dataIndex: CMDBuild.core.constants.Proxy.BEGIN_DATE,
                text: CMDBuild.Translation.beginDate,
                width: 140,
                format: CMDBuild.core.configurations.DataFormat.getDateTime(),
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                fixed: !0
            }), Ext.create("Ext.grid.column.Date", {
                dataIndex: CMDBuild.core.constants.Proxy.END_DATE,
                text: CMDBuild.Translation.endDate,
                width: 140,
                format: CMDBuild.core.configurations.DataFormat.getDateTime(),
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                fixed: !0
            }), {
                dataIndex: CMDBuild.core.constants.Proxy.USER,
                text: CMDBuild.Translation.user,
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                flex: 1
            }];
            return CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.SIMPLE_HISTORY_MODE_FOR_PROCESS) || Ext.Array.push(e, [{
                dataIndex: CMDBuild.core.constants.Proxy.ACTIVITY_NAME,
                text: CMDBuild.Translation.activityName,
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                flex: 1
            }, {
                dataIndex: CMDBuild.core.constants.Proxy.PERFORMERS,
                text: CMDBuild.Translation.activityPerformer,
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                flex: 1
            }, {
                dataIndex: CMDBuild.core.constants.Proxy.STATUS,
                text: CMDBuild.Translation.status,
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                flex: 1
            }]), e
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.form.tabs.history.RowExpander", {
        extend: "Ext.grid.plugin.RowExpander",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils"],
        expandOnEnter: !1,
        selectRowOnExpand: !1,
        rowBodyTpl: new Ext.XTemplate('<tpl exec="this.formatter(' + CMDBuild.core.constants.Proxy.VALUES + ')"></tpl>', '<tpl for="this.formattedArray">', '<tpl if="' + CMDBuild.core.constants.Proxy.CHANGED + '">', '<p class="changedRow">', "<tpl else>", "<p>", "</tpl>", "<b>{attribute}:</b> {value}</p>", "</tpl>", '<tpl if="this.formattedArray.length == 0">', "<p>" + CMDBuild.Translation.noAvailableData + "<p>", "</tpl>", {
            formatter: function(e) {
                Ext.isEmpty(e) || (this.formattedArray = [], Ext.Object.each(e, function(e, t, o) {
                    this.formattedArray.push({
                        attribute: t.get(CMDBuild.core.constants.Proxy.ATTRIBUTE_DESCRIPTION) || e,
                        changed: t.get(CMDBuild.core.constants.Proxy.CHANGED),
                        index: t.get(CMDBuild.core.constants.Proxy.INDEX),
                        value: t.get(CMDBuild.core.constants.Proxy.DESCRIPTION)
                    })
                }, this), CMDBuild.core.Utils.objectArraySort(this.formattedArray, CMDBuild.core.constants.Proxy.INDEX))
            }
        })
    }), Ext.define("CMDBuild.controller.management.workflow.panel.form.tabs.Note", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.constants.WidgetType", "CMDBuild.core.Message", "CMDBuild.proxy.management.workflow.panel.form.tabs.Note"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onWorkflowFormTabNoteAbortActivityButtonClick", "onWorkflowFormTabNoteAbortButtonClick", "onWorkflowFormTabNoteActivitySelect", "onWorkflowFormTabNoteAddButtonClick", "onWorkflowFormTabNoteInstanceSelect", "onWorkflowFormTabNoteModifyButtonClick", "onWorkflowFormTabNoteSaveButtonClick", "onWorkflowFormTabNoteShow", "workflowFormTabNoteReset", "workflowFormTabNoteToolbarBottomBuild", "workflowFormTabNoteToolbarTopBuild"],
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.workflow.panel.form.tabs.note.NoteView", {
                delegate: this
            }), this.cmfg("workflowFormTabNoteToolbarBottomBuild"), this.cmfg("workflowFormTabNoteToolbarTopBuild")
        },
        itemLock: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).callback = Ext.isFunction(e.callback) ? e.callback : Ext.emptyFn, e.scope = Ext.isObject(e.scope) ? e.scope : this, CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ENABLE_CARD_LOCK) && !this.cmfg("workflowSelectedInstanceIsEmpty")) {
                var t = {};
                t[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_ID] = this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.PROCESS_INSTANCE_ID] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID), CMDBuild.proxy.management.workflow.panel.form.tabs.Note.lock({
                    params: t,
                    scope: e.scope,
                    success: e.callback
                })
            } else Ext.callback(e.callback, e.scope)
        },
        itemUnlock: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).callback = Ext.isFunction(e.callback) ? e.callback : Ext.emptyFn, e.scope = Ext.isObject(e.scope) ? e.scope : this, CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ENABLE_CARD_LOCK) && !this.cmfg("workflowSelectedInstanceIsEmpty")) {
                var t = {};
                t[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_ID] = this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.PROCESS_INSTANCE_ID] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID), CMDBuild.proxy.management.workflow.panel.form.tabs.Note.unlock({
                    params: t,
                    scope: e.scope,
                    success: e.callback
                })
            } else Ext.callback(e.callback, e.scope)
        },
        navigationChronologyRecordSave: function() {
            this.cmfg("workflowSelectedWorkflowIsEmpty") || this.cmfg("workflowSelectedInstanceIsEmpty") || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                moduleId: "workflow",
                entryType: {
                    description: this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.DESCRIPTION),
                    id: this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.ID),
                    object: this.cmfg("workflowSelectedWorkflowGet")
                },
                item: {
                    description: null,
                    id: this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID),
                    object: this.cmfg("workflowSelectedInstanceGet")
                },
                section: {
                    description: this.view.title,
                    object: this.view
                }
            })
        },
        onWorkflowFormTabNoteAbortActivityButtonClick: function() {
            this.view.disable()
        },
        onWorkflowFormTabNoteAbortButtonClick: function() {
            this.cmfg("workflowSelectedActivityIsEmpty") || this.cmfg("workflowIsStartActivityGet") ? this.itemUnlock({
                scope: this,
                callback: function() {
                    this.viewModeSet("read"), this.view.reset(), this.view.setDisabledModify(!0, !0, !this.cmfg("workflowFormWidgetExists", CMDBuild.core.constants.WidgetType.getOpenNote()))
                }
            }) : this.cmfg("onWorkflowFormTabNoteShow")
        },
        onWorkflowFormTabNoteActivitySelect: function() {
            this.view.enable()
        },
        onWorkflowFormTabNoteAddButtonClick: function() {
            this.view.setDisabled(!this.cmfg("workflowFormWidgetExists", CMDBuild.core.constants.WidgetType.getOpenNote()))
        },
        onWorkflowFormTabNoteInstanceSelect: function() {
            this.view.enable()
        },
        onWorkflowFormTabNoteModifyButtonClick: function() {
            return this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.WRITABLE) ? this.cmfg("workflowFormWidgetExists", CMDBuild.core.constants.WidgetType.getOpenNote()) ? void this.itemLock({
                scope: this,
                callback: function() {
                    this.viewModeSet("edit"), this.view.setDisabledModify(!1)
                }
            }) : _error("onWorkflowFormTabNoteModifyButtonClick(): widget not configured (permission denied)", this) : _warning("onWorkflowFormTabNoteModifyButtonClick(): no write privileges on activity", this, this.cmfg("workflowSelectedActivityGet"))
        },
        onWorkflowFormTabNoteSaveButtonClick: function() {
            if (this.cmfg("workflowIsStartActivityGet")) return CMDBuild.core.Message.warning(null, CMDBuild.Translation.warnings.canNotModifyNotesBeforeSavingTheActivity, !1);
            if (this.validate(this.view)) {
                var e = this.view.htmlField.getValue(),
                    t = {
                        ww: "{}"
                    };
                t[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_ID] = this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.ADVANCE] = !1, t[CMDBuild.core.constants.Proxy.ATTRIBUTES] = Ext.encode({
                    Notes: e
                }), t[CMDBuild.core.constants.Proxy.CARD_ID] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.CLASS_ID] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.CLASS_ID), CMDBuild.proxy.management.workflow.panel.form.tabs.Note.update({
                    params: t,
                    scope: this,
                    success: function(e, t, o) {
                        var i = {};
                        i[CMDBuild.core.constants.Proxy.ACTIVITY_ID] = this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.ID), i[CMDBuild.core.constants.Proxy.CARD_ID] = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.ID), i[CMDBuild.core.constants.Proxy.CLASS_ID] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.ID), i[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME);
                        var r = Ext.create("CMDBuild.model.management.workflow.Node", i);
                        this.cmfg("onWorkflowInstanceSelect", {
                            record: r,
                            scope: this,
                            callback: function() {
                                this.cmfg("onWorkflowActivitySelect", {
                                    record: r,
                                    scope: this,
                                    callback: function() {
                                        this.cmfg("onWorkflowFormTabNoteShow")
                                    }
                                })
                            }
                        })
                    }
                })
            }
        },
        onWorkflowFormTabNoteShow: function() {
            this.view.reset(), this.itemUnlock({
                scope: this,
                callback: function() {
                    if (this.cmfg("workflowFormWidgetExists", CMDBuild.core.constants.WidgetType.getOpenNote()) || this.cmfg("workflowFormTabNoteToolbarBottomBuild"), this.cmfg("workflowIsStartActivityGet")) return this.viewModeSet("edit"), this.navigationChronologyRecordSave(), this.view.setDisabledModify(!1);
                    if (!this.cmfg("workflowSelectedActivityIsEmpty")) {
                        var e = this.cmfg("workflowSelectedInstanceGet", [CMDBuild.core.constants.Proxy.VALUES, "Notes"]);
                        return this.view.htmlField.setValue(e), this.view.displayField.setValue(e), this.viewModeSet("read"), this.navigationChronologyRecordSave(), this.view.setDisabledModify(!0, !0, !this.cmfg("workflowFormWidgetExists", CMDBuild.core.constants.WidgetType.getOpenNote()) || !this.cmfg("workflowSelectedActivityGet", CMDBuild.core.constants.Proxy.WRITABLE))
                    }
                    this.cmfg("workflowFormPanelTabSelectionManage"), this.view.disable()
                }
            })
        },
        viewModeSet: function(e) {
            switch (e) {
                case "edit":
                    return this.view.getLayout().setActiveItem(this.view.panelModeEdit);
                case "read":
                default:
                    return this.view.getLayout().setActiveItem(this.view.panelModeRead)
            }
        },
        workflowFormTabNoteReset: function() {
            this.view.reset(), this.view.disable()
        },
        workflowFormTabNoteToolbarBottomBuild: function(e) {
            e = Ext.isArray(e) ? e : [];
            var t = this.view.getDockedComponent(CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM);
            t.removeAll(), t.add(Ext.isEmpty(e) ? [Ext.create("CMDBuild.core.buttons.text.Save", {
                disablePanelFunctions: !0,
                disabled: !0
            }), Ext.create("CMDBuild.core.buttons.text.Abort", {
                disablePanelFunctions: !0,
                disabled: !0
            })] : e)
        },
        workflowFormTabNoteToolbarTopBuild: function(e) {
            e = Ext.isArray(e) ? e : [];
            var t = this.view.getDockedComponent(CMDBuild.core.constants.Proxy.TOOLBAR_TOP);
            t.removeAll(), t.add(Ext.isEmpty(e) ? Ext.create("CMDBuild.core.buttons.iconized.Modify", {
                text: CMDBuild.Translation.modifyNote,
                disablePanelFunctions: !0,
                disabled: !0
            }) : e)
        }
    }), Ext.define("CMDBuild.proxy.management.workflow.panel.form.tabs.Note", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        lock: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.activity.lock
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        },
        unlock: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.activity.unlock
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        },
        update: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.activity.update
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.WORKFLOW_ACTIVITY, e, !0)
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.form.tabs.note.NoteView", {
        extend: "Ext.form.Panel",
        mixins: ["CMDBuild.view.common.PanelFunctions"],
        delegate: void 0,
        displayField: void 0,
        htmlField: void 0,
        panelModeEdit: void 0,
        panelModeRead: void 0,
        bodyCls: "cmdb-gray-panel-no-padding",
        border: !1,
        cls: "x-panel-body-default-framed",
        frame: !1,
        layout: "card",
        title: CMDBuild.Translation.note,
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "top",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP
                }), Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    }
                })],
                items: [this.panelModeEdit = Ext.create("Ext.container.Container", {
                    border: !1,
                    frame: !1,
                    layout: "fit",
                    items: [this.htmlField = Ext.create("CMDBuild.view.common.field.HtmlEditor", {
                        name: "Notes",
                        border: !1,
                        hideLabel: !0
                    })]
                }), this.panelModeRead = Ext.create("Ext.container.Container", {
                    border: !1,
                    cls: "x-panel-body-default-framed cmdb-border-bottom",
                    frame: !1,
                    overflowY: "auto",
                    items: [this.displayField = Ext.create("Ext.form.field.Display", {
                        name: "Notes",
                        padding: "5px"
                    })]
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            show: function(e, t) {
                this.delegate.cmfg("onWorkflowFormTabNoteShow")
            }
        }
    }), Ext.define("CMDBuild.controller.common.panel.module.attachment.Window", {
        extend: "CMDBuild.controller.common.panel.module.attachment.Grid",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.LoadMask", "CMDBuild.proxy.common.panel.module.attachment.Window"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onPanelModuleAttachmentWindowCloseButtonClick", "panelModuleAttachmentWindowConfigureAndShow", "panelModuleAttachmentWindowSelectedEntityGet = panelGridAndFormSelectedEntityGet", "panelModuleAttachmentWindowSelectedEntityIsEmpty = panelGridAndFormSelectedEntityIsEmpty", "panelModuleAttachmentWindowSelectedItemGet = panelGridAndFormSelectedItemGet", "panelModuleAttachmentWindowSelectedItemIsEmpty = panelGridAndFormSelectedItemIsEmpty"],
        grid: void 0,
        selectedEntity: void 0,
        selectedItem: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.panel.module.attachment.WindowView", {
                delegate: this
            }), this.controllerGrid = Ext.create("CMDBuild.controller.common.panel.module.attachment.Grid", {
                parentDelegate: this
            }), this.grid = this.controllerGrid.getView(), this.view.add([this.grid])
        },
        onPanelModuleAttachmentWindowCloseButtonClick: function() {
            this.view.close()
        },
        panelModuleAttachmentWindowConfigureAndShow: function(e) {
            e = Ext.isObject(e) ? e : {}, this.panelModuleAttachmentWindowSelectedEntityReset(), this.panelModuleAttachmentWindowSelectedItemReset(), CMDBuild.core.LoadMask.show(), this.readEntity(e.entityId, function() {
                this.readItem(e.id, function() {
                    this.controllerGrid.cmfg("panelModuleAttachmentGridReadAttachmentContext", {
                        scope: this,
                        callback: function() {
                            CMDBuild.core.LoadMask.hide(), this.setViewTitle([this.cmfg("panelModuleAttachmentWindowSelectedItemGet", CMDBuild.core.constants.Proxy.DESCRIPTION)]), this.grid.buttonAdd.setDisabled(!this.cmfg("panelGridAndFormSelectedEntityGet", [CMDBuild.core.constants.Proxy.PERMISSIONS, CMDBuild.core.constants.Proxy.WRITE])), this.controllerGrid.cmfg("panelModuleAttachmentGridStoreLoad"), this.view.show()
                        }
                    })
                })
            })
        },
        panelModuleAttachmentWindowSelectedEntityGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntity", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        panelModuleAttachmentWindowSelectedEntityIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntity", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        panelModuleAttachmentWindowSelectedEntityReset: function() {
            return this.propertyManageReset("selectedEntity")
        },
        panelModuleAttachmentWindowSelectedEntitySet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.common.panel.module.attachment.entity.Entity", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntity", this.propertyManageSet(e))
        },
        panelModuleAttachmentWindowSelectedItemGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedItem", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        panelModuleAttachmentWindowSelectedItemIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedItem", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        panelModuleAttachmentWindowSelectedItemReset: function(e) {
            this.propertyManageReset("selectedItem")
        },
        panelModuleAttachmentWindowSelectedItemSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.common.panel.module.attachment.Item", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedItem", this.propertyManageSet(e))
        },
        readEntity: function(e, t) {
            if (t = Ext.isFunction(t) ? t : Ext.emptyFn, !Ext.isNumber(e) || Ext.isEmpty(e)) return _error("readEntity(): unmanaged id parameter", this, e);
            var o = {};
            o[CMDBuild.core.constants.Proxy.ACTIVE] = !0, CMDBuild.proxy.common.panel.module.attachment.Window.readEntity({
                params: o,
                loadMask: !1,
                scope: this,
                success: function(o, i, r) {
                    if (r = r[CMDBuild.core.constants.Proxy.CLASSES], Ext.isArray(r) && !Ext.isEmpty(r)) {
                        var n = Ext.Array.findBy(r, function(t, o) {
                            return t[CMDBuild.core.constants.Proxy.ID] == e
                        }, this);
                        Ext.isObject(n) && !Ext.Object.isEmpty(n) ? (this.panelModuleAttachmentWindowSelectedEntitySet({
                            value: n
                        }), Ext.callback(t, this)) : _error("readEntity(): entity not found", this, e)
                    } else _error("readEntity(): unmanaged response", this, r)
                }
            })
        },
        readItem: function(e, t) {
            if (t = Ext.isFunction(t) ? t : Ext.emptyFn, !Ext.isNumber(e) || Ext.isEmpty(e)) return _error("readItem(): unmanaged id parameter", this, e);
            var o = {};
            o[CMDBuild.core.constants.Proxy.CARD_ID] = e, o[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("panelModuleAttachmentWindowSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME), CMDBuild.proxy.common.panel.module.attachment.Window.readItem({
                params: o,
                loadMask: !1,
                scope: this,
                success: function(o, i, r) {
                    r = r[CMDBuild.core.constants.Proxy.CARD], Ext.isObject(r) && !Ext.Object.isEmpty(r) ? (this.panelModuleAttachmentWindowSelectedItemSet({
                        value: r
                    }), Ext.callback(t, this)) : _error("readItem(): item not found", this, e)
                }
            })
        }
    }), Ext.define("CMDBuild.proxy.common.panel.module.attachment.Window", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        readEntity: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.entryType.readAll
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ENTRY_TYPE, e)
        },
        readItem: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.entryType.item.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ITEM, e)
        }
    }), Ext.define("CMDBuild.view.common.panel.module.attachment.WindowView", {
        extend: "CMDBuild.core.window.AbstractCustomModal",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        form: void 0,
        baseTitle: CMDBuild.Translation.attachment,
        closeAction: "hide",
        dimensionsMode: "percentage",
        layout: "fit",
        overflowY: "auto",
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    },
                    items: [Ext.create("CMDBuild.core.buttons.text.Close", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onPanelModuleAttachmentWindowCloseButtonClick")
                        }
                    })]
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.management.workflow.panel.tree.Tree", {
        extend: "CMDBuild.controller.common.panel.gridAndForm.panel.tree.Tree",
        uses: ["CMDBuild.controller.management.workflow.Utils", "CMDBuild.core.constants.Metadata", "CMDBuild.core.constants.Proxy", "CMDBuild.core.constants.WorkflowStates", "CMDBuild.core.interfaces.service.LoadMask", "CMDBuild.core.Message", "CMDBuild.core.Utils", "CMDBuild.proxy.management.workflow.panel.tree.Tree"],
        parentDelegate: void 0,
        appliedFilter: void 0,
        cmfgCatchedFunctions: ["getView = workflowTreeViewGet", "onWorkflowTreeAbortButtonClick", "onWorkflowTreeAddButtonClick", "onWorkflowTreeBeforeItemClick", "onWorkflowTreeColumnChanged", "onWorkflowTreePrintButtonClick", "onWorkflowTreeRecordSelect", "onWorkflowTreeSaveFailure", "onWorkflowTreeSortChange", "onWorkflowTreeWokflowSelect = onWorkflowWokflowSelect", "workflowTreeActivitySelect", "workflowTreeAppliedFilterGet", "workflowTreeApplyStoreEvent", "workflowTreeFilterApply = panelGridAndFormGridFilterApply", "workflowTreeFilterClear = panelGridAndFormGridFilterClear", "workflowTreeRendererTreeColumn", "workflowTreeReset", "workflowTreeStoreGet", "workflowTreeStoreLoad", "workflowTreeToolbarTopStatusValueSet -> controllerToolbarTop", "workflowTreeGetFirstNodeId"],
        controllerPrintWindow: void 0,
        controllerRuntimeParameters: void 0,
        controllerToolbarPaging: void 0,
        controllerToolbarTop: void 0,
        lastLoadCall: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.workflow.panel.tree.TreePanel", {
                delegate: this
            }), this.controllerPrintWindow = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.print.Window", {
                parentDelegate: this
            }), this.controllerRuntimeParameters = Ext.create("CMDBuild.controller.common.field.filter.runtimeParameters.RuntimeParameters", {
                parentDelegate: this
            }), this.controllerToolbarPaging = Ext.create("CMDBuild.controller.management.workflow.panel.tree.toolbar.Paging", {
                parentDelegate: this,
                enableFilterAdvanced: !0,
                enableFilterBasic: !0,
                enableButtonPrint: !0
            }), this.controllerToolbarTop = Ext.create("CMDBuild.controller.management.workflow.panel.tree.toolbar.Top", {
                parentDelegate: this
            }), this.view.addDocked(this.controllerToolbarTop.getView(), "top"), this.view.addDocked(this.controllerToolbarPaging.getView(), "bottom")
        },
        addRendererToHeader: function(e) {
            e.renderer = function(t, o, i, r, n, a, s) {
                return void 0 === (t = i.get(e.dataIndex)) || null == t ? "" : ("object" == typeof t ? t = t.description : "boolean" == typeof t ? t = t ? Ext.MessageBox.buttonText.yes : Ext.MessageBox.buttonText.no : "string" == typeof t && (t = Ext.util.Format.stripTags(t)), t)
            }
        },
        applyCustomRenderer: function(e, t) {
            switch (t.get(CMDBuild.core.constants.Proxy.TYPE)) {
                case "boolean":
                    return Ext.apply(e, {
                        renderer: function(t, o, i, r, n, a, s) {
                            return i.get(e.dataIndex) ? CMDBuild.Translation.yes : CMDBuild.Translation.no
                        }
                    });
                default:
                    return Ext.apply(e, {
                        renderer: function(t, o, i, r, n, a, s) {
                            return Ext.util.Format.stripTags(i.get(e.dataIndex))
                        }
                    })
            }
        },
        buildLoadCallback: function(e) {
            return e = Ext.isFunction(e) ? e : Ext.emptyFn, Ext.Function.createInterceptor(e, function(e, t, o) {
                this.cmfg("workflowFormReset"), this.workflowTreeAppliedFilterIsEmpty() && this.controllerToolbarPaging.cmfg("workflowTreeToolbarPagingFilterAdvancedReset")
            }, this)
        },
        displayedParametersNamesGet: function() {
            var e = Ext.Array.slice(this.view.query("gridcolumn:not([hidden])"), 1),
                t = [];
            return Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.each(e, function(e, o, i) {
                !Ext.isObject(e) || Ext.Object.isEmpty(e) || Ext.isEmpty(e.dataIndex) || t.push(e.dataIndex)
            }, this), t
        },
        nodeRecursiveAnchestorsExpand: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e) || !Ext.isFunction(e.bubble)) return _error("nodeRecursiveAnchestorsExpand(): unmanaged node parameter", this, e);
            e.bubble(function() {
                this.expand()
            })
        },
        nodeTypeOf: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("nodeTypeOf(): unmanaged node parameter", this, e);
            var t = e.get(CMDBuild.core.constants.Proxy.ACTIVITY_ID),
                o = e.get(CMDBuild.core.constants.Proxy.CARD_ID),
                i = e.get(CMDBuild.core.constants.Proxy.CLASS_ID);
            return Ext.isString(t) && !Ext.isEmpty(t) && Ext.isNumber(o) && !Ext.isEmpty(o) && Ext.isNumber(i) && !Ext.isEmpty(i) ? "activity" : Ext.isNumber(o) && !Ext.isEmpty(o) && Ext.isNumber(i) && !Ext.isEmpty(i) ? "instance" : ""
        },
        onWorkflowTreeAbortButtonClick: function() {
            var e, t;
            this.cmfg("workflowSelectedActivityIsEmpty") && (this.cmfg("workflowSelectedPreviousActivityIsEmpty") ? (e = this.cmfg("workflowTreeGetFirstNodeId"), t = []) : (e = this.cmfg("workflowSelectedPreviousActivityGet", CMDBuild.core.constants.Proxy.INSTANCE_ID), t = this.cmfg("workflowSelectedPreviousActivityGet", CMDBuild.core.constants.Proxy.METADATA)), e && this.cmfg("workflowTreeActivitySelect", {
                forceFilter: !1,
                instanceId: e,
                metadata: t
            }))
        },
        onWorkflowTreeAddButtonClick: function(e) {
            this.view.getSelectionModel().deselectAll(), this.view.collapseAll()
        },
        onWorkflowTreeBeforeItemClick: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("onWorkflowTreeBeforeItemClick(): unmanaged record parameter", this, e);
            this.view.getSelectionModel().select(e)
        },
        onWorkflowTreeColumnChanged: function() {
            this.cmfg("workflowTreeStoreLoad")
        },
        onWorkflowTreePrintButtonClick: function(e) {
            if (!Ext.isString(e) || Ext.isEmpty(e)) return _error("onWorkflowTreePrintButtonClick(): unmanaged format parameter", this, e);
            var t = this.cmfg("workflowTreeStoreGet").getSorters(),
                o = Ext.clone(this.storeExtraParamsGet());
            o[CMDBuild.core.constants.Proxy.TYPE] = e, Ext.isArray(t) && !Ext.isEmpty(t) && (o[CMDBuild.core.constants.Proxy.SORT] = Ext.encode(t)), delete o[CMDBuild.core.constants.Proxy.PAGE], delete o[CMDBuild.core.constants.Proxy.LIMIT], this.controllerPrintWindow.cmfg("panelGridAndFormPrintWindowShow", {
                format: e,
                mode: "view",
                params: o
            })
        },
        onWorkflowTreeRecordSelect: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e) || !Ext.isFunction(e.get)) return _error("onWorkflowTreeRecordSelect(): unmanaged record parameter", this, e);
            switch (CMDBuild.core.interfaces.service.LoadMask.manage(!0, !0), this.nodeTypeOf(e)) {
                case "activity":
                    return this.cmfg("onWorkflowInstanceSelect", {
                        record: e,
                        loadMask: !1,
                        scope: this,
                        callback: function() {
                            this.cmfg("onWorkflowActivitySelect", {
                                record: e,
                                loadMask: !1,
                                scope: this,
                                callback: Ext.bind(this.recordSelectionCallback, this, [e])
                            })
                        }
                    });
                case "instance":
                    return this.cmfg("workflowSelectedActivityReset"), this.cmfg("onWorkflowInstanceSelect", {
                        record: e,
                        loadMask: !1,
                        scope: this,
                        callback: Ext.bind(this.recordSelectionCallback, this, [e])
                    });
                default:
                    return _error("onWorkflowTreeRecordSelect(): unmanaged record type", this, e)
            }
            return _error("onWorkflowTreeRecordSelect(): not correctly filled record model", this, e)
        },
        onWorkflowTreeSaveFailure: function() {
            this.cmfg("workflowTreeStoreLoad", {
                disableFirstRowSelection: !0
            })
        },
        onWorkflowTreeSortChange: function() {
            this.cmfg("workflowFormReset"), this.cmfg("workflowTreeReset")
        },
        onWorkflowTreeWokflowSelect: function(e) {
            this.view.reconfigure(this.storeSortersSet(this.cmfg("workflowTreeStoreGet")), this.workflowTreeBuildColumns()), this.controllerToolbarPaging.cmfg("onWorkflowTreeToolbarPagingWokflowSelect", e.get(CMDBuild.core.constants.Proxy.FILTER)), this.controllerToolbarTop.cmfg("onWorkflowTreeToolbarTopWokflowSelect")
        },
        positionActivityGet: function(e) {
            (e = Ext.isObject(e) ? e : {}).params = Ext.isObject(e.params) ? e.params : {};
            var t = e.params[CMDBuild.core.constants.Proxy.FILTER],
                o = e.params[CMDBuild.core.constants.Proxy.FLOW_STATUS],
                i = e.params[CMDBuild.core.constants.Proxy.INSTANCE_ID],
                r = this.cmfg("workflowTreeStoreGet").getSorters();
            if (this.cmfg("workflowSelectedWorkflowIsEmpty")) return _error("positionActivityGet(): empty selected workflow", this);
            if (!Ext.isFunction(e.failure)) return _error("positionActivityGet(): wrong failure function parameter", this, e.failure);
            if (!Ext.isFunction(e.success)) return _error("positionActivityGet(): wrong success function parameter", this, e.success);
            if (!Ext.isNumber(i) || Ext.isEmpty(i)) return _error("positionActivityGet(): wrong instanceId parameter", this, i);
            var n = {};
            n[CMDBuild.core.constants.Proxy.CARD_ID] = i, n[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME), Ext.isString(t) && !Ext.isEmpty(t) && (n[CMDBuild.core.constants.Proxy.FILTER] = t), Ext.isString(o) && !Ext.isEmpty(o) && (n[CMDBuild.core.constants.Proxy.FLOW_STATUS] = CMDBuild.controller.management.workflow.Utils.translateStatusFromCapitalizedMode(o)), Ext.isArray(r) && !Ext.isEmpty(r) && (n[CMDBuild.core.constants.Proxy.SORT] = Ext.encode(r)), CMDBuild.proxy.management.workflow.panel.tree.Tree.readPosition({
                params: n,
                scope: Ext.isObject(e.scope) ? e.scope : this,
                success: function(t, o, i) {
                    if (i = i[CMDBuild.core.constants.Proxy.RESPONSE], !Ext.isObject(i) || Ext.Object.isEmpty(i)) return _error("positionActivityGet(): unmanaged response", this, i);
                    if (Ext.isBoolean(i[CMDBuild.core.constants.Proxy.HAS_POSITION]) && i[CMDBuild.core.constants.Proxy.HAS_POSITION]) Ext.callback(e.success, Ext.isObject(e.scope) ? e.scope : this, [t, o, i]);
                    else {
                        var r = this;
                        CMDBuild.proxy.administration.configuration.GeneralOptions.read({
                            success: function(t, o, i) {
                                i = i[CMDBuild.core.constants.Proxy.DATA], Ext.isObject(i) && !Ext.Object.isEmpty(i) && ("true" == i[CMDBuild.core.constants.Proxy.FILTERCARD_KEEPFILTERONEDIT] ? CMDBuild.core.Message.info(void 0, CMDBuild.Translation.itemNotMatchFilter) : (r.workflowTreeFilterClear(), CMDBuild.core.Message.info(void 0, CMDBuild.Translation.filterRemoved)), Ext.callback(e.failure, Ext.isObject(e.scope) ? e.scope : this, [t, o, i]))
                            }
                        })
                    }
                }
            })
        },
        positionActivityGetFailure: function(e, t, o) {
            if (!Ext.isObject(o) || Ext.Object.isEmpty(o)) return _error("positionActivityGetFailure(): unmanaged decodedResponse parameter", this, o);
            var i = o[CMDBuild.core.constants.Proxy.FLOW_STATUS];
            CMDBuild.core.Message.error(CMDBuild.Translation.common.failure, Ext.String.format(CMDBuild.Translation.errors.reasons.CARD_NOTFOUND, this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.DESCRIPTION) + " [" + this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME) + "]")), Ext.isEmpty(t.params[CMDBuild.core.constants.Proxy.FILTER]) && (this.controllerToolbarPaging.cmfg("workflowTreeToolbarPagingFilterBasicReset"), this.cmfg("workflowTreeFilterClear", {
                disableStoreLoad: !0
            })), Ext.isString(i) && !Ext.isEmpty(i) && i != CMDBuild.core.constants.WorkflowStates.getOpenCapitalized() && this.cmfg("workflowTreeToolbarTopStatusValueSet", {
                silently: !0,
                value: CMDBuild.core.constants.WorkflowStates.getAll()
            }), this.cmfg("workflowFormReset"), this.cmfg("workflowTreeReset"), this.cmfg("workflowTreeStoreLoad", {
                disableFirstRowSelection: !0
            })
        },
        positionActivityGetSuccess: function(e, t, o, i) {
            if (!Ext.isObject(o) || Ext.Object.isEmpty(o)) return _error("positionActivityGetSuccess(): unmanaged response", this, o);
            var r = o[CMDBuild.core.constants.Proxy.FLOW_STATUS],
                n = t.params[CMDBuild.core.constants.Proxy.FILTER],
                a = o[CMDBuild.core.constants.Proxy.POSITION];
            Ext.isString(n) && !Ext.isEmpty(n) || (this.controllerToolbarPaging.cmfg("workflowTreeToolbarPagingFilterBasicReset"), this.cmfg("workflowTreeFilterClear", {
                disableStoreLoad: !0,
                type: "basic"
            })), Ext.isString(r) && !Ext.isEmpty(r) && r != CMDBuild.core.constants.WorkflowStates.getOpenCapitalized() && this.cmfg("workflowTreeToolbarTopStatusValueSet", {
                silently: !0,
                value: CMDBuild.core.constants.WorkflowStates.getAll()
            }), this.cmfg("workflowTreeStoreLoad", {
                page: CMDBuild.core.Utils.getPageNumber(a),
                scope: this,
                callback: function(e, t, o) {
                    this.view.getSelectionModel().deselectAll(), this.selectByMetadata(a, i), this.selectByPosition(a % CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ROW_LIMIT))
                }
            })
        },
        recordSelectionCallback: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("recordSelectionCallback(): unmanaged record parameter", this, e);
            var t = this.cmfg("workflowSelectedInstanceGet", CMDBuild.core.constants.Proxy.VALUES);
            switch (this.nodeTypeOf(e)) {
                case "activity":
                    var o = e.parentNode;
                    Ext.isObject(o) && !Ext.Object.isEmpty(o) && Ext.isFunction(o.isRoot) && !o.isRoot() && o.eachChild(function(e) {
                        e.set(CMDBuild.core.constants.Proxy.VALUES, t)
                    }, this);
                    break;
                case "instance":
                    e.set(CMDBuild.core.constants.Proxy.VALUES, t), e.hasChildNodes() && e.eachChild(function(e) {
                        e.set(CMDBuild.core.constants.Proxy.VALUES, t)
                    }, this);
                    break;
                default:
                    return _error("recordSelectionCallback(): unmanaged record type", this, e)
            }
            CMDBuild.core.interfaces.service.LoadMask.manage(!0, !1), e.get("openInEditMode") && this.cmfg("onWorkflowActivityItemDoubleClick")
        },
        selectByMetadata: function(e, t) {
            if (Ext.isArray(t) && !Ext.isEmpty(t)) {
                var o = void 0,
                    i = void 0;
                Ext.Array.forEach(t, function(e, t, r) {
                    switch (e[CMDBuild.core.constants.Proxy.NAME]) {
                        case CMDBuild.core.constants.Metadata.getActivitySubsetId():
                            o = e[CMDBuild.core.constants.Proxy.VALUE];
                            break;
                        case CMDBuild.core.constants.Metadata.getNextActivitySubsetId():
                            i = e[CMDBuild.core.constants.Proxy.VALUE]
                    }
                }, this), this.selectByMetadataActivitySubsetId(e, o), this.selectByMetadataActivitySubsetId(e, i)
            }
        },
        selectByMetadataActivitySubsetId: function(e, t) {
            if (Ext.isString(t) && !Ext.isEmpty(t) && Ext.isNumber(e) && !Ext.isEmpty(e) && !this.view.getSelectionModel().hasSelection()) {
                var o = this.cmfg("workflowTreeStoreGet").getRootNode().getChildAt(e).findChildBy(function(e) {
                    var o = e.get(CMDBuild.core.constants.Proxy.ACTIVITY_METADATA),
                        i = Ext.Array.findBy(o, function(e, t, o) {
                            return e[CMDBuild.core.constants.Proxy.NAME] == CMDBuild.core.constants.Metadata.getActivitySubsetId()
                        }, this);
                    return !(!Ext.isObject(i) || Ext.Object.isEmpty(i)) && i[CMDBuild.core.constants.Proxy.VALUE] == t
                }, this, !0);
                Ext.isObject(o) && !Ext.Object.isEmpty(o) && (this.view.getSelectionModel().on("selectionchange", function(e, t, i) {
                    this.nodeRecursiveAnchestorsExpand(o)
                }, this, {
                    single: !0
                }), this.view.getSelectionModel().select(o))
            }
        },
        selectByPosition: function(e) {
            !Ext.isNumber(e) || Ext.isEmpty(e) || this.view.getSelectionModel().hasSelection() || (this.view.getSelectionModel().on("selectionchange", function(e, t, o) {
                this.nodeRecursiveAnchestorsExpand(t[0])
            }, this, {
                single: !0
            }), this.view.getSelectionModel().select(e))
        },
        selectFirst: function() {
            this.view.getSelectionModel().hasSelection() || this.view.getSelectionModel().select(0)
        },
        storeExtraParamsGet: function(e) {
            var t = this.cmfg("workflowTreeStoreGet").getProxy().extraParams;
            return Ext.isString(e) && !Ext.isEmpty(e) ? t[e] : t
        },
        storeExtraParamsRemove: function(e) {
            Ext.isString(e) && !Ext.isEmpty(e) && delete this.storeExtraParamsGet()[e]
        },
        storeExtraParamsSet: function(e) {
            Ext.isObject(e) && (this.cmfg("workflowTreeStoreGet").getProxy().extraParams = e)
        },
        storeSortersAdd: function(e, t) {
            return Ext.isEmpty(e) || Ext.isEmpty(e.sorters) || !Ext.isFunction(e.sorters.add) ? _error("storeSortersAdd(): unable to add store sorters", this, e, t) : !Ext.isObject(t) || Ext.Object.isEmpty(t) || Ext.isEmpty(t.property) || Ext.isEmpty(t.direction) ? _error("storeSortersAdd(): unmanaged sorter object", this, e, t) : void e.sorters.add(t)
        },
        storeSortersClear: function(e) {
            return Ext.isEmpty(e) || Ext.isEmpty(e.sorters) || !Ext.isFunction(e.sorters.clear) ? _error("storeSortersClear(): unable to clear store sorters", this, e) : e.sorters.clear()
        },
        storeSortersSet: function(e) {
            var t = CMDBuild.core.Utils.objectArraySort(this.cmfg("workflowSelectedWorkflowAttributesGet"), CMDBuild.core.constants.Proxy.SORT_INDEX);
            this.storeSortersClear(e), Ext.isArray(t) && !Ext.isEmpty(t) && Ext.Array.each(t, function(t, o, i) {
                !Ext.isObject(t) || Ext.Object.isEmpty(t) || Ext.isEmpty(t.get(CMDBuild.core.constants.Proxy.SORT_DIRECTION)) || this.storeSortersAdd(e, {
                    property: t.get(CMDBuild.core.constants.Proxy.NAME),
                    direction: t.get(CMDBuild.core.constants.Proxy.SORT_DIRECTION)
                })
            }, this)
        },
        workflowTreeActivitySelect: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).enableForceFlowStatus = !!Ext.isBoolean(e.enableForceFlowStatus) && e.enableForceFlowStatus, e.forceFilter = !!Ext.isBoolean(e.forceFilter) && e.forceFilter, e.forceFlowStatus = !!Ext.isBoolean(e.forceFlowStatus) && e.forceFlowStatus, e.metadata = Ext.isArray(e.metadata) ? e.metadata : [], this.cmfg("workflowSelectedWorkflowIsEmpty")) return _error("workflowTreeActivitySelect(): no selected workflow found", this);
            if (!Ext.isNumber(e[CMDBuild.core.constants.Proxy.INSTANCE_ID]) || Ext.isEmpty(e[CMDBuild.core.constants.Proxy.INSTANCE_ID])) return _error("workflowTreeActivitySelect(): unmanaged instanceId parameter", this, e[CMDBuild.core.constants.Proxy.INSTANCE_ID]);
            var t = this.controllerToolbarTop.cmfg("workflowTreeToolbarTopStatusValueGet"),
                o = {};
            o[CMDBuild.core.constants.Proxy.INSTANCE_ID] = e[CMDBuild.core.constants.Proxy.INSTANCE_ID], e.forceFilter || this.workflowTreeAppliedFilterIsEmpty() || (o[CMDBuild.core.constants.Proxy.FILTER] = Ext.encode(this.cmfg("workflowTreeAppliedFilterGet", CMDBuild.core.constants.Proxy.CONFIGURATION))), e.enableForceFlowStatus ? e.forceFlowStatus || t == CMDBuild.core.constants.WorkflowStates.getAll() || (o[CMDBuild.core.constants.Proxy.FLOW_STATUS] = t) : t != CMDBuild.core.constants.WorkflowStates.getAll() && (o[CMDBuild.core.constants.Proxy.FLOW_STATUS] = t), this.positionActivityGet({
                params: o,
                scope: this,
                failure: function(t, i, r) {
                    return Ext.isString(o[CMDBuild.core.constants.Proxy.FILTER]) && !Ext.isEmpty(o[CMDBuild.core.constants.Proxy.FILTER]) ? (e.forceFilter = !0, this.cmfg("workflowTreeActivitySelect", e)) : Ext.isString(o[CMDBuild.core.constants.Proxy.FLOW_STATUS]) && !Ext.isEmpty(o[CMDBuild.core.constants.Proxy.FLOW_STATUS]) && o[CMDBuild.core.constants.Proxy.FLOW_STATUS] != CMDBuild.core.constants.WorkflowStates.getAll() && e.enableForceFlowStatus ? (e.forceFlowStatus = !0, this.cmfg("workflowTreeActivitySelect", e)) : Ext.callback(this.positionActivityGetFailure, this, [t, i, r])
                },
                success: function(t, o, i) {
                    Ext.callback(this.positionActivityGetSuccess, this, [t, o, i, e.metadata])
                }
            })
        },
        workflowTreeAppliedFilterGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "appliedFilter", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        workflowTreeAppliedFilterIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "appliedFilter", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        workflowTreeAppliedFilterReset: function() {
            this.propertyManageReset("appliedFilter")
        },
        workflowTreeAppliedFilterSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.workflow.panel.tree.filter.advanced.Filter", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "appliedFilter", this.propertyManageSet(e))
        },
        workflowTreeApplyStoreEvent: function(e) {
            return e = Ext.isObject(e) ? e : {}, !Ext.isString(e.eventName) || Ext.isEmpty(e.eventName) ? _error("workflowTreeApplyStoreEvent(): unmanaged eventName parameter", this, e.eventName) : Ext.isFunction(e.fn) ? void this.cmfg("workflowTreeStoreGet").on(e.eventName, e.fn, Ext.isObject(e.scope) ? e.scope : this, Ext.isObject(e.options) ? e.options : {}) : _error("workflowTreeApplyStoreEvent(): unmanaged fn parameter", this, e.fn)
        },
        workflowTreeBuildColumns: function() {
            var e = [Ext.create("CMDBuild.view.management.workflow.panel.tree.TreeColumn", {
                dataIndex: CMDBuild.core.constants.Proxy.ACTIVITY_DESCRIPTION,
                scope: this
            })];
            if (!this.cmfg("workflowSelectedWorkflowIsEmpty") && !this.cmfg("workflowSelectedWorkflowAttributesIsEmpty")) {
                var t = Ext.create("CMDBuild.core.fieldManager.FieldManager", {
                        parentDelegate: this
                    }),
                    o = CMDBuild.core.Utils.objectArraySort(this.cmfg("workflowSelectedWorkflowAttributesGet"), CMDBuild.core.constants.Proxy.INDEX);
                this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.IS_SUPER_CLASS) && e.push({
                    dataIndex: CMDBuild.core.constants.Proxy.CLASS_DESCRIPTION,
                    text: CMDBuild.Translation.subClass
                }), Ext.Array.each(o, function(o, i, r) {
                    if (Ext.isObject(o) && !Ext.Object.isEmpty(o) && o.get(CMDBuild.core.constants.Proxy.NAME) != CMDBuild.core.constants.Proxy.CLASS_DESCRIPTION)
                        if (t.isAttributeManaged(o.get(CMDBuild.core.constants.Proxy.TYPE))) t.attributeModelSet(o), t.push(e, this.applyCustomRenderer(t.buildColumn(), o));
                        else if ("ipaddress" != o.get(CMDBuild.core.constants.Proxy.TYPE)) {
                        var n = CMDBuild.Management.FieldManager.getHeaderForAttr(o.get(CMDBuild.core.constants.Proxy.SOURCE_OBJECT));
                        Ext.isObject(n) && !Ext.Object.isEmpty(n) && (n.text = n.header, delete n.flex, delete n.width, delete n.minWidth, this.addRendererToHeader(n), t.push(e, n))
                    }
                }, this)
            }
            return e
        },
        workflowTreeFilterApply: function(e) {
            if (e = Ext.isObject(e) ? e : {}, !Ext.isObject(e.filter) || Ext.Object.isEmpty(e.filter)) return _error("workflowTreeFilterApply(): unmanaged filter object parameter", this, e.filter);
            switch (e.type) {
                case "advanced":
                    return this.workflowTreeFilterApplyAdvanced(e.filter);
                case "basic":
                    return this.workflowTreeFilterApplyBasic(e.filter);
                default:
                    return _error("workflowTreeFilterApply(): unmanaged type parameter", this, e.type)
            }
        },
        workflowTreeFilterApplyAdvanced: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e) || !Ext.isFunction(e.get) || !Ext.isFunction(e.set)) return _error("workflowTreeFilterApplyAdvanced(): unmanaged filter object parameter", this, e);
            if (!Ext.isFunction(e.getEmptyRuntimeParameters) || !Ext.isFunction(e.resolveCalculatedParameters)) return _error("workflowTreeFilterApplyAdvanced(): unsupported filter object functions", this, e);
            var t = e.getEmptyRuntimeParameters(),
                o = e.get(CMDBuild.core.constants.Proxy.CONFIGURATION);
            if (Ext.isArray(t) && !Ext.isEmpty(t)) return this.controllerRuntimeParameters.cmfg("fieldFilterRuntimeParametersShow", e);
            if (e.resolveCalculatedParameters(), !this.workflowTreeAppliedFilterIsEmpty()) {
                var i = this.cmfg("workflowTreeAppliedFilterGet", CMDBuild.core.constants.Proxy.CONFIGURATION);
                Ext.isEmpty(i[CMDBuild.core.constants.Proxy.QUERY]) || e.set(CMDBuild.core.constants.Proxy.CONFIGURATION, Ext.apply(o, {
                    query: i[CMDBuild.core.constants.Proxy.QUERY]
                }))
            }
            this.workflowTreeAppliedFilterSet({
                value: e.getData()
            }), this.cmfg("workflowTreeStoreLoad")
        },
        workflowTreeFilterApplyBasic: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e) || !Ext.isFunction(e.get) || !Ext.isFunction(e.set)) return _error("workflowTreeFilterApplyBasic(): unmanaged filter object parameter", this, e);
            var t = {},
                o = e.get(CMDBuild.core.constants.Proxy.CONFIGURATION);
            this.workflowTreeAppliedFilterIsEmpty() ? (t[CMDBuild.core.constants.Proxy.CONFIGURATION] = {}, t[CMDBuild.core.constants.Proxy.CONFIGURATION][CMDBuild.core.constants.Proxy.QUERY] = o[CMDBuild.core.constants.Proxy.QUERY], this.workflowTreeAppliedFilterSet({
                value: t
            })) : ((t = this.cmfg("workflowTreeAppliedFilterGet", CMDBuild.core.constants.Proxy.CONFIGURATION))[CMDBuild.core.constants.Proxy.QUERY] = o[CMDBuild.core.constants.Proxy.QUERY], this.workflowTreeAppliedFilterSet({
                propertyName: CMDBuild.core.constants.Proxy.CONFIGURATION,
                value: t
            })), this.cmfg("workflowTreeStoreLoad")
        },
        workflowTreeFilterClear: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).disableStoreLoad = !!Ext.isBoolean(e.disableStoreLoad) && e.disableStoreLoad, !this.workflowTreeAppliedFilterIsEmpty()) {
                var t = Ext.clone(this.cmfg("workflowTreeAppliedFilterGet", CMDBuild.core.constants.Proxy.CONFIGURATION));
                switch (e.type) {
                    case "advanced":
                        if (this.workflowTreeAppliedFilterReset(), !Ext.isEmpty(t[CMDBuild.core.constants.Proxy.QUERY])) {
                            var o = {};
                            o[CMDBuild.core.constants.Proxy.CONFIGURATION] = {}, o[CMDBuild.core.constants.Proxy.CONFIGURATION][CMDBuild.core.constants.Proxy.QUERY] = t[CMDBuild.core.constants.Proxy.QUERY], this.workflowTreeAppliedFilterSet({
                                value: o
                            })
                        }
                        break;
                    case "basic":
                        delete t[CMDBuild.core.constants.Proxy.QUERY], Ext.Object.isEmpty(t) ? this.workflowTreeAppliedFilterReset() : this.workflowTreeAppliedFilterSet({
                            propertyName: CMDBuild.core.constants.Proxy.CONFIGURATION,
                            value: t
                        });
                        break;
                    default:
                        this.workflowTreeAppliedFilterReset()
                }
            }
            e.disableStoreLoad || this.cmfg("workflowTreeStoreLoad")
        },
        workflowTreeRendererTreeColumn: function(e) {
            var t = (e = Ext.isObject(e) ? e : {}).metadata,
                o = e.record;
            if (Ext.isObject(t) && !Ext.Object.isEmpty(t) && Ext.isObject(o) && !Ext.Object.isEmpty(o) && !o.parentNode.isRoot()) {
                t.tdAttr = 'colspan="' + this.view.columns.length + '"';
                var i = o.get(CMDBuild.core.constants.Proxy.ACTIVITY_METADATA),
                    r = "<b>" + o.get(CMDBuild.core.constants.Proxy.ACTIVITY_PERFORMER_NAME) + ":</b> " + o.get(CMDBuild.core.constants.Proxy.ACTIVITY_DESCRIPTION);
                return Ext.isArray(i) && !Ext.isEmpty(i) && Ext.Array.forEach(i, function(e, t, i) {
                    if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) switch (e[CMDBuild.core.constants.Proxy.NAME]) {
                        case CMDBuild.core.constants.Metadata.getAdditionalActivityLabel():
                            Ext.isEmpty(o.get(e[CMDBuild.core.constants.Proxy.VALUE])) || (r += this.workflowTreeRendererTreeColumnManageMetadataAdditionalActivityLabel(o.get(e[CMDBuild.core.constants.Proxy.VALUE])))
                    }
                }, this), r
            }
            return e.value
        },
        workflowTreeRendererTreeColumnManageMetadataAdditionalActivityLabel: function(e) {
            switch (Ext.typeOf(e)) {
                case "object":
                    if (!Ext.Object.isEmpty(e)) {
                        if (Ext.isString(e[CMDBuild.core.constants.Proxy.DESCRIPTION]) && !Ext.isEmpty(e[CMDBuild.core.constants.Proxy.DESCRIPTION])) return " - " + e[CMDBuild.core.constants.Proxy.DESCRIPTION];
                        if (Ext.isNumber(e[CMDBuild.core.constants.Proxy.ID]) && !Ext.isEmpty(e[CMDBuild.core.constants.Proxy.ID])) return " - " + e[CMDBuild.core.constants.Proxy.ID]
                    }
                case "string":
                default:
                    if (!Ext.isEmpty(e)) return " - " + e
            }
            return ""
        },
        workflowTreeReset: function() {
            this.view.getSelectionModel().deselectAll(), this.cmfg("workflowSelectedActivityReset"), _CMWFState.setProcessInstanceSynchronous(Ext.create("CMDBuild.model.CMProcessInstance", this.cmfg("workflowSelectedInstanceGet", "rawData")))
        },
        workflowTreeStoreGet: function() {
            return this.view.getStore()
        },
        workflowTreeStoreLoad: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).callback = Ext.isFunction(e.callback) ? e.callback : void 0, e.disableFirstRowSelection = !!Ext.isBoolean(e.disableFirstRowSelection) && e.disableFirstRowSelection, e.page = Ext.isNumber(e.page) ? e.page : 1, this.cmfg("workflowSelectedWorkflowIsEmpty")) return _error("workflowTreeStoreLoad(): selected workflow object empty", this, this.cmfg("workflowSelectedWorkflowGet"));
            e.disableFirstRowSelection || (e.callback = Ext.isEmpty(e.callback) ? this.selectFirst : e.callback), this.cmfg("workflowTreeStoreGet").getRootNode().removeAll();
            var t = Ext.isObject(e.params) ? e.params : {};
            t[CMDBuild.core.constants.Proxy.ATTRIBUTES] = Ext.encode(this.displayedParametersNamesGet()), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME), t[CMDBuild.core.constants.Proxy.STATE] = this.controllerToolbarTop.cmfg("workflowTreeToolbarTopStatusValueGet"), this.workflowTreeAppliedFilterIsEmpty() || (t[CMDBuild.core.constants.Proxy.FILTER] = Ext.encode(this.cmfg("workflowTreeAppliedFilterGet", CMDBuild.core.constants.Proxy.CONFIGURATION))), this.storeExtraParamsSet(t), this.cmfg("workflowTreeStoreGet").isLoading() && !Ext.isEmpty(this.lastLoadCall) && Ext.Ajax.abort(this.lastLoadCall), this.cmfg("workflowTreeStoreGet").loadPage(e.page, {
                params: t,
                scope: Ext.isEmpty(e.scope) ? this : e.scope,
                callback: this.buildLoadCallback(e.callback)
            }), this.lastLoadCall = Ext.Ajax.getLatest()
        },
        workflowTreeGetFirstNodeId: function() {
            var e = this.getView().getStore().tree.getRootNode().getChildAt(0);
            if (e) return e.get("cardId")
        }
    }), Ext.define("CMDBuild.controller.common.panel.gridAndForm.panel.tree.Tree", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        view: void 0
    }), Ext.define("CMDBuild.proxy.management.workflow.panel.tree.Tree", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.constants.WorkflowStates", "CMDBuild.model.management.workflow.Node", "CMDBuild.proxy.index.Json", "CMDBuild.proxy.management.workflow.panel.tree.Reader"],
        singleton: !0,
        getStore: function() {
            return Ext.create("Ext.data.TreeStore", {
                autoLoad: !1,
                model: "CMDBuild.model.management.workflow.Node",
                pageSize: CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ROW_LIMIT),
                remoteSort: !0,
                root: {
                    expanded: !0,
                    loaded: !0
                },
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.workflow.instance.readAll,
                    reader: {
                        type: "workflowstore",
                        totalProperty: CMDBuild.core.constants.Proxy.RESULTS
                    }
                }
            })
        },
        getStoreState: function() {
            return Ext.create("Ext.data.ArrayStore", {
                fields: [CMDBuild.core.constants.Proxy.DESCRIPTION, CMDBuild.core.constants.Proxy.VALUE],
                data: [
                    [CMDBuild.Translation.open, CMDBuild.core.constants.WorkflowStates.getOpen()],
                    [CMDBuild.Translation.suspended, CMDBuild.core.constants.WorkflowStates.getSuspended()],
                    [CMDBuild.Translation.completed, CMDBuild.core.constants.WorkflowStates.getCompleted()],
                    [CMDBuild.Translation.aborted, CMDBuild.core.constants.WorkflowStates.getAborted()],
                    [CMDBuild.Translation.all, CMDBuild.core.constants.WorkflowStates.getAll()]
                ]
            })
        },
        readPosition: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.workflow.getPosition
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.management.workflow.Node", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.CARD_ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.CLASS_DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.CLASS_ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.CLASS_NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.VALUES,
            type: "auto",
            defaultValue: {}
        }, {
            name: CMDBuild.core.constants.Proxy.ACTIVITY_DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ACTIVITY_ID,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ACTIVITY_METADATA,
            type: "auto",
            defaultValue: []
        }, {
            name: CMDBuild.core.constants.Proxy.ACTIVITY_PERFORMER_NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ACTIVITY_WRITABLE,
            type: "boolean"
        }, {
            name: "iconCls",
            type: "string",
            defaultValue: "cmdb-tree-no-icon",
            persist: !1
        }, {
            name: "rawData",
            type: "auto",
            defaultValue: []
        }],
        get: function(e) {
            if (e != CMDBuild.core.constants.Proxy.VALUES) {
                var t = this.get(CMDBuild.core.constants.Proxy.VALUES);
                if (Ext.Array.contains(Ext.Object.getKeys(t), e)) return t[e]
            }
            return this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.proxy.management.workflow.panel.tree.Reader", {
        extend: "Ext.data.reader.Json",
        alias: "reader.workflowstore",
        uses: ["CMDBuild.core.constants.Metadata", "CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils"],
        buildNodeActivity: function(e, t) {
            if (Ext.isObject(e)) {
                var o = {};
                return o[CMDBuild.core.constants.Proxy.CARD_ID] = t[CMDBuild.core.constants.Proxy.ID], o[CMDBuild.core.constants.Proxy.CLASS_DESCRIPTION] = t[CMDBuild.core.constants.Proxy.CLASS_DESCRIPTION], o[CMDBuild.core.constants.Proxy.CLASS_ID] = t[CMDBuild.core.constants.Proxy.CLASS_ID], o[CMDBuild.core.constants.Proxy.CLASS_NAME] = t[CMDBuild.core.constants.Proxy.CLASS_NAME], o[CMDBuild.core.constants.Proxy.VALUES] = t[CMDBuild.core.constants.Proxy.VALUES], o[CMDBuild.core.constants.Proxy.ACTIVITY_DESCRIPTION] = e[CMDBuild.core.constants.Proxy.DESCRIPTION], o[CMDBuild.core.constants.Proxy.ACTIVITY_ID] = e[CMDBuild.core.constants.Proxy.ID], o[CMDBuild.core.constants.Proxy.ACTIVITY_METADATA] = e[CMDBuild.core.constants.Proxy.METADATA], o[CMDBuild.core.constants.Proxy.ACTIVITY_PERFORMER_NAME] = e[CMDBuild.core.constants.Proxy.PERFORMER_NAME], o[CMDBuild.core.constants.Proxy.ACTIVITY_WRITABLE] = e[CMDBuild.core.constants.Proxy.WRITABLE], o[CMDBuild.core.constants.Proxy.LEAF] = !0, o.rawData = t, o
            }
        },
        buildNodeWorkflowInstanceMultipleActivity: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isArray(e[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_INFO_LIST]) && !Ext.isEmpty(e[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_INFO_LIST])) {
                var t = e[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_INFO_LIST],
                    o = [];
                return Ext.Array.each(t, function(t, i, r) {
                    Ext.isObject(t) && !Ext.Object.isEmpty(t) && o.push(this.buildNodeActivity(t, e))
                }, this), e[CMDBuild.core.constants.Proxy.CARD_ID] = e[CMDBuild.core.constants.Proxy.ID], e[CMDBuild.core.constants.Proxy.LEAF] = t.length < 2, e.rawData = e, e[CMDBuild.core.constants.Proxy.CHILDREN] = CMDBuild.core.Utils.objectArraySort(o, CMDBuild.core.constants.Proxy.ACTIVITY_DESCRIPTION), e
            }
        },
        buildNodeWorkflowInstanceNoActivity: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = this.buildNodeActivity({}, e);
                return t.rawData = e, t
            }
        },
        buildNodeWorkflowInstanceSingleActivity: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isArray(e[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_INFO_LIST]) && !Ext.isEmpty(e[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_INFO_LIST])) {
                var t = this.buildNodeActivity(e[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_INFO_LIST][0], e);
                return t.rawData = e, t
            }
        },
        readRecords: function(e) {
            e = e[CMDBuild.core.constants.Proxy.RESPONSE][CMDBuild.core.constants.Proxy.ROWS];
            var t = [];
            return Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.each(e, function(e, o, i) {
                var r = e[CMDBuild.core.constants.Proxy.ACTIVITY_INSTANCE_INFO_LIST];
                Ext.isArray(r) && (1 == r.length ? t.push(this.buildNodeWorkflowInstanceSingleActivity(e)) : r.length > 1 ? t.push(this.buildNodeWorkflowInstanceMultipleActivity(e)) : Ext.isEmpty(r) && t.push(this.buildNodeWorkflowInstanceNoActivity(e)))
            }, this), this.callParent([t])
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.TreePanel", {
        extend: "CMDBuild.view.common.panel.gridAndForm.panel.tree.TreePanel",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.workflow.panel.tree.Tree"],
        delegate: void 0,
        columns: [],
        lines: !1,
        initComponent: function() {
            Ext.apply(this, {
                store: CMDBuild.proxy.management.workflow.panel.tree.Tree.getStore()
            }), this.callParent(arguments)
        },
        listeners: {
            beforeitemclick: function(e, t, o, i, r, n) {
                this.delegate.cmfg("onWorkflowTreeBeforeItemClick", t)
            },
            columnhide: function(e, t, o) {
                this.delegate.cmfg("onWorkflowTreeColumnChanged")
            },
            columnshow: function(e, t, o) {
                this.delegate.cmfg("onWorkflowTreeColumnChanged")
            },
            itemdblclick: function(e, t, o, i, r, n) {
                this.isDblClick = !0, t.set("openInEditMode", t.getData().activityWritable), this.delegate.cmfg("onWorkflowTreeRecordSelect", t)
            },
            select: function(e, t, o) {
                var i = this;
                this.isDblClick = !1, setTimeout(function() {
                    i.isDblClick || i.delegate.cmfg("onWorkflowTreeRecordSelect", t)
                }, 800)
            },
            sortchange: function(e, t, o, i) {
                this.delegate.cmfg("onWorkflowTreeSortChange")
            }
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.tree.TreePanel", {
        extend: "Ext.tree.Panel",
        delegate: void 0,
        border: !1,
        cls: "cmdb-border-bottom",
        forceFit: !0,
        frame: !1,
        region: "center",
        rootVisible: !1,
        scroll: "vertical",
        viewConfig: {
            loadMask: !0,
            stripeRows: !0
        }
    }), Ext.define("CMDBuild.proxy.common.panel.gridAndForm.Print", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        createCardDetails: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.report.print.cardDetails
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        },
        createClassSchema: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.report.print.classSchema
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        },
        createDataViewSqlSchema: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.report.print.sqlView
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        },
        createSchema: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.report.print.schema
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        },
        createView: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.report.print.currentView
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        }
    }), Ext.define("CMDBuild.view.common.panel.gridAndForm.panel.common.print.WindowView", {
        extend: "CMDBuild.core.window.AbstractCustomModal",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        dimensionsMode: "percentage",
        border: !0,
        closeAction: "hide",
        frame: !1,
        layout: "fit",
        title: CMDBuild.Translation.printPreview,
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "top",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP,
                    items: ["->", Ext.create("CMDBuild.core.buttons.iconized.Download", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onPanelGridAndFormPrintWindowDownloadButtonClick")
                        }
                    })]
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            show: function(e, t) {
                this.delegate.cmfg("onPanelGridAndFormPrintWindowShow")
            }
        }
    }), Ext.define("CMDBuild.controller.common.field.filter.runtimeParameters.RuntimeParameters", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.templateResolver.Utils", "CMDBuild.proxy.common.field.filter.RuntimeParameters"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["fieldFilterRuntimeParametersShow", "onFieldFilterRuntimeParametersAbortButtonClick", "onFieldFilterRuntimeParametersApplyButtonClick"],
        filter: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.field.filter.runtimeParameters.RuntimeParametersWindow", {
                delegate: this
            }), this.form = this.view.form
        },
        buildFields: function(e) {
            if (this.form.removeAll(), Ext.isArray(e) && !Ext.isEmpty(e)) {
                var t = Ext.create("CMDBuild.core.fieldManager.FieldManager", {
                    parentDelegate: this
                });
                Ext.Array.each(e, function(e, o, i) {
                    if (t.isAttributeManaged(e[CMDBuild.core.constants.Proxy.TYPE])) t.attributeModelSet(Ext.create("CMDBuild.model.common.attributes.Attribute", e)), t.add(this.form, t.buildField());
                    else {
                        e = this.validateFilterProperty(e);
                        var r = CMDBuild.Management.FieldManager.getFieldForAttr(e, !1, !1);
                        Ext.isEmpty(r) || (r.maxWidth = r.width || CMDBuild.core.constants.FieldWidths.STANDARD_MEDIUM, e.defaultvalue && r.setValue(e.defaultvalue), this.form.add(r))
                    }
                }, this)
            } else _error("buildFields(): unmanaged runtime parameters property", this, e)
        },
        fieldFilterRuntimeParametersShow: function(e) {
            if (this.filter = void 0, Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isBoolean(e.isFilterAdvancedCompatible) && e.isFilterAdvancedCompatible && Ext.isObject(this.view) && !Ext.Object.isEmpty(this.view)) {
                var t = e.getEmptyRuntimeParameters(),
                    o = [];
                if (Ext.Array.each(t, function(e, t, i) {
                        !Ext.isObject(e) || Ext.Object.isEmpty(e) || Ext.isEmpty(e[CMDBuild.core.constants.Proxy.ATTRIBUTE]) || o.push(e[CMDBuild.core.constants.Proxy.ATTRIBUTE])
                    }, this), Ext.isArray(t) && !Ext.isEmpty(t)) {
                    var i = {};
                    i[CMDBuild.core.constants.Proxy.CLASS_NAME] = e.get(CMDBuild.core.constants.Proxy.ENTRY_TYPE), CMDBuild.proxy.common.field.filter.RuntimeParameters.readAllAttributes({
                        params: i,
                        scope: this,
                        success: function(t, i, r) {
                            r = r[CMDBuild.core.constants.Proxy.ATTRIBUTES];
                            var n = [];
                            Ext.isArray(r) && !Ext.isEmpty(r) && (Ext.Array.each(r, function(e, t, i) {
                                Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.Array.contains(o, e[CMDBuild.core.constants.Proxy.NAME]) && n.push(Ext.apply(e, {
                                    fieldmode: "write"
                                }))
                            }, this), this.buildFields(n), this.setViewTitle(e.get(CMDBuild.core.constants.Proxy.DESCRIPTION)), this.filter = e, this.view.show())
                        }
                    })
                } else _error("fieldFilterRuntimeParametersShow(): no runtime parameters found in filter object", this, e)
            } else _error("fieldFilterRuntimeParametersShow(): unmanaged filter object", this, e)
        },
        onFieldFilterRuntimeParametersAbortButtonClick: function() {
            this.cmfg("workflowTreeFilterClear"), this.view.close()
        },
        onFieldFilterRuntimeParametersApplyButtonClick: function() {
            this.form.getForm().isValid() && (this.filter.setRuntimeParameterValue(this.form.getValues()), this.cmfg("workflowTreeFilterApply", {
                filter: this.filter,
                type: "advanced"
            }), this.view.close())
        },
        validateFilterProperty: function(e) {
            return Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isString(e[CMDBuild.core.constants.Proxy.FILTER]) && !Ext.isEmpty(e[CMDBuild.core.constants.Proxy.FILTER]) && CMDBuild.core.templateResolver.Utils.hasTemplates(e[CMDBuild.core.constants.Proxy.FILTER]) && (e[CMDBuild.core.constants.Proxy.FILTER] = null), e
        }
    }), Ext.define("CMDBuild.proxy.common.field.filter.RuntimeParameters", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        readAllAttributes: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.attribute.readAll
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTRIBUTE, e)
        }
    }), Ext.define("CMDBuild.view.common.field.filter.runtimeParameters.RuntimeParametersWindow", {
        extend: "CMDBuild.core.window.AbstractCustomModal",
        delegate: void 0,
        dimensions: {
            height: "auto",
            width: 60
        },
        dimensionsMode: "percentage",
        form: void 0,
        baseTitle: CMDBuild.Translation.filterInputParameters,
        border: !0,
        closeAction: "hide",
        frame: !1,
        layout: "fit",
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    },
                    items: [this.saveButton = Ext.create("CMDBuild.core.buttons.text.Apply", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onFieldFilterRuntimeParametersApplyButtonClick")
                        }
                    }), this.saveButton = Ext.create("CMDBuild.core.buttons.text.Abort", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onFieldFilterRuntimeParametersAbortButtonClick")
                        }
                    })]
                })],
                items: [this.form = Ext.create("Ext.form.Panel", {
                    bodyCls: "cmdb-blue-panel",
                    border: !1,
                    frame: !1,
                    labelAlign: "right"
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.management.workflow.panel.tree.toolbar.Paging", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onWorkflowTreeToolbarPagingShow", "onWorkflowTreeToolbarPagingWokflowSelect", "workflowTreeToolbarPagingFilterAdvancedReset", "workflowTreeToolbarPagingFilterBasicReset"],
        controllerFilterAdvanced: void 0,
        controllerFilterBasic: void 0,
        enableFilterAdvanced: !1,
        enableFilterBasic: !1,
        enableButtonPrint: !1,
        printButton: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments);
            var t = [];
            Ext.isBoolean(this.enableFilterBasic) && this.enableFilterBasic && (this.controllerFilterBasic = Ext.create("CMDBuild.controller.common.field.filter.basic.Basic", {
                parentDelegate: this
            }), Ext.Array.push(t, [{
                xtype: "tbseparator"
            }, this.controllerFilterBasic.getView()])), Ext.isBoolean(this.enableFilterAdvanced) && this.enableFilterAdvanced && (this.controllerFilterAdvanced = Ext.create("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.Advanced", {
                parentDelegate: this
            }), Ext.Array.push(t, [{
                xtype: "tbseparator"
            }, this.controllerFilterAdvanced.getView()])), Ext.isBoolean(this.enableButtonPrint) && this.enableButtonPrint && Ext.Array.push(t, [{
                xtype: "tbseparator"
            }, this.printButton = Ext.create("CMDBuild.core.buttons.iconized.split.Print", {
                delegate: this,
                delegateEventPrefix: "onWorkflowTree",
                formatList: [CMDBuild.core.constants.Proxy.PDF, CMDBuild.core.constants.Proxy.CSV]
            })]), this.view = Ext.create("CMDBuild.view.management.workflow.panel.tree.toolbar.Paging", {
                delegate: this,
                store: this.cmfg("workflowTreeStoreGet"),
                items: t
            })
        },
        onWorkflowTreeToolbarPagingShow: function() {
            this.cmfg("workflowTreeToolbarPagingFilterBasicReset")
        },
        onWorkflowTreeToolbarPagingWokflowSelect: function(e) {
            this.cmfg("workflowTreeToolbarPagingFilterBasicReset"), this.controllerFilterAdvanced.cmfg("onWorkflowTreeFilterAdvancedFilterSelect", e)
        },
        workflowTreeToolbarPagingFilterAdvancedReset: function() {
            Ext.isObject(this.controllerFilterAdvanced) && !Ext.Object.isEmpty(this.controllerFilterAdvanced) && this.controllerFilterAdvanced.cmfg("onWorkflowTreeFilterAdvancedClearButtonClick", !0)
        },
        workflowTreeToolbarPagingFilterBasicReset: function() {
            Ext.isObject(this.controllerFilterBasic) && !Ext.Object.isEmpty(this.controllerFilterBasic) && this.controllerFilterBasic.cmfg("onFieldFilterBasicReset", !0)
        }
    }), Ext.define("CMDBuild.controller.common.field.filter.basic.Basic", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils"],
        parentDelegate: void 0,
        controllerFilterWindow: void 0,
        cmfgCatchedFunctions: ["onFieldFilterBasicReset", "onFieldFilterBasicTrigger1Click = onFieldFilterBasicEnterKeyPress", "onFieldFilterBasicTrigger2Click"],
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.common.field.filter.basic.Basic", {
                delegate: this
            })
        },
        onFieldFilterBasicReset: function(e) {
            if (e = !!Ext.isBoolean(e) && e, !Ext.isObject(this.view) || Ext.Object.isEmpty(this.view)) return _error("onFieldFilterBasicReset(): view not found", this, this.view);
            this.view.setValue(), this.cmfg("panelGridAndFormGridFilterClear", {
                disableStoreLoad: e,
                type: "basic"
            })
        },
        onFieldFilterBasicTrigger1Click: function() {
            var e = Ext.String.trim(this.view.getValue());
            if (Ext.isString(e) && !Ext.isEmpty(e)) {
                var t = {};
                t[CMDBuild.core.constants.Proxy.CONFIGURATION] = {}, t[CMDBuild.core.constants.Proxy.CONFIGURATION][CMDBuild.core.constants.Proxy.QUERY] = e, this.cmfg("panelGridAndFormGridFilterApply", {
                    filter: Ext.create("CMDBuild.model.common.field.filter.basic.Filter", t),
                    type: "basic"
                })
            } else this.cmfg("onFieldFilterBasicReset")
        },
        onFieldFilterBasicTrigger2Click: function() {
            this.view.isDisabled() || this.cmfg("onFieldFilterBasicReset")
        }
    }), Ext.define("CMDBuild.view.common.field.filter.basic.Basic", {
        extend: "Ext.form.field.Trigger",
        delegate: void 0,
        grid: void 0,
        enableKeyEvents: !0,
        hideTrigger1: !1,
        hideTrigger2: !1,
        trigger1Cls: Ext.baseCSSPrefix + "form-search-trigger",
        trigger2Cls: Ext.baseCSSPrefix + "form-clear-trigger",
        validateOnBlur: !1,
        listeners: {
            specialkey: function(e, t, o) {
                t.getKey() == t.ENTER && this.delegate.cmfg("onFieldFilterBasicEnterKeyPress")
            }
        },
        onTrigger1Click: function() {
            this.delegate.cmfg("onFieldFilterBasicTrigger1Click")
        },
        onTrigger2Click: function() {
            this.delegate.cmfg("onFieldFilterBasicTrigger2Click")
        },
        reset: function(e) {
            this.delegate.cmfg("onFieldFilterBasicReset", e)
        }
    }), Ext.define("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.Advanced", {
        extend: "CMDBuild.controller.common.abstract.Base",
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["getView = workflowTreeFilterAdvancedViewGet", "onWorkflowTreeFilterAdvancedClearButtonClick", "onWorkflowTreeFilterAdvancedDisable", "onWorkflowTreeFilterAdvancedEnable", "onWorkflowTreeFilterAdvancedFilterSelect", "onWorkflowTreeFilterAdvancedManageToggleButtonClick", "workflowTreeFilterAdvancedLocalFilterAdd", "workflowTreeFilterAdvancedLocalFilterGet", "workflowTreeFilterAdvancedLocalFilterIsEmpty", "workflowTreeFilterAdvancedLocalFilterRemove", "workflowTreeFilterAdvancedManageToggleButtonLabelSet", "workflowTreeFilterAdvancedManageToggleStateReset"],
        controllerManager: void 0,
        localFilterCache: {},
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.AdvancedView", {
                delegate: this
            }), this.grid = this.cmfg("workflowTreeViewGet"), this.controllerManager = Ext.create("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.Manager", {
                parentDelegate: this
            })
        },
        onWorkflowTreeFilterAdvancedClearButtonClick: function(e) {
            if (e = !!Ext.isBoolean(e) && e, !Ext.isObject(this.grid) || Ext.Object.isEmpty(this.grid)) return _error("onWorkflowTreeFilterAdvancedClearButtonClick(): grid not found", this, this.grid);
            this.grid.getSelectionModel().hasSelection() && this.grid.getSelectionModel().deselectAll(), this.cmfg("workflowTreeFilterAdvancedManageToggleButtonLabelSet"), this.view.clearButton.disable(), e || this.cmfg("workflowTreeFilterClear", {
                type: "advanced"
            })
        },
        onWorkflowTreeFilterAdvancedDisable: function() {
            this.view.clearButton.disable(), this.view.manageToggleButton.disable()
        },
        onWorkflowTreeFilterAdvancedEnable: function() {
            this.view.clearButton.enable(), this.view.manageToggleButton.enable()
        },
        onWorkflowTreeFilterAdvancedFilterSelect: function(e) {
            if (!Ext.isObject(this.grid) || Ext.Object.isEmpty(this.grid)) return _error("onWorkflowTreeFilterAdvancedFilterSelect(): grid not found", this, this.grid);
            this.controllerManager.cmfg("workflowTreeFilterAdvancedManagerViewClose"), this.view.clearButton.enable(), Ext.isObject(e) && !Ext.Object.isEmpty(e) && "CMDBuild.model.management.workflow.panel.tree.filter.advanced.Filter" == Ext.getClassName(e) ? (e.resetRuntimeParametersValue(), this.cmfg("workflowTreeFilterAdvancedManageToggleButtonLabelSet", e.get(CMDBuild.core.constants.Proxy.DESCRIPTION)), this.cmfg("workflowTreeFilterApply", {
                filter: e,
                type: "advanced"
            })) : this.cmfg("onWorkflowTreeFilterAdvancedClearButtonClick")
        },
        onWorkflowTreeFilterAdvancedManageToggleButtonClick: function(e) {
            e ? this.controllerManager.cmfg("workflowTreeFilterAdvancedManagerViewShow") : this.controllerManager.cmfg("workflowTreeFilterAdvancedManagerViewClose")
        },
        workflowTreeFilterAdvancedManageToggleButtonLabelSet: function(e) {
            this.view.manageToggleButton.setText(Ext.isEmpty(e) ? CMDBuild.Translation.searchFilter : Ext.String.ellipsis(e, 35)), this.view.manageToggleButton.setTooltip(Ext.isEmpty(e) ? "" : e)
        },
        workflowTreeFilterAdvancedManageToggleStateReset: function() {
            this.view.manageToggleButton.toggle(!1)
        },
        workflowTreeFilterAdvancedLocalFilterAdd: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = e.get(CMDBuild.core.constants.Proxy.ID),
                    o = e.get(CMDBuild.core.constants.Proxy.TEMPORARY_ID);
                Ext.isEmpty(t) && Ext.isEmpty(o) ? (t = (new Date).valueOf(), e.set(CMDBuild.core.constants.Proxy.TEMPORARY_ID, t)) : Ext.isEmpty(t) && (t = o), this.localFilterCache[t] = e
            } else _error("workflowTreeFilterAdvancedLocalFilterAdd(): unmanaged filterModel parameter", this, e)
        },
        workflowTreeFilterAdvancedLocalFilterGet: function() {
            var e = Ext.Object.getValues(this.localFilterCache),
                t = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME);
            return Ext.isArray(e) && !Ext.isEmpty(e) && (e = Ext.Array.filter(e, function(e, o, i) {
                return e.get(CMDBuild.core.constants.Proxy.ENTRY_TYPE) == t
            }, this)), e
        },
        workflowTreeFilterAdvancedLocalFilterIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "localFilterCache", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        workflowTreeFilterAdvancedLocalFilterRemove: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = null;
                Ext.Object.each(this.localFilterCache, function(o, i, r) {
                    var n = e.getData(),
                        a = i.getData();
                    Ext.Object.equals(n, a) && (t = o)
                }, this), Ext.isEmpty(t) || delete this.localFilterCache[t]
            } else _error("workflowTreeFilterAdvancedLocalFilterRemove(): unmanaged filterModel parameter", this, e)
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.AdvancedView", {
        extend: "Ext.container.ButtonGroup",
        delegate: void 0,
        clearButton: void 0,
        manageToggleButton: void 0,
        border: !1,
        frame: !1,
        shadow: !1,
        initComponent: function() {
            Ext.apply(this, {
                items: [this.manageToggleButton = Ext.create("CMDBuild.core.buttons.iconized.filter.SearchSet", {
                    enableToggle: !0,
                    scope: this,
                    toggleHandler: function(e, t) {
                        this.delegate.cmfg("onWorkflowTreeFilterAdvancedManageToggleButtonClick", t)
                    }
                }), this.clearButton = Ext.create("CMDBuild.core.buttons.iconized.filter.SearchClear", {
                    disabled: !0,
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onWorkflowTreeFilterAdvancedClearButtonClick")
                    }
                })]
            }), this.callParent(arguments)
        },
        disable: function() {
            this.delegate.cmfg("onWorkflowTreeFilterAdvancedDisable")
        },
        enable: function() {
            this.delegate.cmfg("onWorkflowTreeFilterAdvancedEnable")
        }
    }), Ext.define("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.Manager", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.Manager"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onWorkflowTreeFilterAdvancedManagerAddButtonClick", "onWorkflowTreeFilterAdvancedManagerCloneButtonClick", "onWorkflowTreeFilterAdvancedManagerModifyButtonClick", "onWorkflowTreeFilterAdvancedManagerRemoveButtonClick", "onWorkflowTreeFilterAdvancedManagerSaveButtonClick", "onWorkflowTreeFilterAdvancedManagerViewShow", "workflowTreeFilterAdvancedManagerSave", "workflowTreeFilterAdvancedManagerSelectedFilterGet", "workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty", "workflowTreeFilterAdvancedManagerSelectedFilterSet", "workflowTreeFilterAdvancedManagerStoreIsEmpty", "workflowTreeFilterAdvancedManagerViewClose", "workflowTreeFilterAdvancedManagerViewShow"],
        controllerFilterEditor: void 0,
        controllerSaveDialog: void 0,
        grid: void 0,
        selectedFilter: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.manager.ManagerWindow", {
                delegate: this
            }), this.controllerFilterEditor = Ext.create("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.filterEditor.FilterEditor", {
                parentDelegate: this
            }), this.controllerSaveDialog = Ext.create("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.SaveDialog", {
                parentDelegate: this
            }), this.grid = this.view.grid
        },
        onWorkflowTreeFilterAdvancedManagerAddButtonClick: function() {
            var e = {};
            e[CMDBuild.core.constants.Proxy.ENTRY_TYPE] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME), e[CMDBuild.core.constants.Proxy.NAME] = CMDBuild.Translation.newSearchFilter, this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterSet", {
                value: e
            }), this.controllerFilterEditor.getView().show()
        },
        onWorkflowTreeFilterAdvancedManagerCloneButtonClick: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = e.getData();
                t[CMDBuild.core.constants.Proxy.ID] = null, t[CMDBuild.core.constants.Proxy.NAME] = CMDBuild.Translation.copyOf + " " + e.get(CMDBuild.core.constants.Proxy.NAME), this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterSet", {
                    value: t
                }), this.controllerFilterEditor.getView().show()
            } else _error("onWorkflowTreeFilterAdvancedManagerCloneButtonClick(): wrong filter parameter", this, e)
        },
        onWorkflowTreeFilterAdvancedManagerModifyButtonClick: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) ? (this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterSet", {
                value: e
            }), this.controllerFilterEditor.getView().show()) : _error("onWorkflowTreeFilterAdvancedManagerModifyButtonClick(): wrong filter parameter", this, e)
        },
        onWorkflowTreeFilterAdvancedManagerRemoveButtonClick: function(e) {
            Ext.MessageBox.confirm(CMDBuild.Translation.attention, CMDBuild.Translation.common.confirmpopup.areyousure, function(t, o, i) {
                "yes" == t && this.removeItem(e)
            }, this)
        },
        onWorkflowTreeFilterAdvancedManagerSaveButtonClick: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = e.getData();
                delete t[CMDBuild.core.constants.Proxy.DESCRIPTION], delete t[CMDBuild.core.constants.Proxy.NAME], this.cmfg("workflowTreeFilterAdvancedLocalFilterRemove", e), this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterSet", {
                    value: t
                }), this.cmfg("workflowTreeFilterAdvancedManagerSave")
            } else _error("onWorkflowTreeFilterAdvancedManagerSaveButtonClick(): wrong filter parameter", this, e)
        },
        onWorkflowTreeFilterAdvancedManagerViewShow: function() {
            this.grid.getSelectionModel().hasSelection() && this.grid.getSelectionModel().deselectAll();
            var e = this.cmfg("workflowTreeFilterAdvancedViewGet").getBox();
            Ext.isEmpty(e) || this.view.setPosition(e.x, e.y + e.height), Ext.getBody().on("click", this.onViewOutsideClick, this)
        },
        onViewOutsideClick: function(e, t, o) {
            var i = this.view.getEl();
            i.dom === t || i.contains(t) || (Ext.getBody().un("click", this.onViewOutsideClick, this), this.cmfg("workflowTreeFilterAdvancedManageToggleStateReset"), this.view.close())
        },
        removeItem: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e))
                if (this.cmfg("workflowTreeFilterAdvancedManagerViewClose"), Ext.isEmpty(e.get(CMDBuild.core.constants.Proxy.ID))) e.get(CMDBuild.core.constants.Proxy.ID) == this.cmfg("workflowTreeAppliedFilterGet", CMDBuild.core.constants.Proxy.ID) && this.cmfg("onWorkflowTreeFilterAdvancedClearButtonClick"), this.cmfg("workflowTreeFilterAdvancedLocalFilterRemove", e), this.cmfg("workflowTreeFilterAdvancedManageToggleButtonLabelSet"), this.cmfg("workflowTreeFilterAdvancedManagerViewShow");
                else {
                    var t = {};
                    t[CMDBuild.core.constants.Proxy.ID] = e.get(CMDBuild.core.constants.Proxy.ID), CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.Manager.remove({
                        params: t,
                        scope: this,
                        success: function(t, o, i) {
                            e.get(CMDBuild.core.constants.Proxy.ID) == this.cmfg("workflowTreeAppliedFilterGet", CMDBuild.core.constants.Proxy.ID) && this.cmfg("onWorkflowTreeFilterAdvancedClearButtonClick"), this.cmfg("workflowTreeFilterAdvancedManageToggleButtonLabelSet"), this.cmfg("workflowTreeFilterAdvancedManagerViewShow")
                        }
                    })
                } else _error("removeItem(): unmanaged filter parameter", this, e)
        },
        saveActionManage: function(e) {
            if (e = !!Ext.isBoolean(e) && e, this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty")) return _error("saveActionManage(): empty selected filter", this, this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet"));
            var t = this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet"),
                o = {};
            o[CMDBuild.core.constants.Proxy.CLASS_NAME] = t.get(CMDBuild.core.constants.Proxy.ENTRY_TYPE), o[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.encode(t.get(CMDBuild.core.constants.Proxy.CONFIGURATION)), o[CMDBuild.core.constants.Proxy.DESCRIPTION] = t.get(CMDBuild.core.constants.Proxy.DESCRIPTION), o[CMDBuild.core.constants.Proxy.NAME] = t.get(CMDBuild.core.constants.Proxy.NAME), Ext.isEmpty(t.get(CMDBuild.core.constants.Proxy.ID)) ? CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.Manager.create({
                params: o,
                scope: this,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.FILTER], Ext.isObject(i) && !Ext.isEmpty(i) ? (this.controllerSaveDialog.cmfg("onWorkflowTreeFilterAdvancedSaveDialogAbortButtonClick"), this.controllerFilterEditor.cmfg("onWorkflowTreeFilterAdvancedFilterEditorAbortButtonClick"), this.cmfg("workflowTreeFilterAdvancedManagerViewClose"), e ? (this.cmfg("onWorkflowTreeFilterAdvancedFilterSelect", Ext.create("CMDBuild.model.management.workflow.panel.tree.filter.advanced.Filter", i)), this.workflowTreeFilterAdvancedManagerSelectedFilterReset()) : this.cmfg("workflowTreeFilterAdvancedManagerViewShow")) : _error("saveActionManage(): unmanaged create response", this, i)
                }
            }) : (o[CMDBuild.core.constants.Proxy.ID] = t.get(CMDBuild.core.constants.Proxy.ID), CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.Manager.update({
                params: o,
                scope: this,
                success: function(t, i, r) {
                    (r = o)[CMDBuild.core.constants.Proxy.ENTRY_TYPE] = r[CMDBuild.core.constants.Proxy.CLASS_NAME], r[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.decode(r[CMDBuild.core.constants.Proxy.CONFIGURATION]), Ext.isObject(r) && !Ext.isEmpty(r) ? (this.controllerSaveDialog.cmfg("onWorkflowTreeFilterAdvancedSaveDialogAbortButtonClick"), this.controllerFilterEditor.cmfg("onWorkflowTreeFilterAdvancedFilterEditorAbortButtonClick"), this.cmfg("workflowTreeFilterAdvancedManagerViewClose"), e ? (this.cmfg("onWorkflowTreeFilterAdvancedFilterSelect", Ext.create("CMDBuild.model.management.workflow.panel.tree.filter.advanced.Filter", r)), this.workflowTreeFilterAdvancedManagerSelectedFilterReset()) : this.cmfg("workflowTreeFilterAdvancedManagerViewShow")) : _error("saveActionManage(): unmanaged update response", this, r)
                }
            }))
        },
        workflowTreeFilterAdvancedManagerSelectedFilterGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedFilter", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedFilter", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        workflowTreeFilterAdvancedManagerSelectedFilterReset: function() {
            this.propertyManageReset("selectedFilter")
        },
        workflowTreeFilterAdvancedManagerSelectedFilterSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.workflow.panel.tree.filter.advanced.Filter", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedFilter", this.propertyManageSet(e))
        },
        workflowTreeFilterAdvancedManagerSave: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).enableApply = !!Ext.isBoolean(e.enableApply) && e.enableApply, e.enableSaveDialog = !Ext.isBoolean(e.enableSaveDialog) || e.enableSaveDialog, !this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty")) return e.enableSaveDialog ? this.controllerSaveDialog.cmfg("workflowTreeFilterAdvancedSaveDialogShow", e.enableApply) : this.saveActionManage(e.enableApply);
            _error("workflowTreeFilterAdvancedManagerSave(): cannot save empty filter", this, this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet"))
        },
        workflowTreeFilterAdvancedManagerStoreIsEmpty: function() {
            return 0 == this.grid.getStore().count()
        },
        workflowTreeFilterAdvancedManagerViewClose: function() {
            this.view.close()
        },
        workflowTreeFilterAdvancedManagerViewShow: function() {
            var e = {};
            e[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME), this.grid.getStore().load({
                params: e,
                scope: this,
                callback: function(e, t, o) {
                    o && (this.cmfg("workflowTreeFilterAdvancedLocalFilterIsEmpty") || (this.grid.getStore().add(this.cmfg("workflowTreeFilterAdvancedLocalFilterGet")), this.grid.getStore().sort()), 0 == this.grid.getStore().count() ? this.cmfg("onWorkflowTreeFilterAdvancedManagerAddButtonClick") : this.view.show())
                }
            })
        }
    }), Ext.define("CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.Manager", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.model.management.workflow.panel.tree.filter.advanced.Filter", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        create: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.filter.group.create
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.FILTER, e, !0)
        },
        getStoreUser: function() {
            return CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.FILTER, {
                autoLoad: !1,
                model: "CMDBuild.model.management.workflow.panel.tree.filter.advanced.Filter",
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.filter.user.readAll,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.FILTERS,
                        idProperty: CMDBuild.core.constants.Proxy.ID
                    }
                },
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.DESCRIPTION,
                    direction: "ASC"
                }, {
                    property: CMDBuild.core.constants.Proxy.NAME,
                    direction: "ASC"
                }]
            })
        },
        update: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.filter.group.update
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.FILTER, e, !0)
        },
        remove: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.filter.group.remove
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.FILTER, e, !0)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.management.workflow.panel.tree.filter.advanced.Filter", {
        extend: "Ext.data.Model",
        isFilterAdvancedCompatible: !0,
        fields: [{
            name: CMDBuild.core.constants.Proxy.CONFIGURATION,
            type: "auto",
            defaultValue: {}
        }, {
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ENTRY_TYPE,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.TEMPORARY_ID,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.TEMPLATE,
            type: "boolean"
        }],
        get: function(e) {
            switch (e) {
                case CMDBuild.core.constants.Proxy.DESCRIPTION:
                    return this.callParent(arguments) || this.get(CMDBuild.core.constants.Proxy.NAME) || "";
                default:
                    return this.callParent(arguments)
            }
        },
        getEmptyRuntimeParameters: function() {
            var e = [];
            return this.findParameters(this.get(CMDBuild.core.constants.Proxy.CONFIGURATION)[CMDBuild.core.constants.Proxy.ATTRIBUTE], CMDBuild.core.constants.Proxy.RUNTIME, e, !0), e
        },
        findParameters: function(e, t, o, i) {
            if (i = !!Ext.isBoolean(i) && i, Ext.isObject(e) && !Ext.Object.isEmpty(e) && Ext.isString(t) && !Ext.isEmpty(t) && Ext.isArray(o))
                if (Ext.isObject(e.simple)) {
                    var r = e.simple;
                    if (r.parameterType == t) return i ? Ext.Object.isEmpty(r.value) ? o.push(r) : null : o.push(r)
                } else if (Ext.isArray(e.and) || Ext.isArray(e.or)) {
                var n = e.and || e.or;
                Ext.isArray(n) && !Ext.isEmpty(n) && Ext.Array.each(n, function(e, r, n) {
                    this.findParameters(e, t, o, i)
                }, this)
            }
        },
        resetRuntimeParametersValue: function() {
            var e = this.get(CMDBuild.core.constants.Proxy.CONFIGURATION),
                t = [];
            this.findParameters(e[CMDBuild.core.constants.Proxy.ATTRIBUTE], CMDBuild.core.constants.Proxy.RUNTIME, t), Ext.Array.each(t, function(e, t, o) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.VALUE] = [])
            }, this), this.set(CMDBuild.core.constants.Proxy.CONFIGURATION, e)
        },
        resolveCalculatedParameters: function() {
            var e = this.get(CMDBuild.core.constants.Proxy.CONFIGURATION),
                t = [];
            this.findParameters(e[CMDBuild.core.constants.Proxy.ATTRIBUTE] || {}, CMDBuild.core.constants.Proxy.CALCULATED, t), Ext.isArray(t) && !Ext.isEmpty(t) && (Ext.Array.each(t, function(e, t, o) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e = this.resolveCalculatedParameterValue(e))
            }, this), this.set(CMDBuild.core.constants.Proxy.CONFIGURATION, e))
        },
        resolveCalculatedParameterValue: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) switch (e.value[0]) {
                case "@MY_USER":
                    e.value[0] = String(CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.USER_ID));
                    break;
                case "@MY_GROUP":
                    e.value[0] = String(CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.DEFAULT_GROUP_ID))
            }
            return e
        },
        setRuntimeParameterValue: function(e) {
            if (!Ext.isObject(e) || Ext.Object.isEmpty(e)) return _error("setRuntimeParameterValue(): unmanaged parameter", this, e);
            var t = this.get(CMDBuild.core.constants.Proxy.CONFIGURATION),
                o = [];
            this.findParameters(t[CMDBuild.core.constants.Proxy.ATTRIBUTE], CMDBuild.core.constants.Proxy.RUNTIME, o, !0), Ext.Array.each(o, function(t, o, i) {
                if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) {
                    var r = e[t[CMDBuild.core.constants.Proxy.ATTRIBUTE]];
                    Ext.isEmpty(r) || (t[CMDBuild.core.constants.Proxy.VALUE] = [r])
                }
            }, this), this.set(CMDBuild.core.constants.Proxy.CONFIGURATION, t)
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.manager.ManagerWindow", {
        extend: "CMDBuild.core.window.AbstractCustomModal",
        delegate: void 0,
        dimensions: {
            height: 200,
            width: 350
        },
        dimensionsMode: "absolute",
        grid: void 0,
        border: !0,
        closeAction: "hide",
        draggable: !1,
        frame: !0,
        header: !1,
        modal: !1,
        resizable: !1,
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "top",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP,
                    items: [Ext.create("CMDBuild.core.buttons.iconized.add.Add", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onWorkflowTreeFilterAdvancedManagerAddButtonClick")
                        }
                    })]
                })],
                items: [this.grid = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.manager.GridPanel", {
                    delegate: this.delegate
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            show: function(e, t) {
                this.delegate.cmfg("onWorkflowTreeFilterAdvancedManagerViewShow")
            }
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.manager.GridPanel", {
        extend: "Ext.grid.Panel",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.Manager"],
        delegate: void 0,
        border: !1,
        frame: !1,
        hideHeaders: !0,
        menuDisabled: !0,
        initComponent: function() {
            Ext.apply(this, {
                columns: [{
                    dataIndex: CMDBuild.core.constants.Proxy.DESCRIPTION,
                    flex: 1,
                    renderer: function(e, t, o, i, r, n, a) {
                        return o.get(CMDBuild.core.constants.Proxy.DESCRIPTION)
                    }
                }, Ext.create("Ext.grid.column.Action", {
                    align: "center",
                    width: 100,
                    fixed: !0,
                    items: [Ext.create("CMDBuild.core.buttons.iconized.Save", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.save,
                        scope: this,
                        isDisabled: function(e, t, o, i, r) {
                            return !Ext.isEmpty(r.get(CMDBuild.core.constants.Proxy.ID)) || r.get(CMDBuild.core.constants.Proxy.TEMPLATE)
                        },
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onWorkflowTreeFilterAdvancedManagerSaveButtonClick", n)
                        }
                    }), Ext.create("CMDBuild.core.buttons.iconized.Modify", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.modify,
                        scope: this,
                        isDisabled: function(e, t, o, i, r) {
                            return r.get(CMDBuild.core.constants.Proxy.TEMPLATE)
                        },
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onWorkflowTreeFilterAdvancedManagerModifyButtonClick", n)
                        }
                    }), Ext.create("CMDBuild.core.buttons.iconized.Clone", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.clone,
                        scope: this,
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onWorkflowTreeFilterAdvancedManagerCloneButtonClick", n)
                        }
                    }), Ext.create("CMDBuild.core.buttons.iconized.Remove", {
                        withSpacer: !0,
                        tooltip: CMDBuild.Translation.remove,
                        scope: this,
                        isDisabled: function(e, t, o, i, r) {
                            return r.get(CMDBuild.core.constants.Proxy.TEMPLATE)
                        },
                        handler: function(e, t, o, i, r, n, a) {
                            this.delegate.cmfg("onWorkflowTreeFilterAdvancedManagerRemoveButtonClick", n)
                        }
                    })]
                })],
                store: CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.Manager.getStoreUser()
            }), this.callParent(arguments)
        },
        listeners: {
            beforecellclick: function(e, t, o, i, r, n, a, s) {
                return 0 == o
            },
            select: function(e, t, o, i) {
                this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterSelect", t)
            }
        }
    }), Ext.define("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.filterEditor.FilterEditor", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onWorkflowTreeFilterAdvancedFilterEditorAbortButtonClick", "onWorkflowTreeFilterAdvancedFilterEditorApplyButtonClick", "onWorkflowTreeFilterAdvancedFilterEditorSaveAndApplyButtonClick", "onWorkflowTreeFilterAdvancedFilterEditorViewHide", "onWorkflowTreeFilterAdvancedFilterEditorViewShow"],
        controllerAttributes: void 0,
        controllerRelations: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.FilterEditorWindow", {
                delegate: this
            }), this.controllerAttributes = Ext.create("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.filterEditor.Attributes", {
                parentDelegate: this
            }), this.controllerRelations = Ext.create("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.filterEditor.relations.Relations", {
                parentDelegate: this
            }), this.view.wrapper.removeAll(), this.view.wrapper.add([this.controllerAttributes.getView(), this.controllerRelations.getView()]), this.manageActiveTabSet(!0)
        },
        manageActiveTabSet: function(e) {
            return this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty", [CMDBuild.core.constants.Proxy.CONFIGURATION, CMDBuild.core.constants.Proxy.RELATION]) ? (this.view.wrapper.setActiveTab(0), e ? null : this.view.wrapper.getActiveTab().fireEvent("show")) : this.view.wrapper.setActiveTab(1)
        },
        onWorkflowTreeFilterAdvancedFilterEditorAbortButtonClick: function() {
            this.view.close()
        },
        onWorkflowTreeFilterAdvancedFilterEditorApplyButtonClick: function() {
            var e = this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet").getData();
            e[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.Object.merge(this.controllerAttributes.cmfg("workflowTreeFilterAdvancedFilterEditorAttributesDataGet"), this.controllerRelations.cmfg("workflowTreeFilterAdvancedFilterEditorRelationsDataGet")), Ext.isEmpty(e[CMDBuild.core.constants.Proxy.ID]) && (e[CMDBuild.core.constants.Proxy.DESCRIPTION] = CMDBuild.Translation.newSearchFilter, e[CMDBuild.core.constants.Proxy.NAME] = CMDBuild.Translation.newSearchFilter), this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterSet", {
                value: e
            }), this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty", CMDBuild.core.constants.Proxy.ID) && this.cmfg("workflowTreeFilterAdvancedLocalFilterAdd", this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet")), this.cmfg("onWorkflowTreeFilterAdvancedFilterEditorAbortButtonClick"), this.cmfg("workflowTreeFilterAdvancedManagerViewClose"), this.cmfg("onWorkflowTreeFilterAdvancedFilterSelect", this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet"))
        },
        onWorkflowTreeFilterAdvancedFilterEditorSaveAndApplyButtonClick: function() {
            var e = this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet").getData();
            e[CMDBuild.core.constants.Proxy.CONFIGURATION] = Ext.Object.merge(this.controllerAttributes.cmfg("workflowTreeFilterAdvancedFilterEditorAttributesDataGet"), this.controllerRelations.cmfg("workflowTreeFilterAdvancedFilterEditorRelationsDataGet")), this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterSet", {
                value: e
            }), this.cmfg("workflowTreeFilterAdvancedManagerSave", {
                enableApply: !0
            })
        },
        onWorkflowTreeFilterAdvancedFilterEditorViewHide: function() {
            this.cmfg("workflowTreeFilterAdvancedManagerStoreIsEmpty") && this.cmfg("workflowTreeFilterAdvancedManageToggleStateReset")
        },
        onWorkflowTreeFilterAdvancedFilterEditorViewShow: function() {
            var e = Ext.create("CMDBuild.core.RequestBarrier", {
                id: "workflowTreeFilterAdvancedFilterEditorBarrier",
                scope: this,
                callback: function() {
                    this.setViewTitle([this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet", CMDBuild.core.constants.Proxy.NAME), this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.DESCRIPTION)]), this.manageActiveTabSet()
                }
            });
            this.controllerAttributes.cmfg("onWorkflowTreeFilterAdvancedFilterEditorAttributesInit", {
                callback: e.getCallback("workflowTreeFilterAdvancedFilterEditorBarrier")
            }), this.controllerRelations.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsInit", {
                callback: e.getCallback("workflowTreeFilterAdvancedFilterEditorBarrier")
            }), e.finalize("workflowTreeFilterAdvancedFilterEditorBarrier", !0)
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.FilterEditorWindow", {
        extend: "CMDBuild.core.window.AbstractCustomModal",
        delegate: void 0,
        baseTitle: CMDBuild.Translation.searchFilter,
        dimensionsMode: "percentage",
        wrapper: void 0,
        border: !0,
        closeAction: "hide",
        frame: !0,
        layout: "fit",
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    },
                    items: [Ext.create("CMDBuild.core.buttons.text.Apply", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorApplyButtonClick")
                        }
                    }), Ext.create("CMDBuild.core.buttons.text.SaveAndApply", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorSaveAndApplyButtonClick")
                        }
                    }), Ext.create("CMDBuild.core.buttons.text.Abort", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorAbortButtonClick")
                        }
                    })]
                })],
                items: [this.wrapper = Ext.create("Ext.tab.Panel", {
                    border: !1,
                    frame: !1
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            hide: function(e, t) {
                this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorViewHide")
            },
            show: function(e, t) {
                this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorViewShow")
            }
        }
    }), Ext.define("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.filterEditor.Attributes", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils", "CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.filterEditor.Attributes"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["filterConditionsGroupsRemove = onWorkflowTreeFilterAdvancedFilterEditorAttributesFieldSetEmptied", "onWorkflowTreeFilterAdvancedFilterEditorAttributesInit", "workflowTreeFilterAdvancedFilterEditorAttributesDataGet"],
        filterConditions: {},
        form: void 0,
        selectedEntityAttributes: {
            objectsArray: [],
            sortedByName: {}
        },
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.attributes.AttributesView", {
                delegate: this
            }), this.form = this.view.form
        },
        attributeButtonBuild: function() {
            var e = [],
                t = CMDBuild.core.Utils.groupAttributesObjects(this.selectedEntityAttributesGet());
            this.attributeButtonReset(), Ext.Object.each(t, function(t, o, i) {
                var r = [];
                Ext.Array.each(o, function(e, t, o) {
                    r.push({
                        text: e[CMDBuild.core.constants.Proxy.DESCRIPTION],
                        attribute: e,
                        scope: this,
                        handler: function(e, t) {
                            this.onWorkflowTreeFilterEditorAttributesAddButtonSelect(e[CMDBuild.core.constants.Proxy.ATTRIBUTE])
                        }
                    })
                }, this), e.push({
                    text: t,
                    menu: r
                })
            }, this), e = 1 == Ext.Object.getKeys(t).length ? e[0].menu : e, Ext.isEmpty(e) || (this.form.addAttributeButton.menu.add(e), this.form.addAttributeButton.enable())
        },
        attributeButtonReset: function() {
            this.form.addAttributeButton.menu.removeAll()
        },
        decodeFilterConfigurationObject: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = e.or || e.and || e;
                if (Ext.isArray(t)) Ext.Array.forEach(t, function(e, t, o) {
                    return this.decodeFilterConfigurationObject(e)
                }, this);
                else if (Ext.isObject(t) && !Ext.isEmpty(t[CMDBuild.core.constants.Proxy.SIMPLE]) && !Ext.isEmpty(t[CMDBuild.core.constants.Proxy.SIMPLE][CMDBuild.core.constants.Proxy.ATTRIBUTE])) {
                    var o = this.selectedEntityAttributesFindByName(t[CMDBuild.core.constants.Proxy.SIMPLE][CMDBuild.core.constants.Proxy.ATTRIBUTE]);
                    if (!Ext.isEmpty(o)) return this.filterConditionsConditionAdd(o, t[CMDBuild.core.constants.Proxy.SIMPLE]);
                    _error("decodeFilterConfigurationObject(): empty attribute name", this, o)
                }
            }
        },
        filterConditionsConditionAdd: function(e, t) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.filterConditionsGroupAdd(e), !this.filterConditionsIsGroupEmpty(e[CMDBuild.core.constants.Proxy.NAME]))) {
                var o = Ext.create("CMDBuild.Management.FieldManager.getFieldSetForFilter", e);
                this.filterConditionsGroupGet(e[CMDBuild.core.constants.Proxy.NAME]).addCondition(o), o.setData(t), this.view.doLayout()
            }
        },
        filterConditionsGroupAdd: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e) && this.filterConditionsIsGroupEmpty(e[CMDBuild.core.constants.Proxy.NAME])) {
                var t = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.attributes.FieldSet", {
                    delegate: this,
                    attributeName: e[CMDBuild.core.constants.Proxy.NAME],
                    title: e[CMDBuild.core.constants.Proxy.DESCRIPTION]
                });
                this.filterConditions[e[CMDBuild.core.constants.Proxy.NAME]] = t, this.form.add(t)
            }
        },
        filterConditionsGroupGet: function(e) {
            return Ext.isEmpty(e) ? this.filterConditions : this.filterConditionsIsGroupEmpty(e) ? null : this.filterConditions[e]
        },
        filterConditionsIsEmpty: function(e) {
            return Ext.Object.isEmpty(this.filterConditions)
        },
        filterConditionsIsGroupEmpty: function(e) {
            return !Ext.isEmpty(e) && Ext.isEmpty(this.filterConditions[e])
        },
        filterConditionsGroupsRemove: function(e) {
            this.filterConditionsIsGroupEmpty(e) || (this.form.remove(this.filterConditionsGroupGet(e)), delete this.filterConditions[e])
        },
        filterConditionsGroupsReset: function() {
            this.filterConditions = {}, this.form.removeAll()
        },
        onWorkflowTreeFilterEditorAttributesAddButtonSelect: function(e) {
            this.filterConditionsConditionAdd(e), this.form.doLayout()
        },
        onWorkflowTreeFilterAdvancedFilterEditorAttributesInit: function(e) {
            if (e = Ext.isObject(e) ? e : {}, this.cmfg("workflowSelectedWorkflowIsEmpty")) return _error("onWorkflowTreeFilterAdvancedFilterEditorAttributesInit(): empty selected entryType", this, this.cmfg("workflowSelectedWorkflowGet"));
            var t = {};
            t[CMDBuild.core.constants.Proxy.ACTIVE] = !0, t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME), CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.filterEditor.Attributes.read({
                params: t,
                loadMask: this.view,
                scope: this,
                callback: e.callback,
                success: function(e, t, o) {
                    o = o[CMDBuild.core.constants.Proxy.ATTRIBUTES], this.attributeButtonReset(), Ext.isArray(o) && !Ext.isEmpty(o) ? (this.selectedEntityAttributesSet(o), this.attributeButtonBuild(), this.viewBuild()) : _error("onWorkflowTreeFilterAdvancedFilterEditorAttributesInit(): unmanaged response", this, o)
                }
            })
        },
        selectedEntityAttributesFindByName: function(e) {
            return Ext.isString(e) && !Ext.isEmpty(e) ? this.selectedEntityAttributes.sortedByName[e] : null
        },
        selectedEntityAttributesGet: function() {
            return this.selectedEntityAttributes.objectsArray
        },
        selectedEntityAttributesSet: function(e) {
            this.selectedEntityAttributes = {
                objectsArray: [],
                sortedByName: {}
            }, !Ext.isEmpty(e) && Ext.isArray(e) && (this.selectedEntityAttributes.objectsArray = e, Ext.Array.each(e, function(e, t, o) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.selectedEntityAttributes.sortedByName[e[CMDBuild.core.constants.Proxy.NAME]] = e)
            }, this))
        },
        viewBuild: function() {
            this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty") ? _error("viewBuild(): empty selected filter", this, this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet")) : (this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet", CMDBuild.core.constants.Proxy.CONFIGURATION), this.filterConditionsGroupsReset(), this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty", CMDBuild.core.constants.Proxy.CONFIGURATION) || this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty", [CMDBuild.core.constants.Proxy.CONFIGURATION, CMDBuild.core.constants.Proxy.ATTRIBUTE]) || this.decodeFilterConfigurationObject(this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet", [CMDBuild.core.constants.Proxy.CONFIGURATION, CMDBuild.core.constants.Proxy.ATTRIBUTE])))
        },
        workflowTreeFilterAdvancedFilterEditorAttributesDataGet: function() {
            var e = {};
            if (!this.filterConditionsIsEmpty()) {
                var t = [],
                    o = {};
                Ext.Object.each(this.filterConditionsGroupGet(), function(e, o, i) {
                    !Ext.isEmpty(o) && Ext.isFunction(o.getData) && t.push(o.getData())
                }, this), 1 == t.length ? o = t[0] : t.length > 1 && (o[CMDBuild.core.constants.Proxy.AND] = t), e[CMDBuild.core.constants.Proxy.ATTRIBUTE] = o
            }
            return e
        }
    }), Ext.define("CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.filterEditor.Attributes", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        read: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.attribute.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTRIBUTE, e)
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.attributes.AttributesView", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        form: void 0,
        border: !1,
        frame: !1,
        layout: "fit",
        title: CMDBuild.Translation.attributes,
        initComponent: function() {
            Ext.apply(this, {
                items: [this.form = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.attributes.FormPanel", {
                    delegate: this.delegate
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.attributes.FormPanel", {
        extend: "Ext.form.Panel",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        addAttributeButton: void 0,
        bodyCls: "cmdb-blue-panel",
        border: !1,
        frame: !1,
        overflowY: "auto",
        layout: {
            type: "vbox",
            align: "stretch"
        },
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "top",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP,
                    items: [this.addAttributeButton = Ext.create("CMDBuild.core.buttons.iconized.split.add.Add", {
                        text: CMDBuild.Translation.chooseAnAttribute,
                        disabled: !0
                    })]
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.filterEditor.relations.Relations", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onWorkflowTreeFilterAdvancedFilterEditorRelationsCheckchange", "onWorkflowTreeFilterAdvancedFilterEditorRelationsDomainSelect", "onWorkflowTreeFilterAdvancedFilterEditorRelationsInit", "workflowTreeFilterAdvancedFilterEditorRelationsDataGet", "workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainGet", "workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainIsEmpty", "workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainSet", "workflowTreeFilterAdvancedFilterEditorRelationsSelectionManage"],
        controllerGridDomain: void 0,
        controllerGridCard: void 0,
        selectedDomain: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.relations.RelationsView", {
                delegate: this
            }), this.controllerGridCard = Ext.create("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.filterEditor.relations.GridCard", {
                parentDelegate: this
            }), this.controllerGridDomain = Ext.create("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.filterEditor.relations.GridDomain", {
                parentDelegate: this
            }), this.view.add([this.controllerGridCard.getView(), this.controllerGridDomain.getView()])
        },
        decodeFilterConfigurationObject: function(e) {
            Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.each(e, function(e, t, o) {
                if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                    var i = null,
                        r = this.controllerGridDomain.getView().getStore().findBy(function(t) {
                            return t.get([CMDBuild.core.constants.Proxy.DOMAIN, CMDBuild.core.constants.Proxy.NAME]) == e[CMDBuild.core.constants.Proxy.DOMAIN] && t.get(CMDBuild.core.constants.Proxy.DIRECTION) == e[CMDBuild.core.constants.Proxy.DIRECTION]
                        });
                    r >= 0 && (i = this.controllerGridDomain.getView().getStore().getAt(r)), Ext.isEmpty(i) || (i.setType(e[CMDBuild.core.constants.Proxy.TYPE]), Ext.isArray(e[CMDBuild.core.constants.Proxy.CARDS]) && !Ext.isEmpty(e[CMDBuild.core.constants.Proxy.CARDS]) && i.set(CMDBuild.core.constants.Proxy.CHECKED_CARDS, e[CMDBuild.core.constants.Proxy.CARDS]))
                }
            }, this)
        },
        onWorkflowTreeFilterAdvancedFilterEditorRelationsCheckchange: function(e) {
            this.controllerGridDomain.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridDomainCheckchange", e), this.controllerGridCard.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardCheckchange")
        },
        onWorkflowTreeFilterAdvancedFilterEditorRelationsDomainSelect: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.cmfg("workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainSet", {
                value: e
            }), this.controllerGridCard.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardDomainSelect"))
        },
        onWorkflowTreeFilterAdvancedFilterEditorRelationsInit: function(e) {
            if (e = Ext.isObject(e) ? e : {}, this.cmfg("workflowSelectedWorkflowIsEmpty")) return _error("onWorkflowTreeFilterAdvancedFilterEditorRelationsInit(): empty selected entryType", this, this.cmfg("workflowSelectedWorkflowGet"));
            this.workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainReset(), this.controllerGridCard.getView().fireEvent("show"), this.controllerGridDomain.getView().fireEvent("show"), !Ext.isEmpty(e.callback) && Ext.isFunction(e.callback) && Ext.callback(e.callback, this)
        },
        workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedDomain", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedDomain", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainReset: function() {
            this.propertyManageReset("selectedDomain")
        },
        workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.DomainGrid", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedDomain", this.propertyManageSet(e))
        },
        workflowTreeFilterAdvancedFilterEditorRelationsSelectionManage: function() {
            if (this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty")) return _error("workflowTreeFilterAdvancedFilterEditorRelationsSelectionManage(): selected filter is empty", this, this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet"));
            this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty", CMDBuild.core.constants.Proxy.CONFIGURATION) || this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty", [CMDBuild.core.constants.Proxy.CONFIGURATION, CMDBuild.core.constants.Proxy.RELATION]) || this.decodeFilterConfigurationObject(this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet", [CMDBuild.core.constants.Proxy.CONFIGURATION, CMDBuild.core.constants.Proxy.RELATION]))
        },
        workflowTreeFilterAdvancedFilterEditorRelationsDataGet: function() {
            var e = {};
            if (this.controllerGridDomain.getView().getSelectionModel().hasSelection()) {
                var t = [];
                this.controllerGridDomain.getView().getStore().each(function(e) {
                    var o = e.getType();
                    if (!Ext.isEmpty(o)) {
                        var i = {};
                        if (i[CMDBuild.core.constants.Proxy.DESTINATION] = e.get([CMDBuild.core.constants.Proxy.DESTINATION, CMDBuild.core.constants.Proxy.NAME]), i[CMDBuild.core.constants.Proxy.DIRECTION] = e.get(CMDBuild.core.constants.Proxy.DIRECTION), i[CMDBuild.core.constants.Proxy.DOMAIN] = e.get([CMDBuild.core.constants.Proxy.DOMAIN, CMDBuild.core.constants.Proxy.NAME]), i[CMDBuild.core.constants.Proxy.SOURCE] = e.get([CMDBuild.core.constants.Proxy.SOURCE, CMDBuild.core.constants.Proxy.NAME]), i[CMDBuild.core.constants.Proxy.TYPE] = o, "oneof" == o && this.controllerGridCard.getView().getSelectionModel().hasSelection()) {
                            var r = [];
                            Ext.Array.each(this.controllerGridCard.getView().getSelectionModel().getSelection(), function(e, t, o) {
                                if (!Ext.isEmpty(e)) {
                                    var i = {};
                                    i[CMDBuild.core.constants.Proxy.CLASS_NAME] = e.get("IdClass_value"), i[CMDBuild.core.constants.Proxy.ID] = e.get("Id"), r.push(i)
                                }
                            }, this), i[CMDBuild.core.constants.Proxy.CARDS] = r
                        }
                        t.push(i)
                    }
                }, this), e[CMDBuild.core.constants.Proxy.RELATION] = t
            }
            return e
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.relations.RelationsView", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        border: !1,
        frame: !1,
        layout: "border",
        title: CMDBuild.Translation.relations
    }), Ext.define("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.filterEditor.relations.GridCard", {
        extend: "CMDBuild.controller.management.workflow.panel.tree.filter.advanced.filterEditor.relations.CMCardGridController",
        mixins: {
            base: "CMDBuild.controller.common.abstract.Base",
            cardGridDelegate: "CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.relations.CardGridPanelDelegate"
        },
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardCheckchange", "onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardDomainSelect", "onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardLoad", "onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardSelectionChange", "onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardViewShow"],
        view: void 0,
        constructor: function(e) {
            this.mixins.base.constructor.call(this, arguments), Ext.apply(this, e), this.view = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.relations.CardGridPanel", {
                delegate: this
            }), this.callParent([this.view, this.parentDelegate]), this.view.addDelegate(this)
        },
        onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardCheckchange: function() {
            return this.cmfg("workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainIsEmpty") ? this.view.setDisabled(!0) : this.view.setDisabled(!this.cmfg("workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainGet", "oneof"))
        },
        onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardDomainSelect: function() {
            this.view.getSelectionModel().clearSelections(), this.view.updateStoreForClassId(this.cmfg("workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainGet", [CMDBuild.core.constants.Proxy.DESTINATION, CMDBuild.core.constants.Proxy.ID])), this.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardCheckchange")
        },
        onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardLoad: function() {
            if (!this.cmfg("workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainIsEmpty")) {
                var e = this.cmfg("workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainGet", CMDBuild.core.constants.Proxy.CHECKED_CARDS);
                Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.each(e, function(e, t, o) {
                    this.view.getSelectionModel().select(this.view.getStore().findBy(function(t) {
                        return e[CMDBuild.core.constants.Proxy.CLASS_NAME] == t.get("IdClass_value") && e[CMDBuild.core.constants.Proxy.ID] == t.get("Id")
                    }), !0)
                }, this)
            }
        },
        onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardSelectionChange: function() {
            var e = [];
            this.view.getSelectionModel().hasSelection() && Ext.Array.each(this.view.getSelectionModel().getSelection(), function(t, o, i) {
                if (Ext.isObject(t) && !Ext.isEmpty(t)) {
                    var r = {};
                    r[CMDBuild.core.constants.Proxy.CLASS_NAME] = t.get("IdClass_value"), r[CMDBuild.core.constants.Proxy.ID] = t.get("Id"), e.push(r)
                }
            }, this), this.cmfg("workflowTreeFilterAdvancedFilterEditorRelationsSelectedDomainSet", {
                propertyName: CMDBuild.core.constants.Proxy.CHECKED_CARDS,
                value: e
            })
        },
        onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardViewShow: function() {
            this.view.getStore().removeAll(), this.view.getSelectionModel().clearSelections(), this.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardCheckchange")
        },
        onCMCardGridDeselect: function(e, t) {
            this.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardSelectionChange")
        },
        onCMCardGridSelect: function(e, t) {
            this.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardSelectionChange")
        },
        onCardSelected: Ext.emptyFn,
        onCMCardGridLoad: function(e) {
            this.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardLoad")
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.relations.CardGridPanelDelegate", {
        onCMCardGridSelect: function(e, t) {},
        onCMCardGridDeselect: function(e, t) {},
        onCMCardGridBeforeLoad: function(e) {},
        onCMCardGridLoad: function(e) {},
        onCMCardGridColumnsReconfigured: function(e) {},
        onCMCardGridIconRowClick: function(e, t, o) {}
    }),
    function() {
        function e(e, t, o, i, r, n) {
            this.callDelegates("onCMCardGridIconRowClick", [e, r.target.className, t])
        }
        Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.relations.CMCardGridPagingBar", {
            extend: "Ext.toolbar.Paging",
            uses: ["CMDBuild.proxy.index.Json"],
            grid: void 0,
            doRefresh: function(e) {
                if (this.grid) {
                    var t = this.grid.getSelectionModel();
                    t && t.deselectAll()
                }
                return this.callOverridden(arguments)
            }
        }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.relations.CardGridPanel", {
            extend: "Ext.grid.Panel",
            uses: ["CMDBuild.proxy.index.Json", "CMDBuild.core.constants.Global"],
            mixins: {
                delegable: "CMDBuild.core.CMDelegable"
            },
            delegate: void 0,
            columns: [],
            extraParams: void 0,
            cmPaginate: !0,
            cmBasicFilter: !0,
            cmAddGraphColumn: !0,
            cmAddPrintButton: !0,
            cls: "cmdb-border-top",
            disabled: !0,
            multiSelect: !0,
            region: "center",
            selType: "checkboxmodel",
            constructor: function(e) {
                this.mixins.delegable.constructor.call(this, "CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.relations.CardGridPanelDelegate"), this.callParent(arguments)
            },
            initComponent: function() {
                this.loadMask = !1, this.store = this.getStoreForFields([]), this.cmPaginate && function(e) {
                    var t = [];
                    e.cmBasicFilter && (e.gridSearchField = new CMDBuild.field.GridSearchField({
                        grid: e
                    }), t.push(e.gridSearchField));
                    e.cmAddPrintButton && (e.printGridMenu = Ext.create("CMDBuild.core.buttons.iconized.split.Print", {
                        formatList: [CMDBuild.core.constants.Proxy.PDF, CMDBuild.core.constants.Proxy.CSV],
                        mode: "legacy",
                        disabled: !0
                    }), t.push(e.printGridMenu));
                    e.pagingBar = new CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.relations.CMCardGridPagingBar({
                        grid: e,
                        store: e.store,
                        displayInfo: !0,
                        displayMsg: "{0} - {1} " + CMDBuild.Translation.of + " {2}",
                        emptyMsg: CMDBuild.Translation.noTopicsToDisplay,
                        items: t
                    }), e.bbar = e.pagingBar
                }(this), this.viewConfig = {
                    stripeRows: !0,
                    autoScroll: !1,
                    overflowX: "hidden",
                    overflowY: "auto"
                }, this.layout = {
                    type: "fit",
                    reserveScrollbar: !0
                }, this.callParent(arguments), this.mon(this, "beforeitemclick", e, this), this.mon(this, "select", function(e, t) {
                    this.callDelegates("onCMCardGridSelect", [e, t])
                }, this), this.mon(this, "deselect", function(e, t) {
                    this.callDelegates("onCMCardGridDeselect", [e, t])
                }, this), this.mon(this, "show", function(e, t) {
                    this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridCardViewShow")
                }, this), this.on("columnhide", function(e, t, o) {
                    this.getStore().reload()
                }, this), this.on("columnshow", function(e, t, o) {
                    this.getStore().reload()
                }, this)
            },
            updateStoreForClassId: function(e, t) {
                var o = this;
                this.loadAttributes(e, function(i) {
                    function r(e) {
                        t && t.cb ? t.cb.call(t.scope || e) : e.store.loadPage(1)
                    }
                    o.currentClassId == e ? r(o) : (o.currentClassId = e, o.gridSearchField && o.gridSearchField.setValue(""), o.printGridMenu && o.printGridMenu.setDisabled(!e), o.setColumnsForClass(i), o.setGridSorting(i), r(o))
                })
            },
            loadAttributes: function(e, t) {
                _CMCache.getAttributeList(e, t)
            },
            loadPage: function(e, t) {
                t = t || {}, scope = t.scope || this, cb = t.cb || function(e) {
                    e[2] || CMDBuild.core.Message.error(null, {
                        text: CMDBuild.Translation.errors.anErrorHasOccurred
                    })
                }, this.mon(this, "load", cb, scope, {
                    single: !0
                }), this.getStore().loadPage(Math.floor(e))
            },
            reload: function(e) {
                e = Ext.isBoolean(e) && e, this.getStore().load({
                    scope: this,
                    callback: function(t, o, i) {
                        if (i && (o.start > 0 && Ext.isEmpty(t) && this.loadPage(1), e))
                            if (this.getSelectionModel().hasSelection()) {
                                var r = this.getStore().findRecord("Id", this.getSelectionModel().getSelection()[0].get("Id"));
                                Ext.isEmpty(r) || this.getSelectionModel().select(r)
                            } else this.getSelectionModel().select(0)
                    }
                })
            },
            getVisibleColumns: function() {
                for (var e = this.columns, t = [], o = 0, i = e.length; o < i; o++) {
                    var r = e[o];
                    if (!r.hidden && r.dataIndex && "Id" != r.dataIndex) {
                        var n = r.dataIndex;
                        if (n) {
                            var a = n.lastIndexOf("_value");
                            a >= 0 && (n = n.slice(0, a)), t.push(n)
                        }
                    }
                }
                return t
            },
            setColumnsForClass: function(e) {
                var t = this.buildColumnsForAttributes(e),
                    o = this.getStoreForFields(t.fields);
                this.suspendLayouts(), this.reconfigure(o, t.headers), this.resumeLayouts(!0), this.pagingBar && this.pagingBar.bindStore(o), this.callDelegates("onCMCardGridColumnsReconfigured", this)
            },
            buildColumnsForAttributes: function(e) {
                this.classAttributes = e;
                var t = [],
                    o = [];
                _CMUtils.isSuperclass(this.currentClassId) && t.push(this.buildClassColumn());
                for (var i = 0; i < e.length; i++) {
                    var r = e[i],
                        n = CMDBuild.Management.FieldManager.getHeaderForAttr(r);
                    n && "IdClass_value" != n.dataIndex ? (this.addRendererToHeader(n), t.push(n), o.push(n.dataIndex)) : "Description" == r.name && o.push("Description")
                }
                return t = t.concat(this.buildExtraColumns()), this.cmAddGraphColumn && CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED) && function(e) {
                    var t = _CMCache.getClassById(this.currentClassId);
                    !Ext.isEmpty(t) && t.get("tableType") != CMDBuild.core.constants.Global.getTableTypeSimpleTable() && Ext.isArray(e) && e.push(Ext.create("Ext.grid.column.Action", {
                        align: "center",
                        width: 30,
                        sortable: !1,
                        hideable: !1,
                        menuDisabled: !0,
                        fixed: !0,
                        items: [Ext.create("CMDBuild.core.buttons.iconized.Graph", {
                            withSpacer: !0,
                            tooltip: CMDBuild.Translation.openRelationGraph,
                            scope: this,
                            handler: function(e, t, o, i, r, n, a) {
                                Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.graph.Window", {
                                    parentDelegate: this,
                                    classId: n.get("IdClass"),
                                    cardId: n.get("id")
                                })
                            }
                        })]
                    }))
                }.call(this, t), {
                    headers: t,
                    fields: o
                }
            },
            setGridSorting: function(e) {
                if (this.store.sorters) {
                    this.store.sorters.clear();
                    for (var t = [], o = 0, i = e.length; o < i; ++o) {
                        var r = e[o],
                            n = {},
                            a = r.classOrderSign * r.absoluteClassOrder;
                        0 != a && (n.property = r.name, a > 0 ? n.direction = "ASC" : (n.direction = "DESC", a = -a), t[a] = n)
                    }
                    for (o = 0, i = t.length; o < i; ++o) {
                        (n = t[o]) && this.store.sorters.add(n)
                    }
                }
            },
            addRendererToHeader: function(e) {
                e.renderer = function(t, o, i, r, n, a, s) {
                    return void 0 === (t = t || i.get(e.dataIndex)) || null == t ? "" : ("object" == typeof t ? t = t.description : "boolean" == typeof t ? t = t ? Ext.MessageBox.buttonText.yes : Ext.MessageBox.buttonText.no : "string" == typeof t && (t = Ext.util.Format.stripTags(t)), t)
                }
            },
            getStoreForFields: function(e) {
                var t = CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ROW_LIMIT),
                    o = this.buildStore(e, t);
                return this.mon(o, "beforeload", function(e, t) {
                    this.callDelegates("onCMCardGridBeforeLoad", this), this.fireEvent("beforeload", arguments);
                    var o = this.getStore().getProxy().extraParams;
                    return !(!Ext.isObject(o) || Ext.Object.isEmpty(o) || !Ext.isString(o[CMDBuild.core.constants.Proxy.CLASS_NAME]) || Ext.isEmpty(o[CMDBuild.core.constants.Proxy.CLASS_NAME])) && (o[CMDBuild.core.constants.Proxy.ATTRIBUTES] = Ext.encode(this.getVisibleColumns()), !0)
                }, this), this.mon(o, "load", function(e, t) {
                    this.callDelegates("onCMCardGridLoad", this), this.fireEvent("load", arguments)
                }, this), o
            },
            buildStore: function(e, t) {
                return e.push({
                    name: "Id",
                    type: "int"
                }), e.push({
                    name: "IdClass",
                    type: "int"
                }), e.push("IdClass_value"), CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.UNCACHED, {
                    autoLoad: !1,
                    fields: e,
                    pageSize: t,
                    remoteSort: !0,
                    proxy: {
                        type: "ajax",
                        url: CMDBuild.proxy.index.Json.card.readAll,
                        reader: {
                            type: "json",
                            root: "rows",
                            totalProperty: "results",
                            idProperty: "Id"
                        },
                        extraParams: this.getStoreExtraParams()
                    }
                })
            },
            getStoreExtraParams: function() {
                var e = {
                    className: ""
                };
                return this.currentClassId && (e.className = _CMCache.getEntryTypeNameById(this.currentClassId)), this.CQL && ((e = Ext.apply(e, this.CQL)).filter = Ext.encode(this.CQL)), e
            },
            buildExtraColumns: function() {
                return []
            },
            buildClassColumn: function() {
                return {
                    header: CMDBuild.Translation.subClass,
                    width: 100,
                    sortable: !1,
                    dataIndex: "IdClass_value"
                }
            },
            disableFilterMenuButton: function() {},
            enableFilterMenuButton: function() {},
            applyFilterToStore: function(e) {
                try {
                    var t = e;
                    "string" != typeof t && (t = Ext.encode(e)), this.getStore().proxy.extraParams.filter = t
                } catch (t) {
                    _error("I'm not able to set the filter to the store", this, e)
                }
            }
        })
    }(), Ext.define("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.filterEditor.relations.GridDomain", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.filterEditor.Relations"],
        parentDelegate: void 0,
        bufferEntryTypes: {},
        cmfgCatchedFunctions: ["onWorkflowTreeFilterAdvancedFilterEditorRelationsGridDomainBeforeEdit", "onWorkflowTreeFilterAdvancedFilterEditorRelationsGridDomainCheckchange", "onWorkflowTreeFilterAdvancedFilterEditorRelationsGridDomainViewShow"],
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.relations.DomainGridPanel", {
                delegate: this
            })
        },
        bufferEntryTypesGet: function(e, t) {
            return !Ext.isString(e) || Ext.isEmpty(e) ? _error("bufferEntryTypesGet(): unmanaged name parameter", this, e) : Ext.isString(t) && !Ext.isEmpty(t) ? this.bufferEntryTypes[e].get(t) : this.bufferEntryTypes[e]
        },
        bufferEntryTypesSet: function(e) {
            if (!Ext.isFunction(e)) return _error("bufferEntryTypesSet(): unmanaged callback parameter", this, e);
            var t = {};
            t[CMDBuild.core.constants.Proxy.ACTIVE] = !1, CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.filterEditor.Relations.readAllEntryTypes({
                params: t,
                scope: this,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.CLASSES], Ext.isArray(i) && !Ext.isEmpty(i) ? (Ext.Array.each(i, function(e, t, o) {
                        Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.bufferEntryTypes[e[CMDBuild.core.constants.Proxy.NAME]] = Ext.create("CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.EntryType", e))
                    }, this), Ext.callback(e, this)) : _error("bufferEntryTypesSet(): unmanaged response", this, i)
                }
            })
        },
        onWorkflowTreeFilterAdvancedFilterEditorRelationsGridDomainBeforeEdit: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = e.colIdx,
                    o = e.column,
                    i = !Ext.isEmpty(e.record.get) && Ext.isFunction(e.record.get) ? e.record.get([CMDBuild.core.constants.Proxy.DESTINATION, CMDBuild.core.constants.Proxy.ID]) : null;
                if (!Ext.isEmpty(o) && !Ext.isEmpty(i) && 2 == t) return o.getEditor().getStore().clearFilter(), o.getEditor().getStore().filterBy(function(e, t) {
                    return e.get(CMDBuild.core.constants.Proxy.TABLE_TYPE) != CMDBuild.core.constants.Global.getTableTypeSimpleTable() && (e.get(CMDBuild.core.constants.Proxy.PARENT) == i || e.get(CMDBuild.core.constants.Proxy.ID) == i)
                }, this), !0
            }
            return !1
        },
        onWorkflowTreeFilterAdvancedFilterEditorRelationsGridDomainCheckchange: function(e) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var t = !!Ext.isBoolean(e.checked) && e.checked,
                    o = e.propertyName,
                    i = e.record;
                Ext.isString(o) && !Ext.isEmpty(o) && Ext.isObject(i) && !Ext.Object.isEmpty(i) && (this.view.getSelectionModel().select(i), t && i.setType(o))
            }
        },
        onWorkflowTreeFilterAdvancedFilterEditorRelationsGridDomainViewShow: function() {
            if (this.cmfg("workflowSelectedWorkflowIsEmpty")) return _error("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridDomainViewShow(): empty selected entryType", this, this.cmfg("workflowSelectedWorkflowGet"));
            this.view.getStore().removeAll(), this.view.getSelectionModel().clearSelections(), this.bufferEntryTypesSet(function(e, t, o) {
                var i = [],
                    r = [],
                    n = [],
                    a = {};
                a[CMDBuild.core.constants.Proxy.ACTIVE_ONLY] = !0, a[CMDBuild.core.constants.Proxy.SOURCE] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME), CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.filterEditor.Relations.getDomains({
                    params: a,
                    scope: this,
                    success: function(e, t, o) {
                        o = o[CMDBuild.core.constants.Proxy.DOMAINS], Ext.isArray(o) && !Ext.isEmpty(o) && Ext.Array.each(o, function(e, t, o) {
                            Ext.isObject(e) && !Ext.Object.isEmpty(e) && r.push(Ext.create("CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.Domain", e))
                        }, this);
                        var a = {};
                        a[CMDBuild.core.constants.Proxy.ACTIVE_ONLY] = !0, a[CMDBuild.core.constants.Proxy.DESTINATION] = this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.NAME), CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.filterEditor.Relations.getDomains({
                            params: a,
                            scope: this,
                            success: function(e, t, o) {
                                o = o[CMDBuild.core.constants.Proxy.DOMAINS], Ext.isArray(o) && !Ext.isEmpty(o) && Ext.Array.each(o, function(e, t, o) {
                                    Ext.isObject(e) && !Ext.Object.isEmpty(e) && i.push(Ext.create("CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.Domain", e))
                                }, this), Ext.isEmpty(r) && Ext.isEmpty(i) || (Ext.isArray(r) && !Ext.isEmpty(r) && Ext.Array.each(r, function(e, t, o) {
                                    Ext.isObject(e) && !Ext.Object.isEmpty(e) && n.push(Ext.create("CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.DomainGrid", {
                                        destination: this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.DESTINATION_CLASS_NAME)),
                                        direction: "_1",
                                        domain: e,
                                        domainDescription: e.get(CMDBuild.core.constants.Proxy.DESCRIPTION),
                                        orientedDescription: e.get(CMDBuild.core.constants.Proxy.DIRECT_DESCRIPTION),
                                        source: this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.ORIGIN_CLASS_NAME))
                                    }))
                                }, this), Ext.isArray(i) && !Ext.isEmpty(i) && Ext.Array.each(i, function(e, t, o) {
                                    Ext.isObject(e) && !Ext.Object.isEmpty(e) && n.push(Ext.create("CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.DomainGrid", {
                                        destination: this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.ORIGIN_CLASS_NAME)),
                                        direction: "_2",
                                        domain: e,
                                        domainDescription: e.get(CMDBuild.core.constants.Proxy.DESCRIPTION),
                                        orientedDescription: e.get(CMDBuild.core.constants.Proxy.INVERSE_DESCRIPTION),
                                        source: this.bufferEntryTypesGet(e.get(CMDBuild.core.constants.Proxy.DESTINATION_CLASS_NAME))
                                    }))
                                }, this), Ext.isEmpty(n) || this.view.getStore().add(CMDBuild.core.Utils.objectArraySort(n, CMDBuild.core.constants.Proxy.DOMAIN_DESCRIPTION)), this.cmfg("workflowTreeFilterAdvancedFilterEditorRelationsSelectionManage"))
                            }
                        })
                    }
                })
            })
        }
    }), Ext.define("CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.filterEditor.Relations", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.DestinationEditorStore", "CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.DomainGrid"],
        singleton: !0,
        getDomains: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.domain.getDomains
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.DOMAIN, e)
        },
        getStoreDestination: function() {
            return CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.ENTRY_TYPE, {
                autoLoad: !0,
                model: "CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.DestinationEditorStore",
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.entryType.readAll,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.CLASSES
                    },
                    extraParams: {
                        limitParam: void 0,
                        pageParam: void 0,
                        startParam: void 0
                    }
                },
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.TEXT,
                    direction: "ASC"
                }]
            })
        },
        getStoreDomain: function() {
            return Ext.create("Ext.data.ArrayStore", {
                model: "CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.DomainGrid",
                data: [],
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.DOMAIN_DESCRIPTION,
                    direction: "ASC"
                }]
            })
        },
        readAllEntryTypes: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.entryType.readAll
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ENTRY_TYPE, e)
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.DestinationEditorStore", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.ID,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.PARENT,
            type: "int"
        }, {
            name: CMDBuild.core.constants.Proxy.TABLE_TYPE,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.TEXT,
            type: "string"
        }]
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.management.workflow.panel.tree.filter.advanced.filterEditor.relations.DomainGrid", {
        extend: "Ext.data.Model",
        fields: [{
            name: "noone",
            type: "boolean",
            defaultValue: !1
        }, {
            name: "oneof",
            type: "boolean",
            defaultValue: !1
        }, {
            name: CMDBuild.core.constants.Proxy.ANY,
            type: "boolean",
            defaultValue: !1
        }, {
            name: CMDBuild.core.constants.Proxy.CHECKED_CARDS,
            type: "auto",
            defaultValue: []
        }, {
            name: CMDBuild.core.constants.Proxy.DESTINATION,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.DIRECTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.DOMAIN,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.DOMAIN_DESCRIPTION,
            type: "string",
            persist: !1
        }, {
            name: CMDBuild.core.constants.Proxy.ORIENTED_DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.SOURCE,
            type: "auto"
        }],
        get: function(e) {
            if (Ext.isArray(e) && !Ext.isEmpty(e)) {
                var t = this;
                return Ext.Array.each(e, function(e, o, i) {
                    !Ext.isEmpty(t) && Ext.isFunction(t.get) && (t = t.get(e))
                }, this), t
            }
            return this.callParent(arguments)
        },
        getType: function() {
            return this.get(CMDBuild.core.constants.Proxy.ANY) ? CMDBuild.core.constants.Proxy.ANY : this.get("noone") ? "noone" : this.get("oneof") ? "oneof" : null
        },
        setType: function(e) {
            this.set("noone", "noone" == e), this.set("oneof", "oneof" == e), this.set(CMDBuild.core.constants.Proxy.ANY, e == CMDBuild.core.constants.Proxy.ANY)
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.filterEditor.relations.DomainGridPanel", {
        extend: "Ext.grid.Panel",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.filterEditor.Relations"],
        delegate: void 0,
        border: !1,
        cls: "cmdb-border-bottom",
        frame: !1,
        height: "30%",
        region: "north",
        split: !0,
        initComponent: function() {
            Ext.apply(this, {
                columns: [Ext.create("Ext.grid.column.Column", {
                    dataIndex: CMDBuild.core.constants.Proxy.DOMAIN_DESCRIPTION,
                    text: CMDBuild.Translation.domain,
                    flex: 1,
                    sortable: !1,
                    hideable: !1,
                    menuDisabled: !0
                }), Ext.create("Ext.grid.column.Column", {
                    dataIndex: CMDBuild.core.constants.Proxy.ORIENTED_DESCRIPTION,
                    text: CMDBuild.Translation.direction,
                    flex: 1,
                    sortable: !1,
                    hideable: !1,
                    menuDisabled: !0
                }), Ext.create("Ext.grid.column.Column", {
                    text: CMDBuild.Translation.destination,
                    flex: 1,
                    sortable: !1,
                    hideable: !1,
                    menuDisabled: !0,
                    editor: {
                        xtype: "combo",
                        displayField: CMDBuild.core.constants.Proxy.TEXT,
                        valueField: CMDBuild.core.constants.Proxy.ID,
                        editable: !1,
                        forceSelection: !0,
                        store: CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.filterEditor.Relations.getStoreDestination(),
                        queryMode: "local"
                    },
                    renderer: function(e, t, o, i, r, n, a) {
                        return o.get([CMDBuild.core.constants.Proxy.DESTINATION, CMDBuild.core.constants.Proxy.DESCRIPTION])
                    }
                }), Ext.create("Ext.grid.column.Column", {
                    text: CMDBuild.Translation.relations,
                    sortable: !1,
                    hideable: !1,
                    menuDisabled: !0,
                    fixed: !0,
                    columns: [Ext.create("Ext.grid.column.CheckColumn", {
                        dataIndex: "noone",
                        text: CMDBuild.Translation.noOne,
                        width: 90,
                        align: "center",
                        sortable: !1,
                        hideable: !1,
                        menuDisabled: !0,
                        fixed: !0,
                        scope: this,
                        listeners: {
                            scope: this,
                            checkchange: function(e, t, o, i) {
                                this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsCheckchange", {
                                    checked: o,
                                    propertyName: e.dataIndex,
                                    record: this.getStore().getAt(t)
                                })
                            }
                        }
                    }), Ext.create("Ext.grid.column.CheckColumn", {
                        dataIndex: "any",
                        text: CMDBuild.Translation.any,
                        width: 90,
                        align: "center",
                        sortable: !1,
                        hideable: !1,
                        menuDisabled: !0,
                        fixed: !0,
                        scope: this,
                        listeners: {
                            scope: this,
                            checkchange: function(e, t, o, i) {
                                this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsCheckchange", {
                                    checked: o,
                                    propertyName: e.dataIndex,
                                    record: this.getStore().getAt(t)
                                })
                            }
                        }
                    }), Ext.create("Ext.grid.column.CheckColumn", {
                        dataIndex: "oneof",
                        text: CMDBuild.Translation.fromSelection,
                        width: 90,
                        align: "center",
                        sortable: !1,
                        hideable: !1,
                        menuDisabled: !0,
                        fixed: !0,
                        scope: this,
                        listeners: {
                            scope: this,
                            checkchange: function(e, t, o, i) {
                                this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsCheckchange", {
                                    checked: o,
                                    propertyName: e.dataIndex,
                                    record: this.getStore().getAt(t)
                                })
                            }
                        }
                    })]
                })],
                store: CMDBuild.proxy.management.workflow.panel.tree.filter.advanced.filterEditor.Relations.getStoreDomain(),
                plugins: [Ext.create("Ext.grid.plugin.CellEditing", {
                    clicksToEdit: 1,
                    listeners: {
                        scope: this,
                        beforeedit: function(e, t, o) {
                            return this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridDomainBeforeEdit", t)
                        }
                    }
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            select: function(e, t, o, i) {
                this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsDomainSelect", t)
            },
            show: function(e, t) {
                this.delegate.cmfg("onWorkflowTreeFilterAdvancedFilterEditorRelationsGridDomainViewShow")
            }
        }
    }), Ext.define("CMDBuild.controller.management.workflow.panel.tree.filter.advanced.SaveDialog", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onWorkflowTreeFilterAdvancedSaveDialogAbortButtonClick", "onWorkflowTreeFilterAdvancedSaveDialogSaveButtonClick", "workflowTreeFilterAdvancedSaveDialogShow"],
        enableApply: !1,
        form: void 0,
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.saveDialog.SaveDialogWindow", {
                delegate: this
            }), this.form = this.view.form
        },
        onWorkflowTreeFilterAdvancedSaveDialogAbortButtonClick: function() {
            this.view.close()
        },
        onWorkflowTreeFilterAdvancedSaveDialogSaveButtonClick: function() {
            if (this.validate(this.form)) {
                var e = this.form.getData();
                this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterSet", {
                    propertyName: CMDBuild.core.constants.Proxy.DESCRIPTION,
                    value: e[CMDBuild.core.constants.Proxy.DESCRIPTION]
                }), this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterSet", {
                    propertyName: CMDBuild.core.constants.Proxy.NAME,
                    value: e[CMDBuild.core.constants.Proxy.NAME]
                }), this.cmfg("workflowTreeFilterAdvancedManagerSave", {
                    enableApply: this.enableApply,
                    enableSaveDialog: !1
                }), this.cmfg("onWorkflowTreeFilterAdvancedSaveDialogAbortButtonClick")
            }
        },
        workflowTreeFilterAdvancedSaveDialogShow: function(e) {
            this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterIsEmpty") ? _error("workflowTreeFilterAdvancedSaveDialogShow(): cannot manage empty filter", this, this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet")) : (this.enableApply = !!Ext.isBoolean(e) && e, this.form.loadRecord(this.cmfg("workflowTreeFilterAdvancedManagerSelectedFilterGet")), this.view.show())
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.saveDialog.SaveDialogWindow", {
        extend: "CMDBuild.core.window.AbstractCustomModal",
        delegate: void 0,
        dimensions: {
            width: 650
        },
        dimensionsMode: "absolute",
        form: void 0,
        border: !0,
        closeAction: "hide",
        frame: !0,
        layout: "fit",
        title: CMDBuild.Translation.filterParameters,
        initComponent: function() {
            Ext.apply(this, {
                items: [this.form = Ext.create("CMDBuild.view.management.workflow.panel.tree.filter.advanced.saveDialog.FormPanel", {
                    delegate: this.delegate
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.filter.advanced.saveDialog.FormPanel", {
        extend: "Ext.form.Panel",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils"],
        mixins: ["CMDBuild.view.common.PanelFunctions"],
        delegate: void 0,
        bodyCls: "cmdb-blue-panel",
        border: !1,
        frame: !1,
        overflowY: "auto",
        layout: {
            type: "vbox",
            align: "stretch"
        },
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    },
                    items: [Ext.create("CMDBuild.core.buttons.text.Save", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onWorkflowTreeFilterAdvancedSaveDialogSaveButtonClick")
                        }
                    }), Ext.create("CMDBuild.core.buttons.text.Abort", {
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onWorkflowTreeFilterAdvancedSaveDialogAbortButtonClick")
                        }
                    })]
                })],
                items: [Ext.create("Ext.form.field.Text", {
                    name: CMDBuild.core.constants.Proxy.NAME,
                    fieldLabel: CMDBuild.core.Utils.prependMandatoryLabel(CMDBuild.Translation.name),
                    maxWidth: CMDBuild.core.constants.FieldWidths.STANDARD_BIG,
                    allowBlank: !1
                }), Ext.create("Ext.form.field.TextArea", {
                    name: CMDBuild.core.constants.Proxy.DESCRIPTION,
                    fieldLabel: CMDBuild.core.Utils.prependMandatoryLabel(CMDBuild.Translation.descriptionLabel),
                    maxWidth: CMDBuild.core.constants.FieldWidths.STANDARD_BIG,
                    allowBlank: !1
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.toolbar.Paging", {
        extend: "Ext.toolbar.Paging",
        delegate: void 0,
        store: void 0,
        dock: "bottom",
        displayInfo: !0,
        displayMsg: "{0} - {1} " + CMDBuild.Translation.of + " {2}",
        emptyMsg: CMDBuild.Translation.noTopicsToDisplay,
        customLoadMethod: function(e) {
            return this.delegate.cmfg("workflowTreeStoreLoad", {
                page: e,
                params: this.store.getProxy().extraParams
            })
        },
        listeners: {
            show: function(e, t) {
                this.delegate.cmfg("onWorkflowTreeToolbarPagingShow")
            }
        }
    }), Ext.define("CMDBuild.controller.management.workflow.panel.tree.toolbar.Top", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.Proxy", "CMDBuild.core.constants.WorkflowStates", "CMDBuild.core.Utils"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["onWorkflowTreeToolbarTopStateComboChange", "onWorkflowTreeToolbarTopWokflowSelect", "workflowTreeToolbarTopStatusValueGet", "workflowTreeToolbarTopStatusValueSet"],
        disableNextStatusSelectionChangeEvent: !1,
        view: void 0,
        workflowRelationshipTree: {},
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.workflow.panel.tree.toolbar.TopView", {
                delegate: this
            })
        },
        buildButtonAdd: function() {
            if (this.cmfg("workflowSelectedWorkflowIsEmpty")) return _error("buildButtonAdd(): empty selected workflow", this, this.cmfg("workflowSelectedWorkflowGet"));
            if (this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.IS_SUPER_CLASS)) {
                var e = [],
                    t = this.workflowToolbarTopWorkflowRelationshipTreeGet(this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.ID), CMDBuild.core.constants.Proxy.CHILDREN);
                return this.buildMenuChildren(t, e), Ext.create("CMDBuild.core.buttons.iconized.split.add.Workflow", {
                    text: CMDBuild.Translation.start + " " + this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.DESCRIPTION),
                    itemId: "addButton",
                    disabled: this.isAddButtonDisabled(e),
                    scope: this,
                    menu: Ext.create("Ext.menu.Menu", {
                        items: e
                    }),
                    isEnableActionEnabled: this.isEnableActionEnabled
                })
            }
            return Ext.create("CMDBuild.core.buttons.iconized.add.Workflow", {
                text: CMDBuild.Translation.start + " " + this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.DESCRIPTION),
                itemId: "addButton",
                disabled: this.isAddButtonDisabled(),
                scope: this,
                handler: function(e, t) {
                    this.cmfg("onWorkflowAddButtonClick")
                },
                isEnableActionEnabled: this.isEnableActionEnabled
            })
        },
        buildMenuChildren: function(e, t) {
            Ext.isArray(e) && !Ext.isEmpty(e) && Ext.Array.forEach(e, function(e, o, i) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && this.buildMenuItem(e, t)
            }, this)
        },
        buildMenuItem: function(e, t) {
            if (Ext.isObject(e) && !Ext.Object.isEmpty(e)) {
                var o = {
                    disabled: !e.get(CMDBuild.core.constants.Proxy.IS_STARTABLE) && !e.get(CMDBuild.core.constants.Proxy.IS_SUPER_CLASS),
                    text: e.get(CMDBuild.core.constants.Proxy.DESCRIPTION),
                    workflowId: e.get(CMDBuild.core.constants.Proxy.ID),
                    scope: this
                };
                e.get(CMDBuild.core.constants.Proxy.IS_SUPER_CLASS) || !e.get(CMDBuild.core.constants.Proxy.IS_STARTABLE) || e.get(CMDBuild.core.constants.Proxy.CAPABILITIES).create || (o.handler = function(e, t) {
                    this.cmfg("onWorkflowAddButtonClick", e.workflowId)
                }), Ext.isArray(t) ? t.push(o) : Ext.isObject(t) ? (t.menu = Ext.isArray(t.menu) ? t.menu : [], t.menu.push(o)) : _error("buildMenuItem(): unmanaged parent parameter type", this, t), this.buildMenuChildren(e.get(CMDBuild.core.constants.Proxy.CHILDREN), o)
            }
        },
        isAddButtonDisabled: function(e) {
            return this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.IS_SUPER_CLASS) ? Ext.isEmpty(e) || this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.CAPABILITIES).create : !this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.IS_STARTABLE) || this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.CAPABILITIES).create
        },
        isEnableActionEnabled: function(e) {
            return !this.cmfg("workflowSelectedWorkflowIsEmpty") && (!this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.IS_SUPER_CLASS) || this.cmfg("workflowSelectedWorkflowGet", CMDBuild.core.constants.Proxy.IS_SUPER_CLASS) && Ext.isEmpty(e))
        },
        onWorkflowTreeToolbarTopStateComboChange: function() {
            this.disableNextStatusSelectionChangeEvent || (this.cmfg("workflowSelectedActivityReset"), this.cmfg("workflowSelectedInstanceReset"), this.cmfg("workflowSelectedPreviousActivityReset"), this.cmfg("workflowTreeStoreLoad")), this.disableNextStatusSelectionChangeEvent = !1
        },
        onWorkflowTreeToolbarTopWokflowSelect: function() {
            this.workflowToolbarTopWorkflowRelationshipTreeReset(), Ext.Array.each(this.cmfg("workflowLocalCacheWorkflowGetAll"), function(e, t, o) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && this.workflowToolbarTopWorkflowRelationshipTreeSet({
                    value: e.getData()
                })
            }, this), Ext.Object.each(this.workflowToolbarTopWorkflowRelationshipTreeGet(), function(e, t, o) {
                !Ext.isObject(t) || Ext.Object.isEmpty(t) || Ext.isEmpty(t.get(CMDBuild.core.constants.Proxy.PARENT)) || t.get(CMDBuild.core.constants.Proxy.NAME) == CMDBuild.core.constants.Global.getRootNameWorkflows() || this.workflowToolbarTopWorkflowRelationshipTreeAppendChild(t.get(CMDBuild.core.constants.Proxy.PARENT), t)
            }, this), this.view.remove("addButton"), this.view.insert(0, this.buildButtonAdd())
        },
        workflowToolbarTopWorkflowRelationshipTreeAppendChild: function(e, t) {
            if (Ext.isNumber(e) && !Ext.isEmpty(e) && !Ext.isEmpty(this.workflowRelationshipTree[e]) && Ext.isObject(t) && !Ext.Object.isEmpty(t) && "CMDBuild.model.management.workflow.panel.tree.toolbar.top.Parent" == Ext.getClassName(t)) {
                var o = this.workflowRelationshipTree[e].get(CMDBuild.core.constants.Proxy.CHILDREN);
                o = Ext.Array.merge(o, [t]), o = CMDBuild.core.Utils.objectArraySort(o), this.workflowRelationshipTree[e].set(CMDBuild.core.constants.Proxy.CHILDREN, o)
            }
        },
        workflowToolbarTopWorkflowRelationshipTreeGet: function(e, t) {
            return !Ext.isNumber(e) || Ext.isEmpty(e) || Ext.isEmpty(this.workflowRelationshipTree[e]) ? this.workflowRelationshipTree : Ext.isString(t) && !Ext.isEmpty(t) ? this.workflowRelationshipTree[e].get(t) : this.workflowRelationshipTree[e]
        },
        workflowToolbarTopWorkflowRelationshipTreeReset: function() {
            this.workflowRelationshipTree = {}
        },
        workflowToolbarTopWorkflowRelationshipTreeSet: function(e) {
            !Ext.isObject(e) || Ext.Object.isEmpty(e) || Ext.isEmpty(e.value[CMDBuild.core.constants.Proxy.ID]) || !Ext.isObject(e.value) || Ext.Object.isEmpty(e.value) || (this.workflowRelationshipTree[e.value[CMDBuild.core.constants.Proxy.ID]] = Ext.create("CMDBuild.model.management.workflow.panel.tree.toolbar.top.Parent", e.value))
        },
        workflowTreeToolbarTopStatusValueGet: function() {
            return Ext.isEmpty(this.view.statusCombo) ? CMDBuild.core.constants.WorkflowStates.getOpen() : this.view.statusCombo.getValue()
        },
        workflowTreeToolbarTopStatusValueSet: function(e) {
            this.disableNextStatusSelectionChangeEvent = !!Ext.isBoolean(e.silently) && e.silently, this.view.statusCombo.setValue(e.value)
        }
    }), Ext.define("CMDBuild.view.management.workflow.panel.tree.toolbar.TopView", {
        extend: "Ext.toolbar.Toolbar",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.constants.WorkflowStates", "CMDBuild.proxy.management.workflow.panel.tree.Tree"],
        delegate: void 0,
        statusCombo: void 0,
        dock: "top",
        initComponent: function() {
            Ext.apply(this, {
                itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP,
                items: [Ext.create("CMDBuild.core.buttons.iconized.add.Workflow", {
                    text: CMDBuild.Translation.start,
                    itemId: "addButton",
                    disabled: !0
                }), this.statusCombo = Ext.create("Ext.form.field.ComboBox", {
                    name: CMDBuild.core.constants.Proxy.STATE,
                    maxWidth: CMDBuild.core.constants.FieldWidths.STANDARD_BIG,
                    valueField: CMDBuild.core.constants.Proxy.VALUE,
                    displayField: CMDBuild.core.constants.Proxy.DESCRIPTION,
                    allowBlank: !1,
                    editable: !1,
                    forceSelection: !0,
                    store: CMDBuild.proxy.management.workflow.panel.tree.Tree.getStoreState(),
                    queryMode: "local",
                    value: CMDBuild.core.constants.WorkflowStates.getOpen(),
                    listeners: {
                        scope: this,
                        change: function(e, t, o, i) {
                            this.delegate.cmfg("onWorkflowTreeToolbarTopStateComboChange")
                        }
                    }
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.core.buttons.iconized.add.Workflow", {
        extend: "CMDBuild.core.buttons.Base",
        iconCls: "add",
        textDefault: CMDBuild.Translation.start,
        enable: function() {
            this.isEnableActionEnabled() && this.callParent(arguments)
        },
        isEnableActionEnabled: function() {
            return !0
        }
    }), Ext.define("CMDBuild.controller.management.classes.panel.form.tabs.card.Tab", {
        extend: "CMDBuild.controller.common.panel.module.form.Tab",
        uses: ["CMDBuild.core.constants.ModuleIdentifiers", "CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils", "CMDBuild.proxy.management.classes.panel.form.tabs.Card"],
        mixins: {
            observable: "Ext.util.Observable",
            viewMode: "CMDBuild.controller.common.panel.gridAndForm.panel.mixins.ViewMode"
        },
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["classesFormTabCardSelectedItemAttributesGet = panelGridAndFormSelectedItemAttributesGet", "classesFormTabCardSelectedItemAttributesIsEmpty = panelGridAndFormSelectedItemAttributesIsEmpty", "classesFormTabCardSelectedEntityGet = panelGridAndFormSelectedEntityGet", "classesFormTabCardSelectedEntityIsEmpty = panelGridAndFormSelectedEntityIsEmpty", "classesFormTabCardSelectedItemGet = panelGridAndFormSelectedItemGet", "classesFormTabCardSelectedItemIsEmpty = panelGridAndFormSelectedItemIsEmpty", "classesFormTabCardSelectedItemWidgetsGetAll = panelGridAndFormSelectedItemWidgetsGet", "classesFormTabCardSelectedItemWidgetsIsEmpty = panelGridAndFormSelectedItemWidgetsIsEmpty", "classesFormTabCardSelectedPreviousItemGet = panelGridAndFormSelectedPreviousItemGet", "classesFormTabCardSelectedPreviousItemIsEmpty = panelGridAndFormSelectedPreviousItemIsEmpty", "classesFormTabCardSelectedItemIsWritable", "classesFormTabCardUiUpdate = panelGridAndFormUiUpdate", "onClassesFormTabCardPrintButtonClick", "onClassesFormTabCardRemoveButtonClick", "onClassesFormTabCardSaveButtonClick = onPanelModuleFormToolbarBottomSaveButtonClick", "onClassesFormTabCardShow = onPanelModuleFormTabShow", "panelGridAndFormTabPanelGet", "panelGridAndFormMixinsViewModeEquals = classesFormTabCardViewModeEquals, panelGridAndFormViewModeEquals", "panelGridAndFormMixinsViewModeGet = classesFormTabCardViewModeGet, panelGridAndFormViewModeGet", "panelGridAndFormMixinsViewModeSet = classesFormTabCardViewModeSet", "panelModuleFormFormGet = panelGridAndFormPanelFormTemplateResolverFormGet", "panelModuleFormTabDisable", "panelModuleFormTabReset = classesFormTabCardReset"],
        controllerForm: void 0,
        controllerPanelWidget: void 0,
        controllerPrintWindow: void 0,
        selectedPreviousItem: void 0,
        selectedItem: void 0,
        selectedEntity: void 0,
        selectedItemAttributes: [],
        selectedItemWidgets: [],
        subClassesNames: {
            form: "CMDBuild.controller.management.classes.panel.form.tabs.card.panel.Panel",
            panelWidget: "CMDBuild.controller.management.classes.panel.form.tabs.card.widget.panel.ButtonGroup",
            view: "CMDBuild.view.management.classes.panel.form.tabs.card.TabView"
        },
        cloneParameters: void 0,
        view: void 0,
        viewModeManaged: ["add", "clone", "edit", "read", "readOnly"],
        constructor: function(e) {
            this.mixins.observable.constructor.call(this, arguments), this.callParent(arguments), this.controllerPrintWindow = Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.print.Window", {
                parentDelegate: this
            }), this.buildCardModuleStateDelegate()
        },
        buildCardModuleStateDelegate: function() {
            this.cardStateDelegate = new CMDBuild.state.CMCardModuleStateDelegate, this.cardStateDelegate.onEntryTypeDidChange = Ext.bind(function(e, t) {
                if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) {
                    this.classesFormTabCardSelectedPreviousItemReset();
                    var o = {};
                    o[CMDBuild.core.constants.Proxy.ENTITY_NAME] = t.get(CMDBuild.core.constants.Proxy.NAME), this.cmfg("classesFormTabCardUiUpdate", o)
                }
            }, this), this.cardStateDelegate.onCardDidChange = Ext.bind(function(e, t) {
                if (Ext.isObject(t) && !Ext.Object.isEmpty(t)) {
                    var o = {};
                    this.cmfg("classesFormTabCardSelectedEntityIsEmpty") || (o[CMDBuild.core.constants.Proxy.ENTITY_NAME] = this.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME)), Ext.isObject(t) && !Ext.Object.isEmpty(t) && (o[CMDBuild.core.constants.Proxy.ITEM_ENTITY_NAME] = t.get(CMDBuild.core.constants.Proxy.CLASS_NAME), o[CMDBuild.core.constants.Proxy.ITEM_ID] = t.get("Id")), this.cmfg("classesFormTabCardUiUpdate", o)
                }
            }, this), _CMCardModuleState.addDelegate(this.cardStateDelegate), this.view && this.mon(this.view, "destroy", function(e) {
                _CMCardModuleState.removeDelegate(this.cardStateDelegate), delete this.cardStateDelegate
            }, this)
        },
        buildValues: function() {
            var e = {};
            if (!this.cmfg("panelGridAndFormSelectedItemIsEmpty")) {
                var t = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.REFERENCE_ATTRIBUTES);
                e = Ext.clone(this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.VALUES)), Ext.isObject(t) && !Ext.Object.isEmpty(t) && Ext.Object.each(t, function(t, o, i) {
                    Ext.isObject(o) && !Ext.Object.isEmpty(o) && Ext.Object.each(o, function(o, i, r) {
                        e["_" + t + "_" + o] = i
                    }, this)
                }, this)
            }
			//console.log(e); //ayaw
            return e
        },
        classesFormTabCardSelectedEntityGet: function(e) {
           var t = {};
            return t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntity", this.propertyManageGet(t)
        },
        classesFormTabCardSelectedEntityIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntity", this.propertyManageIsEmpty(t)
        },
        classesFormTabCardSelectedEntityReset: function() {
            return this.propertyManageReset("selectedEntity")
        },
        classesFormTabCardSelectedEntitySet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.classes.panel.form.tabs.card.entity.Entity", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntity", this.propertyManageSet(e))
        },
        classesFormTabCardSelectedItemGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedItem", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        classesFormTabCardSelectedItemIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedItem", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        classesFormTabCardSelectedItemReset: function() {
            this.cmfg("classesFormTabCardSelectedItemIsEmpty", CMDBuild.core.constants.Proxy.ID) || this.classesFormTabCardSelectedPreviousItemSet({
                value: this.cmfg("classesFormTabCardSelectedItemGet").getData()
            }), this.propertyManageReset("selectedItem")
        },
        classesFormTabCardSelectedItemSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.classes.panel.form.tabs.card.Item", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedItem", this.propertyManageSet(e))
        },
        classesFormTabCardSelectedItemAttributesGet: function() {
		//console.log(this.selectedItemAttributes);	//ayaw
            return this.selectedItemAttributes
        },
        classesFormTabCardSelectedItemAttributesIsEmpty: function() {
            return Ext.isEmpty(this.selectedItemAttributes)
        },
        classesFormTabCardSelectedItemAttributesReset: function() {
            this.selectedItemAttributes = []
        },
        classesFormTabCardSelectedItemAttributesSet: function(e) {
            Ext.isArray(e) && !Ext.isEmpty(e) && (e = CMDBuild.core.Utils.objectArraySort(e, CMDBuild.core.constants.Proxy.INDEX), Ext.Array.each(e, function(e, t, o) {
                Ext.isObject(e) && !Ext.Object.isEmpty(e) && this.selectedItemAttributes.push(Ext.create("CMDBuild.model.common.attributes.Attribute", e))
            }, this))
        },
        classesFormTabCardSelectedItemWidgetsGetAll: function() {
		//console.log(this.selectedItemWidgets);	
            return this.selectedItemWidgets
        },
        classesFormTabCardSelectedItemWidgetsIsEmpty: function() {
            return Ext.isEmpty(this.selectedItemWidgets)
        },
        classesFormTabCardSelectedItemWidgetsReset: function() {
            this.selectedItemWidgets = []
        },
        classesFormTabCardSelectedItemWidgetsSet: function(e) {
            Ext.isArray(e) && !Ext.isEmpty(e) && (this.selectedItemWidgets = Ext.Array.clean(e))
        },
        classesFormTabCardSelectedPreviousItemGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedPreviousItem", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        classesFormTabCardSelectedPreviousItemIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedPreviousItem", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        classesFormTabCardSelectedPreviousItemReset: function() {
            return this.propertyManageReset("selectedPreviousItem")
        },
        classesFormTabCardSelectedPreviousItemSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.classes.panel.form.tabs.card.PreviousItem", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedPreviousItem", this.propertyManageSet(e))
        },
        classesFormTabCardUiUpdate: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).entityName = Ext.isString(e.entityName) ? e.entityName : null, e.fullScreen = Ext.isString(e.fullScreen) ? e.fullScreen : "top", e.itemEntityName = Ext.isString(e.itemEntityName) ? e.itemEntityName : null, e.itemId = Ext.isNumber(e.itemId) ? e.itemId : null, e.viewMode = Ext.isString(e.viewMode) ? e.viewMode : "read", Ext.isObject(e.domainStore)) {
                var t = e.itemId,
                    o = [],
                    i = [],
                    r = e.domainStore.data.items;
                for (var n in r) {
                    var a = r[n].getData();
                    a[CMDBuild.core.constants.Proxy.MIGRATE] ? o.push(a[CMDBuild.core.constants.Proxy.NAME]) : a[CMDBuild.core.constants.Proxy.CLONE] && i.push(a[CMDBuild.core.constants.Proxy.NAME])
                }
                e._copyFromCardId = t, e._migrateDomains = o.toString(), e._copyDomains = i.toString(), this.cloneParameters = {
                    _copyFromCardId: e._copyFromCardId,
                    _migrateDomains: e._migrateDomains,
                    _copyDomains: e._copyDomains
                }
            }
            if (!Ext.isString(e.entityName) || Ext.isEmpty(e.entityName)) return _error("classesFormTabCardUiUpdate(): unmanaged entityName parameter", this, e.entityName);
            switch (this.cmfg("classesFormTabCardReset"), this.cmfg("classesFormTabCardViewModeSet", e.viewMode), e.fullScreen) {
                case "bottom":
                    _CMUIState.onlyFormIfFullScreen();
                    break;
                case "top":
                    _CMUIState.onlyGridIfFullScreen()
            }
            if (this.classesFormTabCardSelectedItemAttributesReset(), this.classesFormTabCardSelectedEntityReset(), this.classesFormTabCardSelectedItemReset(), this.classesFormTabCardSelectedItemWidgetsReset(), Ext.isNumber(e.addEntityId) && !Ext.isEmpty(e.addEntityId)) {
                var s = {
                    value: {
                        card: {
                            IdClass: e.addEntityId,
                            className: _CMCache.getEntryTypeNameById(e.addEntityId)
                        }
                    }
                };
                this.classesFormTabCardSelectedItemSet(s)
            }
            var l = {};
            l[CMDBuild.core.constants.Proxy.CARD_ID] = e.itemId, l[CMDBuild.core.constants.Proxy.CLASS_NAME] = e.itemEntityName, this.readEntity(e.entityName, function() {
                this.readItem(l, function() {
                    this.readItemWidgets(function() {
                        this.readItemAttributes(function() {
                            switch (this.cmfg("classesFormTabCardViewModeGet")) {
                                case "clone":	
								//alert("clone");
                                    this.itemUnlock(), this.classesFormTabCardSelectedItemSet({
                                        propertyName: CMDBuild.core.constants.Proxy.ID,
                                        value: null
                                    }), this.parentDelegate.callForSubControllers("onCloneCard");
                                    break;
                                case "edit":
								//alert("edit");
                                    this.itemLock({
                                        scope: this,
                                        callback: function() {
                                            this.parentDelegate.onModifyCardClick()
                                        }
                                    });
                                    break;
                                case "read":
								//alert("read");
                                case "readOnly":
								//alert("readOnly");
                                default:
                                    this.itemUnlock(), this.parentDelegate.controllerMap.changeCardSilently && this.parentDelegate.controllerMap.changeCardSilently({
                                        cardId: e.itemId,
                                        className: e.itemEntityName
                                    }), this.parentDelegate.controllerMap.displayMode()
                            }
                            this.controllerForm.cmfg("panelModuleFormPanelUiUpdate"), this.controllerPanelWidget.cmfg("panelModuleWidgetButtonGroupUiUpdate"), this.view.setDisabled(this.cmfg("classesFormTabCardSelectedEntityIsEmpty") || this.cmfg("classesFormTabCardSelectedItemIsEmpty")), this.view.isVisible() && this.cmfg("onClassesFormTabCardShow", {
                                subTabToSelect: e.subTabToSelect,
                                scope: e.scope,
                                callback: e.callback
                            })
                        })
                    })
                })
            })
        },
        itemLock: function(e) {
            if ((e = Ext.isObject(e) ? e : {}).scope = Ext.isObject(e.scope) ? e.scope : this, CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ENABLE_CARD_LOCK) && !this.cmfg("classesFormTabCardSelectedItemIsEmpty")) {
                var t = {};
                return t[CMDBuild.core.constants.Proxy.ID] = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID), CMDBuild.proxy.management.classes.panel.form.tabs.Card.lock({
                    params: t,
                    loadMask: !1,
                    scope: this,
                    success: function(t, o, i) {
                        Ext.isFunction(e.callback) && Ext.callback(e.callback, e.scope)
                    }
                })
            }
            return Ext.callback(e.callback, e.scope)
        },
        itemUnlock: function() {
            if (CMDBuild.configuration.instance.get(CMDBuild.core.constants.Proxy.ENABLE_CARD_LOCK) && !this.cmfg("classesFormTabCardSelectedItemIsEmpty")) {
                var e = {};
                e[CMDBuild.core.constants.Proxy.ID] = this.cmfg("classesFormTabCardSelectedPreviousItemGet", CMDBuild.core.constants.Proxy.ID), CMDBuild.proxy.management.classes.panel.form.tabs.Card.unlock({
                    params: e,
                    loadMask: !1
                })
            }
        },
        onAddCardButtonClick: function(e) {
            var t = {};
            t.addEntityId = parseInt(e), t[CMDBuild.core.constants.Proxy.FULL_SCREEN] = "bottom", t[CMDBuild.core.constants.Proxy.VIEW_MODE] = "add", this.cmfg("classesFormTabCardSelectedEntityIsEmpty") || (t[CMDBuild.core.constants.Proxy.ENTITY_NAME] = this.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME)), this.cmfg("classesFormTabCardUiUpdate", t)
        },
        onClassesFormTabCardRemoveButtonClick: function() {
            Ext.MessageBox.show({
                title: CMDBuild.Translation.common.confirmpopup.title,
                msg: CMDBuild.Translation.common.confirmpopup.areyousure,
                buttons: Ext.MessageBox.YESNO,
                scope: this,
                fn: function(e, t, o) {
                    "yes" == e && this.removeItem()
                }
            })
        },
        onClassesFormTabCardSaveButtonClick: function() {
            if (this.controllerForm.cmfg("panelModulePanelFunctionsIsValid")) {
                CMDBuild.core.LoadMask.show();
                var e = this.controllerForm.cmfg("panelModulePanelFunctionsDataGet", {
                    includeDisabled: !0
                });
                e[CMDBuild.core.constants.Proxy.CARD_ID] = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID), e[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), Ext.apply(e, this.parentDelegate.getMapSaveParams(e)), this.cmfg("classesFormTabCardSelectedItemIsEmpty", CMDBuild.core.constants.Proxy.ID) ? (e[CMDBuild.core.constants.Proxy.CARD_ID] = -1, null != this.cloneParameters && (e._copyFromCardId = this.cloneParameters._copyFromCardId, "" != this.cloneParameters._migrateDomains && (e._migrateDomains = this.cloneParameters._migrateDomains), "" != this.cloneParameters._copyDomains && (e._copyDomains = this.cloneParameters._copyDomains)), CMDBuild.proxy.management.classes.panel.form.tabs.Card.create({
                    params: e,
                    loadMask: !1,
                    scope: this,
                    success: this.successSave,
                    callback: function(e, t, o) {
                        CMDBuild.core.LoadMask.hide()
                    }
                })) : CMDBuild.proxy.management.classes.panel.form.tabs.Card.update({
                    params: e,
                    loadMask: !1,
                    scope: this,
                    success: this.successSave,
                    callback: function(e, t, o) {
                        CMDBuild.core.LoadMask.hide()
                    }
                })
            }
        },
        onClassesFormTabCardShow: function(e) {
		//console.log(e);
            e = Ext.isObject(e) ? e : {}, this.cmfg("classesFormTabCardSelectedEntityIsEmpty") || this.cmfg("classesFormTabCardSelectedItemIsEmpty") || !this.cmfg("classesFormTabCardViewModeEquals", ["read", "readOnly"]) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                moduleId: CMDBuild.core.constants.ModuleIdentifiers.getClasses(),
                entryType: {
                    description: this.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.DESCRIPTION),
                    id: this.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.ID),
                    object: this.cmfg("classesFormTabCardSelectedEntityGet")
                },
                item: {
                    description: this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.DESCRIPTION) || this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.CODE),
                    id: this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID),
                    object: this.cmfg("classesFormTabCardSelectedItemGet")
                },
                section: {
                    description: this.view.title,
                    object: this.view
                }
            }), this.onPanelModuleFormTabShow(e)
        },
        onClassesFormTabCardPrintButtonClick: function(e) {
            if (Ext.isString(e) && !Ext.isEmpty(e)) {
                var t = {};
                t[CMDBuild.core.constants.Proxy.CARD_ID] = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID), t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), t[CMDBuild.core.constants.Proxy.FORMAT] = e, this.controllerPrintWindow.cmfg("panelGridAndFormPrintWindowShow", {
                    format: e,
                    mode: "cardDetails",
                    params: t
                })
            }
        },
        panelGridAndFormTabPanelGet: function() {
            return this.parentDelegate.view.cardTabPanel
        },
        readEntity: function(e, t) {
            if (t = Ext.isFunction(t) ? t : Ext.emptyFn, Ext.isString(e) && !Ext.isEmpty(e)) {
                var o = {};
                return o[CMDBuild.core.constants.Proxy.NAME] = e, CMDBuild.proxy.management.classes.panel.form.tabs.Card.readClassByName({
                    params: o,
                    loadMask: !1,
                    scope: this,
                    success: function(e, o, i) {
                        if (i = i[CMDBuild.core.constants.Proxy.RESPONSE], !Ext.isObject(i) || Ext.Object.isEmpty(i)) return _error("readEntity(): unmanaged response", this, i);
                        this.classesFormTabCardSelectedEntitySet({
                            value: i
                        }), Ext.callback(t, this)
                    }
                })
            }
            return Ext.callback(t, this)
        },
        readItem: function(e, t) {
		//console.log(e);
            return e = Ext.isObject(e) ? e : {}, t = Ext.isFunction(t) ? t : Ext.emptyFn, Ext.isNumber(e.cardId) && !Ext.isEmpty(e.cardId) && Ext.isString(e.className) && !Ext.isEmpty(e.className) ? CMDBuild.proxy.management.classes.panel.form.tabs.Card.read({
                params: e,
                loadMask: !1,
                scope: this,
                success: function(e, o, i) {
                    if (!Ext.isObject(i) || Ext.Object.isEmpty(i)) return _error("readItem(): unmanaged response", this, i);
                    this.classesFormTabCardSelectedItemSet({
                        value: i
                    }), Ext.callback(t, this)
                }
            }) : Ext.callback(t, this)
        },
        readItemAttributes: function(e) {
            if (e = Ext.isFunction(e) ? e : Ext.emptyFn, !this.cmfg("classesFormTabCardSelectedItemIsEmpty")) {
                var t = {};
                return t[CMDBuild.core.constants.Proxy.ACTIVE] = !0, t[CMDBuild.core.constants.Proxy.CLASS_NAME] = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), CMDBuild.proxy.management.classes.panel.form.tabs.Card.readAttributes({
                    params: t,
                    loadMask: !1,
                    scope: this,
                    success: function(t, o, i) {
                        if (i = i[CMDBuild.core.constants.Proxy.ATTRIBUTES], !Ext.isArray(i) || Ext.isEmpty(i)) return _error("readItemAttributes(): unmanaged response", this, i);
                        this.classesFormTabCardSelectedItemAttributesSet(i), Ext.callback(e, this)
                    }
                })
            }
            return Ext.callback(e, this)
        },
        readItemWidgets: function(e) {
            return e = Ext.isFunction(e) ? e : Ext.emptyFn, this.cmfg("classesFormTabCardSelectedItemIsEmpty", CMDBuild.core.constants.Proxy.ENTITY_NAME) ? Ext.callback(e, this) : CMDBuild.proxy.management.classes.panel.form.tabs.Card.readWidgets({
                loadMask: !1,
                scope: this,
                success: function(t, o, i) {
                    i = i[CMDBuild.core.constants.Proxy.RESPONSE];
                    var r = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME);
                    Ext.isObject(i) && !Ext.Object.isEmpty(i) && Ext.isDefined(i[r]) && this.classesFormTabCardSelectedItemWidgetsSet(i[r]), Ext.callback(e, this)
                }
            })
        },
        removeItem: function() {
            if (this.cmfg("classesFormTabCardSelectedItemIsEmpty")) return _error("removeItem(): unmanaged selectedItem property", this, this.cmfg("classesFormTabCardSelectedItemGet"));
            var e = {};
            e.Id = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID), e.IdClass = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_ID), CMDBuild.proxy.management.classes.panel.form.tabs.Card.remove({
                params: e,
                scope: this,
                success: function(e, t, o) {
                    this.parentDelegate.gridController.onCardDeleted(), _CMCache.onClassContentChanged(this.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.ID));
                    var i = {};
                    this.cmfg("classesFormTabCardSelectedEntityIsEmpty") || (i[CMDBuild.core.constants.Proxy.ENTITY_NAME] = this.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME)), this.cmfg("classesFormTabCardUiUpdate", i)
                }
            })
        },
        successSave: function(e, t, o) {
            if (!Ext.isObject(o) || Ext.Object.isEmpty(o)) return _error("successSave(): unmanaged response", this, o);
            var i = {
                Id: o[CMDBuild.core.constants.Proxy.ID] || this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID),
                IdClass: this.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.ID)
            };
            this.parentDelegate.gridController.onCardSaved(i), this.parentDelegate.controllerMap.onCardSaved(i), _CMCache.onClassContentChanged(this.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.ID)), _CMUIState.onlyGridIfFullScreen(), (i = {})[CMDBuild.core.constants.Proxy.ITEM_ENTITY_NAME] = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), i[CMDBuild.core.constants.Proxy.ITEM_ID] = o[CMDBuild.core.constants.Proxy.ID] || this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID), this.cmfg("classesFormTabCardSelectedEntityIsEmpty") || (i[CMDBuild.core.constants.Proxy.ENTITY_NAME] = this.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME)), this.cmfg("classesFormTabCardUiUpdate", i)
        },
        classesFormTabCardSelectedItemIsWritable: function() {
            var e = !0;
            if (Ext.isObject(this.selectedItem) && !Ext.isEmpty(this.selectedItem)) {
                var t = this.selectedItem;
                if (Ext.isObject(t.data) && !Ext.isEmpty(t.data)) {
                    var o = t.data;
                    Ext.isObject(o[CMDBuild.core.constants.Proxy.PERMISSIONS]) && !Ext.isEmpty(o[CMDBuild.core.constants.Proxy.PERMISSIONS]) && (e = "true" == o[CMDBuild.core.constants.Proxy.PERMISSIONS][CMDBuild.core.constants.Proxy.WRITABLE])
                }
            }
            return e
        }
    }), Ext.define("CMDBuild.proxy.management.classes.panel.form.tabs.Card", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        create: function(e) {
		/*ayaw*/
		//console.log(CMDBuild.core.constants.Proxy.CARD);
		//console.log(e);
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, 
			{
                url: CMDBuild.proxy.index.Json.card.create
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CARD, e, !0)
        },
        lock: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.card.lock
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        },
        read: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.card.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CARD, e)
        },
        readAttributes: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.attribute.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTRIBUTE, e)
        },
        readClassByName: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.classes.readByName
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CLASS, e)
        },
        readWidgets: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.widget.readAll
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.WIDGET, e)
        },
        remove: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.card.remove
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CARD, e, !0)
        },
        unlock: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.card.unlock
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.UNCACHED, e)
        },
        update: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.card.update
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CARD, e, !0)
        }
    }), Ext.define("CMDBuild.view.management.classes.panel.form.tabs.card.TabView", {
        extend: "CMDBuild.view.common.panel.module.form.TabView",
        delegate: void 0,
        title: CMDBuild.Translation.card
    }), Ext.define("CMDBuild.controller.management.classes.panel.form.tabs.card.panel.Panel", {
        extend: "CMDBuild.controller.common.panel.module.form.panel.Panel",
        parentDelegate: void 0,
        controllerPanelTab: void 0,
        controllerToolbarBottom: void 0,
        controllerToolbarTop: void 0,
        subClassesNames: {
            panelTab: "CMDBuild.controller.common.panel.module.form.panel.FieldsTab",
            toolbarBottom: "CMDBuild.controller.management.classes.panel.form.tabs.card.toolbar.Bottom",
            toolbarTop: "CMDBuild.controller.management.classes.panel.form.tabs.card.toolbar.Top",
            view: "CMDBuild.view.common.panel.module.form.panel.PanelView"
        },
        view: void 0,
        panelModuleFormPanelUiUpdate: function() {
            this.controllerToolbarBottom.cmfg("panelModuleFormToolbarBottomUiUpdate"), this.controllerToolbarTop.cmfg("classesFormTabCardToolbarTopUiUpdate")
        }
    }), Ext.define("CMDBuild.controller.management.classes.panel.form.tabs.card.toolbar.Bottom", {
        extend: "CMDBuild.controller.common.panel.module.form.toolbar.Bottom",
        parentDelegate: void 0,
        onPanelModuleFormToolbarBottomAbortButtonClick: function() {
            var e = {};
            switch (this.cmfg("panelGridAndFormSelectedEntityIsEmpty") || (e[CMDBuild.core.constants.Proxy.ENTITY_NAME] = this.cmfg("panelGridAndFormSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME)), this.cmfg("panelGridAndFormViewModeGet")) {
                case "add":
                case "clone":
                    this.cmfg("panelGridAndFormSelectedPreviousItemIsEmpty") || (e[CMDBuild.core.constants.Proxy.ITEM_ENTITY_NAME] = this.cmfg("panelGridAndFormSelectedPreviousItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), e[CMDBuild.core.constants.Proxy.ITEM_ID] = this.cmfg("panelGridAndFormSelectedPreviousItemGet", CMDBuild.core.constants.Proxy.ID));
                    break;
                case "edit":
                    this.cmfg("panelGridAndFormSelectedItemIsEmpty") || (e[CMDBuild.core.constants.Proxy.ITEM_ENTITY_NAME] = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), e[CMDBuild.core.constants.Proxy.ITEM_ID] = this.cmfg("panelGridAndFormSelectedItemGet", CMDBuild.core.constants.Proxy.ID))
            }
            this.cmfg("panelGridAndFormUiUpdate", e), this.parentDelegate.parentDelegate.parentDelegate.gridController.openCard({
                Id: this.cmfg("panelGridAndFormSelectedPreviousItemGet", CMDBuild.core.constants.Proxy.ID),
                IdClass: this.cmfg("panelGridAndFormSelectedEntityGet", CMDBuild.core.constants.Proxy.ID)
            }, !0)
        },
        panelModuleFormToolbarBottomUiUpdate: function() {
            switch (this.cmfg("panelGridAndFormViewModeGet")) {
                case "add":
                case "clone":
                case "edit":
                    return this.cmfg("panelModuleFormPanelToolbarBottomDisabledStateSet", {
                        state: !1
                    });
                case "read":
                default:
                    return this.cmfg("panelModuleFormPanelToolbarBottomDisabledStateSet", {
                        state: !0
                    })
            }
        }
    }), Ext.define("CMDBuild.view.common.panel.module.form.toolbar.BottomView", {
        extend: "CMDBuild.view.common.panel.module.form.toolbar.gridAndForm.BottomView",
        delegate: void 0,
        initComponent: function() {
            Ext.apply(this, {
                items: [Ext.create("CMDBuild.core.buttons.text.Save", {
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onPanelModuleFormToolbarBottomSaveButtonClick")
                    }
                }), Ext.create("CMDBuild.core.buttons.text.Abort", {
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onPanelModuleFormToolbarBottomAbortButtonClick")
                    }
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.management.classes.panel.form.tabs.card.toolbar.Top", {
        extend: "CMDBuild.controller.common.panel.module.form.toolbar.Top",
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["classesFormTabCardToolbarTopUiUpdate", "onClassesFormTabCardToolbarTopCloneButtonClick", "onClassesFormTabCardToolbarTopGraphButtonClick", "onClassesFormTabCardToolbarTopSplitCloneRelationsButtonClick", "onClassesFormTabCardToolbarTopModifyButtonClick", "panelGridAndFormMixinsToolbarFunctionsDisabledStateSet = classesFormTabCardToolbarTopFunctionsDisabledStateSet, panelModuleFormPanelToolbarTopDisabledStateSet", "panelModuleFormToolbarTopReset"],
        subClassesNames: {
            view: "CMDBuild.view.management.classes.panel.form.tabs.card.toolbar.TopView"
        },
        view: void 0,
        classesFormTabCardToolbarTopUiUpdate: function() {
            switch (this.cmfg("panelGridAndFormViewModeGet")) {
                case "add":
                case "clone":
                case "edit":
                    return this.cmfg("classesFormTabCardToolbarTopFunctionsDisabledStateSet", {
                        state: !this.cmfg("panelGridAndFormSelectedEntityIsEmpty") || !this.cmfg("panelGridAndFormSelectedItemIsEmpty")
                    });
                case "read":
                case "readOnly":
                default:
                    this.cmfg("classesFormTabCardToolbarTopFunctionsDisabledStateSet", {
                        state: this.cmfg("panelGridAndFormSelectedEntityIsEmpty") || this.cmfg("panelGridAndFormSelectedItemIsEmpty") || !this.cmfg("panelGridAndFormSelectedEntityGet", [CMDBuild.core.constants.Proxy.PERMISSIONS, CMDBuild.core.constants.Proxy.WRITE])
                    }), this.view.buttonClone.setDisabled(this.cmfg("panelGridAndFormSelectedEntityGet", [CMDBuild.core.constants.Proxy.CAPABILITIES, CMDBuild.core.constants.Proxy.CLONE_DISABLED])), this.view.buttonModify.setDisabled(this.cmfg("panelGridAndFormSelectedEntityGet", [CMDBuild.core.constants.Proxy.CAPABILITIES, CMDBuild.core.constants.Proxy.MODIFY_DISABLED])), this.cmfg("classesFormTabCardSelectedItemIsWritable") || (this.view.buttonModify.setDisabled(!0), this.view.buttonClone.setDisabled(!0), this.view.buttonRemove.setDisabled(!0)), this.view.buttonRelationGraph.setDisabled(!CMDBuild.configuration.graph.get(CMDBuild.core.constants.Proxy.ENABLED))
            }
        },
        onClassesFormTabCardToolbarTopCloneButtonClick: function() {
            var e = {};
            e[CMDBuild.core.constants.Proxy.FULL_SCREEN] = "bottom", e[CMDBuild.core.constants.Proxy.VIEW_MODE] = "clone", this.cmfg("classesFormTabCardSelectedEntityIsEmpty") || (e[CMDBuild.core.constants.Proxy.ENTITY_NAME] = this.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME)), this.cmfg("classesFormTabCardSelectedItemIsEmpty") || (e[CMDBuild.core.constants.Proxy.ITEM_ENTITY_NAME] = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), e[CMDBuild.core.constants.Proxy.ITEM_ID] = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID)), this.cmfg("classesFormTabCardUiUpdate", e)
        },
        onClassesFormTabCardToolbarTopGraphButtonClick: function() {
            if (this.cmfg("classesFormTabCardSelectedItemIsEmpty")) return _error("onClassesFormTabCardToolbarTopGraphButtonClick(): unmanaged selectedItem parameter", this, this.cmfg("classesFormTabCardSelectedItemGet"));
            Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.graph.Window", {
                parentDelegate: this,
                cardId: this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID),
                classId: this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_ID)
            })
        },
        onClassesFormTabCardToolbarTopSplitCloneRelationsButtonClick: function() {
            Ext.create("CMDBuild.controller.common.panel.gridAndForm.panel.common.clone.Window", {
                parentDelegate: this,
                className: this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME),
                cardId: this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID),
                classId: this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_ID)
            })
        },
        onClassesFormTabCardToolbarTopModifyButtonClick: function() {
            var e = {};
            e[CMDBuild.core.constants.Proxy.FULL_SCREEN] = "bottom", e[CMDBuild.core.constants.Proxy.VIEW_MODE] = "edit", this.cmfg("classesFormTabCardSelectedEntityIsEmpty") || (e[CMDBuild.core.constants.Proxy.ENTITY_NAME] = this.cmfg("classesFormTabCardSelectedEntityGet", CMDBuild.core.constants.Proxy.NAME)), this.cmfg("classesFormTabCardSelectedItemIsEmpty") || (e[CMDBuild.core.constants.Proxy.ITEM_ENTITY_NAME] = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ENTITY_NAME), e[CMDBuild.core.constants.Proxy.ITEM_ID] = this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.ID)), this.cmfg("classesFormTabCardUiUpdate", e)
        }
    }), Ext.define("CMDBuild.view.management.classes.panel.form.tabs.card.toolbar.TopView", {
        extend: "CMDBuild.view.common.panel.module.form.toolbar.TopView",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        buttonClone: void 0,
        buttonModify: void 0,
        buttonPrint: void 0,
        buttonRelationGraph: void 0,
        buttonRemove: void 0,
        initComponent: function() {
            Ext.apply(this, {
                items: [this.buttonModify = Ext.create("CMDBuild.core.buttons.iconized.Modify", {
                    text: CMDBuild.Translation.modifyCard,
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onClassesFormTabCardToolbarTopModifyButtonClick")
                    }
                }), this.buttonRemove = Ext.create("CMDBuild.core.buttons.iconized.Remove", {
                    text: CMDBuild.Translation.removeCard,
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onClassesFormTabCardRemoveButtonClick")
                    }
                }), this.buttonClone = Ext.create("CMDBuild.core.buttons.iconized.split.Clone", {
                    delegate: this.delegate
                }), this.buttonRelationGraph = Ext.create("CMDBuild.core.buttons.iconized.RelationGraph", {
                    scope: this,
                    handler: function(e, t) {
                        this.delegate.cmfg("onClassesFormTabCardToolbarTopGraphButtonClick")
                    }
                }), this.buttonPrint = Ext.create("CMDBuild.core.buttons.iconized.split.Print", {
                    delegate: this.delegate,
                    delegateEventPrefix: "onClassesFormTabCard",
                    formatList: [CMDBuild.core.constants.Proxy.PDF, CMDBuild.core.constants.Proxy.ODT],
                    text: CMDBuild.Translation.print + " " + CMDBuild.Translation.card.toLowerCase()
                })]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.management.classes.panel.form.tabs.card.widget.panel.ButtonGroup", {
        extend: "CMDBuild.controller.common.panel.module.widget.panel.ButtonGroup",
        uses: ["CMDBuild.core.constants.Proxy"],
        parentDelegate: void 0,
        view: void 0,
        panelModuleWidgetButtonGroupUiUpdate: function() {
            switch (this.cmfg("panelModuleWidgetButtonGroupReset"), this.cmfg("panelGridAndFormSelectedItemWidgetsIsEmpty") || this.controllerWidgetManager.buildControllers(Ext.create("CMDBuild.model.common.Generic", this.cmfg("classesFormTabCardSelectedItemGet", CMDBuild.core.constants.Proxy.SOURCE_OBJECT))), this.cmfg("panelGridAndFormViewModeGet")) {
                case "add":
                case "edit":
                    this.onCardGoesInEdit(), this.view.items.each(function(e, t, o) {
                        e.enable()
                    });
                    break;
                case "read":
                case "readOnly":
                default:
                    this.view.items.each(function(e, t, o) {
                        e.disable()
                    })
            }
        }
    }), Ext.define("CMDBuild.controller.management.classes.common.attachment.Window", {
        extend: "CMDBuild.controller.common.panel.module.attachment.Window",
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["classesFormTemplateResolverFormGet = panelGridAndFormPanelFormTemplateResolverFormGet", "onPanelModuleAttachmentWindowCloseButtonClick", "panelModuleAttachmentWindowConfigureAndShow", "panelModuleAttachmentWindowSelectedEntityGet = panelGridAndFormSelectedEntityGet", "panelModuleAttachmentWindowSelectedEntityIsEmpty = panelGridAndFormSelectedEntityIsEmpty", "panelModuleAttachmentWindowSelectedItemGet = panelGridAndFormSelectedItemGet", "panelModuleAttachmentWindowSelectedItemIsEmpty = panelGridAndFormSelectedItemIsEmpty"],
        classesFormTemplateResolverFormGet: function() {
            return this.parentDelegate.superController.getFormForTemplateResolver()
        }
    }), Ext.define("CMDBuild.controller.management.classes.panel.form.tabs.masterDetail.window.Note", {
        extend: "CMDBuild.controller.common.abstract.Base",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.classes.panel.form.tabs.masterDetail.window.Note"],
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["classesFormTabMasterDetailWindowNoteConfigureAndShow"],
        view: void 0,
        constructor: function(e) {
            this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.classes.panel.form.tabs.masterDetail.window.NoteView", {
                delegate: this
            })
        },
        classesFormTabMasterDetailWindowNoteConfigureAndShow: function(e) {
		//alert("classesFormTabMasterDetailWindowNoteConfigureAndShow");
            if (e = Ext.isObject(e) ? e : {}, !Ext.isNumber(e.cardId) || Ext.isEmpty(e.cardId)) return _error("classesFormTabMasterDetailWindowNoteConfigureAndShow(): unmanaged cardId parameter", this, e.cardId);
            if (!Ext.isString(e.className) || Ext.isEmpty(e.className)) return _error("classesFormTabMasterDetailWindowNoteConfigureAndShow(): unmanaged className parameter", this, e.className);
            var t = {};
            t[CMDBuild.core.constants.Proxy.CARD_ID] = e.cardId, t[CMDBuild.core.constants.Proxy.CLASS_NAME] = e.className, CMDBuild.proxy.management.classes.panel.form.tabs.masterDetail.window.Note.read({
                params: t,
                scope: this,
                success: function(e, t, o) {
				//alert("aaaa");
                    o = o[CMDBuild.core.constants.Proxy.CARD], Ext.isObject(o) && !Ext.Object.isEmpty(o) ? (this.view.fieldNote.setValue(o.Notes), this.setViewTitle([o.Description]), this.view.show()) : _error("classesFormTabMasterDetailWindowNoteConfigureAndShow(): unmanaged response", this, o)
                }
            })
        }
    }), Ext.define("CMDBuild.proxy.management.classes.panel.form.tabs.masterDetail.window.Note", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json"],
        singleton: !0,
        read: function(e) {
		//console.log(e);
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.card.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CARD, e)
        }
    }), Ext.define("CMDBuild.view.management.classes.panel.form.tabs.masterDetail.window.NoteView", {
        extend: "CMDBuild.core.window.AbstractCustomModal",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        baseTitle: CMDBuild.Translation.notes,
        dimensionsMode: "percentage",
        fieldNote: void 0,
        border: !0,
        bodyCls: "cmdb-blue-panel",
        closeAction: "hide",
        frame: !1,
        overflowY: "auto",
        layout: {
            type: "vbox",
            align: "stretch"
        },
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "bottom",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_BOTTOM,
                    ui: "footer",
                    layout: {
                        type: "hbox",
                        align: "middle",
                        pack: "center"
                    },
                    items: [Ext.create("CMDBuild.core.buttons.text.Close", {
                        scope: this,
                        handler: function(e, t) {
                            this.close()
                        }
                    })]
                })],
                items: [this.fieldNote = Ext.create("Ext.form.field.Display")]
            }), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.proxy.management.classes.tabs.History", {
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.index.Json", "CMDBuild.model.classes.tabs.history.CardRecord"],
        singleton: !0,
        getStore: function() {
            return CMDBuild.global.Cache.requestAsStore(CMDBuild.core.constants.Proxy.HISTORY, {
                autoLoad: !1,
                model: "CMDBuild.model.classes.tabs.history.CardRecord",
                proxy: {
                    type: "ajax",
                    url: CMDBuild.proxy.index.Json.history.classes.card.read,
                    reader: {
                        type: "json",
                        root: CMDBuild.core.constants.Proxy.RESPONSE + "." + CMDBuild.core.constants.Proxy.ELEMENTS
                    }
                },
                sorters: [{
                    property: CMDBuild.core.constants.Proxy.BEGIN_DATE,
                    direction: "DESC"
                }]
            })
        },
        readAttributes: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.attribute.read
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.ATTRIBUTE, e)
        },
        readClassById: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.classes.readById
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.CLASS, e)
        },
        readHistoric: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.history.classes.card.readHistoric
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.HISTORY, e)
        },
        readHistoricRelation: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.history.classes.card.readHistoricRelation
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.HISTORY, e)
        },
        readRelations: function(e) {
            e = Ext.isEmpty(e) ? {} : e, Ext.apply(e, {
                url: CMDBuild.proxy.index.Json.history.classes.card.readRelations
            }), CMDBuild.global.Cache.request(CMDBuild.core.constants.Proxy.HISTORY, e)
        }
    }), Ext.define("CMDBuild.model.classes.tabs.history.CardRecord", {
        extend: "Ext.data.Model",
        uses: ["CMDBuild.core.configurations.DataFormat", "CMDBuild.core.constants.Proxy"],
        fields: [{
            name: CMDBuild.core.constants.Proxy.BEGIN_DATE,
            type: "date",
            dateFormat: CMDBuild.core.configurations.DataFormat.getDateTime()
        }, {
            name: CMDBuild.core.constants.Proxy.CLASS_NAME,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.END_DATE,
            type: "date",
            dateFormat: CMDBuild.core.configurations.DataFormat.getDateTime()
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "int",
            useNull: !0
        }, {
            name: CMDBuild.core.constants.Proxy.IS_CARD,
            type: "boolean",
            defaultValue: !0
        }, {
            name: CMDBuild.core.constants.Proxy.IS_RELATION,
            type: "boolean",
            defaultValue: !1
        }, {
            name: CMDBuild.core.constants.Proxy.USER,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.VALUES,
            type: "auto"
        }]
    }), Ext.define("CMDBuild.view.management.classes.tabs.history.HistoryView", {
        extend: "Ext.panel.Panel",
        delegate: void 0,
        grid: void 0,
        border: !1,
        cls: "x-panel-body-default-framed",
        frame: !1,
        layout: "fit",
        title: CMDBuild.Translation.history,
        initComponent: function() {
            Ext.apply(this, {
                items: [this.grid = Ext.create("CMDBuild.view.management.classes.tabs.history.GridPanel", {
                    delegate: this.delegate
                })]
            }), this.callParent(arguments)
        },
        listeners: {
            show: function(e, t) {
                this.delegate.cmfg("onClassesTabHistoryPanelShow")
            }
        },
        reset: function() {
            this.setDisabled(this.delegate.cmfg("classesTabHistorySelectedCardIsEmpty"))
        }
    }), Ext.define("CMDBuild.view.management.classes.tabs.history.GridPanel", {
        extend: "Ext.grid.Panel",
        uses: ["CMDBuild.core.configurations.DataFormat", "CMDBuild.core.constants.Proxy", "CMDBuild.proxy.management.classes.tabs.History"],
        delegate: void 0,
        includeRelationsCheckbox: void 0,
        config: {
            plugins: [Ext.create("CMDBuild.view.management.classes.tabs.history.RowExpander", {
                id: "classesHistoryTabRowExpander"
            })]
        },
        autoScroll: !0,
        border: !1,
        cls: "cmdb-history-grid",
        disableSelection: !0,
        frame: !1,
        initComponent: function() {
            Ext.apply(this, {
                dockedItems: [Ext.create("Ext.toolbar.Toolbar", {
                    dock: "top",
                    itemId: CMDBuild.core.constants.Proxy.TOOLBAR_TOP,
                    items: ["->", this.includeRelationsCheckbox = Ext.create("Ext.form.field.Checkbox", {
                        boxLabel: CMDBuild.Translation.includeRelations,
                        boxLabelCls: "cmdb-toolbar-item",
                        checked: !1,
                        scope: this,
                        handler: function(e, t) {
                            this.delegate.cmfg("onClassesTabHistoryIncludeRelationCheck")
                        }
                    })]
                })],
                columns: this.buildColumns(),
                store: CMDBuild.proxy.management.classes.tabs.History.getStore()
            }), this.callParent(arguments)
        },
        listeners: {
            viewready: function(e, t) {
                this.getView().on("expandbody", function(e, t, o, i) {
                    this.doLayout(), this.delegate.cmfg("onClassesTabHistoryRowExpand", t)
                }, this)
            }
        },
        buildColumns: function() {
            var e = [Ext.create("Ext.grid.column.Date", {
                dataIndex: CMDBuild.core.constants.Proxy.BEGIN_DATE,
                text: CMDBuild.Translation.beginDate,
                width: 140,
                format: CMDBuild.core.configurations.DataFormat.getDateTime(),
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                fixed: !0
            }), Ext.create("Ext.grid.column.Date", {
                dataIndex: CMDBuild.core.constants.Proxy.END_DATE,
                text: CMDBuild.Translation.endDate,
                width: 140,
                format: CMDBuild.core.configurations.DataFormat.getDateTime(),
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                fixed: !0
            }), {
                dataIndex: CMDBuild.core.constants.Proxy.USER,
                text: CMDBuild.Translation.user,
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                flex: 1
            }];
            return CMDBuild.configuration.userInterface.get(CMDBuild.core.constants.Proxy.SIMPLE_HISTORY_MODE_FOR_CARD) || Ext.Array.push(e, [Ext.create("Ext.ux.grid.column.Tick", {
                dataIndex: CMDBuild.core.constants.Proxy.IS_CARD,
                text: CMDBuild.Translation.attributes,
                iconAltText: CMDBuild.Translation.attributes,
                width: 65,
                align: "center",
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                fixed: !0
            }), Ext.create("Ext.ux.grid.column.Tick", {
                dataIndex: CMDBuild.core.constants.Proxy.IS_RELATION,
                text: CMDBuild.Translation.relation,
                iconAltText: CMDBuild.Translation.relation,
                width: 65,
                align: "center",
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                fixed: !0
            }), {
                dataIndex: CMDBuild.core.constants.Proxy.DOMAIN,
                text: CMDBuild.Translation.domain,
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                flex: 1
            }, {
                dataIndex: CMDBuild.core.constants.Proxy.DESTINATION_DESCRIPTION,
                text: CMDBuild.Translation.descriptionLabel,
                sortable: !1,
                hideable: !1,
                menuDisabled: !0,
                flex: 1
            }]), e
        }
    }), Ext.define("CMDBuild.view.management.classes.tabs.history.RowExpander", {
        extend: "Ext.grid.plugin.RowExpander",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.core.Utils"],
        expandOnEnter: !1,
        selectRowOnExpand: !1,
        rowBodyTpl: new Ext.XTemplate('<tpl exec="this.formatter(' + CMDBuild.core.constants.Proxy.VALUES + ')"></tpl>', '<tpl for="this.formattedArray">', '<tpl if="' + CMDBuild.core.constants.Proxy.CHANGED + '">', '<p class="changedRow">', "<tpl else>", "<p>", "</tpl>", "<b>{attribute}:</b> {value}</p>", "</tpl>", '<tpl if="this.formattedArray.length == 0">', "<p>" + CMDBuild.Translation.noAvailableData + "<p>", "</tpl>", {
            formatter: function(e) {
                Ext.isEmpty(e) || (this.formattedArray = [], Ext.Object.each(e, function(e, t, o) {
                    this.formattedArray.push({
                        attribute: t.get(CMDBuild.core.constants.Proxy.ATTRIBUTE_DESCRIPTION) || e,
                        changed: t.get(CMDBuild.core.constants.Proxy.CHANGED),
                        index: t.get(CMDBuild.core.constants.Proxy.INDEX),
                        value: t.get(CMDBuild.core.constants.Proxy.DESCRIPTION)
                    })
                }, this), CMDBuild.core.Utils.objectArraySort(this.formattedArray, CMDBuild.core.constants.Proxy.INDEX))
            }
        })
    }), Ext.define("CMDBuild.controller.management.classes.tabs.Email", {
        extend: "CMDBuild.controller.management.common.tabs.email.Email",
        uses: ["CMDBuild.core.constants.Proxy", "CMDBuild.proxy.common.tabs.email.Email"],
        mixins: {
            observable: "Ext.util.Observable"
        },
        card: void 0,
        cardStateDelegate: void 0,
        parentDelegate: void 0,
        entryType: void 0,
        view: void 0,
        constructor: function(e) {
            this.mixins.observable.constructor.call(this, arguments), this.cmfgCatchedFunctions.push("classesFormTemplateResolverFormGet = panelGridAndFormPanelFormTemplateResolverFormGet"), this.callParent(arguments), this.view = Ext.create("CMDBuild.view.management.common.tabs.email.EmailView", {
                delegate: this
            }), this.view.add(this.grid), this.buildCardModuleStateDelegate()
        },
        buildCardModuleStateDelegate: function() {
            var e = this;
            this.cardStateDelegate = new CMDBuild.state.CMCardModuleStateDelegate, this.cardStateDelegate.onEntryTypeDidChange = function(t, o) {
                e.onEntryTypeSelected(o)
            }, this.cardStateDelegate.onCardDidChange = function(t, o) {
                Ext.suspendLayouts(), e.onCardSelected(o), Ext.resumeLayouts()
            }, _CMCardModuleState.addDelegate(this.cardStateDelegate), Ext.isEmpty(this.view) || this.mon(this.view, "destroy", function(t) {
                _CMCardModuleState.removeDelegate(e.cardStateDelegate), delete this.cardStateDelegate
            }, this)
        },
        classesFormTemplateResolverFormGet: function() {
            return this.parentDelegate.getFormForTemplateResolver()
        },
        onAbortCardClick: function() {
            this.cmfg("tabEmailEditModeSet", !1), this.cmfg("tabEmailConfigurationReset")
        },
        onCardSelected: function(e) {
            Ext.isEmpty(e) || (this.card = e, this.cmfg("tabEmailConfigurationReset"), this.cmfg("tabEmailConfigurationSet", {
                propertyName: CMDBuild.core.constants.Proxy.READ_ONLY,
                value: !1
            }), this.cmfg("tabEmailEditModeSet", !1), this.cmfg("tabEmailSelectedEntitySet", {
                selectedEntity: this.card,
                scope: this,
                callbackFunction: function(e, t, o) {
                    this.cmfg("tabEmailRegenerateAllEmailsSet", Ext.isEmpty(this.card)), this.forceRegenerationSet(Ext.isEmpty(this.card)), this.cmfg("onTabEmailPanelShow")
                }
            }))
        },
        onCloneCard: function() {
            this.card = null, this.cmfg("tabEmailConfigurationSet", {
                propertyName: CMDBuild.core.constants.Proxy.READ_ONLY,
                value: !1
            }), this.cmfg("tabEmailEditModeSet", !0), this.cmfg("tabEmailSelectedEntitySet", {
                selectedEntity: this.card,
                scope: this,
                callbackFunction: function(e, t, o) {
                    this.cmfg("tabEmailRegenerateAllEmailsSet", Ext.isEmpty(this.card)), this.forceRegenerationSet(Ext.isEmpty(this.card)), this.cmfg("onTabEmailPanelShow")
                }
            })
        },
        onEntryTypeSelected: function(e, t, o) {
            this.entryType = e, this.cmfg("tabEmailConfigurationSet", {
                propertyName: CMDBuild.core.constants.Proxy.READ_ONLY,
                value: !1
            }), this.cmfg("tabEmailEditModeSet", !1)
        },
        onModifyCardClick: function() {
            var e = {};
            e[CMDBuild.core.constants.Proxy.CLASS_NAME] = _CMCache.getEntryTypeNameById(this.card.get("IdClass")), e[CMDBuild.core.constants.Proxy.CARD_ID] = this.card.get(CMDBuild.core.constants.Proxy.ID), CMDBuild.proxy.common.tabs.email.Email.isEmailEnabledForCard({
                params: e,
                scope: this,
                loadMask: !0,
                success: function(e, t, o) {
                    this.cmfg("tabEmailConfigurationSet", {
                        propertyName: CMDBuild.core.constants.Proxy.READ_ONLY,
                        value: !o[CMDBuild.core.constants.Proxy.RESPONSE]
                    }), this.cmfg("tabEmailEditModeSet", o[CMDBuild.core.constants.Proxy.RESPONSE]), this.grid.getStore().isLoading() || this.cmfg("onTabEmailGlobalRegenerationButtonClick")
                }
            })
        },
        onSaveCardClick: function() {
            this.cmfg("tabEmailSendAllOnSaveSet", !0), this.grid.getStore().isLoading() || (this.cmfg("tabEmailRegenerateAllEmailsSet", !0), this.cmfg("onTabEmailPanelShow"))
        },
        onTabEmailPanelShow: function() {
            this.view.isVisible() && (Ext.isEmpty(_CMCardModuleState.entryType) || Ext.isEmpty(_CMCardModuleState.card) || CMDBuild.global.navigation.Chronology.cmfg("navigationChronologyRecordSave", {
                moduleId: "class",
                entryType: {
                    description: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.TEXT),
                    id: _CMCardModuleState.entryType.get(CMDBuild.core.constants.Proxy.ID),
                    object: _CMCardModuleState.entryType
                },
                item: {
                    description: _CMCardModuleState.card.get("Description") || _CMCardModuleState.card.get("Code"),
                    id: _CMCardModuleState.card.get("Id"),
                    object: _CMCardModuleState.card
                },
                section: {
                    description: this.view.title,
                    object: this.view
                }
            })), this.callParent(arguments)
        }
    }), Ext.define("CMDBuild.controller.management.classes.panel.form.tabs.Attachment", {
        extend: "CMDBuild.controller.common.panel.module.attachment.Tab",
        uses: ["CMDBuild.core.constants.Global", "CMDBuild.core.constants.ModuleIdentifiers", "CMDBuild.core.constants.Proxy"],
        mixins: {
            observable: "Ext.util.Observable"
        },
        parentDelegate: void 0,
        cmfgCatchedFunctions: ["classesFormTabAttachmentSelectedCardGet = panelGridAndFormSelectedItemGet", "classesFormTabAttachmentSelectedCardIsEmpty = panelGridAndFormSelectedItemIsEmpty", "classesFormTabAttachmentSelectedEntityGet = panelGridAndFormSelectedEntityGet", "classesFormTabAttachmentSelectedEntityIsEmpty = panelGridAndFormSelectedEntityIsEmpty", "classesFormTemplateResolverFormGet = panelGridAndFormPanelFormTemplateResolverFormGet", "classesIdentifierGet = panelGridAndFormIdentifierGet", "onClassesFormTabAttachmentShowCallback = onPanelModuleAttachmentTabShowCallback", "onPanelModuleAttachmentTabBackButtonClick", "onPanelModuleAttachmentTabShow = onClassesFormTabAttachmentShow", "panelModuleAttachmentTabReset = classesFormTabAttachmentReset"],
        selectedCard: void 0,
        selectedEntity: void 0,
        constructor: function(e) {
            this.mixins.observable.constructor.call(this, arguments), this.callParent(arguments), this.buildCardModuleStateDelegate()
        },
        buildCardModuleStateDelegate: function() {
            var e = this;
            this.cardStateDelegate = new CMDBuild.state.CMCardModuleStateDelegate, this.cardStateDelegate.onEntryTypeDidChange = function(t, o) {
                e.onEntryTypeSelected(o)
            }, this.cardStateDelegate.onModifyCardClick = function(t) {
                e.onModifyCardClick()
            }, this.cardStateDelegate.onCardDidChange = function(t, o) {
                Ext.suspendLayouts(), e.onCardSelected(o), Ext.resumeLayouts()
            }, _CMCardModuleState.addDelegate(this.cardStateDelegate), this.view && this.mon(e.view, "destroy", function(t) {
                _CMCardModuleState.removeDelegate(e.cardStateDelegate), delete e.cardStateDelegate
            })
        },
        classesIdentifierGet: function() {
            return CMDBuild.core.constants.ModuleIdentifiers.getClasses()
        },
        classesFormTabAttachmentSelectedCardGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedCard", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageGet(t)
        },
        classesFormTabAttachmentSelectedCardIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedCard", t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, this.propertyManageIsEmpty(t)
        },
        classesFormTabAttachmentSelectedCardReset: function() {
            this.propertyManageReset("selectedCard")
        },
        classesFormTabAttachmentSelectedCardSet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.classes.panel.form.tabs.attachment.SelectedCard", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedCard", this.propertyManageSet(e))
        },
        classesFormTabAttachmentSelectedEntityGet: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntity", this.propertyManageGet(t)
        },
        classesFormTabAttachmentSelectedEntityIsEmpty: function(e) {
            var t = {};
            return t[CMDBuild.core.constants.Proxy.ATTRIBUTE_PATH] = e, t[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntity", this.propertyManageIsEmpty(t)
        },
        classesFormTabAttachmentSelectedEntityReset: function() {
            return this.propertyManageReset("selectedEntity")
        },
        classesFormTabAttachmentSelectedEntitySet: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (e[CMDBuild.core.constants.Proxy.MODEL_NAME] = "CMDBuild.model.management.classes.panel.form.tabs.attachment.entity.Entity", e[CMDBuild.core.constants.Proxy.TARGET_VARIABLE_NAME] = "selectedEntity", this.propertyManageSet(e))
        },
        classesFormTemplateResolverFormGet: function() {
            return this.parentDelegate.getFormForTemplateResolver()
        },
        onAddCardButtonClick: function() {
            this.view.disable()
        },
        onClassesFormTabAttachmentShowCallback: function() {
            this.grid.buttonAdd.setDisabled(!this.cmfg("panelGridAndFormSelectedEntityGet", [CMDBuild.core.constants.Proxy.PERMISSIONS, CMDBuild.core.constants.Proxy.WRITE])), this.controllerGrid.cmfg("panelModuleAttachmentGridStoreLoad")
        },
        onCloneCard: function() {
            this.view.disable()
        },
        onCardSelected: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.classesFormTabAttachmentSelectedCardSet({
                value: e.getData()
            }), this.view.setDisabled(!CMDBuild.configuration.dms.get(CMDBuild.core.constants.Proxy.ENABLED) || this.cmfg("classesFormTabAttachmentSelectedEntityIsEmpty") || this.cmfg("classesFormTabAttachmentSelectedEntityGet", CMDBuild.core.constants.Proxy.TABLE_TYPE) == CMDBuild.core.constants.Global.getTableTypeSimpleTable()), this.view.isVisible() && this.cmfg("onClassesFormTabAttachmentShow"))
        },
        onEntryTypeSelected: function(e) {
            Ext.isObject(e) && !Ext.Object.isEmpty(e) && (this.classesFormTabAttachmentSelectedCardReset(), this.classesFormTabAttachmentSelectedEntityReset(), this.classesFormTabAttachmentSelectedEntitySet({
                value: e.getData()
            }), this.cmfg("classesFormTabAttachmentReset"))
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.common.tabs.email.SelectedEntity", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.ENTITY,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "int",
            useNull: !0
        }]
    }), Ext.define("CMDBuild.view.common.MainViewport", {
        extend: "Ext.container.Viewport",
        uses: ["CMDBuild.core.constants.Proxy"],
        delegate: void 0,
        moduleContainer: void 0,
        border: !1,
        frame: !1,
        layout: "border",
        initComponent: function() {
            Ext.apply(this, {
                items: [Ext.create("Ext.panel.Panel", {
                    region: "north",
                    contentEl: "header",
                    border: !0,
                    frame: !1,
                    height: 45
                }), Ext.create("Ext.panel.Panel", {
                    region: "west",
                    border: !0,
                    collapsed: this.delegate.cmfg("mainViewportAccordionIsCollapsed"),
                    collapsible: !0,
                    frame: !1,
                    header: !1,
                    layout: "accordion",
                    padding: "5 0 5 5",
                    split: !0,
                    width: 200,
                    items: this.delegate.cmfg("mainViewportAccordionViewsGet")
                }), this.moduleContainer = Ext.create("Ext.panel.Panel", {
                    region: "center",
                    border: !1,
                    frame: !1,
                    layout: "card",
                    padding: "5 5 5 0",
                    bodyStyle: {
                        border: "0px"
                    },
                    items: this.delegate.cmfg("mainViewportModuleViewsGet")
                }), Ext.create("Ext.panel.Panel", {
                    region: "south",
                    contentEl: "footer",
                    border: !0,
                    frame: !1,
                    height: 18
                })]
            }), this.callParent(arguments), Ext.isEmpty(Ext.get("cmdbuild-credits-link")) || Ext.get("cmdbuild-credits-link").on("click", function(e, t, o) {
                Ext.isEmpty(this.delegate) || this.delegate.cmfg("onMainViewportCreditsClick")
            }, this), Ext.isEmpty(CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.GROUP_DESCRIPTIONS)) || Ext.create("Ext.tip.ToolTip", {
                target: "msg-inner-hidden",
                html: '<div class="msg-inner-hidden-tooltip"><p><strong>' + CMDBuild.Translation.groups + ":</strong> " + CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.GROUP_DESCRIPTIONS) + "</p><p><strong>" + CMDBuild.Translation.defaultGroup + ":</strong> " + CMDBuild.configuration.runtime.get(CMDBuild.core.constants.Proxy.DEFAULT_GROUP_DESCRIPTION) + "</p></div>"
            })
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.navigation.chronology.Record", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.DATE,
            type: "date"
        }, {
            name: CMDBuild.core.constants.Proxy.ENTRY_TYPE,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.ITEM,
            type: "auto"
        }, {
            name: CMDBuild.core.constants.Proxy.MODULE_ID,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.SECTION,
            type: "auto",
            defaultValue: {}
        }, {
            name: CMDBuild.core.constants.Proxy.SUB_SECTION,
            type: "auto",
            defaultValue: {}
        }],
        constructor: function(e) {
            (e = Ext.clone(e))[CMDBuild.core.constants.Proxy.DATE] = new Date, e[CMDBuild.core.constants.Proxy.ENTRY_TYPE] = Ext.create("CMDBuild.model.navigation.chronology.RecordProperty", e[CMDBuild.core.constants.Proxy.ENTRY_TYPE]), e[CMDBuild.core.constants.Proxy.ITEM] = Ext.create("CMDBuild.model.navigation.chronology.RecordProperty", e[CMDBuild.core.constants.Proxy.ITEM]), e[CMDBuild.core.constants.Proxy.SECTION] = Ext.create("CMDBuild.model.navigation.chronology.RecordProperty", e[CMDBuild.core.constants.Proxy.SECTION]), e[CMDBuild.core.constants.Proxy.SUB_SECTION] = Ext.create("CMDBuild.model.navigation.chronology.RecordProperty", e[CMDBuild.core.constants.Proxy.SUB_SECTION]), this.callParent(arguments)
        },
        equals: function(e) {
            return Ext.getClassName(e) == Ext.getClassName(this) && this.get(CMDBuild.core.constants.Proxy.MODULE_ID) == e.get(CMDBuild.core.constants.Proxy.MODULE_ID) && this.get(CMDBuild.core.constants.Proxy.ENTRY_TYPE).equals(e.get(CMDBuild.core.constants.Proxy.ENTRY_TYPE)) && this.get(CMDBuild.core.constants.Proxy.ITEM).equals(e.get(CMDBuild.core.constants.Proxy.ITEM)) && this.get(CMDBuild.core.constants.Proxy.SECTION).equals(e.get(CMDBuild.core.constants.Proxy.SECTION)) && this.get(CMDBuild.core.constants.Proxy.SUB_SECTION).equals(e.get(CMDBuild.core.constants.Proxy.SUB_SECTION))
        },
        get: function(e) {
            var t = this;
            return !Ext.isEmpty(e) && Ext.isArray(e) ? (Ext.Array.forEach(e, function(e, o, i) {
                !Ext.isEmpty(e) && Ext.isString(e) && !Ext.isEmpty(t) && Ext.isObject(t) && Ext.isFunction(t.get) && (t = t.get(e))
            }, this), t) : this.callParent(arguments)
        },
        isEmpty: function(e) {
            if (!Ext.isEmpty(e)) {
                var t = this.get(e);
                return Ext.isObject(t) ? Ext.Object.isEmpty(t) : Ext.isEmpty(t)
            }
            return Ext.Object.isEmpty(this.getData())
        }
    }), Ext.require("CMDBuild.core.constants.Proxy"), Ext.define("CMDBuild.model.navigation.chronology.RecordProperty", {
        extend: "Ext.data.Model",
        fields: [{
            name: CMDBuild.core.constants.Proxy.DESCRIPTION,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.ID,
            type: "string"
        }, {
            name: CMDBuild.core.constants.Proxy.OBJECT,
            type: "auto",
            defaultValue: {}
        }],
        equals: function(e) {
            return Ext.getClassName(e) == Ext.getClassName(this) && this.get(CMDBuild.core.constants.Proxy.DESCRIPTION) == e.get(CMDBuild.core.constants.Proxy.DESCRIPTION) && this.get(CMDBuild.core.constants.Proxy.ID) == e.get(CMDBuild.core.constants.Proxy.ID)
        },
        isEmpty: function(e) {
            if (!Ext.isEmpty(e)) {
                var t = this.get(e);
                return Ext.isObject(t) ? Ext.Object.isEmpty(t) : Ext.isEmpty(t)
            }
            return Ext.Object.isEmpty(this.getData())
        }
    });